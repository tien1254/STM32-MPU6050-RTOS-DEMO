
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f9c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080080a8  080080a8  000090a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008244  08008244  0000a078  2**0
                  CONTENTS
  4 .ARM          00000000  08008244  08008244  0000a078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008244  08008244  0000a078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008244  08008244  00009244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008248  08008248  00009248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  0800824c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000042d4  20000078  080082c4  0000a078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000434c  080082c4  0000a34c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017afe  00000000  00000000  0000a0a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000330d  00000000  00000000  00021b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  00024eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001211  00000000  00000000  000265e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ccb1  00000000  00000000  000277f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b705  00000000  00000000  000444a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ab772  00000000  00000000  0005fba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010b319  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000661c  00000000  00000000  0010b35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  00111978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08008090 	.word	0x08008090

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08008090 	.word	0x08008090

0800014c <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 800014c:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 800014e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000152:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d4 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 8000156:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015a:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 800015e:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000160:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000162:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000164:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 8000166:	d32e      	bcc.n	80001c6 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 8000168:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016a:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 800016c:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 800016e:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000170:	d312      	bcc.n	8000198 <_CheckCase2>

08000172 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000172:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000174:	19d0      	adds	r0, r2, r7
 8000176:	bf00      	nop

08000178 <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 8000178:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800017c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000180:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000182:	d005      	beq.n	8000190 <_CSDone>
        LDRB     R3,[R1], #+1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000188:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 800018c:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 800018e:	d1f3      	bne.n	8000178 <_LoopCopyStraight>

08000190 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000190:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000192:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000194:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000196:	4770      	bx	lr

08000198 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000198:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019a:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 800019c:	d317      	bcc.n	80001ce <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 800019e:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a0:	1b12      	subs	r2, r2, r4

080001a2 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a2:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001a6:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001aa:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001ac:	d1f9      	bne.n	80001a2 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001ae:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b0:	d005      	beq.n	80001be <_No2ChunkNeeded>

080001b2 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b2:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001b6:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001ba:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001bc:	d1f9      	bne.n	80001b2 <_LoopCopyAfterWrapAround>

080001be <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001be:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c0:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c2:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c4:	4770      	bx	lr

080001c6 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001c6:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001c8:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ca:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001cc:	d2d1      	bcs.n	8000172 <_Case4>

080001ce <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001ce:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d0:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d2:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d4:	20000188 	.word	0x20000188

080001d8 <__aeabi_frsub>:
 80001d8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__addsf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_fsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080001e4 <__addsf3>:
 80001e4:	0042      	lsls	r2, r0, #1
 80001e6:	bf1f      	itttt	ne
 80001e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80001ec:	ea92 0f03 	teqne	r2, r3
 80001f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80001f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80001f8:	d06a      	beq.n	80002d0 <__addsf3+0xec>
 80001fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000202:	bfc1      	itttt	gt
 8000204:	18d2      	addgt	r2, r2, r3
 8000206:	4041      	eorgt	r1, r0
 8000208:	4048      	eorgt	r0, r1
 800020a:	4041      	eorgt	r1, r0
 800020c:	bfb8      	it	lt
 800020e:	425b      	neglt	r3, r3
 8000210:	2b19      	cmp	r3, #25
 8000212:	bf88      	it	hi
 8000214:	4770      	bxhi	lr
 8000216:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800021a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800021e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000222:	bf18      	it	ne
 8000224:	4240      	negne	r0, r0
 8000226:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800022a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800022e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000232:	bf18      	it	ne
 8000234:	4249      	negne	r1, r1
 8000236:	ea92 0f03 	teq	r2, r3
 800023a:	d03f      	beq.n	80002bc <__addsf3+0xd8>
 800023c:	f1a2 0201 	sub.w	r2, r2, #1
 8000240:	fa41 fc03 	asr.w	ip, r1, r3
 8000244:	eb10 000c 	adds.w	r0, r0, ip
 8000248:	f1c3 0320 	rsb	r3, r3, #32
 800024c:	fa01 f103 	lsl.w	r1, r1, r3
 8000250:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000254:	d502      	bpl.n	800025c <__addsf3+0x78>
 8000256:	4249      	negs	r1, r1
 8000258:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800025c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000260:	d313      	bcc.n	800028a <__addsf3+0xa6>
 8000262:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000266:	d306      	bcc.n	8000276 <__addsf3+0x92>
 8000268:	0840      	lsrs	r0, r0, #1
 800026a:	ea4f 0131 	mov.w	r1, r1, rrx
 800026e:	f102 0201 	add.w	r2, r2, #1
 8000272:	2afe      	cmp	r2, #254	@ 0xfe
 8000274:	d251      	bcs.n	800031a <__addsf3+0x136>
 8000276:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800027a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800027e:	bf08      	it	eq
 8000280:	f020 0001 	biceq.w	r0, r0, #1
 8000284:	ea40 0003 	orr.w	r0, r0, r3
 8000288:	4770      	bx	lr
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	eb40 0000 	adc.w	r0, r0, r0
 8000290:	3a01      	subs	r2, #1
 8000292:	bf28      	it	cs
 8000294:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000298:	d2ed      	bcs.n	8000276 <__addsf3+0x92>
 800029a:	fab0 fc80 	clz	ip, r0
 800029e:	f1ac 0c08 	sub.w	ip, ip, #8
 80002a2:	ebb2 020c 	subs.w	r2, r2, ip
 80002a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80002aa:	bfaa      	itet	ge
 80002ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80002b0:	4252      	neglt	r2, r2
 80002b2:	4318      	orrge	r0, r3
 80002b4:	bfbc      	itt	lt
 80002b6:	40d0      	lsrlt	r0, r2
 80002b8:	4318      	orrlt	r0, r3
 80002ba:	4770      	bx	lr
 80002bc:	f092 0f00 	teq	r2, #0
 80002c0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80002c4:	bf06      	itte	eq
 80002c6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80002ca:	3201      	addeq	r2, #1
 80002cc:	3b01      	subne	r3, #1
 80002ce:	e7b5      	b.n	800023c <__addsf3+0x58>
 80002d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80002d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80002d8:	bf18      	it	ne
 80002da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002de:	d021      	beq.n	8000324 <__addsf3+0x140>
 80002e0:	ea92 0f03 	teq	r2, r3
 80002e4:	d004      	beq.n	80002f0 <__addsf3+0x10c>
 80002e6:	f092 0f00 	teq	r2, #0
 80002ea:	bf08      	it	eq
 80002ec:	4608      	moveq	r0, r1
 80002ee:	4770      	bx	lr
 80002f0:	ea90 0f01 	teq	r0, r1
 80002f4:	bf1c      	itt	ne
 80002f6:	2000      	movne	r0, #0
 80002f8:	4770      	bxne	lr
 80002fa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80002fe:	d104      	bne.n	800030a <__addsf3+0x126>
 8000300:	0040      	lsls	r0, r0, #1
 8000302:	bf28      	it	cs
 8000304:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000308:	4770      	bx	lr
 800030a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800030e:	bf3c      	itt	cc
 8000310:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000314:	4770      	bxcc	lr
 8000316:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800031a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800031e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000322:	4770      	bx	lr
 8000324:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000328:	bf16      	itet	ne
 800032a:	4608      	movne	r0, r1
 800032c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000330:	4601      	movne	r1, r0
 8000332:	0242      	lsls	r2, r0, #9
 8000334:	bf06      	itte	eq
 8000336:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800033a:	ea90 0f01 	teqeq	r0, r1
 800033e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000342:	4770      	bx	lr

08000344 <__aeabi_ui2f>:
 8000344:	f04f 0300 	mov.w	r3, #0
 8000348:	e004      	b.n	8000354 <__aeabi_i2f+0x8>
 800034a:	bf00      	nop

0800034c <__aeabi_i2f>:
 800034c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000350:	bf48      	it	mi
 8000352:	4240      	negmi	r0, r0
 8000354:	ea5f 0c00 	movs.w	ip, r0
 8000358:	bf08      	it	eq
 800035a:	4770      	bxeq	lr
 800035c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000360:	4601      	mov	r1, r0
 8000362:	f04f 0000 	mov.w	r0, #0
 8000366:	e01c      	b.n	80003a2 <__aeabi_l2f+0x2a>

08000368 <__aeabi_ul2f>:
 8000368:	ea50 0201 	orrs.w	r2, r0, r1
 800036c:	bf08      	it	eq
 800036e:	4770      	bxeq	lr
 8000370:	f04f 0300 	mov.w	r3, #0
 8000374:	e00a      	b.n	800038c <__aeabi_l2f+0x14>
 8000376:	bf00      	nop

08000378 <__aeabi_l2f>:
 8000378:	ea50 0201 	orrs.w	r2, r0, r1
 800037c:	bf08      	it	eq
 800037e:	4770      	bxeq	lr
 8000380:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000384:	d502      	bpl.n	800038c <__aeabi_l2f+0x14>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	ea5f 0c01 	movs.w	ip, r1
 8000390:	bf02      	ittt	eq
 8000392:	4684      	moveq	ip, r0
 8000394:	4601      	moveq	r1, r0
 8000396:	2000      	moveq	r0, #0
 8000398:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800039c:	bf08      	it	eq
 800039e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80003a2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80003a6:	fabc f28c 	clz	r2, ip
 80003aa:	3a08      	subs	r2, #8
 80003ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80003b0:	db10      	blt.n	80003d4 <__aeabi_l2f+0x5c>
 80003b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80003b6:	4463      	add	r3, ip
 80003b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80003bc:	f1c2 0220 	rsb	r2, r2, #32
 80003c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003c4:	fa20 f202 	lsr.w	r2, r0, r2
 80003c8:	eb43 0002 	adc.w	r0, r3, r2
 80003cc:	bf08      	it	eq
 80003ce:	f020 0001 	biceq.w	r0, r0, #1
 80003d2:	4770      	bx	lr
 80003d4:	f102 0220 	add.w	r2, r2, #32
 80003d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80003dc:	f1c2 0220 	rsb	r2, r2, #32
 80003e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80003e4:	fa21 f202 	lsr.w	r2, r1, r2
 80003e8:	eb43 0002 	adc.w	r0, r3, r2
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80003f2:	4770      	bx	lr

080003f4 <__aeabi_fmul>:
 80003f4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003fc:	bf1e      	ittt	ne
 80003fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000402:	ea92 0f0c 	teqne	r2, ip
 8000406:	ea93 0f0c 	teqne	r3, ip
 800040a:	d06f      	beq.n	80004ec <__aeabi_fmul+0xf8>
 800040c:	441a      	add	r2, r3
 800040e:	ea80 0c01 	eor.w	ip, r0, r1
 8000412:	0240      	lsls	r0, r0, #9
 8000414:	bf18      	it	ne
 8000416:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800041a:	d01e      	beq.n	800045a <__aeabi_fmul+0x66>
 800041c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000420:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000424:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000428:	fba0 3101 	umull	r3, r1, r0, r1
 800042c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000430:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000434:	bf3e      	ittt	cc
 8000436:	0049      	lslcc	r1, r1, #1
 8000438:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800043c:	005b      	lslcc	r3, r3, #1
 800043e:	ea40 0001 	orr.w	r0, r0, r1
 8000442:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000446:	2afd      	cmp	r2, #253	@ 0xfd
 8000448:	d81d      	bhi.n	8000486 <__aeabi_fmul+0x92>
 800044a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800044e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000452:	bf08      	it	eq
 8000454:	f020 0001 	biceq.w	r0, r0, #1
 8000458:	4770      	bx	lr
 800045a:	f090 0f00 	teq	r0, #0
 800045e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000462:	bf08      	it	eq
 8000464:	0249      	lsleq	r1, r1, #9
 8000466:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800046a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800046e:	3a7f      	subs	r2, #127	@ 0x7f
 8000470:	bfc2      	ittt	gt
 8000472:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000476:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800047a:	4770      	bxgt	lr
 800047c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000480:	f04f 0300 	mov.w	r3, #0
 8000484:	3a01      	subs	r2, #1
 8000486:	dc5d      	bgt.n	8000544 <__aeabi_fmul+0x150>
 8000488:	f112 0f19 	cmn.w	r2, #25
 800048c:	bfdc      	itt	le
 800048e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000492:	4770      	bxle	lr
 8000494:	f1c2 0200 	rsb	r2, r2, #0
 8000498:	0041      	lsls	r1, r0, #1
 800049a:	fa21 f102 	lsr.w	r1, r1, r2
 800049e:	f1c2 0220 	rsb	r2, r2, #32
 80004a2:	fa00 fc02 	lsl.w	ip, r0, r2
 80004a6:	ea5f 0031 	movs.w	r0, r1, rrx
 80004aa:	f140 0000 	adc.w	r0, r0, #0
 80004ae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80004b2:	bf08      	it	eq
 80004b4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004b8:	4770      	bx	lr
 80004ba:	f092 0f00 	teq	r2, #0
 80004be:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80004c2:	bf02      	ittt	eq
 80004c4:	0040      	lsleq	r0, r0, #1
 80004c6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80004ca:	3a01      	subeq	r2, #1
 80004cc:	d0f9      	beq.n	80004c2 <__aeabi_fmul+0xce>
 80004ce:	ea40 000c 	orr.w	r0, r0, ip
 80004d2:	f093 0f00 	teq	r3, #0
 80004d6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80004da:	bf02      	ittt	eq
 80004dc:	0049      	lsleq	r1, r1, #1
 80004de:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004e2:	3b01      	subeq	r3, #1
 80004e4:	d0f9      	beq.n	80004da <__aeabi_fmul+0xe6>
 80004e6:	ea41 010c 	orr.w	r1, r1, ip
 80004ea:	e78f      	b.n	800040c <__aeabi_fmul+0x18>
 80004ec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004f0:	ea92 0f0c 	teq	r2, ip
 80004f4:	bf18      	it	ne
 80004f6:	ea93 0f0c 	teqne	r3, ip
 80004fa:	d00a      	beq.n	8000512 <__aeabi_fmul+0x11e>
 80004fc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000500:	bf18      	it	ne
 8000502:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000506:	d1d8      	bne.n	80004ba <__aeabi_fmul+0xc6>
 8000508:	ea80 0001 	eor.w	r0, r0, r1
 800050c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000510:	4770      	bx	lr
 8000512:	f090 0f00 	teq	r0, #0
 8000516:	bf17      	itett	ne
 8000518:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800051c:	4608      	moveq	r0, r1
 800051e:	f091 0f00 	teqne	r1, #0
 8000522:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000526:	d014      	beq.n	8000552 <__aeabi_fmul+0x15e>
 8000528:	ea92 0f0c 	teq	r2, ip
 800052c:	d101      	bne.n	8000532 <__aeabi_fmul+0x13e>
 800052e:	0242      	lsls	r2, r0, #9
 8000530:	d10f      	bne.n	8000552 <__aeabi_fmul+0x15e>
 8000532:	ea93 0f0c 	teq	r3, ip
 8000536:	d103      	bne.n	8000540 <__aeabi_fmul+0x14c>
 8000538:	024b      	lsls	r3, r1, #9
 800053a:	bf18      	it	ne
 800053c:	4608      	movne	r0, r1
 800053e:	d108      	bne.n	8000552 <__aeabi_fmul+0x15e>
 8000540:	ea80 0001 	eor.w	r0, r0, r1
 8000544:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000548:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800054c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000550:	4770      	bx	lr
 8000552:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000556:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800055a:	4770      	bx	lr

0800055c <__aeabi_fdiv>:
 800055c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000560:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000564:	bf1e      	ittt	ne
 8000566:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800056a:	ea92 0f0c 	teqne	r2, ip
 800056e:	ea93 0f0c 	teqne	r3, ip
 8000572:	d069      	beq.n	8000648 <__aeabi_fdiv+0xec>
 8000574:	eba2 0203 	sub.w	r2, r2, r3
 8000578:	ea80 0c01 	eor.w	ip, r0, r1
 800057c:	0249      	lsls	r1, r1, #9
 800057e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000582:	d037      	beq.n	80005f4 <__aeabi_fdiv+0x98>
 8000584:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000588:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 800058c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000590:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000594:	428b      	cmp	r3, r1
 8000596:	bf38      	it	cc
 8000598:	005b      	lslcc	r3, r3, #1
 800059a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 800059e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80005a2:	428b      	cmp	r3, r1
 80005a4:	bf24      	itt	cs
 80005a6:	1a5b      	subcs	r3, r3, r1
 80005a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80005ac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80005b0:	bf24      	itt	cs
 80005b2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80005b6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80005ba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80005be:	bf24      	itt	cs
 80005c0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80005c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80005c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80005cc:	bf24      	itt	cs
 80005ce:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80005d2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80005d6:	011b      	lsls	r3, r3, #4
 80005d8:	bf18      	it	ne
 80005da:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80005de:	d1e0      	bne.n	80005a2 <__aeabi_fdiv+0x46>
 80005e0:	2afd      	cmp	r2, #253	@ 0xfd
 80005e2:	f63f af50 	bhi.w	8000486 <__aeabi_fmul+0x92>
 80005e6:	428b      	cmp	r3, r1
 80005e8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80005ec:	bf08      	it	eq
 80005ee:	f020 0001 	biceq.w	r0, r0, #1
 80005f2:	4770      	bx	lr
 80005f4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80005f8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80005fc:	327f      	adds	r2, #127	@ 0x7f
 80005fe:	bfc2      	ittt	gt
 8000600:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000604:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000608:	4770      	bxgt	lr
 800060a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800060e:	f04f 0300 	mov.w	r3, #0
 8000612:	3a01      	subs	r2, #1
 8000614:	e737      	b.n	8000486 <__aeabi_fmul+0x92>
 8000616:	f092 0f00 	teq	r2, #0
 800061a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800061e:	bf02      	ittt	eq
 8000620:	0040      	lsleq	r0, r0, #1
 8000622:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000626:	3a01      	subeq	r2, #1
 8000628:	d0f9      	beq.n	800061e <__aeabi_fdiv+0xc2>
 800062a:	ea40 000c 	orr.w	r0, r0, ip
 800062e:	f093 0f00 	teq	r3, #0
 8000632:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000636:	bf02      	ittt	eq
 8000638:	0049      	lsleq	r1, r1, #1
 800063a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800063e:	3b01      	subeq	r3, #1
 8000640:	d0f9      	beq.n	8000636 <__aeabi_fdiv+0xda>
 8000642:	ea41 010c 	orr.w	r1, r1, ip
 8000646:	e795      	b.n	8000574 <__aeabi_fdiv+0x18>
 8000648:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800064c:	ea92 0f0c 	teq	r2, ip
 8000650:	d108      	bne.n	8000664 <__aeabi_fdiv+0x108>
 8000652:	0242      	lsls	r2, r0, #9
 8000654:	f47f af7d 	bne.w	8000552 <__aeabi_fmul+0x15e>
 8000658:	ea93 0f0c 	teq	r3, ip
 800065c:	f47f af70 	bne.w	8000540 <__aeabi_fmul+0x14c>
 8000660:	4608      	mov	r0, r1
 8000662:	e776      	b.n	8000552 <__aeabi_fmul+0x15e>
 8000664:	ea93 0f0c 	teq	r3, ip
 8000668:	d104      	bne.n	8000674 <__aeabi_fdiv+0x118>
 800066a:	024b      	lsls	r3, r1, #9
 800066c:	f43f af4c 	beq.w	8000508 <__aeabi_fmul+0x114>
 8000670:	4608      	mov	r0, r1
 8000672:	e76e      	b.n	8000552 <__aeabi_fmul+0x15e>
 8000674:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000678:	bf18      	it	ne
 800067a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800067e:	d1ca      	bne.n	8000616 <__aeabi_fdiv+0xba>
 8000680:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000684:	f47f af5c 	bne.w	8000540 <__aeabi_fmul+0x14c>
 8000688:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800068c:	f47f af3c 	bne.w	8000508 <__aeabi_fmul+0x114>
 8000690:	e75f      	b.n	8000552 <__aeabi_fmul+0x15e>
 8000692:	bf00      	nop

08000694 <__gesf2>:
 8000694:	f04f 3cff 	mov.w	ip, #4294967295
 8000698:	e006      	b.n	80006a8 <__cmpsf2+0x4>
 800069a:	bf00      	nop

0800069c <__lesf2>:
 800069c:	f04f 0c01 	mov.w	ip, #1
 80006a0:	e002      	b.n	80006a8 <__cmpsf2+0x4>
 80006a2:	bf00      	nop

080006a4 <__cmpsf2>:
 80006a4:	f04f 0c01 	mov.w	ip, #1
 80006a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80006ac:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80006b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006b8:	bf18      	it	ne
 80006ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006be:	d011      	beq.n	80006e4 <__cmpsf2+0x40>
 80006c0:	b001      	add	sp, #4
 80006c2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80006c6:	bf18      	it	ne
 80006c8:	ea90 0f01 	teqne	r0, r1
 80006cc:	bf58      	it	pl
 80006ce:	ebb2 0003 	subspl.w	r0, r2, r3
 80006d2:	bf88      	it	hi
 80006d4:	17c8      	asrhi	r0, r1, #31
 80006d6:	bf38      	it	cc
 80006d8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80006dc:	bf18      	it	ne
 80006de:	f040 0001 	orrne.w	r0, r0, #1
 80006e2:	4770      	bx	lr
 80006e4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006e8:	d102      	bne.n	80006f0 <__cmpsf2+0x4c>
 80006ea:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80006ee:	d105      	bne.n	80006fc <__cmpsf2+0x58>
 80006f0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80006f4:	d1e4      	bne.n	80006c0 <__cmpsf2+0x1c>
 80006f6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80006fa:	d0e1      	beq.n	80006c0 <__cmpsf2+0x1c>
 80006fc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000700:	4770      	bx	lr
 8000702:	bf00      	nop

08000704 <__aeabi_cfrcmple>:
 8000704:	4684      	mov	ip, r0
 8000706:	4608      	mov	r0, r1
 8000708:	4661      	mov	r1, ip
 800070a:	e7ff      	b.n	800070c <__aeabi_cfcmpeq>

0800070c <__aeabi_cfcmpeq>:
 800070c:	b50f      	push	{r0, r1, r2, r3, lr}
 800070e:	f7ff ffc9 	bl	80006a4 <__cmpsf2>
 8000712:	2800      	cmp	r0, #0
 8000714:	bf48      	it	mi
 8000716:	f110 0f00 	cmnmi.w	r0, #0
 800071a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800071c <__aeabi_fcmpeq>:
 800071c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000720:	f7ff fff4 	bl	800070c <__aeabi_cfcmpeq>
 8000724:	bf0c      	ite	eq
 8000726:	2001      	moveq	r0, #1
 8000728:	2000      	movne	r0, #0
 800072a:	f85d fb08 	ldr.w	pc, [sp], #8
 800072e:	bf00      	nop

08000730 <__aeabi_fcmplt>:
 8000730:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000734:	f7ff ffea 	bl	800070c <__aeabi_cfcmpeq>
 8000738:	bf34      	ite	cc
 800073a:	2001      	movcc	r0, #1
 800073c:	2000      	movcs	r0, #0
 800073e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000742:	bf00      	nop

08000744 <__aeabi_fcmple>:
 8000744:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000748:	f7ff ffe0 	bl	800070c <__aeabi_cfcmpeq>
 800074c:	bf94      	ite	ls
 800074e:	2001      	movls	r0, #1
 8000750:	2000      	movhi	r0, #0
 8000752:	f85d fb08 	ldr.w	pc, [sp], #8
 8000756:	bf00      	nop

08000758 <__aeabi_fcmpge>:
 8000758:	f84d ed08 	str.w	lr, [sp, #-8]!
 800075c:	f7ff ffd2 	bl	8000704 <__aeabi_cfrcmple>
 8000760:	bf94      	ite	ls
 8000762:	2001      	movls	r0, #1
 8000764:	2000      	movhi	r0, #0
 8000766:	f85d fb08 	ldr.w	pc, [sp], #8
 800076a:	bf00      	nop

0800076c <__aeabi_fcmpgt>:
 800076c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000770:	f7ff ffc8 	bl	8000704 <__aeabi_cfrcmple>
 8000774:	bf34      	ite	cc
 8000776:	2001      	movcc	r0, #1
 8000778:	2000      	movcs	r0, #0
 800077a:	f85d fb08 	ldr.w	pc, [sp], #8
 800077e:	bf00      	nop

08000780 <__aeabi_fcmpun>:
 8000780:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000784:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000788:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800078c:	d102      	bne.n	8000794 <__aeabi_fcmpun+0x14>
 800078e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000792:	d108      	bne.n	80007a6 <__aeabi_fcmpun+0x26>
 8000794:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000798:	d102      	bne.n	80007a0 <__aeabi_fcmpun+0x20>
 800079a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800079e:	d102      	bne.n	80007a6 <__aeabi_fcmpun+0x26>
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	4770      	bx	lr
 80007a6:	f04f 0001 	mov.w	r0, #1
 80007aa:	4770      	bx	lr

080007ac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80007b0:	4803      	ldr	r0, [pc, #12]	@ (80007c0 <_cbSendSystemDesc+0x14>)
 80007b2:	f001 f9bb 	bl	8001b2c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80007b6:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <_cbSendSystemDesc+0x18>)
 80007b8:	f001 f9b8 	bl	8001b2c <SEGGER_SYSVIEW_SendSysDesc>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	080080a8 	.word	0x080080a8
 80007c4:	080080dc 	.word	0x080080dc

080007c8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80007ce:	6818      	ldr	r0, [r3, #0]
 80007d0:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <SEGGER_SYSVIEW_Conf+0x20>)
 80007d2:	6819      	ldr	r1, [r3, #0]
 80007d4:	4b05      	ldr	r3, [pc, #20]	@ (80007ec <SEGGER_SYSVIEW_Conf+0x24>)
 80007d6:	4a06      	ldr	r2, [pc, #24]	@ (80007f0 <SEGGER_SYSVIEW_Conf+0x28>)
 80007d8:	f000 fe30 	bl	800143c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80007dc:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80007e0:	f000 fe70 	bl	80014c4 <SEGGER_SYSVIEW_SetRAMBase>
}
 80007e4:	bf00      	nop
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000014 	.word	0x20000014
 80007ec:	080007ad 	.word	0x080007ad
 80007f0:	080081b8 	.word	0x080081b8

080007f4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80007f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	e048      	b.n	8000892 <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 8000800:	4929      	ldr	r1, [pc, #164]	@ (80008a8 <_cbSendTaskList+0xb4>)
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	440b      	add	r3, r1
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4618      	mov	r0, r3
 8000812:	f003 fa43 	bl	8003c9c <uxTaskGetStackHighWaterMark>
 8000816:	4601      	mov	r1, r0
 8000818:	4823      	ldr	r0, [pc, #140]	@ (80008a8 <_cbSendTaskList+0xb4>)
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	4403      	add	r3, r0
 8000826:	3310      	adds	r3, #16
 8000828:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800082a:	491f      	ldr	r1, [pc, #124]	@ (80008a8 <_cbSendTaskList+0xb4>)
 800082c:	687a      	ldr	r2, [r7, #4]
 800082e:	4613      	mov	r3, r2
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	4413      	add	r3, r2
 8000834:	009b      	lsls	r3, r3, #2
 8000836:	440b      	add	r3, r1
 8000838:	6818      	ldr	r0, [r3, #0]
 800083a:	491b      	ldr	r1, [pc, #108]	@ (80008a8 <_cbSendTaskList+0xb4>)
 800083c:	687a      	ldr	r2, [r7, #4]
 800083e:	4613      	mov	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4413      	add	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	440b      	add	r3, r1
 8000848:	3304      	adds	r3, #4
 800084a:	6819      	ldr	r1, [r3, #0]
 800084c:	4c16      	ldr	r4, [pc, #88]	@ (80008a8 <_cbSendTaskList+0xb4>)
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4613      	mov	r3, r2
 8000852:	009b      	lsls	r3, r3, #2
 8000854:	4413      	add	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4423      	add	r3, r4
 800085a:	3308      	adds	r3, #8
 800085c:	681c      	ldr	r4, [r3, #0]
 800085e:	4d12      	ldr	r5, [pc, #72]	@ (80008a8 <_cbSendTaskList+0xb4>)
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	4613      	mov	r3, r2
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	4413      	add	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	442b      	add	r3, r5
 800086c:	330c      	adds	r3, #12
 800086e:	681d      	ldr	r5, [r3, #0]
 8000870:	4e0d      	ldr	r6, [pc, #52]	@ (80008a8 <_cbSendTaskList+0xb4>)
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	4613      	mov	r3, r2
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	4433      	add	r3, r6
 800087e:	3310      	adds	r3, #16
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	9300      	str	r3, [sp, #0]
 8000884:	462b      	mov	r3, r5
 8000886:	4622      	mov	r2, r4
 8000888:	f000 f97a 	bl	8000b80 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b06      	ldr	r3, [pc, #24]	@ (80008ac <_cbSendTaskList+0xb8>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	687a      	ldr	r2, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	d3b1      	bcc.n	8000800 <_cbSendTaskList+0xc>
  }
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000094 	.word	0x20000094
 80008ac:	20000184 	.word	0x20000184

080008b0 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80008b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80008b4:	b082      	sub	sp, #8
 80008b6:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80008b8:	f002 fd9e 	bl	80033f8 <xTaskGetTickCountFromISR>
 80008bc:	4603      	mov	r3, r0
 80008be:	2200      	movs	r2, #0
 80008c0:	469a      	mov	sl, r3
 80008c2:	4693      	mov	fp, r2
 80008c4:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80008c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80008cc:	4602      	mov	r2, r0
 80008ce:	460b      	mov	r3, r1
 80008d0:	f04f 0a00 	mov.w	sl, #0
 80008d4:	f04f 0b00 	mov.w	fp, #0
 80008d8:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80008dc:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80008e0:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80008e4:	4652      	mov	r2, sl
 80008e6:	465b      	mov	r3, fp
 80008e8:	1a14      	subs	r4, r2, r0
 80008ea:	eb63 0501 	sbc.w	r5, r3, r1
 80008ee:	f04f 0200 	mov.w	r2, #0
 80008f2:	f04f 0300 	mov.w	r3, #0
 80008f6:	00ab      	lsls	r3, r5, #2
 80008f8:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80008fc:	00a2      	lsls	r2, r4, #2
 80008fe:	4614      	mov	r4, r2
 8000900:	461d      	mov	r5, r3
 8000902:	eb14 0800 	adds.w	r8, r4, r0
 8000906:	eb45 0901 	adc.w	r9, r5, r1
 800090a:	f04f 0200 	mov.w	r2, #0
 800090e:	f04f 0300 	mov.w	r3, #0
 8000912:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000916:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800091a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800091e:	4690      	mov	r8, r2
 8000920:	4699      	mov	r9, r3
 8000922:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8000926:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08000938 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af02      	add	r7, sp, #8
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8000946:	2205      	movs	r2, #5
 8000948:	492b      	ldr	r1, [pc, #172]	@ (80009f8 <SYSVIEW_AddTask+0xc0>)
 800094a:	68b8      	ldr	r0, [r7, #8]
 800094c:	f007 f92c 	bl	8007ba8 <memcmp>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d04b      	beq.n	80009ee <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8000956:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <SYSVIEW_AddTask+0xc4>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	2b0b      	cmp	r3, #11
 800095c:	d903      	bls.n	8000966 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800095e:	4828      	ldr	r0, [pc, #160]	@ (8000a00 <SYSVIEW_AddTask+0xc8>)
 8000960:	f001 fc80 	bl	8002264 <SEGGER_SYSVIEW_Warn>
    return;
 8000964:	e044      	b.n	80009f0 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8000966:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <SYSVIEW_AddTask+0xc4>)
 8000968:	681a      	ldr	r2, [r3, #0]
 800096a:	4926      	ldr	r1, [pc, #152]	@ (8000a04 <SYSVIEW_AddTask+0xcc>)
 800096c:	4613      	mov	r3, r2
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	4413      	add	r3, r2
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	440b      	add	r3, r1
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800097a:	4b20      	ldr	r3, [pc, #128]	@ (80009fc <SYSVIEW_AddTask+0xc4>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	4921      	ldr	r1, [pc, #132]	@ (8000a04 <SYSVIEW_AddTask+0xcc>)
 8000980:	4613      	mov	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	3304      	adds	r3, #4
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8000990:	4b1a      	ldr	r3, [pc, #104]	@ (80009fc <SYSVIEW_AddTask+0xc4>)
 8000992:	681a      	ldr	r2, [r3, #0]
 8000994:	491b      	ldr	r1, [pc, #108]	@ (8000a04 <SYSVIEW_AddTask+0xcc>)
 8000996:	4613      	mov	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	440b      	add	r3, r1
 80009a0:	3308      	adds	r3, #8
 80009a2:	687a      	ldr	r2, [r7, #4]
 80009a4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80009a6:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <SYSVIEW_AddTask+0xc4>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4916      	ldr	r1, [pc, #88]	@ (8000a04 <SYSVIEW_AddTask+0xcc>)
 80009ac:	4613      	mov	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	440b      	add	r3, r1
 80009b6:	330c      	adds	r3, #12
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <SYSVIEW_AddTask+0xc4>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4910      	ldr	r1, [pc, #64]	@ (8000a04 <SYSVIEW_AddTask+0xcc>)
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	009b      	lsls	r3, r3, #2
 80009ca:	440b      	add	r3, r1
 80009cc:	3310      	adds	r3, #16
 80009ce:	69ba      	ldr	r2, [r7, #24]
 80009d0:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	@ (80009fc <SYSVIEW_AddTask+0xc4>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <SYSVIEW_AddTask+0xc4>)
 80009da:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	687a      	ldr	r2, [r7, #4]
 80009e4:	68b9      	ldr	r1, [r7, #8]
 80009e6:	68f8      	ldr	r0, [r7, #12]
 80009e8:	f000 f8ca 	bl	8000b80 <SYSVIEW_SendTaskInfo>
 80009ec:	e000      	b.n	80009f0 <SYSVIEW_AddTask+0xb8>
    return;
 80009ee:	bf00      	nop

}
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	080080ec 	.word	0x080080ec
 80009fc:	20000184 	.word	0x20000184
 8000a00:	080080f4 	.word	0x080080f4
 8000a04:	20000094 	.word	0x20000094

08000a08 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8000a10:	4b59      	ldr	r3, [pc, #356]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f000 80ab 	beq.w	8000b70 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	e00d      	b.n	8000a3c <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8000a20:	4956      	ldr	r1, [pc, #344]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000a22:	68fa      	ldr	r2, [r7, #12]
 8000a24:	4613      	mov	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	440b      	add	r3, r1
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	687a      	ldr	r2, [r7, #4]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d008      	beq.n	8000a48 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	4b4e      	ldr	r3, [pc, #312]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	68fa      	ldr	r2, [r7, #12]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d3ec      	bcc.n	8000a20 <SYSVIEW_DeleteTask+0x18>
 8000a46:	e000      	b.n	8000a4a <SYSVIEW_DeleteTask+0x42>
      break;
 8000a48:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8000a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	429a      	cmp	r2, r3
 8000a54:	d111      	bne.n	8000a7a <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4613      	mov	r3, r2
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	4413      	add	r3, r2
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	4a46      	ldr	r2, [pc, #280]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000a62:	4413      	add	r3, r2
 8000a64:	2214      	movs	r2, #20
 8000a66:	2100      	movs	r1, #0
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f007 f8ad 	bl	8007bc8 <memset>
    _NumTasks--;
 8000a6e:	4b42      	ldr	r3, [pc, #264]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	4a40      	ldr	r2, [pc, #256]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000a76:	6013      	str	r3, [r2, #0]
 8000a78:	e07b      	b.n	8000b72 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8000a7a:	4b3f      	ldr	r3, [pc, #252]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d276      	bcs.n	8000b72 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8000a84:	4b3c      	ldr	r3, [pc, #240]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	1e5a      	subs	r2, r3, #1
 8000a8a:	493c      	ldr	r1, [pc, #240]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	009b      	lsls	r3, r3, #2
 8000a90:	4413      	add	r3, r2
 8000a92:	009b      	lsls	r3, r3, #2
 8000a94:	440b      	add	r3, r1
 8000a96:	6819      	ldr	r1, [r3, #0]
 8000a98:	4838      	ldr	r0, [pc, #224]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	4613      	mov	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	4413      	add	r3, r2
 8000aa2:	009b      	lsls	r3, r3, #2
 8000aa4:	4403      	add	r3, r0
 8000aa6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8000aa8:	4b33      	ldr	r3, [pc, #204]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	1e5a      	subs	r2, r3, #1
 8000aae:	4933      	ldr	r1, [pc, #204]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000ab0:	4613      	mov	r3, r2
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	4413      	add	r3, r2
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	3304      	adds	r3, #4
 8000abc:	6819      	ldr	r1, [r3, #0]
 8000abe:	482f      	ldr	r0, [pc, #188]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	009b      	lsls	r3, r3, #2
 8000ac6:	4413      	add	r3, r2
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	4403      	add	r3, r0
 8000acc:	3304      	adds	r3, #4
 8000ace:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8000ad0:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	4929      	ldr	r1, [pc, #164]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000ad8:	4613      	mov	r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4413      	add	r3, r2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	440b      	add	r3, r1
 8000ae2:	3308      	adds	r3, #8
 8000ae4:	6819      	ldr	r1, [r3, #0]
 8000ae6:	4825      	ldr	r0, [pc, #148]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000ae8:	68fa      	ldr	r2, [r7, #12]
 8000aea:	4613      	mov	r3, r2
 8000aec:	009b      	lsls	r3, r3, #2
 8000aee:	4413      	add	r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	4403      	add	r3, r0
 8000af4:	3308      	adds	r3, #8
 8000af6:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8000af8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	1e5a      	subs	r2, r3, #1
 8000afe:	491f      	ldr	r1, [pc, #124]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000b00:	4613      	mov	r3, r2
 8000b02:	009b      	lsls	r3, r3, #2
 8000b04:	4413      	add	r3, r2
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	440b      	add	r3, r1
 8000b0a:	330c      	adds	r3, #12
 8000b0c:	6819      	ldr	r1, [r3, #0]
 8000b0e:	481b      	ldr	r0, [pc, #108]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	4613      	mov	r3, r2
 8000b14:	009b      	lsls	r3, r3, #2
 8000b16:	4413      	add	r3, r2
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	4403      	add	r3, r0
 8000b1c:	330c      	adds	r3, #12
 8000b1e:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8000b20:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	1e5a      	subs	r2, r3, #1
 8000b26:	4915      	ldr	r1, [pc, #84]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000b28:	4613      	mov	r3, r2
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	4413      	add	r3, r2
 8000b2e:	009b      	lsls	r3, r3, #2
 8000b30:	440b      	add	r3, r1
 8000b32:	3310      	adds	r3, #16
 8000b34:	6819      	ldr	r1, [r3, #0]
 8000b36:	4811      	ldr	r0, [pc, #68]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000b38:	68fa      	ldr	r2, [r7, #12]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	4413      	add	r3, r2
 8000b40:	009b      	lsls	r3, r3, #2
 8000b42:	4403      	add	r3, r0
 8000b44:	3310      	adds	r3, #16
 8000b46:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8000b48:	4b0b      	ldr	r3, [pc, #44]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4613      	mov	r3, r2
 8000b50:	009b      	lsls	r3, r3, #2
 8000b52:	4413      	add	r3, r2
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	4a09      	ldr	r2, [pc, #36]	@ (8000b7c <SYSVIEW_DeleteTask+0x174>)
 8000b58:	4413      	add	r3, r2
 8000b5a:	2214      	movs	r2, #20
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f007 f832 	bl	8007bc8 <memset>
    _NumTasks--;
 8000b64:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	4a03      	ldr	r2, [pc, #12]	@ (8000b78 <SYSVIEW_DeleteTask+0x170>)
 8000b6c:	6013      	str	r3, [r2, #0]
 8000b6e:	e000      	b.n	8000b72 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8000b70:	bf00      	nop
  }
}
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20000184 	.word	0x20000184
 8000b7c:	20000094 	.word	0x20000094

08000b80 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	2218      	movs	r2, #24
 8000b94:	2100      	movs	r1, #0
 8000b96:	4618      	mov	r0, r3
 8000b98:	f007 f816 	bl	8007bc8 <memset>
  TaskInfo.TaskID     = TaskID;
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8000bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bae:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8000bb0:	f107 0310 	add.w	r3, r7, #16
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f000 fec1 	bl	800193c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8000bba:	bf00      	nop
 8000bbc:	3728      	adds	r7, #40	@ 0x28
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8000bca:	4b25      	ldr	r3, [pc, #148]	@ (8000c60 <_DoInit+0x9c>)
 8000bcc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8000bce:	22a8      	movs	r2, #168	@ 0xa8
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	6838      	ldr	r0, [r7, #0]
 8000bd4:	f006 fff8 	bl	8007bc8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	2203      	movs	r2, #3
 8000bdc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	2203      	movs	r2, #3
 8000be2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	4a1f      	ldr	r2, [pc, #124]	@ (8000c64 <_DoInit+0xa0>)
 8000be8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	4a1e      	ldr	r2, [pc, #120]	@ (8000c68 <_DoInit+0xa4>)
 8000bee:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bf6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2200      	movs	r2, #0
 8000c02:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	4a15      	ldr	r2, [pc, #84]	@ (8000c64 <_DoInit+0xa0>)
 8000c0e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	4a16      	ldr	r2, [pc, #88]	@ (8000c6c <_DoInit+0xa8>)
 8000c14:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2210      	movs	r2, #16
 8000c1a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	2200      	movs	r2, #0
 8000c26:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
 8000c32:	e00c      	b.n	8000c4e <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f1c3 030f 	rsb	r3, r3, #15
 8000c3a:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <_DoInit+0xac>)
 8000c3c:	5cd1      	ldrb	r1, [r2, r3]
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4413      	add	r3, r2
 8000c44:	460a      	mov	r2, r1
 8000c46:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2b0f      	cmp	r3, #15
 8000c52:	d9ef      	bls.n	8000c34 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	20000188 	.word	0x20000188
 8000c64:	08008144 	.word	0x08008144
 8000c68:	20000230 	.word	0x20000230
 8000c6c:	20000630 	.word	0x20000630
 8000c70:	080081c0 	.word	0x080081c0

08000c74 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	@ 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	60f8      	str	r0, [r7, #12]
 8000c7c:	60b9      	str	r1, [r7, #8]
 8000c7e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8000c80:	4b3e      	ldr	r3, [pc, #248]	@ (8000d7c <SEGGER_RTT_ReadNoLock+0x108>)
 8000c82:	623b      	str	r3, [r7, #32]
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	2b53      	cmp	r3, #83	@ 0x53
 8000c8c:	d001      	beq.n	8000c92 <SEGGER_RTT_ReadNoLock+0x1e>
 8000c8e:	f7ff ff99 	bl	8000bc4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	4613      	mov	r3, r2
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	4413      	add	r3, r2
 8000c9a:	00db      	lsls	r3, r3, #3
 8000c9c:	3360      	adds	r3, #96	@ 0x60
 8000c9e:	4a37      	ldr	r2, [pc, #220]	@ (8000d7c <SEGGER_RTT_ReadNoLock+0x108>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	691b      	ldr	r3, [r3, #16]
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	68db      	ldr	r3, [r3, #12]
 8000cb2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8000cb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cba:	69bb      	ldr	r3, [r7, #24]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d92b      	bls.n	8000d18 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8000cc0:	69fb      	ldr	r3, [r7, #28]
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000cca:	697a      	ldr	r2, [r7, #20]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	bf28      	it	cs
 8000cd2:	4613      	movcs	r3, r2
 8000cd4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	685a      	ldr	r2, [r3, #4]
 8000cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cdc:	4413      	add	r3, r2
 8000cde:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000ce0:	697a      	ldr	r2, [r7, #20]
 8000ce2:	6939      	ldr	r1, [r7, #16]
 8000ce4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000ce6:	f006 ffa1 	bl	8007c2c <memcpy>
    NumBytesRead += NumBytesRem;
 8000cea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	4413      	add	r3, r2
 8000cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8000cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000d02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	4413      	add	r3, r2
 8000d08:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d101      	bne.n	8000d18 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8000d18:	69ba      	ldr	r2, [r7, #24]
 8000d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8000d20:	697a      	ldr	r2, [r7, #20]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4293      	cmp	r3, r2
 8000d26:	bf28      	it	cs
 8000d28:	4613      	movcs	r3, r2
 8000d2a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8000d2c:	697b      	ldr	r3, [r7, #20]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d019      	beq.n	8000d66 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d38:	4413      	add	r3, r2
 8000d3a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8000d3c:	697a      	ldr	r2, [r7, #20]
 8000d3e:	6939      	ldr	r1, [r7, #16]
 8000d40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000d42:	f006 ff73 	bl	8007c2c <memcpy>
    NumBytesRead += NumBytesRem;
 8000d46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8000d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	4413      	add	r3, r2
 8000d54:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	1ad3      	subs	r3, r2, r3
 8000d5c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8000d5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	4413      	add	r3, r2
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8000d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d002      	beq.n	8000d72 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d70:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8000d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3730      	adds	r7, #48	@ 0x30
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000188 	.word	0x20000188

08000d80 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8000d8e:	4b3c      	ldr	r3, [pc, #240]	@ (8000e80 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8000d90:	61bb      	str	r3, [r7, #24]
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b53      	cmp	r3, #83	@ 0x53
 8000d9a:	d001      	beq.n	8000da0 <SEGGER_RTT_AllocUpBuffer+0x20>
 8000d9c:	f7ff ff12 	bl	8000bc4 <_DoInit>
  SEGGER_RTT_LOCK();
 8000da0:	f3ef 8311 	mrs	r3, BASEPRI
 8000da4:	f04f 0120 	mov.w	r1, #32
 8000da8:	f381 8811 	msr	BASEPRI, r1
 8000dac:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000dae:	4b34      	ldr	r3, [pc, #208]	@ (8000e80 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8000db0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8000db6:	6939      	ldr	r1, [r7, #16]
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	1c5a      	adds	r2, r3, #1
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	00db      	lsls	r3, r3, #3
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d008      	beq.n	8000de0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	691b      	ldr	r3, [r3, #16]
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	429a      	cmp	r2, r3
 8000ddc:	dbeb      	blt.n	8000db6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8000dde:	e000      	b.n	8000de2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8000de0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	69fa      	ldr	r2, [r7, #28]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	da3d      	bge.n	8000e68 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8000dec:	6939      	ldr	r1, [r7, #16]
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	440b      	add	r3, r1
 8000dfc:	68fa      	ldr	r2, [r7, #12]
 8000dfe:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8000e00:	6939      	ldr	r1, [r7, #16]
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	1c5a      	adds	r2, r3, #1
 8000e06:	4613      	mov	r3, r2
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	00db      	lsls	r3, r3, #3
 8000e0e:	440b      	add	r3, r1
 8000e10:	3304      	adds	r3, #4
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8000e16:	6939      	ldr	r1, [r7, #16]
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	4413      	add	r3, r2
 8000e20:	00db      	lsls	r3, r3, #3
 8000e22:	440b      	add	r3, r1
 8000e24:	3320      	adds	r3, #32
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8000e2a:	6939      	ldr	r1, [r7, #16]
 8000e2c:	69fa      	ldr	r2, [r7, #28]
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	440b      	add	r3, r1
 8000e38:	3328      	adds	r3, #40	@ 0x28
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8000e3e:	6939      	ldr	r1, [r7, #16]
 8000e40:	69fa      	ldr	r2, [r7, #28]
 8000e42:	4613      	mov	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	4413      	add	r3, r2
 8000e48:	00db      	lsls	r3, r3, #3
 8000e4a:	440b      	add	r3, r1
 8000e4c:	3324      	adds	r3, #36	@ 0x24
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8000e52:	6939      	ldr	r1, [r7, #16]
 8000e54:	69fa      	ldr	r2, [r7, #28]
 8000e56:	4613      	mov	r3, r2
 8000e58:	005b      	lsls	r3, r3, #1
 8000e5a:	4413      	add	r3, r2
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	440b      	add	r3, r1
 8000e60:	332c      	adds	r3, #44	@ 0x2c
 8000e62:	683a      	ldr	r2, [r7, #0]
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e002      	b.n	8000e6e <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8000e74:	69fb      	ldr	r3, [r7, #28]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3720      	adds	r7, #32
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000188 	.word	0x20000188

08000e84 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8000e92:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8000e94:	623b      	str	r3, [r7, #32]
 8000e96:	6a3b      	ldr	r3, [r7, #32]
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b53      	cmp	r3, #83	@ 0x53
 8000e9e:	d001      	beq.n	8000ea4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8000ea0:	f7ff fe90 	bl	8000bc4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f14 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8000ea6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d82a      	bhi.n	8000f04 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 8000eae:	f3ef 8311 	mrs	r3, BASEPRI
 8000eb2:	f04f 0120 	mov.w	r1, #32
 8000eb6:	f381 8811 	msr	BASEPRI, r1
 8000eba:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8000ebc:	68fa      	ldr	r2, [r7, #12]
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	3360      	adds	r3, #96	@ 0x60
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	4413      	add	r3, r2
 8000ecc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00e      	beq.n	8000ef2 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ef6:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f02:	e002      	b.n	8000f0a <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3728      	adds	r7, #40	@ 0x28
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000188 	.word	0x20000188

08000f18 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8000f18:	b480      	push	{r7}
 8000f1a:	b087      	sub	sp, #28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d105      	bne.n	8000f36 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	1c5a      	adds	r2, r3, #1
 8000f2e:	60fa      	str	r2, [r7, #12]
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
 8000f34:	e022      	b.n	8000f7c <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	1c5a      	adds	r2, r3, #1
 8000f3e:	60fa      	str	r2, [r7, #12]
 8000f40:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b80      	cmp	r3, #128	@ 0x80
 8000f46:	d90a      	bls.n	8000f5e <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8000f48:	2380      	movs	r3, #128	@ 0x80
 8000f4a:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8000f4c:	e007      	b.n	8000f5e <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	1c53      	adds	r3, r2, #1
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	1c59      	adds	r1, r3, #1
 8000f58:	60f9      	str	r1, [r7, #12]
 8000f5a:	7812      	ldrb	r2, [r2, #0]
 8000f5c:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	1e5a      	subs	r2, r3, #1
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d003      	beq.n	8000f70 <_EncodeStr+0x58>
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1ee      	bne.n	8000f4e <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3307      	adds	r3, #7
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
	...

08000fa0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8000fa6:	4b34      	ldr	r3, [pc, #208]	@ (8001078 <_HandleIncomingPacket+0xd8>)
 8000fa8:	7e1b      	ldrb	r3, [r3, #24]
 8000faa:	4618      	mov	r0, r3
 8000fac:	1cfb      	adds	r3, r7, #3
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fe5f 	bl	8000c74 <SEGGER_RTT_ReadNoLock>
 8000fb6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d057      	beq.n	800106e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8000fbe:	78fb      	ldrb	r3, [r7, #3]
 8000fc0:	2b80      	cmp	r3, #128	@ 0x80
 8000fc2:	d031      	beq.n	8001028 <_HandleIncomingPacket+0x88>
 8000fc4:	2b80      	cmp	r3, #128	@ 0x80
 8000fc6:	dc40      	bgt.n	800104a <_HandleIncomingPacket+0xaa>
 8000fc8:	2b07      	cmp	r3, #7
 8000fca:	dc15      	bgt.n	8000ff8 <_HandleIncomingPacket+0x58>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	dd3c      	ble.n	800104a <_HandleIncomingPacket+0xaa>
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d839      	bhi.n	800104a <_HandleIncomingPacket+0xaa>
 8000fd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000fdc <_HandleIncomingPacket+0x3c>)
 8000fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fdc:	08000fff 	.word	0x08000fff
 8000fe0:	08001005 	.word	0x08001005
 8000fe4:	0800100b 	.word	0x0800100b
 8000fe8:	08001011 	.word	0x08001011
 8000fec:	08001017 	.word	0x08001017
 8000ff0:	0800101d 	.word	0x0800101d
 8000ff4:	08001023 	.word	0x08001023
 8000ff8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ffa:	d033      	beq.n	8001064 <_HandleIncomingPacket+0xc4>
 8000ffc:	e025      	b.n	800104a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8000ffe:	f000 fb23 	bl	8001648 <SEGGER_SYSVIEW_Start>
      break;
 8001002:	e034      	b.n	800106e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001004:	f000 fbda 	bl	80017bc <SEGGER_SYSVIEW_Stop>
      break;
 8001008:	e031      	b.n	800106e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800100a:	f000 fdb3 	bl	8001b74 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800100e:	e02e      	b.n	800106e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8001010:	f000 fd78 	bl	8001b04 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001014:	e02b      	b.n	800106e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001016:	f000 fbf7 	bl	8001808 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800101a:	e028      	b.n	800106e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800101c:	f001 f8e4 	bl	80021e8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8001020:	e025      	b.n	800106e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8001022:	f001 f8c3 	bl	80021ac <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001026:	e022      	b.n	800106e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001028:	4b13      	ldr	r3, [pc, #76]	@ (8001078 <_HandleIncomingPacket+0xd8>)
 800102a:	7e1b      	ldrb	r3, [r3, #24]
 800102c:	4618      	mov	r0, r3
 800102e:	1cfb      	adds	r3, r7, #3
 8001030:	2201      	movs	r2, #1
 8001032:	4619      	mov	r1, r3
 8001034:	f7ff fe1e 	bl	8000c74 <SEGGER_RTT_ReadNoLock>
 8001038:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d013      	beq.n	8001068 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8001040:	78fb      	ldrb	r3, [r7, #3]
 8001042:	4618      	mov	r0, r3
 8001044:	f001 f828 	bl	8002098 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001048:	e00e      	b.n	8001068 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	b25b      	sxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	da0c      	bge.n	800106c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001052:	4b09      	ldr	r3, [pc, #36]	@ (8001078 <_HandleIncomingPacket+0xd8>)
 8001054:	7e1b      	ldrb	r3, [r3, #24]
 8001056:	4618      	mov	r0, r3
 8001058:	1cfb      	adds	r3, r7, #3
 800105a:	2201      	movs	r2, #1
 800105c:	4619      	mov	r1, r3
 800105e:	f7ff fe09 	bl	8000c74 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8001062:	e003      	b.n	800106c <_HandleIncomingPacket+0xcc>
      break;
 8001064:	bf00      	nop
 8001066:	e002      	b.n	800106e <_HandleIncomingPacket+0xce>
      break;
 8001068:	bf00      	nop
 800106a:	e000      	b.n	800106e <_HandleIncomingPacket+0xce>
      break;
 800106c:	bf00      	nop
    }
  }
}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000e48 	.word	0x20000e48

0800107c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b08c      	sub	sp, #48	@ 0x30
 8001080:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8001082:	2301      	movs	r3, #1
 8001084:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001090:	4b31      	ldr	r3, [pc, #196]	@ (8001158 <_TrySendOverflowPacket+0xdc>)
 8001092:	695b      	ldr	r3, [r3, #20]
 8001094:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001096:	e00b      	b.n	80010b0 <_TrySendOverflowPacket+0x34>
 8001098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800109a:	b2da      	uxtb	r2, r3
 800109c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109e:	1c59      	adds	r1, r3, #1
 80010a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80010a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	701a      	strb	r2, [r3, #0]
 80010aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010ac:	09db      	lsrs	r3, r3, #7
 80010ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80010b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80010b4:	d8f0      	bhi.n	8001098 <_TrySendOverflowPacket+0x1c>
 80010b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b8:	1c5a      	adds	r2, r3, #1
 80010ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80010bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	701a      	strb	r2, [r3, #0]
 80010c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80010c6:	4b25      	ldr	r3, [pc, #148]	@ (800115c <_TrySendOverflowPacket+0xe0>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 80010cc:	4b22      	ldr	r3, [pc, #136]	@ (8001158 <_TrySendOverflowPacket+0xdc>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	623b      	str	r3, [r7, #32]
 80010de:	e00b      	b.n	80010f8 <_TrySendOverflowPacket+0x7c>
 80010e0:	6a3b      	ldr	r3, [r7, #32]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	1c59      	adds	r1, r3, #1
 80010e8:	6279      	str	r1, [r7, #36]	@ 0x24
 80010ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80010ee:	b2d2      	uxtb	r2, r2
 80010f0:	701a      	strb	r2, [r3, #0]
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	09db      	lsrs	r3, r3, #7
 80010f6:	623b      	str	r3, [r7, #32]
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80010fc:	d8f0      	bhi.n	80010e0 <_TrySendOverflowPacket+0x64>
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	1c5a      	adds	r2, r3, #1
 8001102:	627a      	str	r2, [r7, #36]	@ 0x24
 8001104:	6a3a      	ldr	r2, [r7, #32]
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	701a      	strb	r2, [r3, #0]
 800110a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800110e:	4b12      	ldr	r3, [pc, #72]	@ (8001158 <_TrySendOverflowPacket+0xdc>)
 8001110:	785b      	ldrb	r3, [r3, #1]
 8001112:	4618      	mov	r0, r3
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	69fa      	ldr	r2, [r7, #28]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	461a      	mov	r2, r3
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	f7ff f814 	bl	800014c <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001124:	4603      	mov	r3, r0
 8001126:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d009      	beq.n	8001142 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <_TrySendOverflowPacket+0xdc>)
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001134:	4b08      	ldr	r3, [pc, #32]	@ (8001158 <_TrySendOverflowPacket+0xdc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	3b01      	subs	r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <_TrySendOverflowPacket+0xdc>)
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e004      	b.n	800114c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001142:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <_TrySendOverflowPacket+0xdc>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	4a03      	ldr	r2, [pc, #12]	@ (8001158 <_TrySendOverflowPacket+0xdc>)
 800114a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800114c:	693b      	ldr	r3, [r7, #16]
}
 800114e:	4618      	mov	r0, r3
 8001150:	3730      	adds	r7, #48	@ 0x30
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000e48 	.word	0x20000e48
 800115c:	e0001004 	.word	0xe0001004

08001160 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	@ 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800116c:	4b98      	ldr	r3, [pc, #608]	@ (80013d0 <_SendPacket+0x270>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d010      	beq.n	8001196 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001174:	4b96      	ldr	r3, [pc, #600]	@ (80013d0 <_SendPacket+0x270>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	f000 812d 	beq.w	80013d8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800117e:	4b94      	ldr	r3, [pc, #592]	@ (80013d0 <_SendPacket+0x270>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d109      	bne.n	800119a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8001186:	f7ff ff79 	bl	800107c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800118a:	4b91      	ldr	r3, [pc, #580]	@ (80013d0 <_SendPacket+0x270>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2b01      	cmp	r3, #1
 8001190:	f040 8124 	bne.w	80013dc <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8001194:	e001      	b.n	800119a <_SendPacket+0x3a>
    goto Send;
 8001196:	bf00      	nop
 8001198:	e000      	b.n	800119c <_SendPacket+0x3c>
Send:
 800119a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2b1f      	cmp	r3, #31
 80011a0:	d809      	bhi.n	80011b6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80011a2:	4b8b      	ldr	r3, [pc, #556]	@ (80013d0 <_SendPacket+0x270>)
 80011a4:	69da      	ldr	r2, [r3, #28]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	fa22 f303 	lsr.w	r3, r2, r3
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f040 8115 	bne.w	80013e0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b17      	cmp	r3, #23
 80011ba:	d807      	bhi.n	80011cc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3b01      	subs	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	701a      	strb	r2, [r3, #0]
 80011ca:	e0c4      	b.n	8001356 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80011d8:	d912      	bls.n	8001200 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	09da      	lsrs	r2, r3, #7
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	3b01      	subs	r3, #1
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	3a01      	subs	r2, #1
 80011f2:	60fa      	str	r2, [r7, #12]
 80011f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80011f8:	b2da      	uxtb	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	e006      	b.n	800120e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	3b01      	subs	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b7e      	cmp	r3, #126	@ 0x7e
 8001212:	d807      	bhi.n	8001224 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	3b01      	subs	r3, #1
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e098      	b.n	8001356 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800122a:	d212      	bcs.n	8001252 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	09da      	lsrs	r2, r3, #7
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3b01      	subs	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	3a01      	subs	r2, #1
 8001244:	60fa      	str	r2, [r7, #12]
 8001246:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e081      	b.n	8001356 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001258:	d21d      	bcs.n	8001296 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	0b9a      	lsrs	r2, r3, #14
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3b01      	subs	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	b2d2      	uxtb	r2, r2
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	09db      	lsrs	r3, r3, #7
 800126e:	b2db      	uxtb	r3, r3
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	3a01      	subs	r2, #1
 8001274:	60fa      	str	r2, [r7, #12]
 8001276:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800127a:	b2da      	uxtb	r2, r3
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	b2db      	uxtb	r3, r3
 8001284:	68fa      	ldr	r2, [r7, #12]
 8001286:	3a01      	subs	r2, #1
 8001288:	60fa      	str	r2, [r7, #12]
 800128a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800128e:	b2da      	uxtb	r2, r3
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e05f      	b.n	8001356 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800129c:	d228      	bcs.n	80012f0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	0d5a      	lsrs	r2, r3, #21
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	b2d2      	uxtb	r2, r2
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	0b9b      	lsrs	r3, r3, #14
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	3a01      	subs	r2, #1
 80012b8:	60fa      	str	r2, [r7, #12]
 80012ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	09db      	lsrs	r3, r3, #7
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	68fa      	ldr	r2, [r7, #12]
 80012cc:	3a01      	subs	r2, #1
 80012ce:	60fa      	str	r2, [r7, #12]
 80012d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	3a01      	subs	r2, #1
 80012e2:	60fa      	str	r2, [r7, #12]
 80012e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012e8:	b2da      	uxtb	r2, r3
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	701a      	strb	r2, [r3, #0]
 80012ee:	e032      	b.n	8001356 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	0f1a      	lsrs	r2, r3, #28
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	0d5b      	lsrs	r3, r3, #21
 8001304:	b2db      	uxtb	r3, r3
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	3a01      	subs	r2, #1
 800130a:	60fa      	str	r2, [r7, #12]
 800130c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001310:	b2da      	uxtb	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	0b9b      	lsrs	r3, r3, #14
 800131a:	b2db      	uxtb	r3, r3
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	3a01      	subs	r2, #1
 8001320:	60fa      	str	r2, [r7, #12]
 8001322:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001326:	b2da      	uxtb	r2, r3
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	09db      	lsrs	r3, r3, #7
 8001330:	b2db      	uxtb	r3, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	3a01      	subs	r2, #1
 8001336:	60fa      	str	r2, [r7, #12]
 8001338:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800133c:	b2da      	uxtb	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	b2db      	uxtb	r3, r3
 8001346:	68fa      	ldr	r2, [r7, #12]
 8001348:	3a01      	subs	r2, #1
 800134a:	60fa      	str	r2, [r7, #12]
 800134c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001350:	b2da      	uxtb	r2, r3
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001356:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <_SendPacket+0x274>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <_SendPacket+0x270>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	623b      	str	r3, [r7, #32]
 800136e:	e00b      	b.n	8001388 <_SendPacket+0x228>
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	b2da      	uxtb	r2, r3
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	1c59      	adds	r1, r3, #1
 8001378:	6279      	str	r1, [r7, #36]	@ 0x24
 800137a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800137e:	b2d2      	uxtb	r2, r2
 8001380:	701a      	strb	r2, [r3, #0]
 8001382:	6a3b      	ldr	r3, [r7, #32]
 8001384:	09db      	lsrs	r3, r3, #7
 8001386:	623b      	str	r3, [r7, #32]
 8001388:	6a3b      	ldr	r3, [r7, #32]
 800138a:	2b7f      	cmp	r3, #127	@ 0x7f
 800138c:	d8f0      	bhi.n	8001370 <_SendPacket+0x210>
 800138e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	627a      	str	r2, [r7, #36]	@ 0x24
 8001394:	6a3a      	ldr	r2, [r7, #32]
 8001396:	b2d2      	uxtb	r2, r2
 8001398:	701a      	strb	r2, [r3, #0]
 800139a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800139e:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <_SendPacket+0x270>)
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	4618      	mov	r0, r3
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	68f9      	ldr	r1, [r7, #12]
 80013ae:	f7fe fecd 	bl	800014c <SEGGER_RTT_ASM_WriteSkipNoLock>
 80013b2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80013ba:	4a05      	ldr	r2, [pc, #20]	@ (80013d0 <_SendPacket+0x270>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	60d3      	str	r3, [r2, #12]
 80013c0:	e00f      	b.n	80013e2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80013c2:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <_SendPacket+0x270>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	3301      	adds	r3, #1
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b01      	ldr	r3, [pc, #4]	@ (80013d0 <_SendPacket+0x270>)
 80013cc:	701a      	strb	r2, [r3, #0]
 80013ce:	e008      	b.n	80013e2 <_SendPacket+0x282>
 80013d0:	20000e48 	.word	0x20000e48
 80013d4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80013d8:	bf00      	nop
 80013da:	e002      	b.n	80013e2 <_SendPacket+0x282>
      goto SendDone;
 80013dc:	bf00      	nop
 80013de:	e000      	b.n	80013e2 <_SendPacket+0x282>
      goto SendDone;
 80013e0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80013e2:	4b14      	ldr	r3, [pc, #80]	@ (8001434 <_SendPacket+0x2d4>)
 80013e4:	7e1b      	ldrb	r3, [r3, #24]
 80013e6:	4619      	mov	r1, r3
 80013e8:	4a13      	ldr	r2, [pc, #76]	@ (8001438 <_SendPacket+0x2d8>)
 80013ea:	460b      	mov	r3, r1
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	440b      	add	r3, r1
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	4413      	add	r3, r2
 80013f4:	336c      	adds	r3, #108	@ 0x6c
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001434 <_SendPacket+0x2d4>)
 80013fa:	7e1b      	ldrb	r3, [r3, #24]
 80013fc:	4618      	mov	r0, r3
 80013fe:	490e      	ldr	r1, [pc, #56]	@ (8001438 <_SendPacket+0x2d8>)
 8001400:	4603      	mov	r3, r0
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4403      	add	r3, r0
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	3370      	adds	r3, #112	@ 0x70
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	429a      	cmp	r2, r3
 8001410:	d00b      	beq.n	800142a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001412:	4b08      	ldr	r3, [pc, #32]	@ (8001434 <_SendPacket+0x2d4>)
 8001414:	789b      	ldrb	r3, [r3, #2]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d107      	bne.n	800142a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800141a:	4b06      	ldr	r3, [pc, #24]	@ (8001434 <_SendPacket+0x2d4>)
 800141c:	2201      	movs	r2, #1
 800141e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001420:	f7ff fdbe 	bl	8000fa0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001424:	4b03      	ldr	r3, [pc, #12]	@ (8001434 <_SendPacket+0x2d4>)
 8001426:	2200      	movs	r2, #0
 8001428:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800142a:	bf00      	nop
 800142c:	3728      	adds	r7, #40	@ 0x28
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000e48 	.word	0x20000e48
 8001438:	20000188 	.word	0x20000188

0800143c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af02      	add	r7, sp, #8
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
 8001448:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800144a:	2300      	movs	r3, #0
 800144c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001450:	4917      	ldr	r1, [pc, #92]	@ (80014b0 <SEGGER_SYSVIEW_Init+0x74>)
 8001452:	4818      	ldr	r0, [pc, #96]	@ (80014b4 <SEGGER_SYSVIEW_Init+0x78>)
 8001454:	f7ff fc94 	bl	8000d80 <SEGGER_RTT_AllocUpBuffer>
 8001458:	4603      	mov	r3, r0
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b16      	ldr	r3, [pc, #88]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800145e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001460:	4b15      	ldr	r3, [pc, #84]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8001462:	785a      	ldrb	r2, [r3, #1]
 8001464:	4b14      	ldr	r3, [pc, #80]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8001466:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001468:	4b13      	ldr	r3, [pc, #76]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800146a:	7e1b      	ldrb	r3, [r3, #24]
 800146c:	4618      	mov	r0, r3
 800146e:	2300      	movs	r3, #0
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2308      	movs	r3, #8
 8001474:	4a11      	ldr	r2, [pc, #68]	@ (80014bc <SEGGER_SYSVIEW_Init+0x80>)
 8001476:	490f      	ldr	r1, [pc, #60]	@ (80014b4 <SEGGER_SYSVIEW_Init+0x78>)
 8001478:	f7ff fd04 	bl	8000e84 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001482:	4b0f      	ldr	r3, [pc, #60]	@ (80014c0 <SEGGER_SYSVIEW_Init+0x84>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a0c      	ldr	r2, [pc, #48]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8001488:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800148a:	4a0b      	ldr	r2, [pc, #44]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001490:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001496:	4a08      	ldr	r2, [pc, #32]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800149c:	4a06      	ldr	r2, [pc, #24]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80014a2:	4b05      	ldr	r3, [pc, #20]	@ (80014b8 <SEGGER_SYSVIEW_Init+0x7c>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80014a8:	bf00      	nop
 80014aa:	3710      	adds	r7, #16
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000640 	.word	0x20000640
 80014b4:	08008158 	.word	0x08008158
 80014b8:	20000e48 	.word	0x20000e48
 80014bc:	20000e40 	.word	0x20000e40
 80014c0:	e0001004 	.word	0xe0001004

080014c4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80014cc:	4a03      	ldr	r2, [pc, #12]	@ (80014dc <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6113      	str	r3, [r2, #16]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr
 80014dc:	20000e48 	.word	0x20000e48

080014e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80014e8:	f3ef 8311 	mrs	r3, BASEPRI
 80014ec:	f04f 0120 	mov.w	r1, #32
 80014f0:	f381 8811 	msr	BASEPRI, r1
 80014f4:	60fb      	str	r3, [r7, #12]
 80014f6:	4808      	ldr	r0, [pc, #32]	@ (8001518 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80014f8:	f7ff fd46 	bl	8000f88 <_PreparePacket>
 80014fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	68b9      	ldr	r1, [r7, #8]
 8001502:	68b8      	ldr	r0, [r7, #8]
 8001504:	f7ff fe2c 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f383 8811 	msr	BASEPRI, r3
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000e78 	.word	0x20000e78

0800151c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001526:	f3ef 8311 	mrs	r3, BASEPRI
 800152a:	f04f 0120 	mov.w	r1, #32
 800152e:	f381 8811 	msr	BASEPRI, r1
 8001532:	617b      	str	r3, [r7, #20]
 8001534:	4816      	ldr	r0, [pc, #88]	@ (8001590 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001536:	f7ff fd27 	bl	8000f88 <_PreparePacket>
 800153a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	61fb      	str	r3, [r7, #28]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	61bb      	str	r3, [r7, #24]
 8001548:	e00b      	b.n	8001562 <SEGGER_SYSVIEW_RecordU32+0x46>
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	b2da      	uxtb	r2, r3
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	1c59      	adds	r1, r3, #1
 8001552:	61f9      	str	r1, [r7, #28]
 8001554:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	701a      	strb	r2, [r3, #0]
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	09db      	lsrs	r3, r3, #7
 8001560:	61bb      	str	r3, [r7, #24]
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b7f      	cmp	r3, #127	@ 0x7f
 8001566:	d8f0      	bhi.n	800154a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	61fa      	str	r2, [r7, #28]
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	701a      	strb	r2, [r3, #0]
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68f9      	ldr	r1, [r7, #12]
 800157c:	6938      	ldr	r0, [r7, #16]
 800157e:	f7ff fdef 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f383 8811 	msr	BASEPRI, r3
}
 8001588:	bf00      	nop
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	20000e78 	.word	0x20000e78

08001594 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	@ 0x30
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80015a0:	f3ef 8311 	mrs	r3, BASEPRI
 80015a4:	f04f 0120 	mov.w	r1, #32
 80015a8:	f381 8811 	msr	BASEPRI, r1
 80015ac:	61fb      	str	r3, [r7, #28]
 80015ae:	4825      	ldr	r0, [pc, #148]	@ (8001644 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80015b0:	f7ff fcea 	bl	8000f88 <_PreparePacket>
 80015b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015c2:	e00b      	b.n	80015dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80015c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015ca:	1c59      	adds	r1, r3, #1
 80015cc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80015ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80015d2:	b2d2      	uxtb	r2, r2
 80015d4:	701a      	strb	r2, [r3, #0]
 80015d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015d8:	09db      	lsrs	r3, r3, #7
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015de:	2b7f      	cmp	r3, #127	@ 0x7f
 80015e0:	d8f0      	bhi.n	80015c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80015e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	701a      	strb	r2, [r3, #0]
 80015ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	623b      	str	r3, [r7, #32]
 80015fa:	e00b      	b.n	8001614 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001602:	1c59      	adds	r1, r3, #1
 8001604:	6279      	str	r1, [r7, #36]	@ 0x24
 8001606:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]
 800160e:	6a3b      	ldr	r3, [r7, #32]
 8001610:	09db      	lsrs	r3, r3, #7
 8001612:	623b      	str	r3, [r7, #32]
 8001614:	6a3b      	ldr	r3, [r7, #32]
 8001616:	2b7f      	cmp	r3, #127	@ 0x7f
 8001618:	d8f0      	bhi.n	80015fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800161a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001620:	6a3a      	ldr	r2, [r7, #32]
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800162a:	68fa      	ldr	r2, [r7, #12]
 800162c:	6979      	ldr	r1, [r7, #20]
 800162e:	69b8      	ldr	r0, [r7, #24]
 8001630:	f7ff fd96 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f383 8811 	msr	BASEPRI, r3
}
 800163a:	bf00      	nop
 800163c:	3730      	adds	r7, #48	@ 0x30
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000e78 	.word	0x20000e78

08001648 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001648:	b580      	push	{r7, lr}
 800164a:	b08c      	sub	sp, #48	@ 0x30
 800164c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800164e:	4b58      	ldr	r3, [pc, #352]	@ (80017b0 <SEGGER_SYSVIEW_Start+0x168>)
 8001650:	2201      	movs	r2, #1
 8001652:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001654:	f3ef 8311 	mrs	r3, BASEPRI
 8001658:	f04f 0120 	mov.w	r1, #32
 800165c:	f381 8811 	msr	BASEPRI, r1
 8001660:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001662:	4b53      	ldr	r3, [pc, #332]	@ (80017b0 <SEGGER_SYSVIEW_Start+0x168>)
 8001664:	785b      	ldrb	r3, [r3, #1]
 8001666:	220a      	movs	r2, #10
 8001668:	4952      	ldr	r1, [pc, #328]	@ (80017b4 <SEGGER_SYSVIEW_Start+0x16c>)
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe fd6e 	bl	800014c <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001676:	200a      	movs	r0, #10
 8001678:	f7ff ff32 	bl	80014e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800167c:	f3ef 8311 	mrs	r3, BASEPRI
 8001680:	f04f 0120 	mov.w	r1, #32
 8001684:	f381 8811 	msr	BASEPRI, r1
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	484b      	ldr	r0, [pc, #300]	@ (80017b8 <SEGGER_SYSVIEW_Start+0x170>)
 800168c:	f7ff fc7c 	bl	8000f88 <_PreparePacket>
 8001690:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800169a:	4b45      	ldr	r3, [pc, #276]	@ (80017b0 <SEGGER_SYSVIEW_Start+0x168>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016a0:	e00b      	b.n	80016ba <SEGGER_SYSVIEW_Start+0x72>
 80016a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a8:	1c59      	adds	r1, r3, #1
 80016aa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80016ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016b6:	09db      	lsrs	r3, r3, #7
 80016b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80016be:	d8f0      	bhi.n	80016a2 <SEGGER_SYSVIEW_Start+0x5a>
 80016c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016c2:	1c5a      	adds	r2, r3, #1
 80016c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	701a      	strb	r2, [r3, #0]
 80016cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80016d4:	4b36      	ldr	r3, [pc, #216]	@ (80017b0 <SEGGER_SYSVIEW_Start+0x168>)
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	623b      	str	r3, [r7, #32]
 80016da:	e00b      	b.n	80016f4 <SEGGER_SYSVIEW_Start+0xac>
 80016dc:	6a3b      	ldr	r3, [r7, #32]
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e2:	1c59      	adds	r1, r3, #1
 80016e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80016e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80016ea:	b2d2      	uxtb	r2, r2
 80016ec:	701a      	strb	r2, [r3, #0]
 80016ee:	6a3b      	ldr	r3, [r7, #32]
 80016f0:	09db      	lsrs	r3, r3, #7
 80016f2:	623b      	str	r3, [r7, #32]
 80016f4:	6a3b      	ldr	r3, [r7, #32]
 80016f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80016f8:	d8f0      	bhi.n	80016dc <SEGGER_SYSVIEW_Start+0x94>
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	1c5a      	adds	r2, r3, #1
 80016fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8001700:	6a3a      	ldr	r2, [r7, #32]
 8001702:	b2d2      	uxtb	r2, r2
 8001704:	701a      	strb	r2, [r3, #0]
 8001706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001708:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	4b28      	ldr	r3, [pc, #160]	@ (80017b0 <SEGGER_SYSVIEW_Start+0x168>)
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	e00b      	b.n	800172e <SEGGER_SYSVIEW_Start+0xe6>
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	b2da      	uxtb	r2, r3
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	1c59      	adds	r1, r3, #1
 800171e:	61f9      	str	r1, [r7, #28]
 8001720:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	701a      	strb	r2, [r3, #0]
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	09db      	lsrs	r3, r3, #7
 800172c:	61bb      	str	r3, [r7, #24]
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b7f      	cmp	r3, #127	@ 0x7f
 8001732:	d8f0      	bhi.n	8001716 <SEGGER_SYSVIEW_Start+0xce>
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	61fa      	str	r2, [r7, #28]
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	701a      	strb	r2, [r3, #0]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	e00b      	b.n	8001766 <SEGGER_SYSVIEW_Start+0x11e>
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	b2da      	uxtb	r2, r3
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	1c59      	adds	r1, r3, #1
 8001756:	6179      	str	r1, [r7, #20]
 8001758:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	701a      	strb	r2, [r3, #0]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	09db      	lsrs	r3, r3, #7
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	2b7f      	cmp	r3, #127	@ 0x7f
 800176a:	d8f0      	bhi.n	800174e <SEGGER_SYSVIEW_Start+0x106>
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	1c5a      	adds	r2, r3, #1
 8001770:	617a      	str	r2, [r7, #20]
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800177c:	2218      	movs	r2, #24
 800177e:	6839      	ldr	r1, [r7, #0]
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff fced 	bl	8001160 <_SendPacket>
      RECORD_END();
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800178c:	4b08      	ldr	r3, [pc, #32]	@ (80017b0 <SEGGER_SYSVIEW_Start+0x168>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	2b00      	cmp	r3, #0
 8001792:	d002      	beq.n	800179a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <SEGGER_SYSVIEW_Start+0x168>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001798:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800179a:	f000 f9eb 	bl	8001b74 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800179e:	f000 f9b1 	bl	8001b04 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80017a2:	f000 fd21 	bl	80021e8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80017a6:	bf00      	nop
 80017a8:	3730      	adds	r7, #48	@ 0x30
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000e48 	.word	0x20000e48
 80017b4:	080081d4 	.word	0x080081d4
 80017b8:	20000e78 	.word	0x20000e78

080017bc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80017c2:	f3ef 8311 	mrs	r3, BASEPRI
 80017c6:	f04f 0120 	mov.w	r1, #32
 80017ca:	f381 8811 	msr	BASEPRI, r1
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	480b      	ldr	r0, [pc, #44]	@ (8001800 <SEGGER_SYSVIEW_Stop+0x44>)
 80017d2:	f7ff fbd9 	bl	8000f88 <_PreparePacket>
 80017d6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <SEGGER_SYSVIEW_Stop+0x48>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d007      	beq.n	80017f0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80017e0:	220b      	movs	r2, #11
 80017e2:	6839      	ldr	r1, [r7, #0]
 80017e4:	6838      	ldr	r0, [r7, #0]
 80017e6:	f7ff fcbb 	bl	8001160 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <SEGGER_SYSVIEW_Stop+0x48>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f383 8811 	msr	BASEPRI, r3
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000e78 	.word	0x20000e78
 8001804:	20000e48 	.word	0x20000e48

08001808 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	@ 0x30
 800180c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800180e:	f3ef 8311 	mrs	r3, BASEPRI
 8001812:	f04f 0120 	mov.w	r1, #32
 8001816:	f381 8811 	msr	BASEPRI, r1
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	4845      	ldr	r0, [pc, #276]	@ (8001934 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800181e:	f7ff fbb3 	bl	8000f88 <_PreparePacket>
 8001822:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800182c:	4b42      	ldr	r3, [pc, #264]	@ (8001938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001832:	e00b      	b.n	800184c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8001834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001836:	b2da      	uxtb	r2, r3
 8001838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800183e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001848:	09db      	lsrs	r3, r3, #7
 800184a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800184c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001850:	d8f0      	bhi.n	8001834 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8001852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800185a:	b2d2      	uxtb	r2, r2
 800185c:	701a      	strb	r2, [r3, #0]
 800185e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001860:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
 8001866:	4b34      	ldr	r3, [pc, #208]	@ (8001938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	623b      	str	r3, [r7, #32]
 800186c:	e00b      	b.n	8001886 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800186e:	6a3b      	ldr	r3, [r7, #32]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001874:	1c59      	adds	r1, r3, #1
 8001876:	6279      	str	r1, [r7, #36]	@ 0x24
 8001878:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800187c:	b2d2      	uxtb	r2, r2
 800187e:	701a      	strb	r2, [r3, #0]
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	09db      	lsrs	r3, r3, #7
 8001884:	623b      	str	r3, [r7, #32]
 8001886:	6a3b      	ldr	r3, [r7, #32]
 8001888:	2b7f      	cmp	r3, #127	@ 0x7f
 800188a:	d8f0      	bhi.n	800186e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	1c5a      	adds	r2, r3, #1
 8001890:	627a      	str	r2, [r7, #36]	@ 0x24
 8001892:	6a3a      	ldr	r2, [r7, #32]
 8001894:	b2d2      	uxtb	r2, r2
 8001896:	701a      	strb	r2, [r3, #0]
 8001898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	4b25      	ldr	r3, [pc, #148]	@ (8001938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	e00b      	b.n	80018c0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	1c59      	adds	r1, r3, #1
 80018b0:	61f9      	str	r1, [r7, #28]
 80018b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018b6:	b2d2      	uxtb	r2, r2
 80018b8:	701a      	strb	r2, [r3, #0]
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	09db      	lsrs	r3, r3, #7
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80018c4:	d8f0      	bhi.n	80018a8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	61fa      	str	r2, [r7, #28]
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	b2d2      	uxtb	r2, r2
 80018d0:	701a      	strb	r2, [r3, #0]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	617b      	str	r3, [r7, #20]
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	e00b      	b.n	80018f8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	1c59      	adds	r1, r3, #1
 80018e8:	6179      	str	r1, [r7, #20]
 80018ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	701a      	strb	r2, [r3, #0]
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	09db      	lsrs	r3, r3, #7
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80018fc:	d8f0      	bhi.n	80018e0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	1c5a      	adds	r2, r3, #1
 8001902:	617a      	str	r2, [r7, #20]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800190e:	2218      	movs	r2, #24
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f7ff fc24 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800191e:	4b06      	ldr	r3, [pc, #24]	@ (8001938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8001926:	4b04      	ldr	r3, [pc, #16]	@ (8001938 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8001928:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800192a:	4798      	blx	r3
  }
}
 800192c:	bf00      	nop
 800192e:	3730      	adds	r7, #48	@ 0x30
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}
 8001934:	20000e78 	.word	0x20000e78
 8001938:	20000e48 	.word	0x20000e48

0800193c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800193c:	b580      	push	{r7, lr}
 800193e:	b092      	sub	sp, #72	@ 0x48
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8001944:	f3ef 8311 	mrs	r3, BASEPRI
 8001948:	f04f 0120 	mov.w	r1, #32
 800194c:	f381 8811 	msr	BASEPRI, r1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	486a      	ldr	r0, [pc, #424]	@ (8001afc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8001954:	f7ff fb18 	bl	8000f88 <_PreparePacket>
 8001958:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	647b      	str	r3, [r7, #68]	@ 0x44
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b66      	ldr	r3, [pc, #408]	@ (8001b00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001968:	691b      	ldr	r3, [r3, #16]
 800196a:	1ad3      	subs	r3, r2, r3
 800196c:	643b      	str	r3, [r7, #64]	@ 0x40
 800196e:	e00b      	b.n	8001988 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8001970:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001972:	b2da      	uxtb	r2, r3
 8001974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001976:	1c59      	adds	r1, r3, #1
 8001978:	6479      	str	r1, [r7, #68]	@ 0x44
 800197a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	701a      	strb	r2, [r3, #0]
 8001982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001984:	09db      	lsrs	r3, r3, #7
 8001986:	643b      	str	r3, [r7, #64]	@ 0x40
 8001988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800198a:	2b7f      	cmp	r3, #127	@ 0x7f
 800198c:	d8f0      	bhi.n	8001970 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800198e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001990:	1c5a      	adds	r2, r3, #1
 8001992:	647a      	str	r2, [r7, #68]	@ 0x44
 8001994:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	701a      	strb	r2, [r3, #0]
 800199a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800199c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019a8:	e00b      	b.n	80019c2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80019aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019b0:	1c59      	adds	r1, r3, #1
 80019b2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80019b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019be:	09db      	lsrs	r3, r3, #7
 80019c0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80019c6:	d8f0      	bhi.n	80019aa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80019c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019d0:	b2d2      	uxtb	r2, r2
 80019d2:	701a      	strb	r2, [r3, #0]
 80019d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80019d6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	2220      	movs	r2, #32
 80019de:	4619      	mov	r1, r3
 80019e0:	68f8      	ldr	r0, [r7, #12]
 80019e2:	f7ff fa99 	bl	8000f18 <_EncodeStr>
 80019e6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80019e8:	2209      	movs	r2, #9
 80019ea:	68f9      	ldr	r1, [r7, #12]
 80019ec:	6938      	ldr	r0, [r7, #16]
 80019ee:	f7ff fbb7 	bl	8001160 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4b40      	ldr	r3, [pc, #256]	@ (8001b00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8001a00:	691b      	ldr	r3, [r3, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a06:	e00b      	b.n	8001a20 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8001a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a0e:	1c59      	adds	r1, r3, #1
 8001a10:	6379      	str	r1, [r7, #52]	@ 0x34
 8001a12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]
 8001a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a1c:	09db      	lsrs	r3, r3, #7
 8001a1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a24:	d8f0      	bhi.n	8001a08 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8001a26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a28:	1c5a      	adds	r2, r3, #1
 8001a2a:	637a      	str	r2, [r7, #52]	@ 0x34
 8001a2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]
 8001a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a40:	e00b      	b.n	8001a5a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8001a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a48:	1c59      	adds	r1, r3, #1
 8001a4a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001a4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
 8001a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a56:	09db      	lsrs	r3, r3, #7
 8001a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a5e:	d8f0      	bhi.n	8001a42 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8001a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	623b      	str	r3, [r7, #32]
 8001a7a:	e00b      	b.n	8001a94 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	1c59      	adds	r1, r3, #1
 8001a84:	6279      	str	r1, [r7, #36]	@ 0x24
 8001a86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	701a      	strb	r2, [r3, #0]
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	09db      	lsrs	r3, r3, #7
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	6a3b      	ldr	r3, [r7, #32]
 8001a96:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a98:	d8f0      	bhi.n	8001a7c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a9c:	1c5a      	adds	r2, r3, #1
 8001a9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001aa0:	6a3a      	ldr	r2, [r7, #32]
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	701a      	strb	r2, [r3, #0]
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	61fb      	str	r3, [r7, #28]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	61bb      	str	r3, [r7, #24]
 8001ab4:	e00b      	b.n	8001ace <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	b2da      	uxtb	r2, r3
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	1c59      	adds	r1, r3, #1
 8001abe:	61f9      	str	r1, [r7, #28]
 8001ac0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001ac4:	b2d2      	uxtb	r2, r2
 8001ac6:	701a      	strb	r2, [r3, #0]
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	09db      	lsrs	r3, r3, #7
 8001acc:	61bb      	str	r3, [r7, #24]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ad2:	d8f0      	bhi.n	8001ab6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	1c5a      	adds	r2, r3, #1
 8001ad8:	61fa      	str	r2, [r7, #28]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	b2d2      	uxtb	r2, r2
 8001ade:	701a      	strb	r2, [r3, #0]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8001ae4:	2215      	movs	r2, #21
 8001ae6:	68f9      	ldr	r1, [r7, #12]
 8001ae8:	6938      	ldr	r0, [r7, #16]
 8001aea:	f7ff fb39 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f383 8811 	msr	BASEPRI, r3
}
 8001af4:	bf00      	nop
 8001af6:	3748      	adds	r7, #72	@ 0x48
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	20000e78 	.word	0x20000e78
 8001b00:	20000e48 	.word	0x20000e48

08001b04 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8001b08:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001b0a:	6a1b      	ldr	r3, [r3, #32]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d008      	beq.n	8001b22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001b12:	6a1b      	ldr	r3, [r3, #32]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8001b1a:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4798      	blx	r3
  }
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000e48 	.word	0x20000e48

08001b2c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b086      	sub	sp, #24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001b34:	f3ef 8311 	mrs	r3, BASEPRI
 8001b38:	f04f 0120 	mov.w	r1, #32
 8001b3c:	f381 8811 	msr	BASEPRI, r1
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	480b      	ldr	r0, [pc, #44]	@ (8001b70 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8001b44:	f7ff fa20 	bl	8000f88 <_PreparePacket>
 8001b48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8001b4a:	2280      	movs	r2, #128	@ 0x80
 8001b4c:	6879      	ldr	r1, [r7, #4]
 8001b4e:	6938      	ldr	r0, [r7, #16]
 8001b50:	f7ff f9e2 	bl	8000f18 <_EncodeStr>
 8001b54:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8001b56:	220e      	movs	r2, #14
 8001b58:	68f9      	ldr	r1, [r7, #12]
 8001b5a:	6938      	ldr	r0, [r7, #16]
 8001b5c:	f7ff fb00 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f383 8811 	msr	BASEPRI, r3
}
 8001b66:	bf00      	nop
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000e78 	.word	0x20000e78

08001b74 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8001b7a:	4b15      	ldr	r3, [pc, #84]	@ (8001bd0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d01a      	beq.n	8001bb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8001b82:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d015      	beq.n	8001bb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4798      	blx	r3
 8001b94:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001b98:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8001b9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	f04f 0300 	mov.w	r3, #0
 8001ba6:	000a      	movs	r2, r1
 8001ba8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8001baa:	4613      	mov	r3, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4621      	mov	r1, r4
 8001bb0:	200d      	movs	r0, #13
 8001bb2:	f7ff fcef 	bl	8001594 <SEGGER_SYSVIEW_RecordU32x2>
 8001bb6:	e006      	b.n	8001bc6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8001bb8:	4b06      	ldr	r3, [pc, #24]	@ (8001bd4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	200c      	movs	r0, #12
 8001bc0:	f7ff fcac 	bl	800151c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd90      	pop	{r4, r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000e48 	.word	0x20000e48
 8001bd4:	e0001004 	.word	0xe0001004

08001bd8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001bde:	f3ef 8311 	mrs	r3, BASEPRI
 8001be2:	f04f 0120 	mov.w	r1, #32
 8001be6:	f381 8811 	msr	BASEPRI, r1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	4819      	ldr	r0, [pc, #100]	@ (8001c54 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8001bee:	f7ff f9cb 	bl	8000f88 <_PreparePacket>
 8001bf2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8001bf8:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c00:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	613b      	str	r3, [r7, #16]
 8001c0a:	e00b      	b.n	8001c24 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	1c59      	adds	r1, r3, #1
 8001c14:	6179      	str	r1, [r7, #20]
 8001c16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	09db      	lsrs	r3, r3, #7
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c28:	d8f0      	bhi.n	8001c0c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	617a      	str	r2, [r7, #20]
 8001c30:	693a      	ldr	r2, [r7, #16]
 8001c32:	b2d2      	uxtb	r2, r2
 8001c34:	701a      	strb	r2, [r3, #0]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	68b8      	ldr	r0, [r7, #8]
 8001c40:	f7ff fa8e 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f383 8811 	msr	BASEPRI, r3
}
 8001c4a:	bf00      	nop
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20000e78 	.word	0x20000e78
 8001c58:	e000ed04 	.word	0xe000ed04

08001c5c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001c62:	f3ef 8311 	mrs	r3, BASEPRI
 8001c66:	f04f 0120 	mov.w	r1, #32
 8001c6a:	f381 8811 	msr	BASEPRI, r1
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8001c72:	f7ff f989 	bl	8000f88 <_PreparePacket>
 8001c76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8001c78:	2203      	movs	r2, #3
 8001c7a:	6839      	ldr	r1, [r7, #0]
 8001c7c:	6838      	ldr	r0, [r7, #0]
 8001c7e:	f7ff fa6f 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f383 8811 	msr	BASEPRI, r3
}
 8001c88:	bf00      	nop
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000e78 	.word	0x20000e78

08001c94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001c9a:	f3ef 8311 	mrs	r3, BASEPRI
 8001c9e:	f04f 0120 	mov.w	r1, #32
 8001ca2:	f381 8811 	msr	BASEPRI, r1
 8001ca6:	607b      	str	r3, [r7, #4]
 8001ca8:	4807      	ldr	r0, [pc, #28]	@ (8001cc8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8001caa:	f7ff f96d 	bl	8000f88 <_PreparePacket>
 8001cae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8001cb0:	2212      	movs	r2, #18
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	6838      	ldr	r0, [r7, #0]
 8001cb6:	f7ff fa53 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f383 8811 	msr	BASEPRI, r3
}
 8001cc0:	bf00      	nop
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	20000e78 	.word	0x20000e78

08001ccc <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001cd4:	f3ef 8311 	mrs	r3, BASEPRI
 8001cd8:	f04f 0120 	mov.w	r1, #32
 8001cdc:	f381 8811 	msr	BASEPRI, r1
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	4817      	ldr	r0, [pc, #92]	@ (8001d40 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8001ce4:	f7ff f950 	bl	8000f88 <_PreparePacket>
 8001ce8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	61fb      	str	r3, [r7, #28]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	61bb      	str	r3, [r7, #24]
 8001cf6:	e00b      	b.n	8001d10 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	1c59      	adds	r1, r3, #1
 8001d00:	61f9      	str	r1, [r7, #28]
 8001d02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	09db      	lsrs	r3, r3, #7
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d14:	d8f0      	bhi.n	8001cf8 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	61fa      	str	r2, [r7, #28]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8001d26:	221c      	movs	r2, #28
 8001d28:	68f9      	ldr	r1, [r7, #12]
 8001d2a:	6938      	ldr	r0, [r7, #16]
 8001d2c:	f7ff fa18 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	f383 8811 	msr	BASEPRI, r3
}
 8001d36:	bf00      	nop
 8001d38:	3720      	adds	r7, #32
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20000e78 	.word	0x20000e78

08001d44 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	@ 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001d4e:	f3ef 8311 	mrs	r3, BASEPRI
 8001d52:	f04f 0120 	mov.w	r1, #32
 8001d56:	f381 8811 	msr	BASEPRI, r1
 8001d5a:	617b      	str	r3, [r7, #20]
 8001d5c:	4824      	ldr	r0, [pc, #144]	@ (8001df0 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8001d5e:	f7ff f913 	bl	8000f88 <_PreparePacket>
 8001d62:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	623b      	str	r3, [r7, #32]
 8001d70:	e00b      	b.n	8001d8a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	b2da      	uxtb	r2, r3
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	1c59      	adds	r1, r3, #1
 8001d7a:	6279      	str	r1, [r7, #36]	@ 0x24
 8001d7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	701a      	strb	r2, [r3, #0]
 8001d84:	6a3b      	ldr	r3, [r7, #32]
 8001d86:	09db      	lsrs	r3, r3, #7
 8001d88:	623b      	str	r3, [r7, #32]
 8001d8a:	6a3b      	ldr	r3, [r7, #32]
 8001d8c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001d8e:	d8f0      	bhi.n	8001d72 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	627a      	str	r2, [r7, #36]	@ 0x24
 8001d96:	6a3a      	ldr	r2, [r7, #32]
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	701a      	strb	r2, [r3, #0]
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	61bb      	str	r3, [r7, #24]
 8001da8:	e00b      	b.n	8001dc2 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	1c59      	adds	r1, r3, #1
 8001db2:	61f9      	str	r1, [r7, #28]
 8001db4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	09db      	lsrs	r3, r3, #7
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8001dc6:	d8f0      	bhi.n	8001daa <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	61fa      	str	r2, [r7, #28]
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	b2d2      	uxtb	r2, r2
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8001dd8:	221c      	movs	r2, #28
 8001dda:	68f9      	ldr	r1, [r7, #12]
 8001ddc:	6938      	ldr	r0, [r7, #16]
 8001dde:	f7ff f9bf 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	f383 8811 	msr	BASEPRI, r3
}
 8001de8:	bf00      	nop
 8001dea:	3728      	adds	r7, #40	@ 0x28
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000e78 	.word	0x20000e78

08001df4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8001dfe:	f04f 0120 	mov.w	r1, #32
 8001e02:	f381 8811 	msr	BASEPRI, r1
 8001e06:	607b      	str	r3, [r7, #4]
 8001e08:	4807      	ldr	r0, [pc, #28]	@ (8001e28 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8001e0a:	f7ff f8bd 	bl	8000f88 <_PreparePacket>
 8001e0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8001e10:	2211      	movs	r2, #17
 8001e12:	6839      	ldr	r1, [r7, #0]
 8001e14:	6838      	ldr	r0, [r7, #0]
 8001e16:	f7ff f9a3 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f383 8811 	msr	BASEPRI, r3
}
 8001e20:	bf00      	nop
 8001e22:	3708      	adds	r7, #8
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000e78 	.word	0x20000e78

08001e2c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001e34:	f3ef 8311 	mrs	r3, BASEPRI
 8001e38:	f04f 0120 	mov.w	r1, #32
 8001e3c:	f381 8811 	msr	BASEPRI, r1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	4819      	ldr	r0, [pc, #100]	@ (8001ea8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8001e44:	f7ff f8a0 	bl	8000f88 <_PreparePacket>
 8001e48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8001e4e:	4b17      	ldr	r3, [pc, #92]	@ (8001eac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	61fb      	str	r3, [r7, #28]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	e00b      	b.n	8001e7a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	1c59      	adds	r1, r3, #1
 8001e6a:	61f9      	str	r1, [r7, #28]
 8001e6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001e70:	b2d2      	uxtb	r2, r2
 8001e72:	701a      	strb	r2, [r3, #0]
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	09db      	lsrs	r3, r3, #7
 8001e78:	61bb      	str	r3, [r7, #24]
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e7e:	d8f0      	bhi.n	8001e62 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	61fa      	str	r2, [r7, #28]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	701a      	strb	r2, [r3, #0]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8001e90:	2208      	movs	r2, #8
 8001e92:	68f9      	ldr	r1, [r7, #12]
 8001e94:	6938      	ldr	r0, [r7, #16]
 8001e96:	f7ff f963 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f383 8811 	msr	BASEPRI, r3
}
 8001ea0:	bf00      	nop
 8001ea2:	3720      	adds	r7, #32
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000e78 	.word	0x20000e78
 8001eac:	20000e48 	.word	0x20000e48

08001eb0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b088      	sub	sp, #32
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001eb8:	f3ef 8311 	mrs	r3, BASEPRI
 8001ebc:	f04f 0120 	mov.w	r1, #32
 8001ec0:	f381 8811 	msr	BASEPRI, r1
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	4819      	ldr	r0, [pc, #100]	@ (8001f2c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8001ec8:	f7ff f85e 	bl	8000f88 <_PreparePacket>
 8001ecc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8001ed2:	4b17      	ldr	r3, [pc, #92]	@ (8001f30 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	61bb      	str	r3, [r7, #24]
 8001ee4:	e00b      	b.n	8001efe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	1c59      	adds	r1, r3, #1
 8001eee:	61f9      	str	r1, [r7, #28]
 8001ef0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	701a      	strb	r2, [r3, #0]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	09db      	lsrs	r3, r3, #7
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f02:	d8f0      	bhi.n	8001ee6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8001f04:	69fb      	ldr	r3, [r7, #28]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	61fa      	str	r2, [r7, #28]
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	701a      	strb	r2, [r3, #0]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8001f14:	2204      	movs	r2, #4
 8001f16:	68f9      	ldr	r1, [r7, #12]
 8001f18:	6938      	ldr	r0, [r7, #16]
 8001f1a:	f7ff f921 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	f383 8811 	msr	BASEPRI, r3
}
 8001f24:	bf00      	nop
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000e78 	.word	0x20000e78
 8001f30:	20000e48 	.word	0x20000e48

08001f34 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001f3c:	f3ef 8311 	mrs	r3, BASEPRI
 8001f40:	f04f 0120 	mov.w	r1, #32
 8001f44:	f381 8811 	msr	BASEPRI, r1
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	4819      	ldr	r0, [pc, #100]	@ (8001fb0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8001f4c:	f7ff f81c 	bl	8000f88 <_PreparePacket>
 8001f50:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8001f56:	4b17      	ldr	r3, [pc, #92]	@ (8001fb4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8001f58:	691b      	ldr	r3, [r3, #16]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	e00b      	b.n	8001f82 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	1c59      	adds	r1, r3, #1
 8001f72:	61f9      	str	r1, [r7, #28]
 8001f74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	09db      	lsrs	r3, r3, #7
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f86:	d8f0      	bhi.n	8001f6a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	1c5a      	adds	r2, r3, #1
 8001f8c:	61fa      	str	r2, [r7, #28]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8001f98:	2206      	movs	r2, #6
 8001f9a:	68f9      	ldr	r1, [r7, #12]
 8001f9c:	6938      	ldr	r0, [r7, #16]
 8001f9e:	f7ff f8df 	bl	8001160 <_SendPacket>
  RECORD_END();
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f383 8811 	msr	BASEPRI, r3
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000e78 	.word	0x20000e78
 8001fb4:	20000e48 	.word	0x20000e48

08001fb8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b08a      	sub	sp, #40	@ 0x28
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001fc2:	f3ef 8311 	mrs	r3, BASEPRI
 8001fc6:	f04f 0120 	mov.w	r1, #32
 8001fca:	f381 8811 	msr	BASEPRI, r1
 8001fce:	617b      	str	r3, [r7, #20]
 8001fd0:	4827      	ldr	r0, [pc, #156]	@ (8002070 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8001fd2:	f7fe ffd9 	bl	8000f88 <_PreparePacket>
 8001fd6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8001fdc:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	623b      	str	r3, [r7, #32]
 8001fee:	e00b      	b.n	8002008 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8001ff0:	6a3b      	ldr	r3, [r7, #32]
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	1c59      	adds	r1, r3, #1
 8001ff8:	6279      	str	r1, [r7, #36]	@ 0x24
 8001ffa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	701a      	strb	r2, [r3, #0]
 8002002:	6a3b      	ldr	r3, [r7, #32]
 8002004:	09db      	lsrs	r3, r3, #7
 8002006:	623b      	str	r3, [r7, #32]
 8002008:	6a3b      	ldr	r3, [r7, #32]
 800200a:	2b7f      	cmp	r3, #127	@ 0x7f
 800200c:	d8f0      	bhi.n	8001ff0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	627a      	str	r2, [r7, #36]	@ 0x24
 8002014:	6a3a      	ldr	r2, [r7, #32]
 8002016:	b2d2      	uxtb	r2, r2
 8002018:	701a      	strb	r2, [r3, #0]
 800201a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	61fb      	str	r3, [r7, #28]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	e00b      	b.n	8002040 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	b2da      	uxtb	r2, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	1c59      	adds	r1, r3, #1
 8002030:	61f9      	str	r1, [r7, #28]
 8002032:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002036:	b2d2      	uxtb	r2, r2
 8002038:	701a      	strb	r2, [r3, #0]
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	09db      	lsrs	r3, r3, #7
 800203e:	61bb      	str	r3, [r7, #24]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	2b7f      	cmp	r3, #127	@ 0x7f
 8002044:	d8f0      	bhi.n	8002028 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	1c5a      	adds	r2, r3, #1
 800204a:	61fa      	str	r2, [r7, #28]
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	b2d2      	uxtb	r2, r2
 8002050:	701a      	strb	r2, [r3, #0]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8002056:	2207      	movs	r2, #7
 8002058:	68f9      	ldr	r1, [r7, #12]
 800205a:	6938      	ldr	r0, [r7, #16]
 800205c:	f7ff f880 	bl	8001160 <_SendPacket>
  RECORD_END();
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	f383 8811 	msr	BASEPRI, r3
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000e78 	.word	0x20000e78
 8002074:	20000e48 	.word	0x20000e48

08002078 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8002080:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	1ad3      	subs	r3, r2, r3
}
 8002088:	4618      	mov	r0, r3
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000e48 	.word	0x20000e48

08002098 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b08c      	sub	sp, #48	@ 0x30
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80020a2:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d077      	beq.n	800219a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80020aa:	4b3e      	ldr	r3, [pc, #248]	@ (80021a4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80020b0:	2300      	movs	r3, #0
 80020b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020b4:	e008      	b.n	80020c8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80020b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80020bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d007      	beq.n	80020d2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80020c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c4:	3301      	adds	r3, #1
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d3f2      	bcc.n	80020b6 <SEGGER_SYSVIEW_SendModule+0x1e>
 80020d0:	e000      	b.n	80020d4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80020d2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80020d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d055      	beq.n	8002186 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80020da:	f3ef 8311 	mrs	r3, BASEPRI
 80020de:	f04f 0120 	mov.w	r1, #32
 80020e2:	f381 8811 	msr	BASEPRI, r1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	482f      	ldr	r0, [pc, #188]	@ (80021a8 <SEGGER_SYSVIEW_SendModule+0x110>)
 80020ea:	f7fe ff4d 	bl	8000f88 <_PreparePacket>
 80020ee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f8:	79fb      	ldrb	r3, [r7, #7]
 80020fa:	623b      	str	r3, [r7, #32]
 80020fc:	e00b      	b.n	8002116 <SEGGER_SYSVIEW_SendModule+0x7e>
 80020fe:	6a3b      	ldr	r3, [r7, #32]
 8002100:	b2da      	uxtb	r2, r3
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	1c59      	adds	r1, r3, #1
 8002106:	6279      	str	r1, [r7, #36]	@ 0x24
 8002108:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800210c:	b2d2      	uxtb	r2, r2
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	6a3b      	ldr	r3, [r7, #32]
 8002112:	09db      	lsrs	r3, r3, #7
 8002114:	623b      	str	r3, [r7, #32]
 8002116:	6a3b      	ldr	r3, [r7, #32]
 8002118:	2b7f      	cmp	r3, #127	@ 0x7f
 800211a:	d8f0      	bhi.n	80020fe <SEGGER_SYSVIEW_SendModule+0x66>
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	1c5a      	adds	r2, r3, #1
 8002120:	627a      	str	r2, [r7, #36]	@ 0x24
 8002122:	6a3a      	ldr	r2, [r7, #32]
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800212a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	61fb      	str	r3, [r7, #28]
 8002130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	e00b      	b.n	8002150 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	1c59      	adds	r1, r3, #1
 8002140:	61f9      	str	r1, [r7, #28]
 8002142:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	701a      	strb	r2, [r3, #0]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	09db      	lsrs	r3, r3, #7
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	2b7f      	cmp	r3, #127	@ 0x7f
 8002154:	d8f0      	bhi.n	8002138 <SEGGER_SYSVIEW_SendModule+0xa0>
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	61fa      	str	r2, [r7, #28]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	b2d2      	uxtb	r2, r2
 8002160:	701a      	strb	r2, [r3, #0]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2280      	movs	r2, #128	@ 0x80
 800216c:	4619      	mov	r1, r3
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f7fe fed2 	bl	8000f18 <_EncodeStr>
 8002174:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8002176:	2216      	movs	r2, #22
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	6938      	ldr	r0, [r7, #16]
 800217c:	f7fe fff0 	bl	8001160 <_SendPacket>
      RECORD_END();
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8002186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002188:	2b00      	cmp	r3, #0
 800218a:	d006      	beq.n	800219a <SEGGER_SYSVIEW_SendModule+0x102>
 800218c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d002      	beq.n	800219a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4798      	blx	r3
    }
  }
}
 800219a:	bf00      	nop
 800219c:	3730      	adds	r7, #48	@ 0x30
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000e70 	.word	0x20000e70
 80021a8:	20000e78 	.word	0x20000e78

080021ac <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80021b2:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d00f      	beq.n	80021da <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80021ba:	4b0a      	ldr	r3, [pc, #40]	@ (80021e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d002      	beq.n	80021ce <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f2      	bne.n	80021c0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80021da:	bf00      	nop
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	20000e70 	.word	0x20000e70

080021e8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80021ee:	f3ef 8311 	mrs	r3, BASEPRI
 80021f2:	f04f 0120 	mov.w	r1, #32
 80021f6:	f381 8811 	msr	BASEPRI, r1
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	4817      	ldr	r0, [pc, #92]	@ (800225c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80021fe:	f7fe fec3 	bl	8000f88 <_PreparePacket>
 8002202:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	617b      	str	r3, [r7, #20]
 800220c:	4b14      	ldr	r3, [pc, #80]	@ (8002260 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	e00b      	b.n	800222c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	1c59      	adds	r1, r3, #1
 800221c:	6179      	str	r1, [r7, #20]
 800221e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	09db      	lsrs	r3, r3, #7
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002230:	d8f0      	bhi.n	8002214 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	617a      	str	r2, [r7, #20]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	b2d2      	uxtb	r2, r2
 800223c:	701a      	strb	r2, [r3, #0]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002242:	221b      	movs	r2, #27
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	68b8      	ldr	r0, [r7, #8]
 8002248:	f7fe ff8a 	bl	8001160 <_SendPacket>
  RECORD_END();
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f383 8811 	msr	BASEPRI, r3
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000e78 	.word	0x20000e78
 8002260:	20000e74 	.word	0x20000e74

08002264 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	@ 0x28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800226c:	f3ef 8311 	mrs	r3, BASEPRI
 8002270:	f04f 0120 	mov.w	r1, #32
 8002274:	f381 8811 	msr	BASEPRI, r1
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	4827      	ldr	r0, [pc, #156]	@ (8002318 <SEGGER_SYSVIEW_Warn+0xb4>)
 800227c:	f7fe fe84 	bl	8000f88 <_PreparePacket>
 8002280:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002282:	2280      	movs	r2, #128	@ 0x80
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	6938      	ldr	r0, [r7, #16]
 8002288:	f7fe fe46 	bl	8000f18 <_EncodeStr>
 800228c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	627b      	str	r3, [r7, #36]	@ 0x24
 8002292:	2301      	movs	r3, #1
 8002294:	623b      	str	r3, [r7, #32]
 8002296:	e00b      	b.n	80022b0 <SEGGER_SYSVIEW_Warn+0x4c>
 8002298:	6a3b      	ldr	r3, [r7, #32]
 800229a:	b2da      	uxtb	r2, r3
 800229c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229e:	1c59      	adds	r1, r3, #1
 80022a0:	6279      	str	r1, [r7, #36]	@ 0x24
 80022a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	701a      	strb	r2, [r3, #0]
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	09db      	lsrs	r3, r3, #7
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80022b4:	d8f0      	bhi.n	8002298 <SEGGER_SYSVIEW_Warn+0x34>
 80022b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80022bc:	6a3a      	ldr	r2, [r7, #32]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	2300      	movs	r3, #0
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e00b      	b.n	80022e8 <SEGGER_SYSVIEW_Warn+0x84>
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	1c59      	adds	r1, r3, #1
 80022d8:	61f9      	str	r1, [r7, #28]
 80022da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	09db      	lsrs	r3, r3, #7
 80022e6:	61bb      	str	r3, [r7, #24]
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80022ec:	d8f0      	bhi.n	80022d0 <SEGGER_SYSVIEW_Warn+0x6c>
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	61fa      	str	r2, [r7, #28]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	b2d2      	uxtb	r2, r2
 80022f8:	701a      	strb	r2, [r3, #0]
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80022fe:	221a      	movs	r2, #26
 8002300:	68f9      	ldr	r1, [r7, #12]
 8002302:	6938      	ldr	r0, [r7, #16]
 8002304:	f7fe ff2c 	bl	8001160 <_SendPacket>
  RECORD_END();
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f383 8811 	msr	BASEPRI, r3
}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	@ 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	20000e78 	.word	0x20000e78

0800231c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f103 0208 	add.w	r2, r3, #8
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f103 0208 	add.w	r2, r3, #8
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f103 0208 	add.w	r2, r3, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002350:	f240 1019 	movw	r0, #281	@ 0x119
 8002354:	f7ff fcba 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800236e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002372:	f7ff fcab 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
}
 8002376:	bf00      	nop
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
 8002386:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68fa      	ldr	r2, [r7, #12]
 8002392:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	683a      	ldr	r2, [r7, #0]
 80023a8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 80023ba:	f240 101b 	movw	r0, #283	@ 0x11b
 80023be:	f7ff fc85 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
}
 80023c2:	bf00      	nop
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b084      	sub	sp, #16
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
 80023d2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d103      	bne.n	80023ea <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	e00c      	b.n	8002404 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3308      	adds	r3, #8
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e002      	b.n	80023f8 <vListInsert+0x2e>
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	68ba      	ldr	r2, [r7, #8]
 8002400:	429a      	cmp	r2, r3
 8002402:	d2f6      	bcs.n	80023f2 <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	683a      	ldr	r2, [r7, #0]
 800241e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	1c5a      	adds	r2, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002430:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002434:	f7ff fc4a 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
}
 8002438:	bf00      	nop
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6892      	ldr	r2, [r2, #8]
 8002456:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6852      	ldr	r2, [r2, #4]
 8002460:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	429a      	cmp	r2, r3
 800246a:	d103      	bne.n	8002474 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689a      	ldr	r2, [r3, #8]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	1e5a      	subs	r2, r3, #1
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4619      	mov	r1, r3
 800248a:	f240 101d 	movw	r0, #285	@ 0x11d
 800248e:	f7ff fc59 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
}
 8002496:	4618      	mov	r0, r3
 8002498:	3710      	adds	r7, #16
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
	...

080024a0 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024aa:	2301      	movs	r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d10b      	bne.n	80024d0 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80024b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024bc:	f383 8811 	msr	BASEPRI, r3
 80024c0:	f3bf 8f6f 	isb	sy
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80024ca:	bf00      	nop
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d05d      	beq.n	8002592 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d059      	beq.n	8002592 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024e6:	2100      	movs	r1, #0
 80024e8:	fba3 2302 	umull	r2, r3, r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d000      	beq.n	80024f2 <xQueueGenericReset+0x52>
 80024f0:	2101      	movs	r1, #1
 80024f2:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d14c      	bne.n	8002592 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80024f8:	f002 f8ce 	bl	8004698 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002504:	6939      	ldr	r1, [r7, #16]
 8002506:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002508:	fb01 f303 	mul.w	r3, r1, r3
 800250c:	441a      	add	r2, r3
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	2200      	movs	r2, #0
 8002516:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002528:	3b01      	subs	r3, #1
 800252a:	6939      	ldr	r1, [r7, #16]
 800252c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	441a      	add	r2, r3
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	22ff      	movs	r2, #255	@ 0xff
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	22ff      	movs	r2, #255	@ 0xff
 8002544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d114      	bne.n	8002578 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d01a      	beq.n	800258c <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	3310      	adds	r3, #16
 800255a:	4618      	mov	r0, r3
 800255c:	f001 f97e 	bl	800385c <xTaskRemoveFromEventList>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d012      	beq.n	800258c <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <xQueueGenericReset+0x128>)
 8002568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	e009      	b.n	800258c <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	3310      	adds	r3, #16
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fecd 	bl	800231c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	3324      	adds	r3, #36	@ 0x24
 8002586:	4618      	mov	r0, r3
 8002588:	f7ff fec8 	bl	800231c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800258c:	f002 f8b4 	bl	80046f8 <vPortExitCritical>
 8002590:	e001      	b.n	8002596 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002592:	2300      	movs	r3, #0
 8002594:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d10b      	bne.n	80025b4 <xQueueGenericReset+0x114>
    __asm volatile
 800259c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a0:	f383 8811 	msr	BASEPRI, r3
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	f3bf 8f4f 	dsb	sy
 80025ac:	60bb      	str	r3, [r7, #8]
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	e7fd      	b.n	80025b0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4619      	mov	r1, r3
 80025b8:	2096      	movs	r0, #150	@ 0x96
 80025ba:	f7ff fbc3 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80025be:	697b      	ldr	r3, [r7, #20]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08a      	sub	sp, #40	@ 0x28
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d02e      	beq.n	8002642 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80025e4:	2100      	movs	r1, #0
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	fba3 2302 	umull	r2, r3, r3, r2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d000      	beq.n	80025f4 <xQueueGenericCreate+0x28>
 80025f2:	2101      	movs	r1, #1
 80025f4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d123      	bne.n	8002642 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
            /* coverity[misra_c_2012_rule_14_3_violation] */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize ) ) )
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	68ba      	ldr	r2, [r7, #8]
 80025fe:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002602:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002606:	d81c      	bhi.n	8002642 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	fb02 f303 	mul.w	r3, r2, r3
 8002610:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3350      	adds	r3, #80	@ 0x50
 8002616:	4618      	mov	r0, r3
 8002618:	f002 f948 	bl	80048ac <pvPortMalloc>
 800261c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d01d      	beq.n	8002660 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	3350      	adds	r3, #80	@ 0x50
 800262c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800262e:	79fa      	ldrb	r2, [r7, #7]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	4613      	mov	r3, r2
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f81e 	bl	800267c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002640:	e00e      	b.n	8002660 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d10b      	bne.n	8002660 <xQueueGenericCreate+0x94>
    __asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	613b      	str	r3, [r7, #16]
}
 800265a:	bf00      	nop
 800265c:	bf00      	nop
 800265e:	e7fd      	b.n	800265c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fd08 	bl	8002078 <SEGGER_SYSVIEW_ShrinkId>
 8002668:	4603      	mov	r3, r0
 800266a:	4619      	mov	r1, r3
 800266c:	2098      	movs	r0, #152	@ 0x98
 800266e:	f7ff fb69 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002672:	69fb      	ldr	r3, [r7, #28]
    }
 8002674:	4618      	mov	r0, r3
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
 8002688:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d103      	bne.n	8002698 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002690:	69bb      	ldr	r3, [r7, #24]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e002      	b.n	800269e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	68fa      	ldr	r2, [r7, #12]
 80026a2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	68ba      	ldr	r2, [r7, #8]
 80026a8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026aa:	2101      	movs	r1, #1
 80026ac:	69b8      	ldr	r0, [r7, #24]
 80026ae:	f7ff fef7 	bl	80024a0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80026ba:	bf00      	nop
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08c      	sub	sp, #48	@ 0x30
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10b      	bne.n	80026f6 <xQueueReceive+0x32>
    __asm volatile
 80026de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026e2:	f383 8811 	msr	BASEPRI, r3
 80026e6:	f3bf 8f6f 	isb	sy
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	623b      	str	r3, [r7, #32]
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	e7fd      	b.n	80026f2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d103      	bne.n	8002704 <xQueueReceive+0x40>
 80026fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <xQueueReceive+0x44>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <xQueueReceive+0x46>
 8002708:	2300      	movs	r3, #0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d10b      	bne.n	8002726 <xQueueReceive+0x62>
    __asm volatile
 800270e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002712:	f383 8811 	msr	BASEPRI, r3
 8002716:	f3bf 8f6f 	isb	sy
 800271a:	f3bf 8f4f 	dsb	sy
 800271e:	61fb      	str	r3, [r7, #28]
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	e7fd      	b.n	8002722 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002726:	f001 fb11 	bl	8003d4c <xTaskGetSchedulerState>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d102      	bne.n	8002736 <xQueueReceive+0x72>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <xQueueReceive+0x76>
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <xQueueReceive+0x78>
 800273a:	2300      	movs	r3, #0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10b      	bne.n	8002758 <xQueueReceive+0x94>
    __asm volatile
 8002740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002744:	f383 8811 	msr	BASEPRI, r3
 8002748:	f3bf 8f6f 	isb	sy
 800274c:	f3bf 8f4f 	dsb	sy
 8002750:	61bb      	str	r3, [r7, #24]
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	e7fd      	b.n	8002754 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002758:	f001 ff9e 	bl	8004698 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800275c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800275e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d023      	beq.n	80027b0 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800276c:	f000 f898 	bl	80028a0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	1e5a      	subs	r2, r3, #1
 8002774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002776:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00f      	beq.n	80027a0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002782:	3310      	adds	r3, #16
 8002784:	4618      	mov	r0, r3
 8002786:	f001 f869 	bl	800385c <xTaskRemoveFromEventList>
 800278a:	4603      	mov	r3, r0
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002790:	4b42      	ldr	r3, [pc, #264]	@ (800289c <xQueueReceive+0x1d8>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027a0:	f001 ffaa 	bl	80046f8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80027a4:	2101      	movs	r1, #1
 80027a6:	20a4      	movs	r0, #164	@ 0xa4
 80027a8:	f7ff facc 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e071      	b.n	8002894 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d107      	bne.n	80027c6 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027b6:	f001 ff9f 	bl	80046f8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80027ba:	2100      	movs	r1, #0
 80027bc:	20a4      	movs	r0, #164	@ 0xa4
 80027be:	f7ff fac1 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80027c2:	2300      	movs	r3, #0
 80027c4:	e066      	b.n	8002894 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80027c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d106      	bne.n	80027da <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80027cc:	f107 0310 	add.w	r3, r7, #16
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 f923 	bl	8003a1c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027d6:	2301      	movs	r3, #1
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027da:	f001 ff8d 	bl	80046f8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027de:	f000 fcd9 	bl	8003194 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027e2:	f001 ff59 	bl	8004698 <vPortEnterCritical>
 80027e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027ec:	b25b      	sxtb	r3, r3
 80027ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f2:	d103      	bne.n	80027fc <xQueueReceive+0x138>
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002802:	b25b      	sxtb	r3, r3
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d103      	bne.n	8002812 <xQueueReceive+0x14e>
 800280a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002812:	f001 ff71 	bl	80046f8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002816:	1d3a      	adds	r2, r7, #4
 8002818:	f107 0310 	add.w	r3, r7, #16
 800281c:	4611      	mov	r1, r2
 800281e:	4618      	mov	r0, r3
 8002820:	f001 f914 	bl	8003a4c <xTaskCheckForTimeOut>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d123      	bne.n	8002872 <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800282a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800282c:	f000 f8b0 	bl	8002990 <prvIsQueueEmpty>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d017      	beq.n	8002866 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002838:	3324      	adds	r3, #36	@ 0x24
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f000 ff9a 	bl	8003778 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002846:	f000 f851 	bl	80028ec <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800284a:	f000 fcb1 	bl	80031b0 <xTaskResumeAll>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d181      	bne.n	8002758 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8002854:	4b11      	ldr	r3, [pc, #68]	@ (800289c <xQueueReceive+0x1d8>)
 8002856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	f3bf 8f4f 	dsb	sy
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	e778      	b.n	8002758 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002866:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002868:	f000 f840 	bl	80028ec <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800286c:	f000 fca0 	bl	80031b0 <xTaskResumeAll>
 8002870:	e772      	b.n	8002758 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002872:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002874:	f000 f83a 	bl	80028ec <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002878:	f000 fc9a 	bl	80031b0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800287c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800287e:	f000 f887 	bl	8002990 <prvIsQueueEmpty>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	f43f af67 	beq.w	8002758 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 800288a:	2100      	movs	r1, #0
 800288c:	20a4      	movs	r0, #164	@ 0xa4
 800288e:	f7ff fa59 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 8002892:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002894:	4618      	mov	r0, r3
 8002896:	3730      	adds	r7, #48	@ 0x30
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	e000ed04 	.word	0xe000ed04

080028a0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d018      	beq.n	80028e4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ba:	441a      	add	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d303      	bcc.n	80028d4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68d9      	ldr	r1, [r3, #12]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028dc:	461a      	mov	r2, r3
 80028de:	6838      	ldr	r0, [r7, #0]
 80028e0:	f005 f9a4 	bl	8007c2c <memcpy>
    }
}
 80028e4:	bf00      	nop
 80028e6:	3708      	adds	r7, #8
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}

080028ec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80028f4:	f001 fed0 	bl	8004698 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028fe:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002900:	e011      	b.n	8002926 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3324      	adds	r3, #36	@ 0x24
 800290e:	4618      	mov	r0, r3
 8002910:	f000 ffa4 	bl	800385c <xTaskRemoveFromEventList>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800291a:	f001 f913 	bl	8003b44 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	3b01      	subs	r3, #1
 8002922:	b2db      	uxtb	r3, r3
 8002924:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	dce9      	bgt.n	8002902 <prvUnlockQueue+0x16>
 800292e:	e000      	b.n	8002932 <prvUnlockQueue+0x46>
                    break;
 8002930:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	22ff      	movs	r2, #255	@ 0xff
 8002936:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800293a:	f001 fedd 	bl	80046f8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800293e:	f001 feab 	bl	8004698 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002948:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800294a:	e011      	b.n	8002970 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d012      	beq.n	800297a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3310      	adds	r3, #16
 8002958:	4618      	mov	r0, r3
 800295a:	f000 ff7f 	bl	800385c <xTaskRemoveFromEventList>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002964:	f001 f8ee 	bl	8003b44 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002968:	7bbb      	ldrb	r3, [r7, #14]
 800296a:	3b01      	subs	r3, #1
 800296c:	b2db      	uxtb	r3, r3
 800296e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002970:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002974:	2b00      	cmp	r3, #0
 8002976:	dce9      	bgt.n	800294c <prvUnlockQueue+0x60>
 8002978:	e000      	b.n	800297c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800297a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	22ff      	movs	r2, #255	@ 0xff
 8002980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002984:	f001 feb8 	bl	80046f8 <vPortExitCritical>
}
 8002988:	bf00      	nop
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002998:	f001 fe7e 	bl	8004698 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d102      	bne.n	80029aa <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80029a4:	2301      	movs	r3, #1
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	e001      	b.n	80029ae <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80029ae:	f001 fea3 	bl	80046f8 <vPortExitCritical>

    return xReturn;
 80029b2:	68fb      	ldr	r3, [r7, #12]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b086      	sub	sp, #24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <vQueueAddToRegistry+0x2c>
    __asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	60fb      	str	r3, [r7, #12]
}
 80029e2:	bf00      	nop
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d024      	beq.n	8002a38 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
 80029f2:	e01e      	b.n	8002a32 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80029f4:	4a18      	ldr	r2, [pc, #96]	@ (8002a58 <vQueueAddToRegistry+0x9c>)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	00db      	lsls	r3, r3, #3
 80029fa:	4413      	add	r3, r2
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d105      	bne.n	8002a10 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	4a13      	ldr	r2, [pc, #76]	@ (8002a58 <vQueueAddToRegistry+0x9c>)
 8002a0a:	4413      	add	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
                    break;
 8002a0e:	e013      	b.n	8002a38 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10a      	bne.n	8002a2c <vQueueAddToRegistry+0x70>
 8002a16:	4a10      	ldr	r2, [pc, #64]	@ (8002a58 <vQueueAddToRegistry+0x9c>)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d104      	bne.n	8002a2c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4a0c      	ldr	r2, [pc, #48]	@ (8002a58 <vQueueAddToRegistry+0x9c>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	2b07      	cmp	r3, #7
 8002a36:	d9dd      	bls.n	80029f4 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d005      	beq.n	8002a4a <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8002a4a:	20b6      	movs	r0, #182	@ 0xb6
 8002a4c:	f7ff f93e 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002a50:	bf00      	nop
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000f5c 	.word	0x20000f5c

08002a5c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a6c:	f001 fe14 	bl	8004698 <vPortEnterCritical>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a76:	b25b      	sxtb	r3, r3
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d103      	bne.n	8002a86 <vQueueWaitForMessageRestricted+0x2a>
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a8c:	b25b      	sxtb	r3, r3
 8002a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a92:	d103      	bne.n	8002a9c <vQueueWaitForMessageRestricted+0x40>
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a9c:	f001 fe2c 	bl	80046f8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	3324      	adds	r3, #36	@ 0x24
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	68b9      	ldr	r1, [r7, #8]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f000 fe89 	bl	80037c8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ab6:	6978      	ldr	r0, [r7, #20]
 8002ab8:	f7ff ff18 	bl	80028ec <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002abc:	20b9      	movs	r0, #185	@ 0xb9
 8002abe:	f7ff f905 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b08a      	sub	sp, #40	@ 0x28
 8002ace:	af04      	add	r7, sp, #16
 8002ad0:	60f8      	str	r0, [r7, #12]
 8002ad2:	60b9      	str	r1, [r7, #8]
 8002ad4:	607a      	str	r2, [r7, #4]
 8002ad6:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4618      	mov	r0, r3
 8002ade:	f001 fee5 	bl	80048ac <pvPortMalloc>
 8002ae2:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d013      	beq.n	8002b12 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002aea:	2068      	movs	r0, #104	@ 0x68
 8002aec:	f001 fede 	bl	80048ac <pvPortMalloc>
 8002af0:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002af8:	2268      	movs	r2, #104	@ 0x68
 8002afa:	2100      	movs	r1, #0
 8002afc:	6978      	ldr	r0, [r7, #20]
 8002afe:	f005 f863 	bl	8007bc8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b08:	e005      	b.n	8002b16 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b0a:	6938      	ldr	r0, [r7, #16]
 8002b0c:	f002 f806 	bl	8004b1c <vPortFree>
 8002b10:	e001      	b.n	8002b16 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d00d      	beq.n	8002b38 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	9303      	str	r3, [sp, #12]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	9301      	str	r3, [sp, #4]
 8002b28:	6a3b      	ldr	r3, [r7, #32]
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	687a      	ldr	r2, [r7, #4]
 8002b30:	68b9      	ldr	r1, [r7, #8]
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 f82d 	bl	8002b92 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002b38:	697b      	ldr	r3, [r7, #20]
    }
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b088      	sub	sp, #32
 8002b46:	af02      	add	r7, sp, #8
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
 8002b4e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	68b9      	ldr	r1, [r7, #8]
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f7ff ffb3 	bl	8002aca <prvCreateTask>
 8002b64:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d005      	beq.n	8002b78 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002b6c:	6938      	ldr	r0, [r7, #16]
 8002b6e:	f000 f8a1 	bl	8002cb4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002b72:	2301      	movs	r3, #1
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	e002      	b.n	8002b7e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	4619      	mov	r1, r3
 8002b82:	20c2      	movs	r0, #194	@ 0xc2
 8002b84:	f7ff f8de 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002b88:	697b      	ldr	r3, [r7, #20]
    }
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b088      	sub	sp, #32
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	461a      	mov	r2, r3
 8002baa:	21a5      	movs	r1, #165	@ 0xa5
 8002bac:	f005 f80c 	bl	8007bc8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	4413      	add	r3, r2
 8002bc0:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	f023 0307 	bic.w	r3, r3, #7
 8002bc8:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0307 	and.w	r3, r3, #7
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00b      	beq.n	8002bec <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd8:	f383 8811 	msr	BASEPRI, r3
 8002bdc:	f3bf 8f6f 	isb	sy
 8002be0:	f3bf 8f4f 	dsb	sy
 8002be4:	617b      	str	r3, [r7, #20]
}
 8002be6:	bf00      	nop
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01e      	beq.n	8002c30 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61fb      	str	r3, [r7, #28]
 8002bf6:	e012      	b.n	8002c1e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002bf8:	68ba      	ldr	r2, [r7, #8]
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	7819      	ldrb	r1, [r3, #0]
 8002c00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	3334      	adds	r3, #52	@ 0x34
 8002c08:	460a      	mov	r2, r1
 8002c0a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c0c:	68ba      	ldr	r2, [r7, #8]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	4413      	add	r3, r2
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d006      	beq.n	8002c26 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	61fb      	str	r3, [r7, #28]
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b13      	cmp	r3, #19
 8002c22:	d9e9      	bls.n	8002bf8 <prvInitialiseNewTask+0x66>
 8002c24:	e000      	b.n	8002c28 <prvInitialiseNewTask+0x96>
            {
                break;
 8002c26:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d90b      	bls.n	8002c4e <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	613b      	str	r3, [r7, #16]
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d901      	bls.n	8002c58 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c54:	2304      	movs	r3, #4
 8002c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c5c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c62:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c66:	3304      	adds	r3, #4
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7ff fb79 	bl	8002360 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c70:	3318      	adds	r3, #24
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fb74 	bl	8002360 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c7c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c80:	f1c3 0205 	rsb	r2, r3, #5
 8002c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c86:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c8c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	68f9      	ldr	r1, [r7, #12]
 8002c92:	69b8      	ldr	r0, [r7, #24]
 8002c94:	f001 fbc4 	bl	8004420 <pxPortInitialiseStack>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c9c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d002      	beq.n	8002caa <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ca8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002caa:	bf00      	nop
 8002cac:	3720      	adds	r7, #32
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002cb4:	b5b0      	push	{r4, r5, r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002cbc:	f001 fcec 	bl	8004698 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002cc0:	4b50      	ldr	r3, [pc, #320]	@ (8002e04 <prvAddNewTaskToReadyList+0x150>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	4a4f      	ldr	r2, [pc, #316]	@ (8002e04 <prvAddNewTaskToReadyList+0x150>)
 8002cc8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002cca:	4b4f      	ldr	r3, [pc, #316]	@ (8002e08 <prvAddNewTaskToReadyList+0x154>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002cd2:	4a4d      	ldr	r2, [pc, #308]	@ (8002e08 <prvAddNewTaskToReadyList+0x154>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002cd8:	4b4a      	ldr	r3, [pc, #296]	@ (8002e04 <prvAddNewTaskToReadyList+0x150>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d110      	bne.n	8002d02 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002ce0:	f000 ff54 	bl	8003b8c <prvInitialiseTaskLists>
 8002ce4:	e00d      	b.n	8002d02 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002ce6:	4b49      	ldr	r3, [pc, #292]	@ (8002e0c <prvAddNewTaskToReadyList+0x158>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d109      	bne.n	8002d02 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002cee:	4b46      	ldr	r3, [pc, #280]	@ (8002e08 <prvAddNewTaskToReadyList+0x154>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d802      	bhi.n	8002d02 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002cfc:	4a42      	ldr	r2, [pc, #264]	@ (8002e08 <prvAddNewTaskToReadyList+0x154>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002d02:	4b43      	ldr	r3, [pc, #268]	@ (8002e10 <prvAddNewTaskToReadyList+0x15c>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	3301      	adds	r3, #1
 8002d08:	4a41      	ldr	r2, [pc, #260]	@ (8002e10 <prvAddNewTaskToReadyList+0x15c>)
 8002d0a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d0c:	4b40      	ldr	r3, [pc, #256]	@ (8002e10 <prvAddNewTaskToReadyList+0x15c>)
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d016      	beq.n	8002d48 <prvAddNewTaskToReadyList+0x94>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff f885 	bl	8001e2c <SEGGER_SYSVIEW_OnTaskCreate>
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d32:	461d      	mov	r5, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461c      	mov	r4, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	1ae3      	subs	r3, r4, r3
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	462b      	mov	r3, r5
 8002d44:	f7fd fdf8 	bl	8000938 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff f8f2 	bl	8001f34 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d54:	2201      	movs	r2, #1
 8002d56:	409a      	lsls	r2, r3
 8002d58:	4b2e      	ldr	r3, [pc, #184]	@ (8002e14 <prvAddNewTaskToReadyList+0x160>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e14 <prvAddNewTaskToReadyList+0x160>)
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d66:	492c      	ldr	r1, [pc, #176]	@ (8002e18 <prvAddNewTaskToReadyList+0x164>)
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3304      	adds	r3, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	609a      	str	r2, [r3, #8]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	3204      	adds	r2, #4
 8002d8e:	605a      	str	r2, [r3, #4]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	1d1a      	adds	r2, r3, #4
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	609a      	str	r2, [r3, #8]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e18 <prvAddNewTaskToReadyList+0x164>)
 8002da6:	441a      	add	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	615a      	str	r2, [r3, #20]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db0:	4919      	ldr	r1, [pc, #100]	@ (8002e18 <prvAddNewTaskToReadyList+0x164>)
 8002db2:	4613      	mov	r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002dc2:	1c59      	adds	r1, r3, #1
 8002dc4:	4814      	ldr	r0, [pc, #80]	@ (8002e18 <prvAddNewTaskToReadyList+0x164>)
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4403      	add	r3, r0
 8002dd0:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002dd2:	f001 fc91 	bl	80046f8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e0c <prvAddNewTaskToReadyList+0x158>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00e      	beq.n	8002dfc <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002dde:	4b0a      	ldr	r3, [pc, #40]	@ (8002e08 <prvAddNewTaskToReadyList+0x154>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d207      	bcs.n	8002dfc <prvAddNewTaskToReadyList+0x148>
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <prvAddNewTaskToReadyList+0x168>)
 8002dee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df2:	601a      	str	r2, [r3, #0]
 8002df4:	f3bf 8f4f 	dsb	sy
 8002df8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002dfc:	bf00      	nop
 8002dfe:	3710      	adds	r7, #16
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bdb0      	pop	{r4, r5, r7, pc}
 8002e04:	20001074 	.word	0x20001074
 8002e08:	20000f9c 	.word	0x20000f9c
 8002e0c:	20001080 	.word	0x20001080
 8002e10:	20001090 	.word	0x20001090
 8002e14:	2000107c 	.word	0x2000107c
 8002e18:	20000fa0 	.word	0x20000fa0
 8002e1c:	e000ed04 	.word	0xe000ed04

08002e20 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b088      	sub	sp, #32
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8002e2c:	f001 fc34 	bl	8004698 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d102      	bne.n	8002e3c <vTaskDelete+0x1c>
 8002e36:	4b57      	ldr	r3, [pc, #348]	@ (8002f94 <vTaskDelete+0x174>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	e000      	b.n	8002e3e <vTaskDelete+0x1e>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	61bb      	str	r3, [r7, #24]
            configASSERT( pxTCB != NULL );
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10b      	bne.n	8002e5e <vTaskDelete+0x3e>
    __asm volatile
 8002e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4a:	f383 8811 	msr	BASEPRI, r3
 8002e4e:	f3bf 8f6f 	isb	sy
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	613b      	str	r3, [r7, #16]
}
 8002e58:	bf00      	nop
 8002e5a:	bf00      	nop
 8002e5c:	e7fd      	b.n	8002e5a <vTaskDelete+0x3a>

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	3304      	adds	r3, #4
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff faec 	bl	8002440 <uxListRemove>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d115      	bne.n	8002e9a <vTaskDelete+0x7a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e72:	4949      	ldr	r1, [pc, #292]	@ (8002f98 <vTaskDelete+0x178>)
 8002e74:	4613      	mov	r3, r2
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10a      	bne.n	8002e9a <vTaskDelete+0x7a>
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e88:	2201      	movs	r2, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	4b42      	ldr	r3, [pc, #264]	@ (8002f9c <vTaskDelete+0x17c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4013      	ands	r3, r2
 8002e96:	4a41      	ldr	r2, [pc, #260]	@ (8002f9c <vTaskDelete+0x17c>)
 8002e98:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d004      	beq.n	8002eac <vTaskDelete+0x8c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	3318      	adds	r3, #24
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff faca 	bl	8002440 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002eac:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa0 <vTaskDelete+0x180>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	4a3b      	ldr	r2, [pc, #236]	@ (8002fa0 <vTaskDelete+0x180>)
 8002eb4:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 8002eb6:	4b37      	ldr	r3, [pc, #220]	@ (8002f94 <vTaskDelete+0x174>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d101      	bne.n	8002ec4 <vTaskDelete+0xa4>
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e000      	b.n	8002ec6 <vTaskDelete+0xa6>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8002ec8:	4b36      	ldr	r3, [pc, #216]	@ (8002fa4 <vTaskDelete+0x184>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d01d      	beq.n	8002f0c <vTaskDelete+0xec>
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d01a      	beq.n	8002f0c <vTaskDelete+0xec>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	4619      	mov	r1, r3
 8002edc:	4832      	ldr	r0, [pc, #200]	@ (8002fa8 <vTaskDelete+0x188>)
 8002ede:	f7ff fa4e 	bl	800237e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002ee2:	4b32      	ldr	r3, [pc, #200]	@ (8002fac <vTaskDelete+0x18c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	4a30      	ldr	r2, [pc, #192]	@ (8002fac <vTaskDelete+0x18c>)
 8002eea:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7ff f8c2 	bl	8002078 <SEGGER_SYSVIEW_ShrinkId>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	20c3      	movs	r0, #195	@ 0xc3
 8002efa:	f7fe fb0f 	bl	800151c <SEGGER_SYSVIEW_RecordU32>
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fd fd81 	bl	8000a08 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8002f06:	2301      	movs	r3, #1
 8002f08:	61fb      	str	r3, [r7, #28]
 8002f0a:	e013      	b.n	8002f34 <vTaskDelete+0x114>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002f0c:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <vTaskDelete+0x190>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	4a27      	ldr	r2, [pc, #156]	@ (8002fb0 <vTaskDelete+0x190>)
 8002f14:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff f8ad 	bl	8002078 <SEGGER_SYSVIEW_ShrinkId>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4619      	mov	r1, r3
 8002f22:	20c3      	movs	r0, #195	@ 0xc3
 8002f24:	f7fe fafa 	bl	800151c <SEGGER_SYSVIEW_RecordU32>
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd fd6c 	bl	8000a08 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002f30:	f000 fef2 	bl	8003d18 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002f34:	f001 fbe0 	bl	80046f8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d002      	beq.n	8002f44 <vTaskDelete+0x124>
        {
            prvDeleteTCB( pxTCB );
 8002f3e:	69b8      	ldr	r0, [r7, #24]
 8002f40:	f000 feda 	bl	8003cf8 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8002f44:	4b17      	ldr	r3, [pc, #92]	@ (8002fa4 <vTaskDelete+0x184>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01c      	beq.n	8002f86 <vTaskDelete+0x166>
            {
                if( pxTCB == pxCurrentTCB )
 8002f4c:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <vTaskDelete+0x174>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d117      	bne.n	8002f86 <vTaskDelete+0x166>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8002f56:	4b17      	ldr	r3, [pc, #92]	@ (8002fb4 <vTaskDelete+0x194>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <vTaskDelete+0x156>
    __asm volatile
 8002f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f62:	f383 8811 	msr	BASEPRI, r3
 8002f66:	f3bf 8f6f 	isb	sy
 8002f6a:	f3bf 8f4f 	dsb	sy
 8002f6e:	60fb      	str	r3, [r7, #12]
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	e7fd      	b.n	8002f72 <vTaskDelete+0x152>
                    taskYIELD_WITHIN_API();
 8002f76:	4b10      	ldr	r3, [pc, #64]	@ (8002fb8 <vTaskDelete+0x198>)
 8002f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 8002f86:	20c3      	movs	r0, #195	@ 0xc3
 8002f88:	f7fe fea0 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002f8c:	bf00      	nop
 8002f8e:	3720      	adds	r7, #32
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	20000f9c 	.word	0x20000f9c
 8002f98:	20000fa0 	.word	0x20000fa0
 8002f9c:	2000107c 	.word	0x2000107c
 8002fa0:	20001090 	.word	0x20001090
 8002fa4:	20001080 	.word	0x20001080
 8002fa8:	20001048 	.word	0x20001048
 8002fac:	2000105c 	.word	0x2000105c
 8002fb0:	20001074 	.word	0x20001074
 8002fb4:	2000109c 	.word	0x2000109c
 8002fb8:	e000ed04 	.word	0xe000ed04

08002fbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b084      	sub	sp, #16
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d018      	beq.n	8003000 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8002fce:	f000 f8e1 	bl	8003194 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002fd2:	4b14      	ldr	r3, [pc, #80]	@ (8003024 <vTaskDelay+0x68>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d00b      	beq.n	8002ff2 <vTaskDelay+0x36>
    __asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	60bb      	str	r3, [r7, #8]
}
 8002fec:	bf00      	nop
 8002fee:	bf00      	nop
 8002ff0:	e7fd      	b.n	8002fee <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002ff2:	2100      	movs	r1, #0
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 fecb 	bl	8003d90 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ffa:	f000 f8d9 	bl	80031b0 <xTaskResumeAll>
 8002ffe:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8003006:	4b08      	ldr	r3, [pc, #32]	@ (8003028 <vTaskDelay+0x6c>)
 8003008:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	f3bf 8f4f 	dsb	sy
 8003012:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8003016:	20c5      	movs	r0, #197	@ 0xc5
 8003018:	f7fe fe58 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
    }
 800301c:	bf00      	nop
 800301e:	3710      	adds	r7, #16
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	2000109c 	.word	0x2000109c
 8003028:	e000ed04 	.word	0xe000ed04

0800302c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b08c      	sub	sp, #48	@ 0x30
 8003030:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003032:	2301      	movs	r3, #1
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 8003036:	2300      	movs	r3, #0
 8003038:	607b      	str	r3, [r7, #4]
 800303a:	f107 0308 	add.w	r3, r7, #8
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	605a      	str	r2, [r3, #4]
 8003044:	609a      	str	r2, [r3, #8]
 8003046:	60da      	str	r2, [r3, #12]
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003048:	2300      	movs	r3, #0
 800304a:	61bb      	str	r3, [r7, #24]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
 8003050:	e011      	b.n	8003076 <prvCreateIdleTasks+0x4a>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003052:	4a1f      	ldr	r2, [pc, #124]	@ (80030d0 <prvCreateIdleTasks+0xa4>)
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	7819      	ldrb	r1, [r3, #0]
 800305a:	1d3a      	adds	r2, r7, #4
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	4413      	add	r3, r2
 8003060:	460a      	mov	r2, r1
 8003062:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003064:	1d3a      	adds	r2, r7, #4
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d006      	beq.n	800307e <prvCreateIdleTasks+0x52>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	3301      	adds	r3, #1
 8003074:	61fb      	str	r3, [r7, #28]
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2b12      	cmp	r3, #18
 800307a:	d9ea      	bls.n	8003052 <prvCreateIdleTasks+0x26>
 800307c:	e000      	b.n	8003080 <prvCreateIdleTasks+0x54>
        {
            break;
 800307e:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 8003080:	1d3a      	adds	r2, r7, #4
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	4413      	add	r3, r2
 8003086:	2200      	movs	r2, #0
 8003088:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800308a:	2300      	movs	r3, #0
 800308c:	623b      	str	r3, [r7, #32]
 800308e:	e015      	b.n	80030bc <prvCreateIdleTasks+0x90>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 8003090:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <prvCreateIdleTasks+0xa8>)
 8003092:	61bb      	str	r3, [r7, #24]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	4a0f      	ldr	r2, [pc, #60]	@ (80030d8 <prvCreateIdleTasks+0xac>)
 800309a:	4413      	add	r3, r2
 800309c:	1d39      	adds	r1, r7, #4
 800309e:	9301      	str	r3, [sp, #4]
 80030a0:	2300      	movs	r3, #0
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2300      	movs	r3, #0
 80030a6:	2280      	movs	r2, #128	@ 0x80
 80030a8:	69b8      	ldr	r0, [r7, #24]
 80030aa:	f7ff fd4a 	bl	8002b42 <xTaskCreate>
 80030ae:	6278      	str	r0, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d106      	bne.n	80030c4 <prvCreateIdleTasks+0x98>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	3301      	adds	r3, #1
 80030ba:	623b      	str	r3, [r7, #32]
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	dde6      	ble.n	8003090 <prvCreateIdleTasks+0x64>
 80030c2:	e000      	b.n	80030c6 <prvCreateIdleTasks+0x9a>
        {
            break;
 80030c4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3728      	adds	r7, #40	@ 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	08008160 	.word	0x08008160
 80030d4:	08003b5d 	.word	0x08003b5d
 80030d8:	20001098 	.word	0x20001098

080030dc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80030e2:	f7ff ffa3 	bl	800302c <prvCreateIdleTasks>
 80030e6:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d102      	bne.n	80030f4 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 80030ee:	f000 fee1 	bl	8003eb4 <xTimerCreateTimerTask>
 80030f2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d126      	bne.n	8003148 <vTaskStartScheduler+0x6c>
    __asm volatile
 80030fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fe:	f383 8811 	msr	BASEPRI, r3
 8003102:	f3bf 8f6f 	isb	sy
 8003106:	f3bf 8f4f 	dsb	sy
 800310a:	60bb      	str	r3, [r7, #8]
}
 800310c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800310e:	4b1b      	ldr	r3, [pc, #108]	@ (800317c <vTaskStartScheduler+0xa0>)
 8003110:	f04f 32ff 	mov.w	r2, #4294967295
 8003114:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003116:	4b1a      	ldr	r3, [pc, #104]	@ (8003180 <vTaskStartScheduler+0xa4>)
 8003118:	2201      	movs	r2, #1
 800311a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800311c:	4b19      	ldr	r3, [pc, #100]	@ (8003184 <vTaskStartScheduler+0xa8>)
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003122:	f002 f811 	bl	8005148 <vConfigureTimerForRunTimeStats>

        traceTASK_SWITCHED_IN();
 8003126:	4b18      	ldr	r3, [pc, #96]	@ (8003188 <vTaskStartScheduler+0xac>)
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	4b18      	ldr	r3, [pc, #96]	@ (800318c <vTaskStartScheduler+0xb0>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d102      	bne.n	8003138 <vTaskStartScheduler+0x5c>
 8003132:	f7fe fe5f 	bl	8001df4 <SEGGER_SYSVIEW_OnIdle>
 8003136:	e004      	b.n	8003142 <vTaskStartScheduler+0x66>
 8003138:	4b14      	ldr	r3, [pc, #80]	@ (800318c <vTaskStartScheduler+0xb0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe feb7 	bl	8001eb0 <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003142:	f001 f9eb 	bl	800451c <xPortStartScheduler>
 8003146:	e00f      	b.n	8003168 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314e:	d10b      	bne.n	8003168 <vTaskStartScheduler+0x8c>
    __asm volatile
 8003150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003154:	f383 8811 	msr	BASEPRI, r3
 8003158:	f3bf 8f6f 	isb	sy
 800315c:	f3bf 8f4f 	dsb	sy
 8003160:	607b      	str	r3, [r7, #4]
}
 8003162:	bf00      	nop
 8003164:	bf00      	nop
 8003166:	e7fd      	b.n	8003164 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003168:	4b09      	ldr	r3, [pc, #36]	@ (8003190 <vTaskStartScheduler+0xb4>)
 800316a:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800316c:	20cd      	movs	r0, #205	@ 0xcd
 800316e:	f7fe fdad 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
}
 8003172:	bf00      	nop
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	20001094 	.word	0x20001094
 8003180:	20001080 	.word	0x20001080
 8003184:	20001078 	.word	0x20001078
 8003188:	20001098 	.word	0x20001098
 800318c:	20000f9c 	.word	0x20000f9c
 8003190:	20000000 	.word	0x20000000

08003194 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003198:	4b04      	ldr	r3, [pc, #16]	@ (80031ac <vTaskSuspendAll+0x18>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3301      	adds	r3, #1
 800319e:	4a03      	ldr	r2, [pc, #12]	@ (80031ac <vTaskSuspendAll+0x18>)
 80031a0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80031a2:	20cf      	movs	r0, #207	@ 0xcf
 80031a4:	f7fe fd92 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
}
 80031a8:	bf00      	nop
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	2000109c 	.word	0x2000109c

080031b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b088      	sub	sp, #32
 80031b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80031b6:	2300      	movs	r3, #0
 80031b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80031be:	f001 fa6b 	bl	8004698 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80031c2:	2300      	movs	r3, #0
 80031c4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80031c6:	4b7a      	ldr	r3, [pc, #488]	@ (80033b0 <xTaskResumeAll+0x200>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <xTaskResumeAll+0x36>
    __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	603b      	str	r3, [r7, #0]
}
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	e7fd      	b.n	80031e2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80031e6:	4b72      	ldr	r3, [pc, #456]	@ (80033b0 <xTaskResumeAll+0x200>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	4a70      	ldr	r2, [pc, #448]	@ (80033b0 <xTaskResumeAll+0x200>)
 80031ee:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80031f0:	4b6f      	ldr	r3, [pc, #444]	@ (80033b0 <xTaskResumeAll+0x200>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f040 80ce 	bne.w	8003396 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031fa:	4b6e      	ldr	r3, [pc, #440]	@ (80033b4 <xTaskResumeAll+0x204>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80c9 	beq.w	8003396 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003204:	e092      	b.n	800332c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003206:	4b6c      	ldr	r3, [pc, #432]	@ (80033b8 <xTaskResumeAll+0x208>)
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	69fa      	ldr	r2, [r7, #28]
 800321a:	6a12      	ldr	r2, [r2, #32]
 800321c:	609a      	str	r2, [r3, #8]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	69d2      	ldr	r2, [r2, #28]
 8003226:	605a      	str	r2, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	3318      	adds	r3, #24
 8003230:	429a      	cmp	r2, r3
 8003232:	d103      	bne.n	800323c <xTaskResumeAll+0x8c>
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	605a      	str	r2, [r3, #4]
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	2200      	movs	r2, #0
 8003240:	629a      	str	r2, [r3, #40]	@ 0x28
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	1e5a      	subs	r2, r3, #1
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	69fa      	ldr	r2, [r7, #28]
 8003258:	68d2      	ldr	r2, [r2, #12]
 800325a:	609a      	str	r2, [r3, #8]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	69fa      	ldr	r2, [r7, #28]
 8003262:	6892      	ldr	r2, [r2, #8]
 8003264:	605a      	str	r2, [r3, #4]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3304      	adds	r3, #4
 800326e:	429a      	cmp	r2, r3
 8003270:	d103      	bne.n	800327a <xTaskResumeAll+0xca>
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	68da      	ldr	r2, [r3, #12]
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	605a      	str	r2, [r3, #4]
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	2200      	movs	r2, #0
 800327e:	615a      	str	r2, [r3, #20]
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	1e5a      	subs	r2, r3, #1
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	4618      	mov	r0, r3
 800328e:	f7fe fe51 	bl	8001f34 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003296:	2201      	movs	r2, #1
 8003298:	409a      	lsls	r2, r3
 800329a:	4b48      	ldr	r3, [pc, #288]	@ (80033bc <xTaskResumeAll+0x20c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4313      	orrs	r3, r2
 80032a0:	4a46      	ldr	r2, [pc, #280]	@ (80033bc <xTaskResumeAll+0x20c>)
 80032a2:	6013      	str	r3, [r2, #0]
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032a8:	4945      	ldr	r1, [pc, #276]	@ (80033c0 <xTaskResumeAll+0x210>)
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3304      	adds	r3, #4
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	607b      	str	r3, [r7, #4]
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689a      	ldr	r2, [r3, #8]
 80032c4:	69fb      	ldr	r3, [r7, #28]
 80032c6:	60da      	str	r2, [r3, #12]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	3204      	adds	r2, #4
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	1d1a      	adds	r2, r3, #4
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	609a      	str	r2, [r3, #8]
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4a36      	ldr	r2, [pc, #216]	@ (80033c0 <xTaskResumeAll+0x210>)
 80032e8:	441a      	add	r2, r3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	615a      	str	r2, [r3, #20]
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f2:	4933      	ldr	r1, [pc, #204]	@ (80033c0 <xTaskResumeAll+0x210>)
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003304:	1c59      	adds	r1, r3, #1
 8003306:	482e      	ldr	r0, [pc, #184]	@ (80033c0 <xTaskResumeAll+0x210>)
 8003308:	4613      	mov	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	4403      	add	r3, r0
 8003312:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003318:	4b2a      	ldr	r3, [pc, #168]	@ (80033c4 <xTaskResumeAll+0x214>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	429a      	cmp	r2, r3
 8003320:	d904      	bls.n	800332c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003322:	4a29      	ldr	r2, [pc, #164]	@ (80033c8 <xTaskResumeAll+0x218>)
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	2101      	movs	r1, #1
 8003328:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800332c:	4b22      	ldr	r3, [pc, #136]	@ (80033b8 <xTaskResumeAll+0x208>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f af68 	bne.w	8003206 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800333c:	f000 fcec 	bl	8003d18 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003340:	4b22      	ldr	r3, [pc, #136]	@ (80033cc <xTaskResumeAll+0x21c>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d012      	beq.n	8003372 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800334c:	f000 f86a 	bl	8003424 <xTaskIncrementTick>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d004      	beq.n	8003360 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003356:	4a1c      	ldr	r2, [pc, #112]	@ (80033c8 <xTaskResumeAll+0x218>)
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	2101      	movs	r1, #1
 800335c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	3b01      	subs	r3, #1
 8003364:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ef      	bne.n	800334c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 800336c:	4b17      	ldr	r3, [pc, #92]	@ (80033cc <xTaskResumeAll+0x21c>)
 800336e:	2200      	movs	r2, #0
 8003370:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003372:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <xTaskResumeAll+0x218>)
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800337e:	2301      	movs	r3, #1
 8003380:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003382:	4b10      	ldr	r3, [pc, #64]	@ (80033c4 <xTaskResumeAll+0x214>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4b12      	ldr	r3, [pc, #72]	@ (80033d0 <xTaskResumeAll+0x220>)
 8003388:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	f3bf 8f4f 	dsb	sy
 8003392:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003396:	f001 f9af 	bl	80046f8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	4619      	mov	r1, r3
 800339e:	20d0      	movs	r0, #208	@ 0xd0
 80033a0:	f7fe fcd0 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80033a4:	69bb      	ldr	r3, [r7, #24]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3720      	adds	r7, #32
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	2000109c 	.word	0x2000109c
 80033b4:	20001074 	.word	0x20001074
 80033b8:	20001034 	.word	0x20001034
 80033bc:	2000107c 	.word	0x2000107c
 80033c0:	20000fa0 	.word	0x20000fa0
 80033c4:	20000f9c 	.word	0x20000f9c
 80033c8:	20001088 	.word	0x20001088
 80033cc:	20001084 	.word	0x20001084
 80033d0:	e000ed04 	.word	0xe000ed04

080033d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033da:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <xTaskGetTickCount+0x20>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	20d1      	movs	r0, #209	@ 0xd1
 80033e4:	f7fe fcae 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 80033e8:	687b      	ldr	r3, [r7, #4]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20001078 	.word	0x20001078

080033f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033fe:	f001 fa15 	bl	800482c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003402:	2300      	movs	r3, #0
 8003404:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <xTaskGetTickCountFromISR+0x28>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800340c:	6839      	ldr	r1, [r7, #0]
 800340e:	20d2      	movs	r0, #210	@ 0xd2
 8003410:	f7fe fc98 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003414:	683b      	ldr	r3, [r7, #0]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3708      	adds	r7, #8
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20001078 	.word	0x20001078

08003424 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	@ 0x28
 8003428:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800342a:	2300      	movs	r3, #0
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800342e:	4b83      	ldr	r3, [pc, #524]	@ (800363c <xTaskIncrementTick+0x218>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	f040 80f3 	bne.w	800361e <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003438:	4b81      	ldr	r3, [pc, #516]	@ (8003640 <xTaskIncrementTick+0x21c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003440:	4a7f      	ldr	r2, [pc, #508]	@ (8003640 <xTaskIncrementTick+0x21c>)
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003446:	6a3b      	ldr	r3, [r7, #32]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d121      	bne.n	8003490 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800344c:	4b7d      	ldr	r3, [pc, #500]	@ (8003644 <xTaskIncrementTick+0x220>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <xTaskIncrementTick+0x4a>
    __asm volatile
 8003456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	607b      	str	r3, [r7, #4]
}
 8003468:	bf00      	nop
 800346a:	bf00      	nop
 800346c:	e7fd      	b.n	800346a <xTaskIncrementTick+0x46>
 800346e:	4b75      	ldr	r3, [pc, #468]	@ (8003644 <xTaskIncrementTick+0x220>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	61fb      	str	r3, [r7, #28]
 8003474:	4b74      	ldr	r3, [pc, #464]	@ (8003648 <xTaskIncrementTick+0x224>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a72      	ldr	r2, [pc, #456]	@ (8003644 <xTaskIncrementTick+0x220>)
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4a72      	ldr	r2, [pc, #456]	@ (8003648 <xTaskIncrementTick+0x224>)
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b72      	ldr	r3, [pc, #456]	@ (800364c <xTaskIncrementTick+0x228>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	3301      	adds	r3, #1
 8003488:	4a70      	ldr	r2, [pc, #448]	@ (800364c <xTaskIncrementTick+0x228>)
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	f000 fc44 	bl	8003d18 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003490:	4b6f      	ldr	r3, [pc, #444]	@ (8003650 <xTaskIncrementTick+0x22c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6a3a      	ldr	r2, [r7, #32]
 8003496:	429a      	cmp	r2, r3
 8003498:	f0c0 80ac 	bcc.w	80035f4 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800349c:	4b69      	ldr	r3, [pc, #420]	@ (8003644 <xTaskIncrementTick+0x220>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d104      	bne.n	80034b0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 80034a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003650 <xTaskIncrementTick+0x22c>)
 80034a8:	f04f 32ff 	mov.w	r2, #4294967295
 80034ac:	601a      	str	r2, [r3, #0]
                    break;
 80034ae:	e0a1      	b.n	80035f4 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034b0:	4b64      	ldr	r3, [pc, #400]	@ (8003644 <xTaskIncrementTick+0x220>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80034c0:	6a3a      	ldr	r2, [r7, #32]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d203      	bcs.n	80034d0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80034c8:	4a61      	ldr	r2, [pc, #388]	@ (8003650 <xTaskIncrementTick+0x22c>)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	6013      	str	r3, [r2, #0]
                        break;
 80034ce:	e091      	b.n	80035f4 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	68d2      	ldr	r2, [r2, #12]
 80034de:	609a      	str	r2, [r3, #8]
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	6892      	ldr	r2, [r2, #8]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	685a      	ldr	r2, [r3, #4]
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	3304      	adds	r3, #4
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d103      	bne.n	80034fe <xTaskIncrementTick+0xda>
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	2200      	movs	r2, #0
 8003502:	615a      	str	r2, [r3, #20]
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	1e5a      	subs	r2, r3, #1
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800350e:	69bb      	ldr	r3, [r7, #24]
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	2b00      	cmp	r3, #0
 8003514:	d01e      	beq.n	8003554 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	6a12      	ldr	r2, [r2, #32]
 8003524:	609a      	str	r2, [r3, #8]
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	69d2      	ldr	r2, [r2, #28]
 800352e:	605a      	str	r2, [r3, #4]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	3318      	adds	r3, #24
 8003538:	429a      	cmp	r2, r3
 800353a:	d103      	bne.n	8003544 <xTaskIncrementTick+0x120>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	6a1a      	ldr	r2, [r3, #32]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	605a      	str	r2, [r3, #4]
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2200      	movs	r2, #0
 8003548:	629a      	str	r2, [r3, #40]	@ 0x28
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	1e5a      	subs	r2, r3, #1
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fcec 	bl	8001f34 <SEGGER_SYSVIEW_OnTaskStartReady>
 800355c:	69bb      	ldr	r3, [r7, #24]
 800355e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003560:	2201      	movs	r2, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	4b3b      	ldr	r3, [pc, #236]	@ (8003654 <xTaskIncrementTick+0x230>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4313      	orrs	r3, r2
 800356a:	4a3a      	ldr	r2, [pc, #232]	@ (8003654 <xTaskIncrementTick+0x230>)
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003572:	4939      	ldr	r1, [pc, #228]	@ (8003658 <xTaskIncrementTick+0x234>)
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3304      	adds	r3, #4
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	60bb      	str	r3, [r7, #8]
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	68ba      	ldr	r2, [r7, #8]
 8003588:	609a      	str	r2, [r3, #8]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	689a      	ldr	r2, [r3, #8]
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	3204      	adds	r2, #4
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1d1a      	adds	r2, r3, #4
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	609a      	str	r2, [r3, #8]
 80035a4:	69bb      	ldr	r3, [r7, #24]
 80035a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4a29      	ldr	r2, [pc, #164]	@ (8003658 <xTaskIncrementTick+0x234>)
 80035b2:	441a      	add	r2, r3
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	615a      	str	r2, [r3, #20]
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035bc:	4926      	ldr	r1, [pc, #152]	@ (8003658 <xTaskIncrementTick+0x234>)
 80035be:	4613      	mov	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	4413      	add	r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80035ce:	1c59      	adds	r1, r3, #1
 80035d0:	4821      	ldr	r0, [pc, #132]	@ (8003658 <xTaskIncrementTick+0x234>)
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4403      	add	r3, r0
 80035dc:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035de:	69bb      	ldr	r3, [r7, #24]
 80035e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035e2:	4b1e      	ldr	r3, [pc, #120]	@ (800365c <xTaskIncrementTick+0x238>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e8:	429a      	cmp	r2, r3
 80035ea:	f67f af57 	bls.w	800349c <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 80035ee:	2301      	movs	r3, #1
 80035f0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035f2:	e753      	b.n	800349c <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 80035f4:	4b19      	ldr	r3, [pc, #100]	@ (800365c <xTaskIncrementTick+0x238>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fa:	4917      	ldr	r1, [pc, #92]	@ (8003658 <xTaskIncrementTick+0x234>)
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b01      	cmp	r3, #1
 800360a:	d901      	bls.n	8003610 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003610:	4b13      	ldr	r3, [pc, #76]	@ (8003660 <xTaskIncrementTick+0x23c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d007      	beq.n	8003628 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003618:	2301      	movs	r3, #1
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
 800361c:	e004      	b.n	8003628 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800361e:	4b11      	ldr	r3, [pc, #68]	@ (8003664 <xTaskIncrementTick+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	3301      	adds	r3, #1
 8003624:	4a0f      	ldr	r2, [pc, #60]	@ (8003664 <xTaskIncrementTick+0x240>)
 8003626:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800362a:	4619      	mov	r1, r3
 800362c:	20db      	movs	r0, #219	@ 0xdb
 800362e:	f7fe fb89 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003634:	4618      	mov	r0, r3
 8003636:	3728      	adds	r7, #40	@ 0x28
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	2000109c 	.word	0x2000109c
 8003640:	20001078 	.word	0x20001078
 8003644:	2000102c 	.word	0x2000102c
 8003648:	20001030 	.word	0x20001030
 800364c:	2000108c 	.word	0x2000108c
 8003650:	20001094 	.word	0x20001094
 8003654:	2000107c 	.word	0x2000107c
 8003658:	20000fa0 	.word	0x20000fa0
 800365c:	20000f9c 	.word	0x20000f9c
 8003660:	20001088 	.word	0x20001088
 8003664:	20001084 	.word	0x20001084

08003668 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800366e:	4b3a      	ldr	r3, [pc, #232]	@ (8003758 <vTaskSwitchContext+0xf0>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003676:	4b39      	ldr	r3, [pc, #228]	@ (800375c <vTaskSwitchContext+0xf4>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800367c:	e068      	b.n	8003750 <vTaskSwitchContext+0xe8>
            xYieldPendings[ 0 ] = pdFALSE;
 800367e:	4b37      	ldr	r3, [pc, #220]	@ (800375c <vTaskSwitchContext+0xf4>)
 8003680:	2200      	movs	r2, #0
 8003682:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8003684:	f001 fd8a 	bl	800519c <ulGetRunTimeCounterValue>
 8003688:	4603      	mov	r3, r0
 800368a:	4a35      	ldr	r2, [pc, #212]	@ (8003760 <vTaskSwitchContext+0xf8>)
 800368c:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 800368e:	4b34      	ldr	r3, [pc, #208]	@ (8003760 <vTaskSwitchContext+0xf8>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b34      	ldr	r3, [pc, #208]	@ (8003764 <vTaskSwitchContext+0xfc>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	429a      	cmp	r2, r3
 8003698:	d909      	bls.n	80036ae <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 800369a:	4b31      	ldr	r3, [pc, #196]	@ (8003760 <vTaskSwitchContext+0xf8>)
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b31      	ldr	r3, [pc, #196]	@ (8003764 <vTaskSwitchContext+0xfc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	1ad1      	subs	r1, r2, r3
 80036a4:	4b30      	ldr	r3, [pc, #192]	@ (8003768 <vTaskSwitchContext+0x100>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036aa:	440a      	add	r2, r1
 80036ac:	65da      	str	r2, [r3, #92]	@ 0x5c
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 80036ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003760 <vTaskSwitchContext+0xf8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a2c      	ldr	r2, [pc, #176]	@ (8003764 <vTaskSwitchContext+0xfc>)
 80036b4:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80036b6:	4b2d      	ldr	r3, [pc, #180]	@ (800376c <vTaskSwitchContext+0x104>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	fab3 f383 	clz	r3, r3
 80036c2:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80036c4:	7afb      	ldrb	r3, [r7, #11]
 80036c6:	f1c3 031f 	rsb	r3, r3, #31
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	4928      	ldr	r1, [pc, #160]	@ (8003770 <vTaskSwitchContext+0x108>)
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4613      	mov	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4413      	add	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d10b      	bne.n	80036f8 <vTaskSwitchContext+0x90>
    __asm volatile
 80036e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e4:	f383 8811 	msr	BASEPRI, r3
 80036e8:	f3bf 8f6f 	isb	sy
 80036ec:	f3bf 8f4f 	dsb	sy
 80036f0:	607b      	str	r3, [r7, #4]
}
 80036f2:	bf00      	nop
 80036f4:	bf00      	nop
 80036f6:	e7fd      	b.n	80036f4 <vTaskSwitchContext+0x8c>
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4a1b      	ldr	r2, [pc, #108]	@ (8003770 <vTaskSwitchContext+0x108>)
 8003704:	4413      	add	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	685a      	ldr	r2, [r3, #4]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3308      	adds	r3, #8
 800371a:	429a      	cmp	r2, r3
 800371c:	d103      	bne.n	8003726 <vTaskSwitchContext+0xbe>
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4a0e      	ldr	r2, [pc, #56]	@ (8003768 <vTaskSwitchContext+0x100>)
 800372e:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8003730:	4b10      	ldr	r3, [pc, #64]	@ (8003774 <vTaskSwitchContext+0x10c>)
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <vTaskSwitchContext+0x100>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	429a      	cmp	r2, r3
 800373a:	d102      	bne.n	8003742 <vTaskSwitchContext+0xda>
 800373c:	f7fe fb5a 	bl	8001df4 <SEGGER_SYSVIEW_OnIdle>
 8003740:	e004      	b.n	800374c <vTaskSwitchContext+0xe4>
 8003742:	4b09      	ldr	r3, [pc, #36]	@ (8003768 <vTaskSwitchContext+0x100>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fe fbb2 	bl	8001eb0 <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 800374c:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <vTaskSwitchContext+0x100>)
 800374e:	681b      	ldr	r3, [r3, #0]
    }
 8003750:	bf00      	nop
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	2000109c 	.word	0x2000109c
 800375c:	20001088 	.word	0x20001088
 8003760:	200010a4 	.word	0x200010a4
 8003764:	200010a0 	.word	0x200010a0
 8003768:	20000f9c 	.word	0x20000f9c
 800376c:	2000107c 	.word	0x2000107c
 8003770:	20000fa0 	.word	0x20000fa0
 8003774:	20001098 	.word	0x20001098

08003778 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378c:	f383 8811 	msr	BASEPRI, r3
 8003790:	f3bf 8f6f 	isb	sy
 8003794:	f3bf 8f4f 	dsb	sy
 8003798:	60fb      	str	r3, [r7, #12]
}
 800379a:	bf00      	nop
 800379c:	bf00      	nop
 800379e:	e7fd      	b.n	800379c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037a0:	4b08      	ldr	r3, [pc, #32]	@ (80037c4 <vTaskPlaceOnEventList+0x4c>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3318      	adds	r3, #24
 80037a6:	4619      	mov	r1, r3
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7fe fe0e 	bl	80023ca <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80037ae:	2101      	movs	r1, #1
 80037b0:	6838      	ldr	r0, [r7, #0]
 80037b2:	f000 faed 	bl	8003d90 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80037b6:	20e1      	movs	r0, #225	@ 0xe1
 80037b8:	f7fe fa88 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
}
 80037bc:	bf00      	nop
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	20000f9c 	.word	0x20000f9c

080037c8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10b      	bne.n	80037f2 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80037da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037de:	f383 8811 	msr	BASEPRI, r3
 80037e2:	f3bf 8f6f 	isb	sy
 80037e6:	f3bf 8f4f 	dsb	sy
 80037ea:	613b      	str	r3, [r7, #16]
}
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	e7fd      	b.n	80037ee <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	4b17      	ldr	r3, [pc, #92]	@ (8003858 <vTaskPlaceOnEventListRestricted+0x90>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	697a      	ldr	r2, [r7, #20]
 80037fe:	61da      	str	r2, [r3, #28]
 8003800:	4b15      	ldr	r3, [pc, #84]	@ (8003858 <vTaskPlaceOnEventListRestricted+0x90>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	6892      	ldr	r2, [r2, #8]
 8003808:	621a      	str	r2, [r3, #32]
 800380a:	4b13      	ldr	r3, [pc, #76]	@ (8003858 <vTaskPlaceOnEventListRestricted+0x90>)
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	3218      	adds	r2, #24
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <vTaskPlaceOnEventListRestricted+0x90>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f103 0218 	add.w	r2, r3, #24
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	609a      	str	r2, [r3, #8]
 8003822:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <vTaskPlaceOnEventListRestricted+0x90>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	629a      	str	r2, [r3, #40]	@ 0x28
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d002      	beq.n	8003840 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800383a:	f04f 33ff 	mov.w	r3, #4294967295
 800383e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	68b8      	ldr	r0, [r7, #8]
 8003844:	f000 faa4 	bl	8003d90 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003848:	20e3      	movs	r0, #227	@ 0xe3
 800384a:	f7fe fa3f 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
    }
 800384e:	bf00      	nop
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000f9c 	.word	0x20000f9c

0800385c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	@ 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800386c:	6a3b      	ldr	r3, [r7, #32]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10b      	bne.n	800388a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003876:	f383 8811 	msr	BASEPRI, r3
 800387a:	f3bf 8f6f 	isb	sy
 800387e:	f3bf 8f4f 	dsb	sy
 8003882:	60fb      	str	r3, [r7, #12]
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	e7fd      	b.n	8003886 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800388a:	6a3b      	ldr	r3, [r7, #32]
 800388c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800388e:	61fb      	str	r3, [r7, #28]
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	6a12      	ldr	r2, [r2, #32]
 8003898:	609a      	str	r2, [r3, #8]
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	6a3a      	ldr	r2, [r7, #32]
 80038a0:	69d2      	ldr	r2, [r2, #28]
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	3318      	adds	r3, #24
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d103      	bne.n	80038b8 <xTaskRemoveFromEventList+0x5c>
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	6a1a      	ldr	r2, [r3, #32]
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	605a      	str	r2, [r3, #4]
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	2200      	movs	r2, #0
 80038bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	1e5a      	subs	r2, r3, #1
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80038c8:	4b4e      	ldr	r3, [pc, #312]	@ (8003a04 <xTaskRemoveFromEventList+0x1a8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d164      	bne.n	800399a <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	6a3b      	ldr	r3, [r7, #32]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	6a3a      	ldr	r2, [r7, #32]
 80038dc:	68d2      	ldr	r2, [r2, #12]
 80038de:	609a      	str	r2, [r3, #8]
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	6a3a      	ldr	r2, [r7, #32]
 80038e6:	6892      	ldr	r2, [r2, #8]
 80038e8:	605a      	str	r2, [r3, #4]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	6a3b      	ldr	r3, [r7, #32]
 80038f0:	3304      	adds	r3, #4
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d103      	bne.n	80038fe <xTaskRemoveFromEventList+0xa2>
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	68da      	ldr	r2, [r3, #12]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	605a      	str	r2, [r3, #4]
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	2200      	movs	r2, #0
 8003902:	615a      	str	r2, [r3, #20]
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	1e5a      	subs	r2, r3, #1
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fb0f 	bl	8001f34 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391a:	2201      	movs	r2, #1
 800391c:	409a      	lsls	r2, r3
 800391e:	4b3a      	ldr	r3, [pc, #232]	@ (8003a08 <xTaskRemoveFromEventList+0x1ac>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4313      	orrs	r3, r2
 8003924:	4a38      	ldr	r2, [pc, #224]	@ (8003a08 <xTaskRemoveFromEventList+0x1ac>)
 8003926:	6013      	str	r3, [r2, #0]
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800392c:	4937      	ldr	r1, [pc, #220]	@ (8003a0c <xTaskRemoveFromEventList+0x1b0>)
 800392e:	4613      	mov	r3, r2
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	3304      	adds	r3, #4
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	613b      	str	r3, [r7, #16]
 800393e:	6a3b      	ldr	r3, [r7, #32]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	609a      	str	r2, [r3, #8]
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	6a3b      	ldr	r3, [r7, #32]
 800394a:	60da      	str	r2, [r3, #12]
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	6a3a      	ldr	r2, [r7, #32]
 8003952:	3204      	adds	r2, #4
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	6a3b      	ldr	r3, [r7, #32]
 8003958:	1d1a      	adds	r2, r3, #4
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	6a3b      	ldr	r3, [r7, #32]
 8003960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003962:	4613      	mov	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	4413      	add	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4a28      	ldr	r2, [pc, #160]	@ (8003a0c <xTaskRemoveFromEventList+0x1b0>)
 800396c:	441a      	add	r2, r3
 800396e:	6a3b      	ldr	r3, [r7, #32]
 8003970:	615a      	str	r2, [r3, #20]
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003976:	4925      	ldr	r1, [pc, #148]	@ (8003a0c <xTaskRemoveFromEventList+0x1b0>)
 8003978:	4613      	mov	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4413      	add	r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	6a3a      	ldr	r2, [r7, #32]
 8003986:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003988:	1c59      	adds	r1, r3, #1
 800398a:	4820      	ldr	r0, [pc, #128]	@ (8003a0c <xTaskRemoveFromEventList+0x1b0>)
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4403      	add	r3, r0
 8003996:	6019      	str	r1, [r3, #0]
 8003998:	e01b      	b.n	80039d2 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800399a:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <xTaskRemoveFromEventList+0x1b4>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	61bb      	str	r3, [r7, #24]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	61da      	str	r2, [r3, #28]
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	689a      	ldr	r2, [r3, #8]
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	621a      	str	r2, [r3, #32]
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	6a3a      	ldr	r2, [r7, #32]
 80039b4:	3218      	adds	r2, #24
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	f103 0218 	add.w	r2, r3, #24
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	4a12      	ldr	r2, [pc, #72]	@ (8003a10 <xTaskRemoveFromEventList+0x1b4>)
 80039c6:	629a      	str	r2, [r3, #40]	@ 0x28
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <xTaskRemoveFromEventList+0x1b4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	3301      	adds	r3, #1
 80039ce:	4a10      	ldr	r2, [pc, #64]	@ (8003a10 <xTaskRemoveFromEventList+0x1b4>)
 80039d0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039d2:	6a3b      	ldr	r3, [r7, #32]
 80039d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a14 <xTaskRemoveFromEventList+0x1b8>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	429a      	cmp	r2, r3
 80039de:	d905      	bls.n	80039ec <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80039e0:	2301      	movs	r3, #1
 80039e2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80039e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a18 <xTaskRemoveFromEventList+0x1bc>)
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e001      	b.n	80039f0 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80039f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f2:	4619      	mov	r1, r3
 80039f4:	20e4      	movs	r0, #228	@ 0xe4
 80039f6:	f7fe f9a5 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3728      	adds	r7, #40	@ 0x28
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	2000109c 	.word	0x2000109c
 8003a08:	2000107c 	.word	0x2000107c
 8003a0c:	20000fa0 	.word	0x20000fa0
 8003a10:	20001034 	.word	0x20001034
 8003a14:	20000f9c 	.word	0x20000f9c
 8003a18:	20001088 	.word	0x20001088

08003a1c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a24:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <vTaskInternalSetTimeOutState+0x28>)
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003a2c:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <vTaskInternalSetTimeOutState+0x2c>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003a34:	20e7      	movs	r0, #231	@ 0xe7
 8003a36:	f7fe f949 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	2000108c 	.word	0x2000108c
 8003a48:	20001078 	.word	0x20001078

08003a4c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b088      	sub	sp, #32
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d10b      	bne.n	8003a74 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8003a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a60:	f383 8811 	msr	BASEPRI, r3
 8003a64:	f3bf 8f6f 	isb	sy
 8003a68:	f3bf 8f4f 	dsb	sy
 8003a6c:	613b      	str	r3, [r7, #16]
}
 8003a6e:	bf00      	nop
 8003a70:	bf00      	nop
 8003a72:	e7fd      	b.n	8003a70 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d10b      	bne.n	8003a92 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	60fb      	str	r3, [r7, #12]
}
 8003a8c:	bf00      	nop
 8003a8e:	bf00      	nop
 8003a90:	e7fd      	b.n	8003a8e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003a92:	f000 fe01 	bl	8004698 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003a96:	4b28      	ldr	r3, [pc, #160]	@ (8003b38 <xTaskCheckForTimeOut+0xec>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 8003aa6:	4b25      	ldr	r3, [pc, #148]	@ (8003b3c <xTaskCheckForTimeOut+0xf0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d007      	beq.n	8003ac2 <xTaskCheckForTimeOut+0x76>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 8003ab2:	4b22      	ldr	r3, [pc, #136]	@ (8003b3c <xTaskCheckForTimeOut+0xf0>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
                xReturn = pdTRUE;
 8003abc:	2301      	movs	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
 8003ac0:	e02e      	b.n	8003b20 <xTaskCheckForTimeOut+0xd4>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d102      	bne.n	8003ad2 <xTaskCheckForTimeOut+0x86>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003acc:	2300      	movs	r3, #0
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e026      	b.n	8003b20 <xTaskCheckForTimeOut+0xd4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	4b1a      	ldr	r3, [pc, #104]	@ (8003b40 <xTaskCheckForTimeOut+0xf4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d00a      	beq.n	8003af4 <xTaskCheckForTimeOut+0xa8>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d305      	bcc.n	8003af4 <xTaskCheckForTimeOut+0xa8>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e015      	b.n	8003b20 <xTaskCheckForTimeOut+0xd4>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d20b      	bcs.n	8003b16 <xTaskCheckForTimeOut+0xca>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	1ad2      	subs	r2, r2, r3
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff ff86 	bl	8003a1c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b10:	2300      	movs	r3, #0
 8003b12:	61fb      	str	r3, [r7, #28]
 8003b14:	e004      	b.n	8003b20 <xTaskCheckForTimeOut+0xd4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b20:	f000 fdea 	bl	80046f8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	4619      	mov	r1, r3
 8003b28:	20e8      	movs	r0, #232	@ 0xe8
 8003b2a:	f7fe f90b 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20001078 	.word	0x20001078
 8003b3c:	20000f9c 	.word	0x20000f9c
 8003b40:	2000108c 	.word	0x2000108c

08003b44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003b48:	4b03      	ldr	r3, [pc, #12]	@ (8003b58 <vTaskMissedYield+0x14>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8003b4e:	20e9      	movs	r0, #233	@ 0xe9
 8003b50:	f7fe f8bc 	bl	8001ccc <SEGGER_SYSVIEW_RecordEndCall>
}
 8003b54:	bf00      	nop
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	20001088 	.word	0x20001088

08003b5c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003b64:	f000 f852 	bl	8003c0c <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003b68:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <prvIdleTask+0x28>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d9f9      	bls.n	8003b64 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003b70:	4b05      	ldr	r3, [pc, #20]	@ (8003b88 <prvIdleTask+0x2c>)
 8003b72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003b80:	e7f0      	b.n	8003b64 <prvIdleTask+0x8>
 8003b82:	bf00      	nop
 8003b84:	20000fa0 	.word	0x20000fa0
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b92:	2300      	movs	r3, #0
 8003b94:	607b      	str	r3, [r7, #4]
 8003b96:	e00c      	b.n	8003bb2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4a12      	ldr	r2, [pc, #72]	@ (8003bec <prvInitialiseTaskLists+0x60>)
 8003ba4:	4413      	add	r3, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7fe fbb8 	bl	800231c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	607b      	str	r3, [r7, #4]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d9ef      	bls.n	8003b98 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003bb8:	480d      	ldr	r0, [pc, #52]	@ (8003bf0 <prvInitialiseTaskLists+0x64>)
 8003bba:	f7fe fbaf 	bl	800231c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003bbe:	480d      	ldr	r0, [pc, #52]	@ (8003bf4 <prvInitialiseTaskLists+0x68>)
 8003bc0:	f7fe fbac 	bl	800231c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003bc4:	480c      	ldr	r0, [pc, #48]	@ (8003bf8 <prvInitialiseTaskLists+0x6c>)
 8003bc6:	f7fe fba9 	bl	800231c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003bca:	480c      	ldr	r0, [pc, #48]	@ (8003bfc <prvInitialiseTaskLists+0x70>)
 8003bcc:	f7fe fba6 	bl	800231c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003bd0:	480b      	ldr	r0, [pc, #44]	@ (8003c00 <prvInitialiseTaskLists+0x74>)
 8003bd2:	f7fe fba3 	bl	800231c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c04 <prvInitialiseTaskLists+0x78>)
 8003bd8:	4a05      	ldr	r2, [pc, #20]	@ (8003bf0 <prvInitialiseTaskLists+0x64>)
 8003bda:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003c08 <prvInitialiseTaskLists+0x7c>)
 8003bde:	4a05      	ldr	r2, [pc, #20]	@ (8003bf4 <prvInitialiseTaskLists+0x68>)
 8003be0:	601a      	str	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	3708      	adds	r7, #8
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000fa0 	.word	0x20000fa0
 8003bf0:	20001004 	.word	0x20001004
 8003bf4:	20001018 	.word	0x20001018
 8003bf8:	20001034 	.word	0x20001034
 8003bfc:	20001048 	.word	0x20001048
 8003c00:	20001060 	.word	0x20001060
 8003c04:	2000102c 	.word	0x2000102c
 8003c08:	20001030 	.word	0x20001030

08003c0c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c12:	e019      	b.n	8003c48 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8003c14:	f000 fd40 	bl	8004698 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003c18:	4b10      	ldr	r3, [pc, #64]	@ (8003c5c <prvCheckTasksWaitingTermination+0x50>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fc0b 	bl	8002440 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c60 <prvCheckTasksWaitingTermination+0x54>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	4a0b      	ldr	r2, [pc, #44]	@ (8003c60 <prvCheckTasksWaitingTermination+0x54>)
 8003c32:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8003c34:	4b0b      	ldr	r3, [pc, #44]	@ (8003c64 <prvCheckTasksWaitingTermination+0x58>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	3b01      	subs	r3, #1
 8003c3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c64 <prvCheckTasksWaitingTermination+0x58>)
 8003c3c:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003c3e:	f000 fd5b 	bl	80046f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f858 	bl	8003cf8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c48:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <prvCheckTasksWaitingTermination+0x58>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e1      	bne.n	8003c14 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20001048 	.word	0x20001048
 8003c60:	20001074 	.word	0x20001074
 8003c64:	2000105c 	.word	0x2000105c

08003c68 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 8003c68:	b480      	push	{r7}
 8003c6a:	b085      	sub	sp, #20
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003c74:	e005      	b.n	8003c82 <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3301      	adds	r3, #1
 8003c7a:	607b      	str	r3, [r7, #4]
            uxCount++;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2ba5      	cmp	r3, #165	@ 0xa5
 8003c88:	d0f5      	beq.n	8003c76 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	089b      	lsrs	r3, r3, #2
 8003c8e:	60fb      	str	r3, [r7, #12]

        return uxCount;
 8003c90:	68fb      	ldr	r3, [r7, #12]
    }
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bc80      	pop	{r7}
 8003c9a:	4770      	bx	lr

08003c9c <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        traceENTER_uxTaskGetStackHighWaterMark( xTask );

        pxTCB = prvGetTCBFromHandle( xTask );
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <uxTaskGetStackHighWaterMark+0x14>
 8003caa:	4b12      	ldr	r3, [pc, #72]	@ (8003cf4 <uxTaskGetStackHighWaterMark+0x58>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	e000      	b.n	8003cb2 <uxTaskGetStackHighWaterMark+0x16>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	617b      	str	r3, [r7, #20]
        configASSERT( pxTCB != NULL );
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10b      	bne.n	8003cd2 <uxTaskGetStackHighWaterMark+0x36>
    __asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	60bb      	str	r3, [r7, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	e7fd      	b.n	8003cce <uxTaskGetStackHighWaterMark+0x32>

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd6:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8003cd8:	6938      	ldr	r0, [r7, #16]
 8003cda:	f7ff ffc5 	bl	8003c68 <prvTaskCheckFreeStackSpace>
 8003cde:	60f8      	str	r0, [r7, #12]

        traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	20f2      	movs	r0, #242	@ 0xf2
 8003ce4:	f7fe f82e 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
    }
 8003cea:	4618      	mov	r0, r3
 8003cec:	3718      	adds	r7, #24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	20000f9c 	.word	0x20000f9c

08003cf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 ff09 	bl	8004b1c <vPortFree>
            vPortFree( pxTCB );
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 ff06 	bl	8004b1c <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d1c:	4b09      	ldr	r3, [pc, #36]	@ (8003d44 <prvResetNextTaskUnblockTime+0x2c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d104      	bne.n	8003d30 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d26:	4b08      	ldr	r3, [pc, #32]	@ (8003d48 <prvResetNextTaskUnblockTime+0x30>)
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d2e:	e005      	b.n	8003d3c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d30:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <prvResetNextTaskUnblockTime+0x2c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a03      	ldr	r2, [pc, #12]	@ (8003d48 <prvResetNextTaskUnblockTime+0x30>)
 8003d3a:	6013      	str	r3, [r2, #0]
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bc80      	pop	{r7}
 8003d42:	4770      	bx	lr
 8003d44:	2000102c 	.word	0x2000102c
 8003d48:	20001094 	.word	0x20001094

08003d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <xTaskGetSchedulerState+0x3c>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	e008      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003d60:	4b0a      	ldr	r3, [pc, #40]	@ (8003d8c <xTaskGetSchedulerState+0x40>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e001      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4619      	mov	r1, r3
 8003d76:	20f5      	movs	r0, #245	@ 0xf5
 8003d78:	f7fd ffe4 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003d7c:	687b      	ldr	r3, [r7, #4]
    }
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20001080 	.word	0x20001080
 8003d8c:	2000109c 	.word	0x2000109c

08003d90 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0x108>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003da0:	4b3e      	ldr	r3, [pc, #248]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003da6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0x110>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 8003dac:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003db6:	4b3b      	ldr	r3, [pc, #236]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f7fe fb3f 	bl	8002440 <uxListRemove>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <prvAddCurrentTaskToDelayedList+0x50>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003dc8:	4b36      	ldr	r3, [pc, #216]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dce:	2201      	movs	r2, #1
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43da      	mvns	r2, r3
 8003dd6:	4b34      	ldr	r3, [pc, #208]	@ (8003ea8 <prvAddCurrentTaskToDelayedList+0x118>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	4a32      	ldr	r2, [pc, #200]	@ (8003ea8 <prvAddCurrentTaskToDelayedList+0x118>)
 8003dde:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de6:	d124      	bne.n	8003e32 <prvAddCurrentTaskToDelayedList+0xa2>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d021      	beq.n	8003e32 <prvAddCurrentTaskToDelayedList+0xa2>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dee:	4b2f      	ldr	r3, [pc, #188]	@ (8003eac <prvAddCurrentTaskToDelayedList+0x11c>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	613b      	str	r3, [r7, #16]
 8003df4:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	4b29      	ldr	r3, [pc, #164]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	6892      	ldr	r2, [r2, #8]
 8003e04:	60da      	str	r2, [r3, #12]
 8003e06:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	3204      	adds	r2, #4
 8003e10:	605a      	str	r2, [r3, #4]
 8003e12:	4b24      	ldr	r3, [pc, #144]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	1d1a      	adds	r2, r3, #4
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	4b21      	ldr	r3, [pc, #132]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a22      	ldr	r2, [pc, #136]	@ (8003eac <prvAddCurrentTaskToDelayedList+0x11c>)
 8003e22:	615a      	str	r2, [r3, #20]
 8003e24:	4b21      	ldr	r3, [pc, #132]	@ (8003eac <prvAddCurrentTaskToDelayedList+0x11c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	4a20      	ldr	r2, [pc, #128]	@ (8003eac <prvAddCurrentTaskToDelayedList+0x11c>)
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e30:	e02e      	b.n	8003e90 <prvAddCurrentTaskToDelayedList+0x100>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4413      	add	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d20d      	bcs.n	8003e66 <prvAddCurrentTaskToDelayedList+0xd6>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003e4a:	4b16      	ldr	r3, [pc, #88]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2104      	movs	r1, #4
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe f8b1 	bl	8001fb8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003e56:	4b13      	ldr	r3, [pc, #76]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	3304      	adds	r3, #4
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6978      	ldr	r0, [r7, #20]
 8003e60:	f7fe fab3 	bl	80023ca <vListInsert>
}
 8003e64:	e014      	b.n	8003e90 <prvAddCurrentTaskToDelayedList+0x100>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003e66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2104      	movs	r1, #4
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fe f8a3 	bl	8001fb8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003e72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea4 <prvAddCurrentTaskToDelayedList+0x114>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	3304      	adds	r3, #4
 8003e78:	4619      	mov	r1, r3
 8003e7a:	69b8      	ldr	r0, [r7, #24]
 8003e7c:	f7fe faa5 	bl	80023ca <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e80:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb0 <prvAddCurrentTaskToDelayedList+0x120>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68fa      	ldr	r2, [r7, #12]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d202      	bcs.n	8003e90 <prvAddCurrentTaskToDelayedList+0x100>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e8a:	4a09      	ldr	r2, [pc, #36]	@ (8003eb0 <prvAddCurrentTaskToDelayedList+0x120>)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6013      	str	r3, [r2, #0]
}
 8003e90:	bf00      	nop
 8003e92:	3720      	adds	r7, #32
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	20001078 	.word	0x20001078
 8003e9c:	2000102c 	.word	0x2000102c
 8003ea0:	20001030 	.word	0x20001030
 8003ea4:	20000f9c 	.word	0x20000f9c
 8003ea8:	2000107c 	.word	0x2000107c
 8003eac:	20001060 	.word	0x20001060
 8003eb0:	20001094 	.word	0x20001094

08003eb4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003ebe:	f000 fa79 	bl	80043b4 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003ec2:	4b15      	ldr	r3, [pc, #84]	@ (8003f18 <xTimerCreateTimerTask+0x64>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00b      	beq.n	8003ee2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( &prvTimerTask,
 8003eca:	4b14      	ldr	r3, [pc, #80]	@ (8003f1c <xTimerCreateTimerTask+0x68>)
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	2302      	movs	r3, #2
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003ed8:	4911      	ldr	r1, [pc, #68]	@ (8003f20 <xTimerCreateTimerTask+0x6c>)
 8003eda:	4812      	ldr	r0, [pc, #72]	@ (8003f24 <xTimerCreateTimerTask+0x70>)
 8003edc:	f7fe fe31 	bl	8002b42 <xTaskCreate>
 8003ee0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10b      	bne.n	8003f00 <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8003ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eec:	f383 8811 	msr	BASEPRI, r3
 8003ef0:	f3bf 8f6f 	isb	sy
 8003ef4:	f3bf 8f4f 	dsb	sy
 8003ef8:	603b      	str	r3, [r7, #0]
}
 8003efa:	bf00      	nop
 8003efc:	bf00      	nop
 8003efe:	e7fd      	b.n	8003efc <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4619      	mov	r1, r3
 8003f04:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003f08:	f7fd ff1c 	bl	8001d44 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003f0c:	687b      	ldr	r3, [r7, #4]
    }
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	200010d8 	.word	0x200010d8
 8003f1c:	200010dc 	.word	0x200010dc
 8003f20:	08008190 	.word	0x08008190
 8003f24:	08003fcd 	.word	0x08003fcd

08003f28 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f34:	e008      	b.n	8003f48 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	699a      	ldr	r2, [r3, #24]
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	18d1      	adds	r1, r2, r3
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 f8dd 	bl	8004114 <prvInsertTimerInActiveList>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1ea      	bne.n	8003f36 <prvReloadTimer+0xe>
        }
    }
 8003f60:	bf00      	nop
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
	...

08003f6c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f76:	4b14      	ldr	r3, [pc, #80]	@ (8003fc8 <prvProcessExpiredTimer+0x5c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3304      	adds	r3, #4
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7fe fa5b 	bl	8002440 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f90:	f003 0304 	and.w	r3, r3, #4
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f7ff ffc3 	bl	8003f28 <prvReloadTimer>
 8003fa2:	e008      	b.n	8003fb6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003faa:	f023 0301 	bic.w	r3, r3, #1
 8003fae:	b2da      	uxtb	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	68f8      	ldr	r0, [r7, #12]
 8003fbc:	4798      	blx	r3
    }
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	200010d0 	.word	0x200010d0

08003fcc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fd4:	f107 0308 	add.w	r3, r7, #8
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f000 f859 	bl	8004090 <prvGetNextExpireTime>
 8003fde:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f805 	bl	8003ff4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003fea:	f000 f8d5 	bl	8004198 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fee:	bf00      	nop
 8003ff0:	e7f0      	b.n	8003fd4 <prvTimerTask+0x8>
	...

08003ff4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003ffe:	f7ff f8c9 	bl	8003194 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004002:	f107 0308 	add.w	r3, r7, #8
 8004006:	4618      	mov	r0, r3
 8004008:	f000 f864 	bl	80040d4 <prvSampleTimeNow>
 800400c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d130      	bne.n	8004076 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10a      	bne.n	8004030 <prvProcessTimerOrBlockTask+0x3c>
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	429a      	cmp	r2, r3
 8004020:	d806      	bhi.n	8004030 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004022:	f7ff f8c5 	bl	80031b0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004026:	68f9      	ldr	r1, [r7, #12]
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff ff9f 	bl	8003f6c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800402e:	e024      	b.n	800407a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004036:	4b13      	ldr	r3, [pc, #76]	@ (8004084 <prvProcessTimerOrBlockTask+0x90>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d101      	bne.n	8004044 <prvProcessTimerOrBlockTask+0x50>
 8004040:	2301      	movs	r3, #1
 8004042:	e000      	b.n	8004046 <prvProcessTimerOrBlockTask+0x52>
 8004044:	2300      	movs	r3, #0
 8004046:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004048:	4b0f      	ldr	r3, [pc, #60]	@ (8004088 <prvProcessTimerOrBlockTask+0x94>)
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	4619      	mov	r1, r3
 8004056:	f7fe fd01 	bl	8002a5c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800405a:	f7ff f8a9 	bl	80031b0 <xTaskResumeAll>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10a      	bne.n	800407a <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8004064:	4b09      	ldr	r3, [pc, #36]	@ (800408c <prvProcessTimerOrBlockTask+0x98>)
 8004066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	f3bf 8f6f 	isb	sy
    }
 8004074:	e001      	b.n	800407a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004076:	f7ff f89b 	bl	80031b0 <xTaskResumeAll>
    }
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200010d4 	.word	0x200010d4
 8004088:	200010d8 	.word	0x200010d8
 800408c:	e000ed04 	.word	0xe000ed04

08004090 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004098:	4b0d      	ldr	r3, [pc, #52]	@ (80040d0 <prvGetNextExpireTime+0x40>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <prvGetNextExpireTime+0x16>
 80040a2:	2201      	movs	r2, #1
 80040a4:	e000      	b.n	80040a8 <prvGetNextExpireTime+0x18>
 80040a6:	2200      	movs	r2, #0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d105      	bne.n	80040c0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b4:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <prvGetNextExpireTime+0x40>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	e001      	b.n	80040c4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040c0:	2300      	movs	r3, #0
 80040c2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80040c4:	68fb      	ldr	r3, [r7, #12]
    }
 80040c6:	4618      	mov	r0, r3
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bc80      	pop	{r7}
 80040ce:	4770      	bx	lr
 80040d0:	200010d0 	.word	0x200010d0

080040d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b084      	sub	sp, #16
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 80040dc:	f7ff f97a 	bl	80033d4 <xTaskGetTickCount>
 80040e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80040e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004110 <prvSampleTimeNow+0x3c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d205      	bcs.n	80040f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040ec:	f000 f93c 	bl	8004368 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e002      	b.n	80040fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040fe:	4a04      	ldr	r2, [pc, #16]	@ (8004110 <prvSampleTimeNow+0x3c>)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004104:	68fb      	ldr	r3, [r7, #12]
    }
 8004106:	4618      	mov	r0, r3
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	200010e0 	.word	0x200010e0

08004114 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004114:	b580      	push	{r7, lr}
 8004116:	b086      	sub	sp, #24
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	68ba      	ldr	r2, [r7, #8]
 800412a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	429a      	cmp	r2, r3
 8004138:	d812      	bhi.n	8004160 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	1ad2      	subs	r2, r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	429a      	cmp	r2, r3
 8004146:	d302      	bcc.n	800414e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004148:	2301      	movs	r3, #1
 800414a:	617b      	str	r3, [r7, #20]
 800414c:	e01b      	b.n	8004186 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800414e:	4b10      	ldr	r3, [pc, #64]	@ (8004190 <prvInsertTimerInActiveList+0x7c>)
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3304      	adds	r3, #4
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f7fe f936 	bl	80023ca <vListInsert>
 800415e:	e012      	b.n	8004186 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d206      	bcs.n	8004176 <prvInsertTimerInActiveList+0x62>
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d302      	bcc.n	8004176 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004170:	2301      	movs	r3, #1
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	e007      	b.n	8004186 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004176:	4b07      	ldr	r3, [pc, #28]	@ (8004194 <prvInsertTimerInActiveList+0x80>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	3304      	adds	r3, #4
 800417e:	4619      	mov	r1, r3
 8004180:	4610      	mov	r0, r2
 8004182:	f7fe f922 	bl	80023ca <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004186:	697b      	ldr	r3, [r7, #20]
    }
 8004188:	4618      	mov	r0, r3
 800418a:	3718      	adds	r7, #24
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}
 8004190:	200010d4 	.word	0x200010d4
 8004194:	200010d0 	.word	0x200010d0

08004198 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	@ 0x28
 800419c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 800419e:	1d3b      	adds	r3, r7, #4
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	605a      	str	r2, [r3, #4]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 80041aa:	e0cb      	b.n	8004344 <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	da19      	bge.n	80041e6 <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041b2:	1d3b      	adds	r3, r7, #4
 80041b4:	3304      	adds	r3, #4
 80041b6:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 80041b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <prvProcessReceivedCommands+0x3e>
    __asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	61bb      	str	r3, [r7, #24]
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041dc:	6850      	ldr	r0, [r2, #4]
 80041de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e0:	6892      	ldr	r2, [r2, #8]
 80041e2:	4611      	mov	r1, r2
 80041e4:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f2c0 80ab 	blt.w	8004344 <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	623b      	str	r3, [r7, #32]

                if( pxTimer != NULL )
 80041f2:	6a3b      	ldr	r3, [r7, #32]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80a5 	beq.w	8004344 <prvProcessReceivedCommands+0x1ac>
                {
                    if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 80041fa:	6a3b      	ldr	r3, [r7, #32]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d004      	beq.n	800420c <prvProcessReceivedCommands+0x74>
                    {
                        /* The timer is in a list, remove it. */
                        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe f91a 	bl	8002440 <uxListRemove>
                     *  it must be present in the function call.  prvSampleTimeNow() must be
                     *  called after the message is received from xTimerQueue so there is no
                     *  possibility of a higher priority task adding a message to the message
                     *  queue with a time that is ahead of the timer daemon task (because it
                     *  pre-empted the timer daemon task after the xTimeNow value was set). */
                    xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800420c:	463b      	mov	r3, r7
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ff60 	bl	80040d4 <prvSampleTimeNow>
 8004214:	61f8      	str	r0, [r7, #28]

                    switch( xMessage.xMessageID )
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	3b01      	subs	r3, #1
 800421a:	2b08      	cmp	r3, #8
 800421c:	f200 808f 	bhi.w	800433e <prvProcessReceivedCommands+0x1a6>
 8004220:	a201      	add	r2, pc, #4	@ (adr r2, 8004228 <prvProcessReceivedCommands+0x90>)
 8004222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004226:	bf00      	nop
 8004228:	0800424d 	.word	0x0800424d
 800422c:	0800424d 	.word	0x0800424d
 8004230:	080042b5 	.word	0x080042b5
 8004234:	080042c9 	.word	0x080042c9
 8004238:	08004315 	.word	0x08004315
 800423c:	0800424d 	.word	0x0800424d
 8004240:	0800424d 	.word	0x0800424d
 8004244:	080042b5 	.word	0x080042b5
 8004248:	080042c9 	.word	0x080042c9
                        case tmrCOMMAND_START:
                        case tmrCOMMAND_START_FROM_ISR:
                        case tmrCOMMAND_RESET:
                        case tmrCOMMAND_RESET_FROM_ISR:
                            /* Start or restart a timer. */
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 800424c:	6a3b      	ldr	r3, [r7, #32]
 800424e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	b2da      	uxtb	r2, r3
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                            if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	18d1      	adds	r1, r2, r3
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	6a38      	ldr	r0, [r7, #32]
 800426c:	f7ff ff52 	bl	8004114 <prvInsertTimerInActiveList>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d065      	beq.n	8004342 <prvProcessReceivedCommands+0x1aa>
                            {
                                /* The timer expired before it was added to the active
                                 * timer list.  Process it now. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d009      	beq.n	8004298 <prvProcessReceivedCommands+0x100>
                                {
                                    prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	4413      	add	r3, r2
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	4619      	mov	r1, r3
 8004290:	6a38      	ldr	r0, [r7, #32]
 8004292:	f7ff fe49 	bl	8003f28 <prvReloadTimer>
 8004296:	e008      	b.n	80042aa <prvProcessReceivedCommands+0x112>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	6a3b      	ldr	r3, [r7, #32]
 80042a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                                }

                                /* Call the timer callback. */
                                traceTIMER_EXPIRED( pxTimer );
                                pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
 80042ae:	6a38      	ldr	r0, [r7, #32]
 80042b0:	4798      	blx	r3
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            break;
 80042b2:	e046      	b.n	8004342 <prvProcessReceivedCommands+0x1aa>

                        case tmrCOMMAND_STOP:
                        case tmrCOMMAND_STOP_FROM_ISR:
                            /* The timer has already been removed from the active list. */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042b4:	6a3b      	ldr	r3, [r7, #32]
 80042b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ba:	f023 0301 	bic.w	r3, r3, #1
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 80042c6:	e03d      	b.n	8004344 <prvProcessReceivedCommands+0x1ac>

                        case tmrCOMMAND_CHANGE_PERIOD:
                        case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 80042c8:	6a3b      	ldr	r3, [r7, #32]
 80042ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	619a      	str	r2, [r3, #24]
                            configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	699b      	ldr	r3, [r3, #24]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <prvProcessReceivedCommands+0x168>
    __asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	617b      	str	r3, [r7, #20]
}
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <prvProcessReceivedCommands+0x164>
                             * be longer or shorter than the old one.  The command time is
                             * therefore set to the current time, and as the period cannot
                             * be zero the next expiry time can only be in the future,
                             * meaning (unlike for the xTimerStart() case above) there is
                             * no fail case that needs to be handled here. */
                            ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004300:	6a3b      	ldr	r3, [r7, #32]
 8004302:	699a      	ldr	r2, [r3, #24]
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	18d1      	adds	r1, r2, r3
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	69fa      	ldr	r2, [r7, #28]
 800430c:	6a38      	ldr	r0, [r7, #32]
 800430e:	f7ff ff01 	bl	8004114 <prvInsertTimerInActiveList>
                            break;
 8004312:	e017      	b.n	8004344 <prvProcessReceivedCommands+0x1ac>
                            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d103      	bne.n	800432a <prvProcessReceivedCommands+0x192>
                                {
                                    vPortFree( pxTimer );
 8004322:	6a38      	ldr	r0, [r7, #32]
 8004324:	f000 fbfa 	bl	8004b1c <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                            break;
 8004328:	e00c      	b.n	8004344 <prvProcessReceivedCommands+0x1ac>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800432a:	6a3b      	ldr	r3, [r7, #32]
 800432c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004330:	f023 0301 	bic.w	r3, r3, #1
 8004334:	b2da      	uxtb	r2, r3
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 800433c:	e002      	b.n	8004344 <prvProcessReceivedCommands+0x1ac>

                        default:
                            /* Don't expect to get here. */
                            break;
 800433e:	bf00      	nop
 8004340:	e000      	b.n	8004344 <prvProcessReceivedCommands+0x1ac>
                            break;
 8004342:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004344:	4b07      	ldr	r3, [pc, #28]	@ (8004364 <prvProcessReceivedCommands+0x1cc>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	1d39      	adds	r1, r7, #4
 800434a:	2200      	movs	r2, #0
 800434c:	4618      	mov	r0, r3
 800434e:	f7fe f9b9 	bl	80026c4 <xQueueReceive>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	f47f af29 	bne.w	80041ac <prvProcessReceivedCommands+0x14>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
    }
 800435a:	bf00      	nop
 800435c:	bf00      	nop
 800435e:	3728      	adds	r7, #40	@ 0x28
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	200010d8 	.word	0x200010d8

08004368 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800436e:	e009      	b.n	8004384 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004370:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <prvSwitchTimerLists+0x44>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800437a:	f04f 31ff 	mov.w	r1, #4294967295
 800437e:	6838      	ldr	r0, [r7, #0]
 8004380:	f7ff fdf4 	bl	8003f6c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004384:	4b09      	ldr	r3, [pc, #36]	@ (80043ac <prvSwitchTimerLists+0x44>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f0      	bne.n	8004370 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800438e:	4b07      	ldr	r3, [pc, #28]	@ (80043ac <prvSwitchTimerLists+0x44>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004394:	4b06      	ldr	r3, [pc, #24]	@ (80043b0 <prvSwitchTimerLists+0x48>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a04      	ldr	r2, [pc, #16]	@ (80043ac <prvSwitchTimerLists+0x44>)
 800439a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800439c:	4a04      	ldr	r2, [pc, #16]	@ (80043b0 <prvSwitchTimerLists+0x48>)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6013      	str	r3, [r2, #0]
    }
 80043a2:	bf00      	nop
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	200010d0 	.word	0x200010d0
 80043b0:	200010d4 	.word	0x200010d4

080043b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043b8:	f000 f96e 	bl	8004698 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043bc:	4b12      	ldr	r3, [pc, #72]	@ (8004408 <prvCheckForValidListAndQueue+0x54>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11d      	bne.n	8004400 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80043c4:	4811      	ldr	r0, [pc, #68]	@ (800440c <prvCheckForValidListAndQueue+0x58>)
 80043c6:	f7fd ffa9 	bl	800231c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80043ca:	4811      	ldr	r0, [pc, #68]	@ (8004410 <prvCheckForValidListAndQueue+0x5c>)
 80043cc:	f7fd ffa6 	bl	800231c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80043d0:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <prvCheckForValidListAndQueue+0x60>)
 80043d2:	4a0e      	ldr	r2, [pc, #56]	@ (800440c <prvCheckForValidListAndQueue+0x58>)
 80043d4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043d6:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <prvCheckForValidListAndQueue+0x64>)
 80043d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004410 <prvCheckForValidListAndQueue+0x5c>)
 80043da:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 80043dc:	2200      	movs	r2, #0
 80043de:	2110      	movs	r1, #16
 80043e0:	200a      	movs	r0, #10
 80043e2:	f7fe f8f3 	bl	80025cc <xQueueGenericCreate>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4a07      	ldr	r2, [pc, #28]	@ (8004408 <prvCheckForValidListAndQueue+0x54>)
 80043ea:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80043ec:	4b06      	ldr	r3, [pc, #24]	@ (8004408 <prvCheckForValidListAndQueue+0x54>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043f4:	4b04      	ldr	r3, [pc, #16]	@ (8004408 <prvCheckForValidListAndQueue+0x54>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4908      	ldr	r1, [pc, #32]	@ (800441c <prvCheckForValidListAndQueue+0x68>)
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fade 	bl	80029bc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004400:	f000 f97a 	bl	80046f8 <vPortExitCritical>
    }
 8004404:	bf00      	nop
 8004406:	bd80      	pop	{r7, pc}
 8004408:	200010d8 	.word	0x200010d8
 800440c:	200010a8 	.word	0x200010a8
 8004410:	200010bc 	.word	0x200010bc
 8004414:	200010d0 	.word	0x200010d0
 8004418:	200010d4 	.word	0x200010d4
 800441c:	08008198 	.word	0x08008198

08004420 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3b04      	subs	r3, #4
 8004430:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004438:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3b04      	subs	r3, #4
 800443e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3b04      	subs	r3, #4
 800444e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004450:	4a08      	ldr	r2, [pc, #32]	@ (8004474 <pxPortInitialiseStack+0x54>)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3b14      	subs	r3, #20
 800445a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	3b20      	subs	r3, #32
 8004466:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004468:	68fb      	ldr	r3, [r7, #12]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	08004479 	.word	0x08004479

08004478 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 800447e:	2300      	movs	r3, #0
 8004480:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004482:	4b12      	ldr	r3, [pc, #72]	@ (80044cc <prvTaskExitError+0x54>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448a:	d00b      	beq.n	80044a4 <prvTaskExitError+0x2c>
    __asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	60fb      	str	r3, [r7, #12]
}
 800449e:	bf00      	nop
 80044a0:	bf00      	nop
 80044a2:	e7fd      	b.n	80044a0 <prvTaskExitError+0x28>
    __asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	60bb      	str	r3, [r7, #8]
}
 80044b6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044b8:	bf00      	nop
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0fc      	beq.n	80044ba <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3714      	adds	r7, #20
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bc80      	pop	{r7}
 80044ca:	4770      	bx	lr
 80044cc:	20000004 	.word	0x20000004

080044d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80044d0:	4b07      	ldr	r3, [pc, #28]	@ (80044f0 <SVC_Handler+0x20>)
 80044d2:	6819      	ldr	r1, [r3, #0]
 80044d4:	6808      	ldr	r0, [r1, #0]
 80044d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80044da:	f380 8809 	msr	PSP, r0
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f04f 0000 	mov.w	r0, #0
 80044e6:	f380 8811 	msr	BASEPRI, r0
 80044ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80044ee:	4770      	bx	lr
 80044f0:	20000f9c 	.word	0x20000f9c
        "   orr r14, #0xd                   \n"
        "   bx r14                          \n"
        "                                   \n"
        "   .ltorg                          \n"
        );
}
 80044f4:	bf00      	nop
 80044f6:	bf00      	nop

080044f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80044f8:	4806      	ldr	r0, [pc, #24]	@ (8004514 <prvPortStartFirstTask+0x1c>)
 80044fa:	6800      	ldr	r0, [r0, #0]
 80044fc:	6800      	ldr	r0, [r0, #0]
 80044fe:	f380 8808 	msr	MSP, r0
 8004502:	b662      	cpsie	i
 8004504:	b661      	cpsie	f
 8004506:	f3bf 8f4f 	dsb	sy
 800450a:	f3bf 8f6f 	isb	sy
 800450e:	df00      	svc	0
 8004510:	bf00      	nop
 8004512:	0000      	.short	0x0000
 8004514:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004518:	bf00      	nop
 800451a:	bf00      	nop

0800451c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	@ 0x28
 8004520:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004522:	4b54      	ldr	r3, [pc, #336]	@ (8004674 <xPortStartScheduler+0x158>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.freertos.org/Why-FreeRTOS/FAQs.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452a:	332c      	adds	r3, #44	@ 0x2c
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a52      	ldr	r2, [pc, #328]	@ (8004678 <xPortStartScheduler+0x15c>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d00b      	beq.n	800454c <xPortStartScheduler+0x30>
    __asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	61fb      	str	r3, [r7, #28]
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800454c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800454e:	3338      	adds	r3, #56	@ 0x38
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a4a      	ldr	r2, [pc, #296]	@ (800467c <xPortStartScheduler+0x160>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00b      	beq.n	8004570 <xPortStartScheduler+0x54>
    __asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	61bb      	str	r3, [r7, #24]
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004574:	4b42      	ldr	r3, [pc, #264]	@ (8004680 <xPortStartScheduler+0x164>)
 8004576:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004578:	6a3b      	ldr	r3, [r7, #32]
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	b2db      	uxtb	r3, r3
 800457e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004580:	6a3b      	ldr	r3, [r7, #32]
 8004582:	22ff      	movs	r2, #255	@ 0xff
 8004584:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004586:	6a3b      	ldr	r3, [r7, #32]
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	b2db      	uxtb	r3, r3
 800458c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004596:	b2da      	uxtb	r2, r3
 8004598:	4b3a      	ldr	r3, [pc, #232]	@ (8004684 <xPortStartScheduler+0x168>)
 800459a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800459c:	4b39      	ldr	r3, [pc, #228]	@ (8004684 <xPortStartScheduler+0x168>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10b      	bne.n	80045bc <xPortStartScheduler+0xa0>
    __asm volatile
 80045a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a8:	f383 8811 	msr	BASEPRI, r3
 80045ac:	f3bf 8f6f 	isb	sy
 80045b0:	f3bf 8f4f 	dsb	sy
 80045b4:	617b      	str	r3, [r7, #20]
}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	e7fd      	b.n	80045b8 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	43db      	mvns	r3, r3
 80045c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d013      	beq.n	80045f2 <xPortStartScheduler+0xd6>
    __asm volatile
 80045ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ce:	f383 8811 	msr	BASEPRI, r3
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	f3bf 8f4f 	dsb	sy
 80045da:	613b      	str	r3, [r7, #16]
}
 80045dc:	bf00      	nop
 80045de:	bf00      	nop
 80045e0:	e7fd      	b.n	80045de <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	3301      	adds	r3, #1
 80045e6:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045e8:	79fb      	ldrb	r3, [r7, #7]
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045fa:	2b80      	cmp	r3, #128	@ 0x80
 80045fc:	d0f1      	beq.n	80045e2 <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d103      	bne.n	800460c <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004604:	4b20      	ldr	r3, [pc, #128]	@ (8004688 <xPortStartScheduler+0x16c>)
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
 800460a:	e004      	b.n	8004616 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f1c3 0307 	rsb	r3, r3, #7
 8004612:	4a1d      	ldr	r2, [pc, #116]	@ (8004688 <xPortStartScheduler+0x16c>)
 8004614:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004616:	4b1c      	ldr	r3, [pc, #112]	@ (8004688 <xPortStartScheduler+0x16c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	021b      	lsls	r3, r3, #8
 800461c:	4a1a      	ldr	r2, [pc, #104]	@ (8004688 <xPortStartScheduler+0x16c>)
 800461e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004620:	4b19      	ldr	r3, [pc, #100]	@ (8004688 <xPortStartScheduler+0x16c>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004628:	4a17      	ldr	r2, [pc, #92]	@ (8004688 <xPortStartScheduler+0x16c>)
 800462a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800462c:	7bfb      	ldrb	r3, [r7, #15]
 800462e:	b2da      	uxtb	r2, r3
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004634:	4b15      	ldr	r3, [pc, #84]	@ (800468c <xPortStartScheduler+0x170>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a14      	ldr	r2, [pc, #80]	@ (800468c <xPortStartScheduler+0x170>)
 800463a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800463e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004640:	4b12      	ldr	r3, [pc, #72]	@ (800468c <xPortStartScheduler+0x170>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a11      	ldr	r2, [pc, #68]	@ (800468c <xPortStartScheduler+0x170>)
 8004646:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800464a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800464c:	4b10      	ldr	r3, [pc, #64]	@ (8004690 <xPortStartScheduler+0x174>)
 800464e:	2200      	movs	r2, #0
 8004650:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004652:	f000 f8c9 	bl	80047e8 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004656:	4b0f      	ldr	r3, [pc, #60]	@ (8004694 <xPortStartScheduler+0x178>)
 8004658:	2200      	movs	r2, #0
 800465a:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800465c:	f7ff ff4c 	bl	80044f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004660:	f7ff f802 	bl	8003668 <vTaskSwitchContext>
    prvTaskExitError();
 8004664:	f7ff ff08 	bl	8004478 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3728      	adds	r7, #40	@ 0x28
 800466e:	46bd      	mov	sp, r7
 8004670:	bd80      	pop	{r7, pc}
 8004672:	bf00      	nop
 8004674:	e000ed08 	.word	0xe000ed08
 8004678:	080044d1 	.word	0x080044d1
 800467c:	0800474d 	.word	0x0800474d
 8004680:	e000e400 	.word	0xe000e400
 8004684:	200010e4 	.word	0x200010e4
 8004688:	200010e8 	.word	0x200010e8
 800468c:	e000ed20 	.word	0xe000ed20
 8004690:	e000ed1c 	.word	0xe000ed1c
 8004694:	20000004 	.word	0x20000004

08004698 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
    __asm volatile
 800469e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	607b      	str	r3, [r7, #4]
}
 80046b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80046b2:	4b0f      	ldr	r3, [pc, #60]	@ (80046f0 <vPortEnterCritical+0x58>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3301      	adds	r3, #1
 80046b8:	4a0d      	ldr	r2, [pc, #52]	@ (80046f0 <vPortEnterCritical+0x58>)
 80046ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80046bc:	4b0c      	ldr	r3, [pc, #48]	@ (80046f0 <vPortEnterCritical+0x58>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d110      	bne.n	80046e6 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046c4:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <vPortEnterCritical+0x5c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <vPortEnterCritical+0x4e>
    __asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	603b      	str	r3, [r7, #0]
}
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <vPortEnterCritical+0x4a>
    }
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	20000004 	.word	0x20000004
 80046f4:	e000ed04 	.word	0xe000ed04

080046f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80046fe:	4b12      	ldr	r3, [pc, #72]	@ (8004748 <vPortExitCritical+0x50>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d10b      	bne.n	800471e <vPortExitCritical+0x26>
    __asm volatile
 8004706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800470a:	f383 8811 	msr	BASEPRI, r3
 800470e:	f3bf 8f6f 	isb	sy
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	607b      	str	r3, [r7, #4]
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	e7fd      	b.n	800471a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800471e:	4b0a      	ldr	r3, [pc, #40]	@ (8004748 <vPortExitCritical+0x50>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	3b01      	subs	r3, #1
 8004724:	4a08      	ldr	r2, [pc, #32]	@ (8004748 <vPortExitCritical+0x50>)
 8004726:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004728:	4b07      	ldr	r3, [pc, #28]	@ (8004748 <vPortExitCritical+0x50>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d105      	bne.n	800473c <vPortExitCritical+0x44>
 8004730:	2300      	movs	r3, #0
 8004732:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800473a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	bc80      	pop	{r7}
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000004 	.word	0x20000004

0800474c <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800474c:	f3ef 8009 	mrs	r0, PSP
 8004750:	f3bf 8f6f 	isb	sy
 8004754:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <PendSV_Handler+0x40>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800475c:	6010      	str	r0, [r2, #0]
 800475e:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004762:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004766:	f380 8811 	msr	BASEPRI, r0
 800476a:	f7fe ff7d 	bl	8003668 <vTaskSwitchContext>
 800476e:	f04f 0000 	mov.w	r0, #0
 8004772:	f380 8811 	msr	BASEPRI, r0
 8004776:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800477a:	6819      	ldr	r1, [r3, #0]
 800477c:	6808      	ldr	r0, [r1, #0]
 800477e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004782:	f380 8809 	msr	PSP, r0
 8004786:	f3bf 8f6f 	isb	sy
 800478a:	4770      	bx	lr
 800478c:	20000f9c 	.word	0x20000f9c
        "   bx r14                              \n"
        "                                       \n"
        "   .ltorg                              \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004790:	bf00      	nop
 8004792:	bf00      	nop

08004794 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
    __asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	607b      	str	r3, [r7, #4]
}
 80047ac:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80047ae:	f7fd fa13 	bl	8001bd8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80047b2:	f7fe fe37 	bl	8003424 <xTaskIncrementTick>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d006      	beq.n	80047ca <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80047bc:	f7fd fa6a 	bl	8001c94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047c0:	4b08      	ldr	r3, [pc, #32]	@ (80047e4 <SysTick_Handler+0x50>)
 80047c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	e001      	b.n	80047ce <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80047ca:	f7fd fa47 	bl	8001c5c <SEGGER_SYSVIEW_RecordExitISR>
 80047ce:	2300      	movs	r3, #0
 80047d0:	603b      	str	r3, [r7, #0]
    __asm volatile
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	f383 8811 	msr	BASEPRI, r3
}
 80047d8:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80047da:	bf00      	nop
 80047dc:	3708      	adds	r7, #8
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <vPortSetupTimerInterrupt+0x30>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047f2:	4b0a      	ldr	r3, [pc, #40]	@ (800481c <vPortSetupTimerInterrupt+0x34>)
 80047f4:	2200      	movs	r2, #0
 80047f6:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047f8:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <vPortSetupTimerInterrupt+0x38>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a09      	ldr	r2, [pc, #36]	@ (8004824 <vPortSetupTimerInterrupt+0x3c>)
 80047fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004802:	099b      	lsrs	r3, r3, #6
 8004804:	4a08      	ldr	r2, [pc, #32]	@ (8004828 <vPortSetupTimerInterrupt+0x40>)
 8004806:	3b01      	subs	r3, #1
 8004808:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800480a:	4b03      	ldr	r3, [pc, #12]	@ (8004818 <vPortSetupTimerInterrupt+0x30>)
 800480c:	2207      	movs	r2, #7
 800480e:	601a      	str	r2, [r3, #0]
}
 8004810:	bf00      	nop
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	e000e010 	.word	0xe000e010
 800481c:	e000e018 	.word	0xe000e018
 8004820:	20000014 	.word	0x20000014
 8004824:	10624dd3 	.word	0x10624dd3
 8004828:	e000e014 	.word	0xe000e014

0800482c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004832:	f3ef 8305 	mrs	r3, IPSR
 8004836:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b0f      	cmp	r3, #15
 800483c:	d915      	bls.n	800486a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800483e:	4a17      	ldr	r2, [pc, #92]	@ (800489c <vPortValidateInterruptPriority+0x70>)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4413      	add	r3, r2
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.freertos.org/Why-FreeRTOS/FAQs */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004848:	4b15      	ldr	r3, [pc, #84]	@ (80048a0 <vPortValidateInterruptPriority+0x74>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	7afa      	ldrb	r2, [r7, #11]
 800484e:	429a      	cmp	r2, r3
 8004850:	d20b      	bcs.n	800486a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	607b      	str	r3, [r7, #4]
}
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	e7fd      	b.n	8004866 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800486a:	4b0e      	ldr	r3, [pc, #56]	@ (80048a4 <vPortValidateInterruptPriority+0x78>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004872:	4b0d      	ldr	r3, [pc, #52]	@ (80048a8 <vPortValidateInterruptPriority+0x7c>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	429a      	cmp	r2, r3
 8004878:	d90b      	bls.n	8004892 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800487a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487e:	f383 8811 	msr	BASEPRI, r3
 8004882:	f3bf 8f6f 	isb	sy
 8004886:	f3bf 8f4f 	dsb	sy
 800488a:	603b      	str	r3, [r7, #0]
}
 800488c:	bf00      	nop
 800488e:	bf00      	nop
 8004890:	e7fd      	b.n	800488e <vPortValidateInterruptPriority+0x62>
    }
 8004892:	bf00      	nop
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bc80      	pop	{r7}
 800489a:	4770      	bx	lr
 800489c:	e000e3f0 	.word	0xe000e3f0
 80048a0:	200010e4 	.word	0x200010e4
 80048a4:	e000ed0c 	.word	0xe000ed0c
 80048a8:	200010e8 	.word	0x200010e8

080048ac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b08e      	sub	sp, #56	@ 0x38
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80048b4:	2300      	movs	r3, #0
 80048b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d022      	beq.n	8004908 <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80048c2:	2308      	movs	r3, #8
 80048c4:	43db      	mvns	r3, r3
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d81b      	bhi.n	8004904 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 80048cc:	2208      	movs	r2, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4413      	add	r3, r2
 80048d2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d014      	beq.n	8004908 <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f003 0307 	and.w	r3, r3, #7
 80048e4:	f1c3 0308 	rsb	r3, r3, #8
 80048e8:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	43db      	mvns	r3, r3
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d804      	bhi.n	80048fe <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f8:	4413      	add	r3, r2
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	e004      	b.n	8004908 <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	e001      	b.n	8004908 <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004908:	f7fe fc44 	bl	8003194 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800490c:	4b7c      	ldr	r3, [pc, #496]	@ (8004b00 <pvPortMalloc+0x254>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d101      	bne.n	8004918 <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8004914:	f000 f97c 	bl	8004c10 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f2c0 80d7 	blt.w	8004ace <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 80d3 	beq.w	8004ace <pvPortMalloc+0x222>
 8004928:	4b76      	ldr	r3, [pc, #472]	@ (8004b04 <pvPortMalloc+0x258>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	f200 80cd 	bhi.w	8004ace <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004934:	4b74      	ldr	r3, [pc, #464]	@ (8004b08 <pvPortMalloc+0x25c>)
 8004936:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004938:	4b73      	ldr	r3, [pc, #460]	@ (8004b08 <pvPortMalloc+0x25c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800493e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004940:	4a72      	ldr	r2, [pc, #456]	@ (8004b0c <pvPortMalloc+0x260>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d305      	bcc.n	8004952 <pvPortMalloc+0xa6>
 8004946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004948:	4a71      	ldr	r2, [pc, #452]	@ (8004b10 <pvPortMalloc+0x264>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d801      	bhi.n	8004952 <pvPortMalloc+0xa6>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <pvPortMalloc+0xa8>
 8004952:	2300      	movs	r3, #0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d129      	bne.n	80049ac <pvPortMalloc+0x100>
    __asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	61fb      	str	r3, [r7, #28]
}
 800496a:	bf00      	nop
 800496c:	bf00      	nop
 800496e:	e7fd      	b.n	800496c <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004970:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004972:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004974:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800497a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800497c:	4a63      	ldr	r2, [pc, #396]	@ (8004b0c <pvPortMalloc+0x260>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d305      	bcc.n	800498e <pvPortMalloc+0xe2>
 8004982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004984:	4a62      	ldr	r2, [pc, #392]	@ (8004b10 <pvPortMalloc+0x264>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d801      	bhi.n	800498e <pvPortMalloc+0xe2>
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <pvPortMalloc+0xe4>
 800498e:	2300      	movs	r3, #0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10b      	bne.n	80049ac <pvPortMalloc+0x100>
    __asm volatile
 8004994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	f3bf 8f6f 	isb	sy
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	61bb      	str	r3, [r7, #24]
}
 80049a6:	bf00      	nop
 80049a8:	bf00      	nop
 80049aa:	e7fd      	b.n	80049a8 <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80049ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d903      	bls.n	80049be <pvPortMalloc+0x112>
 80049b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1d8      	bne.n	8004970 <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049be:	4b50      	ldr	r3, [pc, #320]	@ (8004b00 <pvPortMalloc+0x254>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80049c4:	429a      	cmp	r2, r3
 80049c6:	f000 8082 	beq.w	8004ace <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80049ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2208      	movs	r2, #8
 80049d0:	4413      	add	r3, r2
 80049d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80049d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d6:	4a4d      	ldr	r2, [pc, #308]	@ (8004b0c <pvPortMalloc+0x260>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d305      	bcc.n	80049e8 <pvPortMalloc+0x13c>
 80049dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049de:	4a4c      	ldr	r2, [pc, #304]	@ (8004b10 <pvPortMalloc+0x264>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d801      	bhi.n	80049e8 <pvPortMalloc+0x13c>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <pvPortMalloc+0x13e>
 80049e8:	2300      	movs	r3, #0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d10b      	bne.n	8004a06 <pvPortMalloc+0x15a>
    __asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	617b      	str	r3, [r7, #20]
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	e7fd      	b.n	8004a02 <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8004a0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d90b      	bls.n	8004a30 <pvPortMalloc+0x184>
    __asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	613b      	str	r3, [r7, #16]
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	1ad2      	subs	r2, r2, r3
 8004a38:	2308      	movs	r3, #8
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d924      	bls.n	8004a8a <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <pvPortMalloc+0x1be>
    __asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	60fb      	str	r3, [r7, #12]
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	e7fd      	b.n	8004a66 <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a6c:	685a      	ldr	r2, [r3, #4]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	1ad2      	subs	r2, r2, r3
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8004a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	6a3b      	ldr	r3, [r7, #32]
 8004a82:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004a84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a86:	6a3a      	ldr	r2, [r7, #32]
 8004a88:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8004b04 <pvPortMalloc+0x258>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	4a1b      	ldr	r2, [pc, #108]	@ (8004b04 <pvPortMalloc+0x258>)
 8004a96:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a98:	4b1a      	ldr	r3, [pc, #104]	@ (8004b04 <pvPortMalloc+0x258>)
 8004a9a:	681a      	ldr	r2, [r3, #0]
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <pvPortMalloc+0x268>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d203      	bcs.n	8004aac <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aa4:	4b17      	ldr	r3, [pc, #92]	@ (8004b04 <pvPortMalloc+0x258>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a1a      	ldr	r2, [pc, #104]	@ (8004b14 <pvPortMalloc+0x268>)
 8004aaa:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 8004aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004abc:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ac4:	4b14      	ldr	r3, [pc, #80]	@ (8004b18 <pvPortMalloc+0x26c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	4a13      	ldr	r2, [pc, #76]	@ (8004b18 <pvPortMalloc+0x26c>)
 8004acc:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 8004ace:	f7fe fb6f 	bl	80031b0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <pvPortMalloc+0x248>
    __asm volatile
 8004adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae0:	f383 8811 	msr	BASEPRI, r3
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	60bb      	str	r3, [r7, #8]
}
 8004aee:	bf00      	nop
 8004af0:	bf00      	nop
 8004af2:	e7fd      	b.n	8004af0 <pvPortMalloc+0x244>
    return pvReturn;
 8004af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3738      	adds	r7, #56	@ 0x38
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	200040f4 	.word	0x200040f4
 8004b04:	200040f8 	.word	0x200040f8
 8004b08:	200040ec 	.word	0x200040ec
 8004b0c:	200010ec 	.word	0x200010ec
 8004b10:	200040eb 	.word	0x200040eb
 8004b14:	200040fc 	.word	0x200040fc
 8004b18:	20004100 	.word	0x20004100

08004b1c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b088      	sub	sp, #32
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d064      	beq.n	8004bf8 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b2e:	2308      	movs	r3, #8
 8004b30:	425b      	negs	r3, r3
 8004b32:	69fa      	ldr	r2, [r7, #28]
 8004b34:	4413      	add	r3, r2
 8004b36:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	4a30      	ldr	r2, [pc, #192]	@ (8004c00 <vPortFree+0xe4>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d305      	bcc.n	8004b50 <vPortFree+0x34>
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	4a2f      	ldr	r2, [pc, #188]	@ (8004c04 <vPortFree+0xe8>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d801      	bhi.n	8004b50 <vPortFree+0x34>
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e000      	b.n	8004b52 <vPortFree+0x36>
 8004b50:	2300      	movs	r3, #0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10b      	bne.n	8004b6e <vPortFree+0x52>
    __asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	617b      	str	r3, [r7, #20]
}
 8004b68:	bf00      	nop
 8004b6a:	bf00      	nop
 8004b6c:	e7fd      	b.n	8004b6a <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	db0b      	blt.n	8004b8e <vPortFree+0x72>
    __asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	613b      	str	r3, [r7, #16]
}
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <vPortFree+0x92>
    __asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	60fb      	str	r3, [r7, #12]
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	e7fd      	b.n	8004baa <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	0fdb      	lsrs	r3, r3, #31
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d01c      	beq.n	8004bf8 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 8004bbe:	69bb      	ldr	r3, [r7, #24]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d118      	bne.n	8004bf8 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8004bd2:	f7fe fadf 	bl	8003194 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	685a      	ldr	r2, [r3, #4]
 8004bda:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <vPortFree+0xec>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4413      	add	r3, r2
 8004be0:	4a09      	ldr	r2, [pc, #36]	@ (8004c08 <vPortFree+0xec>)
 8004be2:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004be4:	69b8      	ldr	r0, [r7, #24]
 8004be6:	f000 f86d 	bl	8004cc4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004bea:	4b08      	ldr	r3, [pc, #32]	@ (8004c0c <vPortFree+0xf0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3301      	adds	r3, #1
 8004bf0:	4a06      	ldr	r2, [pc, #24]	@ (8004c0c <vPortFree+0xf0>)
 8004bf2:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004bf4:	f7fe fadc 	bl	80031b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004bf8:	bf00      	nop
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	200010ec 	.word	0x200010ec
 8004c04:	200040eb 	.word	0x200040eb
 8004c08:	200040f8 	.word	0x200040f8
 8004c0c:	20004104 	.word	0x20004104

08004c10 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c16:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004c1a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c1c:	4b24      	ldr	r3, [pc, #144]	@ (8004cb0 <prvHeapInit+0xa0>)
 8004c1e:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00c      	beq.n	8004c44 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3307      	adds	r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0307 	bic.w	r3, r3, #7
 8004c36:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	4a1c      	ldr	r2, [pc, #112]	@ (8004cb0 <prvHeapInit+0xa0>)
 8004c40:	4413      	add	r3, r2
 8004c42:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb4 <prvHeapInit+0xa4>)
 8004c48:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c4a:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb4 <prvHeapInit+0xa4>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004c50:	68fa      	ldr	r2, [r7, #12]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	4413      	add	r3, r2
 8004c56:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004c58:	2208      	movs	r2, #8
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	1a9b      	subs	r3, r3, r2
 8004c5e:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a13      	ldr	r2, [pc, #76]	@ (8004cb8 <prvHeapInit+0xa8>)
 8004c6c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c6e:	4b12      	ldr	r3, [pc, #72]	@ (8004cb8 <prvHeapInit+0xa8>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2200      	movs	r2, #0
 8004c74:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004c76:	4b10      	ldr	r3, [pc, #64]	@ (8004cb8 <prvHeapInit+0xa8>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	1ad2      	subs	r2, r2, r3
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004cb8 <prvHeapInit+0xa8>)
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	4a08      	ldr	r2, [pc, #32]	@ (8004cbc <prvHeapInit+0xac>)
 8004c9a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a07      	ldr	r2, [pc, #28]	@ (8004cc0 <prvHeapInit+0xb0>)
 8004ca2:	6013      	str	r3, [r2, #0]
}
 8004ca4:	bf00      	nop
 8004ca6:	3714      	adds	r7, #20
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bc80      	pop	{r7}
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	200010ec 	.word	0x200010ec
 8004cb4:	200040ec 	.word	0x200040ec
 8004cb8:	200040f4 	.word	0x200040f4
 8004cbc:	200040fc 	.word	0x200040fc
 8004cc0:	200040f8 	.word	0x200040f8

08004cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004ccc:	4b36      	ldr	r3, [pc, #216]	@ (8004da8 <prvInsertBlockIntoFreeList+0xe4>)
 8004cce:	617b      	str	r3, [r7, #20]
 8004cd0:	e002      	b.n	8004cd8 <prvInsertBlockIntoFreeList+0x14>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d8f7      	bhi.n	8004cd2 <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4a30      	ldr	r2, [pc, #192]	@ (8004da8 <prvInsertBlockIntoFreeList+0xe4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d018      	beq.n	8004d1c <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	4a2f      	ldr	r2, [pc, #188]	@ (8004dac <prvInsertBlockIntoFreeList+0xe8>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d305      	bcc.n	8004cfe <prvInsertBlockIntoFreeList+0x3a>
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	4a2e      	ldr	r2, [pc, #184]	@ (8004db0 <prvInsertBlockIntoFreeList+0xec>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d801      	bhi.n	8004cfe <prvInsertBlockIntoFreeList+0x3a>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <prvInsertBlockIntoFreeList+0x3c>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	60fb      	str	r3, [r7, #12]
}
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	693a      	ldr	r2, [r7, #16]
 8004d26:	4413      	add	r3, r2
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d108      	bne.n	8004d40 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	441a      	add	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	441a      	add	r2, r3
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d118      	bne.n	8004d86 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b16      	ldr	r3, [pc, #88]	@ (8004db4 <prvInsertBlockIntoFreeList+0xf0>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d00d      	beq.n	8004d7c <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	441a      	add	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	601a      	str	r2, [r3, #0]
 8004d7a:	e008      	b.n	8004d8e <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004d7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <prvInsertBlockIntoFreeList+0xf0>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	601a      	str	r2, [r3, #0]
 8004d84:	e003      	b.n	8004d8e <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d002      	beq.n	8004d9c <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bc80      	pop	{r7}
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	200040ec 	.word	0x200040ec
 8004dac:	200010ec 	.word	0x200010ec
 8004db0:	200040eb 	.word	0x200040eb
 8004db4:	200040f4 	.word	0x200040f4

08004db8 <Kalman_getAngle>:

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

/* USER CODE BEGIN PV */
float Kalman_getAngle(Kalman_t *Kalman, float newAngle, float newRate, float dt) {
 8004db8:	b590      	push	{r4, r7, lr}
 8004dba:	b08b      	sub	sp, #44	@ 0x2c
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
	/* ======= Bước 1: Dự đoán (Predict) ======= */
	Kalman->rate = newRate - Kalman->bias;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4619      	mov	r1, r3
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f7fb fa07 	bl	80001e0 <__aeabi_fsub>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	609a      	str	r2, [r3, #8]
	Kalman->angle += dt * Kalman->rate;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681c      	ldr	r4, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	6839      	ldr	r1, [r7, #0]
 8004de4:	4618      	mov	r0, r3
 8004de6:	f7fb fb05 	bl	80003f4 <__aeabi_fmul>
 8004dea:	4603      	mov	r3, r0
 8004dec:	4619      	mov	r1, r3
 8004dee:	4620      	mov	r0, r4
 8004df0:	f7fb f9f8 	bl	80001e4 <__addsf3>
 8004df4:	4603      	mov	r3, r0
 8004df6:	461a      	mov	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	601a      	str	r2, [r3, #0]

	// Cập nhật ma trận sai số
	Kalman->P[0][0] += dt
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	68dc      	ldr	r4, [r3, #12]
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fb faf4 	bl	80003f4 <__aeabi_fmul>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	4619      	mov	r1, r3
 8004e16:	4610      	mov	r0, r2
 8004e18:	f7fb f9e2 	bl	80001e0 <__aeabi_fsub>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	695b      	ldr	r3, [r3, #20]
 8004e24:	4619      	mov	r1, r3
 8004e26:	4610      	mov	r0, r2
 8004e28:	f7fb f9da 	bl	80001e0 <__aeabi_fsub>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	461a      	mov	r2, r3
					+ Q_angle);
 8004e30:	4b6a      	ldr	r3, [pc, #424]	@ (8004fdc <Kalman_getAngle+0x224>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4619      	mov	r1, r3
 8004e36:	4610      	mov	r0, r2
 8004e38:	f7fb f9d4 	bl	80001e4 <__addsf3>
 8004e3c:	4603      	mov	r3, r0
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	4618      	mov	r0, r3
 8004e42:	f7fb fad7 	bl	80003f4 <__aeabi_fmul>
 8004e46:	4603      	mov	r3, r0
	Kalman->P[0][0] += dt
 8004e48:	4619      	mov	r1, r3
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f7fb f9ca 	bl	80001e4 <__addsf3>
 8004e50:	4603      	mov	r3, r0
 8004e52:	461a      	mov	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	60da      	str	r2, [r3, #12]
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	691c      	ldr	r4, [r3, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	6839      	ldr	r1, [r7, #0]
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fb fac6 	bl	80003f4 <__aeabi_fmul>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	f7fb f9b7 	bl	80001e0 <__aeabi_fsub>
 8004e72:	4603      	mov	r3, r0
 8004e74:	461a      	mov	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	611a      	str	r2, [r3, #16]
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	695c      	ldr	r4, [r3, #20]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f7fb fab5 	bl	80003f4 <__aeabi_fmul>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	4619      	mov	r1, r3
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7fb f9a6 	bl	80001e0 <__aeabi_fsub>
 8004e94:	4603      	mov	r3, r0
 8004e96:	461a      	mov	r2, r3
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	615a      	str	r2, [r3, #20]
	Kalman->P[1][1] += Q_bias * dt;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	699c      	ldr	r4, [r3, #24]
 8004ea0:	4b4f      	ldr	r3, [pc, #316]	@ (8004fe0 <Kalman_getAngle+0x228>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fb faa4 	bl	80003f4 <__aeabi_fmul>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	f7fb f997 	bl	80001e4 <__addsf3>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	461a      	mov	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	619a      	str	r2, [r3, #24]

	/* ======= Bước 2: Cập nhật (Update) ======= */
	float S = Kalman->P[0][0] + R_measure; // Độ bất định đo lường
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	4a48      	ldr	r2, [pc, #288]	@ (8004fe4 <Kalman_getAngle+0x22c>)
 8004ec4:	6812      	ldr	r2, [r2, #0]
 8004ec6:	4611      	mov	r1, r2
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fb f98b 	bl	80001e4 <__addsf3>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	627b      	str	r3, [r7, #36]	@ 0x24
	float K[2];                            // Kalman gain
	K[0] = Kalman->P[0][0] / S;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68db      	ldr	r3, [r3, #12]
 8004ed6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f7fb fb3f 	bl	800055c <__aeabi_fdiv>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	613b      	str	r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fb37 	bl	800055c <__aeabi_fdiv>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	617b      	str	r3, [r7, #20]

	float y = newAngle - Kalman->angle; // Sai số đo
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	68b8      	ldr	r0, [r7, #8]
 8004efa:	f7fb f971 	bl	80001e0 <__aeabi_fsub>
 8004efe:	4603      	mov	r3, r0
 8004f00:	623b      	str	r3, [r7, #32]
	Kalman->angle += K[0] * y;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681c      	ldr	r4, [r3, #0]
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6a39      	ldr	r1, [r7, #32]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f7fb fa72 	bl	80003f4 <__aeabi_fmul>
 8004f10:	4603      	mov	r3, r0
 8004f12:	4619      	mov	r1, r3
 8004f14:	4620      	mov	r0, r4
 8004f16:	f7fb f965 	bl	80001e4 <__addsf3>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]
	Kalman->bias += K[1] * y;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	685c      	ldr	r4, [r3, #4]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	6a39      	ldr	r1, [r7, #32]
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7fb fa62 	bl	80003f4 <__aeabi_fmul>
 8004f30:	4603      	mov	r3, r0
 8004f32:	4619      	mov	r1, r3
 8004f34:	4620      	mov	r0, r4
 8004f36:	f7fb f955 	bl	80001e4 <__addsf3>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	605a      	str	r2, [r3, #4]

	// Cập nhật ma trận covariance
	float P00_temp = Kalman->P[0][0];
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	61fb      	str	r3, [r7, #28]
	float P01_temp = Kalman->P[0][1];
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	61bb      	str	r3, [r7, #24]

	Kalman->P[0][0] -= K[0] * P00_temp;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	68dc      	ldr	r4, [r3, #12]
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	69f9      	ldr	r1, [r7, #28]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fb fa4c 	bl	80003f4 <__aeabi_fmul>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4620      	mov	r0, r4
 8004f62:	f7fb f93d 	bl	80001e0 <__aeabi_fsub>
 8004f66:	4603      	mov	r3, r0
 8004f68:	461a      	mov	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	60da      	str	r2, [r3, #12]
	Kalman->P[0][1] -= K[0] * P01_temp;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	691c      	ldr	r4, [r3, #16]
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	69b9      	ldr	r1, [r7, #24]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fb fa3c 	bl	80003f4 <__aeabi_fmul>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	4619      	mov	r1, r3
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7fb f92d 	bl	80001e0 <__aeabi_fsub>
 8004f86:	4603      	mov	r3, r0
 8004f88:	461a      	mov	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	611a      	str	r2, [r3, #16]
	Kalman->P[1][0] -= K[1] * P00_temp;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	695c      	ldr	r4, [r3, #20]
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	69f9      	ldr	r1, [r7, #28]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fb fa2c 	bl	80003f4 <__aeabi_fmul>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	f7fb f91d 	bl	80001e0 <__aeabi_fsub>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	461a      	mov	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	615a      	str	r2, [r3, #20]
	Kalman->P[1][1] -= K[1] * P01_temp;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	699c      	ldr	r4, [r3, #24]
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	69b9      	ldr	r1, [r7, #24]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f7fb fa1c 	bl	80003f4 <__aeabi_fmul>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f7fb f90d 	bl	80001e0 <__aeabi_fsub>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	461a      	mov	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	619a      	str	r2, [r3, #24]

	return Kalman->angle;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	372c      	adds	r7, #44	@ 0x2c
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd90      	pop	{r4, r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	20000008 	.word	0x20000008
 8004fe0:	2000000c 	.word	0x2000000c
 8004fe4:	20000010 	.word	0x20000010

08004fe8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004fee:	f000 fc61 	bl	80058b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004ff2:	f000 f82d 	bl	8005050 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004ff6:	f000 fae5 	bl	80055c4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8004ffa:	f000 fab5 	bl	8005568 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	vConfigureTimerForRunTimeStats();
 8004ffe:	f000 f8a3 	bl	8005148 <vConfigureTimerForRunTimeStats>
	SEGGER_SYSVIEW_Conf(); /* Thêm vào nếu sử dụng SEGGER SystemView!*/
 8005002:	f7fb fbe1 	bl	80007c8 <SEGGER_SYSVIEW_Conf>
	MPU6050Init();
 8005006:	f000 f8d3 	bl	80051b0 <MPU6050Init>
	xTaskCreate(TaskMPU6050_Read, "MPU6050", 256, NULL, 2, NULL);
 800500a:	2300      	movs	r3, #0
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	2302      	movs	r3, #2
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005018:	4909      	ldr	r1, [pc, #36]	@ (8005040 <main+0x58>)
 800501a:	480a      	ldr	r0, [pc, #40]	@ (8005044 <main+0x5c>)
 800501c:	f7fd fd91 	bl	8002b42 <xTaskCreate>

	// Bắt đầu RTOS
	/* Tạo task khởi động SystemView */
	xTaskCreate(vSystemViewStartTask, "SysViewStart", 256, NULL,
 8005020:	2300      	movs	r3, #0
 8005022:	9301      	str	r3, [sp, #4]
 8005024:	2304      	movs	r3, #4
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	2300      	movs	r3, #0
 800502a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800502e:	4906      	ldr	r1, [pc, #24]	@ (8005048 <main+0x60>)
 8005030:	4806      	ldr	r0, [pc, #24]	@ (800504c <main+0x64>)
 8005032:	f7fd fd86 	bl	8002b42 <xTaskCreate>
			configMAX_PRIORITIES - 1, NULL);

	vTaskStartScheduler();
 8005036:	f7fe f851 	bl	80030dc <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800503a:	bf00      	nop
 800503c:	e7fd      	b.n	800503a <main+0x52>
 800503e:	bf00      	nop
 8005040:	080081a0 	.word	0x080081a0
 8005044:	08005421 	.word	0x08005421
 8005048:	080081a8 	.word	0x080081a8
 800504c:	080050c9 	.word	0x080050c9

08005050 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8005050:	b580      	push	{r7, lr}
 8005052:	b090      	sub	sp, #64	@ 0x40
 8005054:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8005056:	f107 0318 	add.w	r3, r7, #24
 800505a:	2228      	movs	r2, #40	@ 0x28
 800505c:	2100      	movs	r1, #0
 800505e:	4618      	mov	r0, r3
 8005060:	f002 fdb2 	bl	8007bc8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8005064:	1d3b      	adds	r3, r7, #4
 8005066:	2200      	movs	r2, #0
 8005068:	601a      	str	r2, [r3, #0]
 800506a:	605a      	str	r2, [r3, #4]
 800506c:	609a      	str	r2, [r3, #8]
 800506e:	60da      	str	r2, [r3, #12]
 8005070:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005072:	2302      	movs	r3, #2
 8005074:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005076:	2301      	movs	r3, #1
 8005078:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800507a:	2310      	movs	r3, #16
 800507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800507e:	2300      	movs	r3, #0
 8005080:	637b      	str	r3, [r7, #52]	@ 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005082:	f107 0318 	add.w	r3, r7, #24
 8005086:	4618      	mov	r0, r3
 8005088:	f001 ff10 	bl	8006eac <HAL_RCC_OscConfig>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <SystemClock_Config+0x46>
		Error_Handler();
 8005092:	f000 fad7 	bl	8005644 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005096:	230f      	movs	r3, #15
 8005098:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800509a:	2300      	movs	r3, #0
 800509c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800509e:	2300      	movs	r3, #0
 80050a0:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050a2:	2300      	movs	r3, #0
 80050a4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050a6:	2300      	movs	r3, #0
 80050a8:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80050aa:	1d3b      	adds	r3, r7, #4
 80050ac:	2100      	movs	r1, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	f002 f97e 	bl	80073b0 <HAL_RCC_ClockConfig>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <SystemClock_Config+0x6e>
		Error_Handler();
 80050ba:	f000 fac3 	bl	8005644 <Error_Handler>
	}
}
 80050be:	bf00      	nop
 80050c0:	3740      	adds	r7, #64	@ 0x40
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <vSystemViewStartTask>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void vSystemViewStartTask(void *argument) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	// THÊM DÒNG NÀY: Chờ 1 giây để J-Link và SystemView trên PC sẵn sàng
	vTaskDelay(pdMS_TO_TICKS(100));
 80050d0:	2064      	movs	r0, #100	@ 0x64
 80050d2:	f7fd ff73 	bl	8002fbc <vTaskDelay>

	/* Bật trace, DWT, ITM an toàn khi đang debug */
	if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) {
 80050d6:	4b19      	ldr	r3, [pc, #100]	@ (800513c <vSystemViewStartTask+0x74>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d024      	beq.n	800512c <vSystemViewStartTask+0x64>
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80050e2:	4b16      	ldr	r3, [pc, #88]	@ (800513c <vSystemViewStartTask+0x74>)
 80050e4:	68db      	ldr	r3, [r3, #12]
 80050e6:	4a15      	ldr	r2, [pc, #84]	@ (800513c <vSystemViewStartTask+0x74>)
 80050e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050ec:	60d3      	str	r3, [r2, #12]
		DWT->CYCCNT = 0;
 80050ee:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <vSystemViewStartTask+0x78>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	605a      	str	r2, [r3, #4]
		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80050f4:	4b12      	ldr	r3, [pc, #72]	@ (8005140 <vSystemViewStartTask+0x78>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a11      	ldr	r2, [pc, #68]	@ (8005140 <vSystemViewStartTask+0x78>)
 80050fa:	f043 0301 	orr.w	r3, r3, #1
 80050fe:	6013      	str	r3, [r2, #0]

		ITM->LAR = 0xC5ACCE55;
 8005100:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005104:	4a0f      	ldr	r2, [pc, #60]	@ (8005144 <vSystemViewStartTask+0x7c>)
 8005106:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
		ITM->TCR = 0;
 800510a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800510e:	2200      	movs	r2, #0
 8005110:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
		ITM->TCR = ITM_TCR_ITMENA_Msk | (1 << ITM_TCR_TSENA_Pos);
 8005114:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005118:	2203      	movs	r2, #3
 800511a:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
		ITM->TER = 1;
 800511e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005122:	2201      	movs	r2, #1
 8005124:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00

		SEGGER_SYSVIEW_Start();
 8005128:	f7fc fa8e 	bl	8001648 <SEGGER_SYSVIEW_Start>
	}
	/* Task này chỉ chạy 1 lần và tự xóa */
	vTaskDelete(NULL);
 800512c:	2000      	movs	r0, #0
 800512e:	f7fd fe77 	bl	8002e20 <vTaskDelete>
}
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	e000edf0 	.word	0xe000edf0
 8005140:	e0001000 	.word	0xe0001000
 8005144:	c5acce55 	.word	0xc5acce55

08005148 <vConfigureTimerForRunTimeStats>:
void vConfigureTimerForRunTimeStats(void) {
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0
	// Bật clock cho TIM2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 800514c:	4b10      	ldr	r3, [pc, #64]	@ (8005190 <vConfigureTimerForRunTimeStats+0x48>)
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	4a0f      	ldr	r2, [pc, #60]	@ (8005190 <vConfigureTimerForRunTimeStats+0x48>)
 8005152:	f043 0301 	orr.w	r3, r3, #1
 8005156:	61d3      	str	r3, [r2, #28]
	// Cấu hình TIM2 chạy ở 1 MHz
	TIM2->ARR = 0xFFFFFFFF; // Đếm tối đa
 8005158:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800515c:	f04f 32ff 	mov.w	r2, #4294967295
 8005160:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = (SystemCoreClock / 1000000) - 1; // Prescaler để đạt 1 MHz
 8005162:	4b0c      	ldr	r3, [pc, #48]	@ (8005194 <vConfigureTimerForRunTimeStats+0x4c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a0c      	ldr	r2, [pc, #48]	@ (8005198 <vConfigureTimerForRunTimeStats+0x50>)
 8005168:	fba2 2303 	umull	r2, r3, r2, r3
 800516c:	0c9b      	lsrs	r3, r3, #18
 800516e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005172:	3b01      	subs	r3, #1
 8005174:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->CR1 |= TIM_CR1_CEN; // Bật Timer
 8005176:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6013      	str	r3, [r2, #0]
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	bc80      	pop	{r7}
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40021000 	.word	0x40021000
 8005194:	20000014 	.word	0x20000014
 8005198:	431bde83 	.word	0x431bde83

0800519c <ulGetRunTimeCounterValue>:

unsigned long ulGetRunTimeCounterValue(void) {
 800519c:	b480      	push	{r7}
 800519e:	af00      	add	r7, sp, #0
	return TIM2->CNT; // Trả về giá trị đếm
 80051a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80051a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bc80      	pop	{r7}
 80051ac:	4770      	bx	lr
	...

080051b0 <MPU6050Init>:
void MPU6050Init(void) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af04      	add	r7, sp, #16
	// Đọc thanh ghi WHO_AM_I (0x75), kết quả phải là 0x68
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x75, I2C_MEMADD_SIZE_8BIT, &check, 1, 1000);
 80051b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051ba:	9302      	str	r3, [sp, #8]
 80051bc:	2301      	movs	r3, #1
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	4b27      	ldr	r3, [pc, #156]	@ (8005260 <MPU6050Init+0xb0>)
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	2301      	movs	r3, #1
 80051c6:	2275      	movs	r2, #117	@ 0x75
 80051c8:	21d0      	movs	r1, #208	@ 0xd0
 80051ca:	4826      	ldr	r0, [pc, #152]	@ (8005264 <MPU6050Init+0xb4>)
 80051cc:	f001 f846 	bl	800625c <HAL_I2C_Mem_Read>

	if (check == 0x68) {
 80051d0:	4b23      	ldr	r3, [pc, #140]	@ (8005260 <MPU6050Init+0xb0>)
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2b68      	cmp	r3, #104	@ 0x68
 80051d6:	d13f      	bne.n	8005258 <MPU6050Init+0xa8>
		// Thoát chế độ sleep (ghi 0 vào thanh ghi PWR_MGMT_1)
		mData = 0x00;
 80051d8:	4b23      	ldr	r3, [pc, #140]	@ (8005268 <MPU6050Init+0xb8>)
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x6B, I2C_MEMADD_SIZE_8BIT, &mData, 1,
 80051de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80051e2:	9302      	str	r3, [sp, #8]
 80051e4:	2301      	movs	r3, #1
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	4b1f      	ldr	r3, [pc, #124]	@ (8005268 <MPU6050Init+0xb8>)
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	2301      	movs	r3, #1
 80051ee:	226b      	movs	r2, #107	@ 0x6b
 80051f0:	21d0      	movs	r1, #208	@ 0xd0
 80051f2:	481c      	ldr	r0, [pc, #112]	@ (8005264 <MPU6050Init+0xb4>)
 80051f4:	f000 ff38 	bl	8006068 <HAL_I2C_Mem_Write>
				1000);

		// Cấu hình sample rate: 1kHz / (1+7) = 125Hz
		mData = 0x07;
 80051f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005268 <MPU6050Init+0xb8>)
 80051fa:	2207      	movs	r2, #7
 80051fc:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x19, I2C_MEMADD_SIZE_8BIT, &mData, 1,
 80051fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005202:	9302      	str	r3, [sp, #8]
 8005204:	2301      	movs	r3, #1
 8005206:	9301      	str	r3, [sp, #4]
 8005208:	4b17      	ldr	r3, [pc, #92]	@ (8005268 <MPU6050Init+0xb8>)
 800520a:	9300      	str	r3, [sp, #0]
 800520c:	2301      	movs	r3, #1
 800520e:	2219      	movs	r2, #25
 8005210:	21d0      	movs	r1, #208	@ 0xd0
 8005212:	4814      	ldr	r0, [pc, #80]	@ (8005264 <MPU6050Init+0xb4>)
 8005214:	f000 ff28 	bl	8006068 <HAL_I2C_Mem_Write>
				1000);

		// Cấu hình thang đo gyro ±250 °/s
		mData = 0x00;
 8005218:	4b13      	ldr	r3, [pc, #76]	@ (8005268 <MPU6050Init+0xb8>)
 800521a:	2200      	movs	r2, #0
 800521c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x1B, I2C_MEMADD_SIZE_8BIT, &mData, 1,
 800521e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005222:	9302      	str	r3, [sp, #8]
 8005224:	2301      	movs	r3, #1
 8005226:	9301      	str	r3, [sp, #4]
 8005228:	4b0f      	ldr	r3, [pc, #60]	@ (8005268 <MPU6050Init+0xb8>)
 800522a:	9300      	str	r3, [sp, #0]
 800522c:	2301      	movs	r3, #1
 800522e:	221b      	movs	r2, #27
 8005230:	21d0      	movs	r1, #208	@ 0xd0
 8005232:	480c      	ldr	r0, [pc, #48]	@ (8005264 <MPU6050Init+0xb4>)
 8005234:	f000 ff18 	bl	8006068 <HAL_I2C_Mem_Write>
				1000);

		// Cấu hình thang đo accel ±2g
		mData = 0x00;
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <MPU6050Init+0xb8>)
 800523a:	2200      	movs	r2, #0
 800523c:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x1C, I2C_MEMADD_SIZE_8BIT, &mData, 1,
 800523e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005242:	9302      	str	r3, [sp, #8]
 8005244:	2301      	movs	r3, #1
 8005246:	9301      	str	r3, [sp, #4]
 8005248:	4b07      	ldr	r3, [pc, #28]	@ (8005268 <MPU6050Init+0xb8>)
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	2301      	movs	r3, #1
 800524e:	221c      	movs	r2, #28
 8005250:	21d0      	movs	r1, #208	@ 0xd0
 8005252:	4804      	ldr	r0, [pc, #16]	@ (8005264 <MPU6050Init+0xb4>)
 8005254:	f000 ff08 	bl	8006068 <HAL_I2C_Mem_Write>
				1000);
	}
}
 8005258:	bf00      	nop
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20004138 	.word	0x20004138
 8005264:	20004174 	.word	0x20004174
 8005268:	20004139 	.word	0x20004139

0800526c <MPU6050ReadG>:

void MPU6050ReadG(void) {
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af04      	add	r7, sp, #16
	uint8_t dataG[6];
	// Đọc 6 byte từ thanh ghi GYRO_XOUT_H (0x43)
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x43, I2C_MEMADD_SIZE_8BIT, dataG, 6, 1000);
 8005272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005276:	9302      	str	r3, [sp, #8]
 8005278:	2306      	movs	r3, #6
 800527a:	9301      	str	r3, [sp, #4]
 800527c:	463b      	mov	r3, r7
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2301      	movs	r3, #1
 8005282:	2243      	movs	r2, #67	@ 0x43
 8005284:	21d0      	movs	r1, #208	@ 0xd0
 8005286:	4827      	ldr	r0, [pc, #156]	@ (8005324 <MPU6050ReadG+0xb8>)
 8005288:	f000 ffe8 	bl	800625c <HAL_I2C_Mem_Read>

	// Gộp byte high và low thành số 16-bit
	gx = (int16_t) (dataG[0] << 8 | dataG[1]);
 800528c:	783b      	ldrb	r3, [r7, #0]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	b21a      	sxth	r2, r3
 8005292:	787b      	ldrb	r3, [r7, #1]
 8005294:	b21b      	sxth	r3, r3
 8005296:	4313      	orrs	r3, r2
 8005298:	b21a      	sxth	r2, r3
 800529a:	4b23      	ldr	r3, [pc, #140]	@ (8005328 <MPU6050ReadG+0xbc>)
 800529c:	801a      	strh	r2, [r3, #0]
	gy = (int16_t) (dataG[2] << 8 | dataG[3]);
 800529e:	78bb      	ldrb	r3, [r7, #2]
 80052a0:	021b      	lsls	r3, r3, #8
 80052a2:	b21a      	sxth	r2, r3
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	b21b      	sxth	r3, r3
 80052a8:	4313      	orrs	r3, r2
 80052aa:	b21a      	sxth	r2, r3
 80052ac:	4b1f      	ldr	r3, [pc, #124]	@ (800532c <MPU6050ReadG+0xc0>)
 80052ae:	801a      	strh	r2, [r3, #0]
	gz = (int16_t) (dataG[4] << 8 | dataG[5]);
 80052b0:	793b      	ldrb	r3, [r7, #4]
 80052b2:	021b      	lsls	r3, r3, #8
 80052b4:	b21a      	sxth	r2, r3
 80052b6:	797b      	ldrb	r3, [r7, #5]
 80052b8:	b21b      	sxth	r3, r3
 80052ba:	4313      	orrs	r3, r2
 80052bc:	b21a      	sxth	r2, r3
 80052be:	4b1c      	ldr	r3, [pc, #112]	@ (8005330 <MPU6050ReadG+0xc4>)
 80052c0:	801a      	strh	r2, [r3, #0]

	// Chuyển đổi sang °/s (scale ±250°/s → 131 LSB/°/s)
	GX = (float) gx / 131.0;
 80052c2:	4b19      	ldr	r3, [pc, #100]	@ (8005328 <MPU6050ReadG+0xbc>)
 80052c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052c8:	4618      	mov	r0, r3
 80052ca:	f7fb f83f 	bl	800034c <__aeabi_i2f>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4918      	ldr	r1, [pc, #96]	@ (8005334 <MPU6050ReadG+0xc8>)
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7fb f942 	bl	800055c <__aeabi_fdiv>
 80052d8:	4603      	mov	r3, r0
 80052da:	461a      	mov	r2, r3
 80052dc:	4b16      	ldr	r3, [pc, #88]	@ (8005338 <MPU6050ReadG+0xcc>)
 80052de:	601a      	str	r2, [r3, #0]
	GY = (float) gy / 131.0;
 80052e0:	4b12      	ldr	r3, [pc, #72]	@ (800532c <MPU6050ReadG+0xc0>)
 80052e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fb f830 	bl	800034c <__aeabi_i2f>
 80052ec:	4603      	mov	r3, r0
 80052ee:	4911      	ldr	r1, [pc, #68]	@ (8005334 <MPU6050ReadG+0xc8>)
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fb f933 	bl	800055c <__aeabi_fdiv>
 80052f6:	4603      	mov	r3, r0
 80052f8:	461a      	mov	r2, r3
 80052fa:	4b10      	ldr	r3, [pc, #64]	@ (800533c <MPU6050ReadG+0xd0>)
 80052fc:	601a      	str	r2, [r3, #0]
	GZ = (float) gz / 131.0;
 80052fe:	4b0c      	ldr	r3, [pc, #48]	@ (8005330 <MPU6050ReadG+0xc4>)
 8005300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005304:	4618      	mov	r0, r3
 8005306:	f7fb f821 	bl	800034c <__aeabi_i2f>
 800530a:	4603      	mov	r3, r0
 800530c:	4909      	ldr	r1, [pc, #36]	@ (8005334 <MPU6050ReadG+0xc8>)
 800530e:	4618      	mov	r0, r3
 8005310:	f7fb f924 	bl	800055c <__aeabi_fdiv>
 8005314:	4603      	mov	r3, r0
 8005316:	461a      	mov	r2, r3
 8005318:	4b09      	ldr	r3, [pc, #36]	@ (8005340 <MPU6050ReadG+0xd4>)
 800531a:	601a      	str	r2, [r3, #0]
}
 800531c:	bf00      	nop
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	20004174 	.word	0x20004174
 8005328:	2000412e 	.word	0x2000412e
 800532c:	20004130 	.word	0x20004130
 8005330:	20004132 	.word	0x20004132
 8005334:	43030000 	.word	0x43030000
 8005338:	2000411c 	.word	0x2000411c
 800533c:	20004120 	.word	0x20004120
 8005340:	20004124 	.word	0x20004124

08005344 <MPU6050ReadA>:

void MPU6050ReadA(void) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af04      	add	r7, sp, #16
	uint8_t dataA[6];
	// Đọc 6 byte từ thanh ghi ACCEL_XOUT_H (0x3B)
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x3B, I2C_MEMADD_SIZE_8BIT, dataA, 6, 1000);
 800534a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800534e:	9302      	str	r3, [sp, #8]
 8005350:	2306      	movs	r3, #6
 8005352:	9301      	str	r3, [sp, #4]
 8005354:	463b      	mov	r3, r7
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	2301      	movs	r3, #1
 800535a:	223b      	movs	r2, #59	@ 0x3b
 800535c:	21d0      	movs	r1, #208	@ 0xd0
 800535e:	4829      	ldr	r0, [pc, #164]	@ (8005404 <MPU6050ReadA+0xc0>)
 8005360:	f000 ff7c 	bl	800625c <HAL_I2C_Mem_Read>

	ax = (int16_t) (dataA[0] << 8 | dataA[1]);
 8005364:	783b      	ldrb	r3, [r7, #0]
 8005366:	021b      	lsls	r3, r3, #8
 8005368:	b21a      	sxth	r2, r3
 800536a:	787b      	ldrb	r3, [r7, #1]
 800536c:	b21b      	sxth	r3, r3
 800536e:	4313      	orrs	r3, r2
 8005370:	b21a      	sxth	r2, r3
 8005372:	4b25      	ldr	r3, [pc, #148]	@ (8005408 <MPU6050ReadA+0xc4>)
 8005374:	801a      	strh	r2, [r3, #0]
	ay = (int16_t) (dataA[2] << 8 | dataA[3]);
 8005376:	78bb      	ldrb	r3, [r7, #2]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	b21a      	sxth	r2, r3
 800537c:	78fb      	ldrb	r3, [r7, #3]
 800537e:	b21b      	sxth	r3, r3
 8005380:	4313      	orrs	r3, r2
 8005382:	b21a      	sxth	r2, r3
 8005384:	4b21      	ldr	r3, [pc, #132]	@ (800540c <MPU6050ReadA+0xc8>)
 8005386:	801a      	strh	r2, [r3, #0]
	az = (int16_t) (dataA[4] << 8 | dataA[5]);
 8005388:	793b      	ldrb	r3, [r7, #4]
 800538a:	021b      	lsls	r3, r3, #8
 800538c:	b21a      	sxth	r2, r3
 800538e:	797b      	ldrb	r3, [r7, #5]
 8005390:	b21b      	sxth	r3, r3
 8005392:	4313      	orrs	r3, r2
 8005394:	b21a      	sxth	r2, r3
 8005396:	4b1e      	ldr	r3, [pc, #120]	@ (8005410 <MPU6050ReadA+0xcc>)
 8005398:	801a      	strh	r2, [r3, #0]

	// Chuyển đổi sang đơn vị g (scale ±2g → 16384 LSB/g)
	AX = (float) ax / 16384.0;
 800539a:	4b1b      	ldr	r3, [pc, #108]	@ (8005408 <MPU6050ReadA+0xc4>)
 800539c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fa ffd3 	bl	800034c <__aeabi_i2f>
 80053a6:	4603      	mov	r3, r0
 80053a8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fb f8d5 	bl	800055c <__aeabi_fdiv>
 80053b2:	4603      	mov	r3, r0
 80053b4:	461a      	mov	r2, r3
 80053b6:	4b17      	ldr	r3, [pc, #92]	@ (8005414 <MPU6050ReadA+0xd0>)
 80053b8:	601a      	str	r2, [r3, #0]
	AY = (float) ay / 16384.0;
 80053ba:	4b14      	ldr	r3, [pc, #80]	@ (800540c <MPU6050ReadA+0xc8>)
 80053bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fa ffc3 	bl	800034c <__aeabi_i2f>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fb f8c5 	bl	800055c <__aeabi_fdiv>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	4b10      	ldr	r3, [pc, #64]	@ (8005418 <MPU6050ReadA+0xd4>)
 80053d8:	601a      	str	r2, [r3, #0]
	AZ = (float) az / 16384.0;
 80053da:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <MPU6050ReadA+0xcc>)
 80053dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fa ffb3 	bl	800034c <__aeabi_i2f>
 80053e6:	4603      	mov	r3, r0
 80053e8:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 80053ec:	4618      	mov	r0, r3
 80053ee:	f7fb f8b5 	bl	800055c <__aeabi_fdiv>
 80053f2:	4603      	mov	r3, r0
 80053f4:	461a      	mov	r2, r3
 80053f6:	4b09      	ldr	r3, [pc, #36]	@ (800541c <MPU6050ReadA+0xd8>)
 80053f8:	601a      	str	r2, [r3, #0]
}
 80053fa:	bf00      	nop
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
 8005402:	bf00      	nop
 8005404:	20004174 	.word	0x20004174
 8005408:	20004128 	.word	0x20004128
 800540c:	2000412a 	.word	0x2000412a
 8005410:	2000412c 	.word	0x2000412c
 8005414:	20004110 	.word	0x20004110
 8005418:	20004114 	.word	0x20004114
 800541c:	20004118 	.word	0x20004118

08005420 <TaskMPU6050_Read>:

void TaskMPU6050_Read(void *argument) {
 8005420:	b5b0      	push	{r4, r5, r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	lastTime = HAL_GetTick();
 8005428:	f000 fa6c 	bl	8005904 <HAL_GetTick>
 800542c:	4603      	mov	r3, r0
 800542e:	4a42      	ldr	r2, [pc, #264]	@ (8005538 <TaskMPU6050_Read+0x118>)
 8005430:	6013      	str	r3, [r2, #0]

	for (;;) {
		// Đọc cảm biến
		MPU6050ReadA();
 8005432:	f7ff ff87 	bl	8005344 <MPU6050ReadA>
		MPU6050ReadG();
 8005436:	f7ff ff19 	bl	800526c <MPU6050ReadG>

		// Tính khoảng thời gian delta t
		uint32_t now = HAL_GetTick();
 800543a:	f000 fa63 	bl	8005904 <HAL_GetTick>
 800543e:	6178      	str	r0, [r7, #20]
		float dt = (now - lastTime) / 1000.0f;
 8005440:	4b3d      	ldr	r3, [pc, #244]	@ (8005538 <TaskMPU6050_Read+0x118>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	4618      	mov	r0, r3
 800544a:	f7fa ff7b 	bl	8000344 <__aeabi_ui2f>
 800544e:	4603      	mov	r3, r0
 8005450:	493a      	ldr	r1, [pc, #232]	@ (800553c <TaskMPU6050_Read+0x11c>)
 8005452:	4618      	mov	r0, r3
 8005454:	f7fb f882 	bl	800055c <__aeabi_fdiv>
 8005458:	4603      	mov	r3, r0
 800545a:	613b      	str	r3, [r7, #16]
		lastTime = now;
 800545c:	4a36      	ldr	r2, [pc, #216]	@ (8005538 <TaskMPU6050_Read+0x118>)
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	6013      	str	r3, [r2, #0]

		// Góc tính từ accelerometer (độ)
		float pitchAcc = atan2f(AX, sqrtf(AY * AY + AZ * AZ)) * 57.2958f;
 8005462:	4b37      	ldr	r3, [pc, #220]	@ (8005540 <TaskMPU6050_Read+0x120>)
 8005464:	681c      	ldr	r4, [r3, #0]
 8005466:	4b37      	ldr	r3, [pc, #220]	@ (8005544 <TaskMPU6050_Read+0x124>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a36      	ldr	r2, [pc, #216]	@ (8005544 <TaskMPU6050_Read+0x124>)
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	4611      	mov	r1, r2
 8005470:	4618      	mov	r0, r3
 8005472:	f7fa ffbf 	bl	80003f4 <__aeabi_fmul>
 8005476:	4603      	mov	r3, r0
 8005478:	461d      	mov	r5, r3
 800547a:	4b33      	ldr	r3, [pc, #204]	@ (8005548 <TaskMPU6050_Read+0x128>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a32      	ldr	r2, [pc, #200]	@ (8005548 <TaskMPU6050_Read+0x128>)
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	4611      	mov	r1, r2
 8005484:	4618      	mov	r0, r3
 8005486:	f7fa ffb5 	bl	80003f4 <__aeabi_fmul>
 800548a:	4603      	mov	r3, r0
 800548c:	4619      	mov	r1, r3
 800548e:	4628      	mov	r0, r5
 8005490:	f7fa fea8 	bl	80001e4 <__addsf3>
 8005494:	4603      	mov	r3, r0
 8005496:	4618      	mov	r0, r3
 8005498:	f002 fbd8 	bl	8007c4c <sqrtf>
 800549c:	4603      	mov	r3, r0
 800549e:	4619      	mov	r1, r3
 80054a0:	4620      	mov	r0, r4
 80054a2:	f002 fbd1 	bl	8007c48 <atan2f>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4928      	ldr	r1, [pc, #160]	@ (800554c <TaskMPU6050_Read+0x12c>)
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fa ffa2 	bl	80003f4 <__aeabi_fmul>
 80054b0:	4603      	mov	r3, r0
 80054b2:	60fb      	str	r3, [r7, #12]
		float rollAcc = atan2f(AY, sqrtf(AX * AX + AZ * AZ)) * 57.2958f;
 80054b4:	4b23      	ldr	r3, [pc, #140]	@ (8005544 <TaskMPU6050_Read+0x124>)
 80054b6:	681c      	ldr	r4, [r3, #0]
 80054b8:	4b21      	ldr	r3, [pc, #132]	@ (8005540 <TaskMPU6050_Read+0x120>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a20      	ldr	r2, [pc, #128]	@ (8005540 <TaskMPU6050_Read+0x120>)
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	4611      	mov	r1, r2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7fa ff96 	bl	80003f4 <__aeabi_fmul>
 80054c8:	4603      	mov	r3, r0
 80054ca:	461d      	mov	r5, r3
 80054cc:	4b1e      	ldr	r3, [pc, #120]	@ (8005548 <TaskMPU6050_Read+0x128>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005548 <TaskMPU6050_Read+0x128>)
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f7fa ff8c 	bl	80003f4 <__aeabi_fmul>
 80054dc:	4603      	mov	r3, r0
 80054de:	4619      	mov	r1, r3
 80054e0:	4628      	mov	r0, r5
 80054e2:	f7fa fe7f 	bl	80001e4 <__addsf3>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4618      	mov	r0, r3
 80054ea:	f002 fbaf 	bl	8007c4c <sqrtf>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4619      	mov	r1, r3
 80054f2:	4620      	mov	r0, r4
 80054f4:	f002 fba8 	bl	8007c48 <atan2f>
 80054f8:	4603      	mov	r3, r0
 80054fa:	4914      	ldr	r1, [pc, #80]	@ (800554c <TaskMPU6050_Read+0x12c>)
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fa ff79 	bl	80003f4 <__aeabi_fmul>
 8005502:	4603      	mov	r3, r0
 8005504:	60bb      	str	r3, [r7, #8]

		// Lọc Kalman (kết hợp gyro + accel)
		pitch_val = Kalman_getAngle(&kalmanPitch, pitchAcc, GX, dt);
 8005506:	4b12      	ldr	r3, [pc, #72]	@ (8005550 <TaskMPU6050_Read+0x130>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	68f9      	ldr	r1, [r7, #12]
 800550e:	4811      	ldr	r0, [pc, #68]	@ (8005554 <TaskMPU6050_Read+0x134>)
 8005510:	f7ff fc52 	bl	8004db8 <Kalman_getAngle>
 8005514:	4603      	mov	r3, r0
 8005516:	4a10      	ldr	r2, [pc, #64]	@ (8005558 <TaskMPU6050_Read+0x138>)
 8005518:	6013      	str	r3, [r2, #0]
		roll_val = Kalman_getAngle(&kalmanRoll, rollAcc, GY, dt);
 800551a:	4b10      	ldr	r3, [pc, #64]	@ (800555c <TaskMPU6050_Read+0x13c>)
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	480f      	ldr	r0, [pc, #60]	@ (8005560 <TaskMPU6050_Read+0x140>)
 8005524:	f7ff fc48 	bl	8004db8 <Kalman_getAngle>
 8005528:	4603      	mov	r3, r0
 800552a:	4a0e      	ldr	r2, [pc, #56]	@ (8005564 <TaskMPU6050_Read+0x144>)
 800552c:	6013      	str	r3, [r2, #0]

		// Debug (in ra UART nếu cần)
		// printf("Pitch: %.2f, Roll: %.2f\r\n", pitch_val, roll_val);

		// Delay 10ms → tần số 100Hz
		vTaskDelay(pdMS_TO_TICKS(10));
 800552e:	200a      	movs	r0, #10
 8005530:	f7fd fd44 	bl	8002fbc <vTaskDelay>
	for (;;) {
 8005534:	bf00      	nop
 8005536:	e77c      	b.n	8005432 <TaskMPU6050_Read+0x12>
 8005538:	20004134 	.word	0x20004134
 800553c:	447a0000 	.word	0x447a0000
 8005540:	20004110 	.word	0x20004110
 8005544:	20004114 	.word	0x20004114
 8005548:	20004118 	.word	0x20004118
 800554c:	42652ee6 	.word	0x42652ee6
 8005550:	2000411c 	.word	0x2000411c
 8005554:	2000413c 	.word	0x2000413c
 8005558:	20004108 	.word	0x20004108
 800555c:	20004120 	.word	0x20004120
 8005560:	20004158 	.word	0x20004158
 8005564:	2000410c 	.word	0x2000410c

08005568 <MX_I2C1_Init>:
	}
}

static void MX_I2C1_Init(void) {
 8005568:	b580      	push	{r7, lr}
 800556a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800556c:	4b12      	ldr	r3, [pc, #72]	@ (80055b8 <MX_I2C1_Init+0x50>)
 800556e:	4a13      	ldr	r2, [pc, #76]	@ (80055bc <MX_I2C1_Init+0x54>)
 8005570:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8005572:	4b11      	ldr	r3, [pc, #68]	@ (80055b8 <MX_I2C1_Init+0x50>)
 8005574:	4a12      	ldr	r2, [pc, #72]	@ (80055c0 <MX_I2C1_Init+0x58>)
 8005576:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005578:	4b0f      	ldr	r3, [pc, #60]	@ (80055b8 <MX_I2C1_Init+0x50>)
 800557a:	2200      	movs	r2, #0
 800557c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800557e:	4b0e      	ldr	r3, [pc, #56]	@ (80055b8 <MX_I2C1_Init+0x50>)
 8005580:	2200      	movs	r2, #0
 8005582:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005584:	4b0c      	ldr	r3, [pc, #48]	@ (80055b8 <MX_I2C1_Init+0x50>)
 8005586:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800558a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800558c:	4b0a      	ldr	r3, [pc, #40]	@ (80055b8 <MX_I2C1_Init+0x50>)
 800558e:	2200      	movs	r2, #0
 8005590:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8005592:	4b09      	ldr	r3, [pc, #36]	@ (80055b8 <MX_I2C1_Init+0x50>)
 8005594:	2200      	movs	r2, #0
 8005596:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005598:	4b07      	ldr	r3, [pc, #28]	@ (80055b8 <MX_I2C1_Init+0x50>)
 800559a:	2200      	movs	r2, #0
 800559c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800559e:	4b06      	ldr	r3, [pc, #24]	@ (80055b8 <MX_I2C1_Init+0x50>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80055a4:	4804      	ldr	r0, [pc, #16]	@ (80055b8 <MX_I2C1_Init+0x50>)
 80055a6:	f000 fc1b 	bl	8005de0 <HAL_I2C_Init>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80055b0:	f000 f848 	bl	8005644 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80055b4:	bf00      	nop
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20004174 	.word	0x20004174
 80055bc:	40005400 	.word	0x40005400
 80055c0:	000186a0 	.word	0x000186a0

080055c4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80055ca:	4b14      	ldr	r3, [pc, #80]	@ (800561c <MX_GPIO_Init+0x58>)
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	4a13      	ldr	r2, [pc, #76]	@ (800561c <MX_GPIO_Init+0x58>)
 80055d0:	f043 0320 	orr.w	r3, r3, #32
 80055d4:	6193      	str	r3, [r2, #24]
 80055d6:	4b11      	ldr	r3, [pc, #68]	@ (800561c <MX_GPIO_Init+0x58>)
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80055e2:	4b0e      	ldr	r3, [pc, #56]	@ (800561c <MX_GPIO_Init+0x58>)
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	4a0d      	ldr	r2, [pc, #52]	@ (800561c <MX_GPIO_Init+0x58>)
 80055e8:	f043 0304 	orr.w	r3, r3, #4
 80055ec:	6193      	str	r3, [r2, #24]
 80055ee:	4b0b      	ldr	r3, [pc, #44]	@ (800561c <MX_GPIO_Init+0x58>)
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	60bb      	str	r3, [r7, #8]
 80055f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80055fa:	4b08      	ldr	r3, [pc, #32]	@ (800561c <MX_GPIO_Init+0x58>)
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	4a07      	ldr	r2, [pc, #28]	@ (800561c <MX_GPIO_Init+0x58>)
 8005600:	f043 0308 	orr.w	r3, r3, #8
 8005604:	6193      	str	r3, [r2, #24]
 8005606:	4b05      	ldr	r3, [pc, #20]	@ (800561c <MX_GPIO_Init+0x58>)
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f003 0308 	and.w	r3, r3, #8
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	687b      	ldr	r3, [r7, #4]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	bc80      	pop	{r7}
 800561a:	4770      	bx	lr
 800561c:	40021000 	.word	0x40021000

08005620 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM1) {
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a04      	ldr	r2, [pc, #16]	@ (8005640 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d101      	bne.n	8005636 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8005632:	f000 f955 	bl	80058e0 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8005636:	bf00      	nop
 8005638:	3708      	adds	r7, #8
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40012c00 	.word	0x40012c00

08005644 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005648:	b672      	cpsid	i
}
 800564a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800564c:	bf00      	nop
 800564e:	e7fd      	b.n	800564c <Error_Handler+0x8>

08005650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005656:	4b15      	ldr	r3, [pc, #84]	@ (80056ac <HAL_MspInit+0x5c>)
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	4a14      	ldr	r2, [pc, #80]	@ (80056ac <HAL_MspInit+0x5c>)
 800565c:	f043 0301 	orr.w	r3, r3, #1
 8005660:	6193      	str	r3, [r2, #24]
 8005662:	4b12      	ldr	r3, [pc, #72]	@ (80056ac <HAL_MspInit+0x5c>)
 8005664:	699b      	ldr	r3, [r3, #24]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800566e:	4b0f      	ldr	r3, [pc, #60]	@ (80056ac <HAL_MspInit+0x5c>)
 8005670:	69db      	ldr	r3, [r3, #28]
 8005672:	4a0e      	ldr	r2, [pc, #56]	@ (80056ac <HAL_MspInit+0x5c>)
 8005674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005678:	61d3      	str	r3, [r2, #28]
 800567a:	4b0c      	ldr	r3, [pc, #48]	@ (80056ac <HAL_MspInit+0x5c>)
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005682:	607b      	str	r3, [r7, #4]
 8005684:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005686:	4b0a      	ldr	r3, [pc, #40]	@ (80056b0 <HAL_MspInit+0x60>)
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8005692:	60fb      	str	r3, [r7, #12]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800569a:	60fb      	str	r3, [r7, #12]
 800569c:	4a04      	ldr	r2, [pc, #16]	@ (80056b0 <HAL_MspInit+0x60>)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80056a2:	bf00      	nop
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr
 80056ac:	40021000 	.word	0x40021000
 80056b0:	40010000 	.word	0x40010000

080056b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b088      	sub	sp, #32
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056bc:	f107 0310 	add.w	r3, r7, #16
 80056c0:	2200      	movs	r2, #0
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	605a      	str	r2, [r3, #4]
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a15      	ldr	r2, [pc, #84]	@ (8005724 <HAL_I2C_MspInit+0x70>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d123      	bne.n	800571c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056d4:	4b14      	ldr	r3, [pc, #80]	@ (8005728 <HAL_I2C_MspInit+0x74>)
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	4a13      	ldr	r2, [pc, #76]	@ (8005728 <HAL_I2C_MspInit+0x74>)
 80056da:	f043 0308 	orr.w	r3, r3, #8
 80056de:	6193      	str	r3, [r2, #24]
 80056e0:	4b11      	ldr	r3, [pc, #68]	@ (8005728 <HAL_I2C_MspInit+0x74>)
 80056e2:	699b      	ldr	r3, [r3, #24]
 80056e4:	f003 0308 	and.w	r3, r3, #8
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80056ec:	23c0      	movs	r3, #192	@ 0xc0
 80056ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056f0:	2312      	movs	r3, #18
 80056f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80056f4:	2303      	movs	r3, #3
 80056f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f8:	f107 0310 	add.w	r3, r7, #16
 80056fc:	4619      	mov	r1, r3
 80056fe:	480b      	ldr	r0, [pc, #44]	@ (800572c <HAL_I2C_MspInit+0x78>)
 8005700:	f000 f9ea 	bl	8005ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005704:	4b08      	ldr	r3, [pc, #32]	@ (8005728 <HAL_I2C_MspInit+0x74>)
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	4a07      	ldr	r2, [pc, #28]	@ (8005728 <HAL_I2C_MspInit+0x74>)
 800570a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800570e:	61d3      	str	r3, [r2, #28]
 8005710:	4b05      	ldr	r3, [pc, #20]	@ (8005728 <HAL_I2C_MspInit+0x74>)
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800571c:	bf00      	nop
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40005400 	.word	0x40005400
 8005728:	40021000 	.word	0x40021000
 800572c:	40010c00 	.word	0x40010c00

08005730 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	@ 0x30
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005746:	4b2e      	ldr	r3, [pc, #184]	@ (8005800 <HAL_InitTick+0xd0>)
 8005748:	699b      	ldr	r3, [r3, #24]
 800574a:	4a2d      	ldr	r2, [pc, #180]	@ (8005800 <HAL_InitTick+0xd0>)
 800574c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005750:	6193      	str	r3, [r2, #24]
 8005752:	4b2b      	ldr	r3, [pc, #172]	@ (8005800 <HAL_InitTick+0xd0>)
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800575a:	60bb      	str	r3, [r7, #8]
 800575c:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800575e:	f107 020c 	add.w	r2, r7, #12
 8005762:	f107 0310 	add.w	r3, r7, #16
 8005766:	4611      	mov	r1, r2
 8005768:	4618      	mov	r0, r3
 800576a:	f001 ff91 	bl	8007690 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800576e:	f001 ff7b 	bl	8007668 <HAL_RCC_GetPCLK2Freq>
 8005772:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	4a23      	ldr	r2, [pc, #140]	@ (8005804 <HAL_InitTick+0xd4>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	0c9b      	lsrs	r3, r3, #18
 800577e:	3b01      	subs	r3, #1
 8005780:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005782:	4b21      	ldr	r3, [pc, #132]	@ (8005808 <HAL_InitTick+0xd8>)
 8005784:	4a21      	ldr	r2, [pc, #132]	@ (800580c <HAL_InitTick+0xdc>)
 8005786:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005788:	4b1f      	ldr	r3, [pc, #124]	@ (8005808 <HAL_InitTick+0xd8>)
 800578a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800578e:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005790:	4a1d      	ldr	r2, [pc, #116]	@ (8005808 <HAL_InitTick+0xd8>)
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005796:	4b1c      	ldr	r3, [pc, #112]	@ (8005808 <HAL_InitTick+0xd8>)
 8005798:	2200      	movs	r2, #0
 800579a:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800579c:	4b1a      	ldr	r3, [pc, #104]	@ (8005808 <HAL_InitTick+0xd8>)
 800579e:	2200      	movs	r2, #0
 80057a0:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057a2:	4b19      	ldr	r3, [pc, #100]	@ (8005808 <HAL_InitTick+0xd8>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80057a8:	4817      	ldr	r0, [pc, #92]	@ (8005808 <HAL_InitTick+0xd8>)
 80057aa:	f001 ffbf 	bl	800772c <HAL_TIM_Base_Init>
 80057ae:	4603      	mov	r3, r0
 80057b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80057b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d11b      	bne.n	80057f4 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80057bc:	4812      	ldr	r0, [pc, #72]	@ (8005808 <HAL_InitTick+0xd8>)
 80057be:	f002 f80d 	bl	80077dc <HAL_TIM_Base_Start_IT>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80057c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d111      	bne.n	80057f4 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80057d0:	2019      	movs	r0, #25
 80057d2:	f000 f972 	bl	8005aba <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b0f      	cmp	r3, #15
 80057da:	d808      	bhi.n	80057ee <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80057dc:	2200      	movs	r2, #0
 80057de:	6879      	ldr	r1, [r7, #4]
 80057e0:	2019      	movs	r0, #25
 80057e2:	f000 f94e 	bl	8005a82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005810 <HAL_InitTick+0xe0>)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6013      	str	r3, [r2, #0]
 80057ec:	e002      	b.n	80057f4 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80057f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3730      	adds	r7, #48	@ 0x30
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}
 8005800:	40021000 	.word	0x40021000
 8005804:	431bde83 	.word	0x431bde83
 8005808:	200041c8 	.word	0x200041c8
 800580c:	40012c00 	.word	0x40012c00
 8005810:	20000018 	.word	0x20000018

08005814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005818:	bf00      	nop
 800581a:	e7fd      	b.n	8005818 <NMI_Handler+0x4>

0800581c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800581c:	b480      	push	{r7}
 800581e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005820:	bf00      	nop
 8005822:	e7fd      	b.n	8005820 <HardFault_Handler+0x4>

08005824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005824:	b480      	push	{r7}
 8005826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005828:	bf00      	nop
 800582a:	e7fd      	b.n	8005828 <MemManage_Handler+0x4>

0800582c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005830:	bf00      	nop
 8005832:	e7fd      	b.n	8005830 <BusFault_Handler+0x4>

08005834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005834:	b480      	push	{r7}
 8005836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <UsageFault_Handler+0x4>

0800583c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800583c:	b480      	push	{r7}
 800583e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005840:	bf00      	nop
 8005842:	46bd      	mov	sp, r7
 8005844:	bc80      	pop	{r7}
 8005846:	4770      	bx	lr

08005848 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800584c:	4802      	ldr	r0, [pc, #8]	@ (8005858 <TIM1_UP_IRQHandler+0x10>)
 800584e:	f002 f817 	bl	8007880 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8005852:	bf00      	nop
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	200041c8 	.word	0x200041c8

0800585c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005860:	bf00      	nop
 8005862:	46bd      	mov	sp, r7
 8005864:	bc80      	pop	{r7}
 8005866:	4770      	bx	lr

08005868 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005868:	f7ff fff8 	bl	800585c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800586c:	480b      	ldr	r0, [pc, #44]	@ (800589c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800586e:	490c      	ldr	r1, [pc, #48]	@ (80058a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8005870:	4a0c      	ldr	r2, [pc, #48]	@ (80058a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8005872:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005874:	e002      	b.n	800587c <LoopCopyDataInit>

08005876 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005876:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005878:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800587a:	3304      	adds	r3, #4

0800587c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800587c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800587e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005880:	d3f9      	bcc.n	8005876 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005882:	4a09      	ldr	r2, [pc, #36]	@ (80058a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005884:	4c09      	ldr	r4, [pc, #36]	@ (80058ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005886:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005888:	e001      	b.n	800588e <LoopFillZerobss>

0800588a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800588a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800588c:	3204      	adds	r2, #4

0800588e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800588e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005890:	d3fb      	bcc.n	800588a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005892:	f002 f9a7 	bl	8007be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005896:	f7ff fba7 	bl	8004fe8 <main>
  bx lr
 800589a:	4770      	bx	lr
  ldr r0, =_sdata
 800589c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058a0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80058a4:	0800824c 	.word	0x0800824c
  ldr r2, =_sbss
 80058a8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80058ac:	2000434c 	.word	0x2000434c

080058b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80058b0:	e7fe      	b.n	80058b0 <ADC1_2_IRQHandler>
	...

080058b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80058b8:	4b08      	ldr	r3, [pc, #32]	@ (80058dc <HAL_Init+0x28>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a07      	ldr	r2, [pc, #28]	@ (80058dc <HAL_Init+0x28>)
 80058be:	f043 0310 	orr.w	r3, r3, #16
 80058c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058c4:	2003      	movs	r0, #3
 80058c6:	f000 f8d1 	bl	8005a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80058ca:	200f      	movs	r0, #15
 80058cc:	f7ff ff30 	bl	8005730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80058d0:	f7ff febe 	bl	8005650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40022000 	.word	0x40022000

080058e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80058e4:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <HAL_IncTick+0x1c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	461a      	mov	r2, r3
 80058ea:	4b05      	ldr	r3, [pc, #20]	@ (8005900 <HAL_IncTick+0x20>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4413      	add	r3, r2
 80058f0:	4a03      	ldr	r2, [pc, #12]	@ (8005900 <HAL_IncTick+0x20>)
 80058f2:	6013      	str	r3, [r2, #0]
}
 80058f4:	bf00      	nop
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr
 80058fc:	2000001c 	.word	0x2000001c
 8005900:	20004210 	.word	0x20004210

08005904 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
  return uwTick;
 8005908:	4b02      	ldr	r3, [pc, #8]	@ (8005914 <HAL_GetTick+0x10>)
 800590a:	681b      	ldr	r3, [r3, #0]
}
 800590c:	4618      	mov	r0, r3
 800590e:	46bd      	mov	sp, r7
 8005910:	bc80      	pop	{r7}
 8005912:	4770      	bx	lr
 8005914:	20004210 	.word	0x20004210

08005918 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005928:	4b0c      	ldr	r3, [pc, #48]	@ (800595c <__NVIC_SetPriorityGrouping+0x44>)
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005934:	4013      	ands	r3, r2
 8005936:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005940:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005948:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800594a:	4a04      	ldr	r2, [pc, #16]	@ (800595c <__NVIC_SetPriorityGrouping+0x44>)
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	60d3      	str	r3, [r2, #12]
}
 8005950:	bf00      	nop
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	e000ed00 	.word	0xe000ed00

08005960 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005960:	b480      	push	{r7}
 8005962:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005964:	4b04      	ldr	r3, [pc, #16]	@ (8005978 <__NVIC_GetPriorityGrouping+0x18>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	0a1b      	lsrs	r3, r3, #8
 800596a:	f003 0307 	and.w	r3, r3, #7
}
 800596e:	4618      	mov	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	e000ed00 	.word	0xe000ed00

0800597c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	4603      	mov	r3, r0
 8005984:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800598a:	2b00      	cmp	r3, #0
 800598c:	db0b      	blt.n	80059a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	f003 021f 	and.w	r2, r3, #31
 8005994:	4906      	ldr	r1, [pc, #24]	@ (80059b0 <__NVIC_EnableIRQ+0x34>)
 8005996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800599a:	095b      	lsrs	r3, r3, #5
 800599c:	2001      	movs	r0, #1
 800599e:	fa00 f202 	lsl.w	r2, r0, r2
 80059a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bc80      	pop	{r7}
 80059ae:	4770      	bx	lr
 80059b0:	e000e100 	.word	0xe000e100

080059b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	6039      	str	r1, [r7, #0]
 80059be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	db0a      	blt.n	80059de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	490c      	ldr	r1, [pc, #48]	@ (8005a00 <__NVIC_SetPriority+0x4c>)
 80059ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059d2:	0112      	lsls	r2, r2, #4
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	440b      	add	r3, r1
 80059d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059dc:	e00a      	b.n	80059f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4908      	ldr	r1, [pc, #32]	@ (8005a04 <__NVIC_SetPriority+0x50>)
 80059e4:	79fb      	ldrb	r3, [r7, #7]
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	3b04      	subs	r3, #4
 80059ec:	0112      	lsls	r2, r2, #4
 80059ee:	b2d2      	uxtb	r2, r2
 80059f0:	440b      	add	r3, r1
 80059f2:	761a      	strb	r2, [r3, #24]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bc80      	pop	{r7}
 80059fc:	4770      	bx	lr
 80059fe:	bf00      	nop
 8005a00:	e000e100 	.word	0xe000e100
 8005a04:	e000ed00 	.word	0xe000ed00

08005a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b089      	sub	sp, #36	@ 0x24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 0307 	and.w	r3, r3, #7
 8005a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f1c3 0307 	rsb	r3, r3, #7
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	bf28      	it	cs
 8005a26:	2304      	movcs	r3, #4
 8005a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	2b06      	cmp	r3, #6
 8005a30:	d902      	bls.n	8005a38 <NVIC_EncodePriority+0x30>
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	3b03      	subs	r3, #3
 8005a36:	e000      	b.n	8005a3a <NVIC_EncodePriority+0x32>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	fa02 f303 	lsl.w	r3, r2, r3
 8005a46:	43da      	mvns	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	401a      	ands	r2, r3
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a50:	f04f 31ff 	mov.w	r1, #4294967295
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	fa01 f303 	lsl.w	r3, r1, r3
 8005a5a:	43d9      	mvns	r1, r3
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a60:	4313      	orrs	r3, r2
         );
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3724      	adds	r7, #36	@ 0x24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bc80      	pop	{r7}
 8005a6a:	4770      	bx	lr

08005a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f7ff ff4f 	bl	8005918 <__NVIC_SetPriorityGrouping>
}
 8005a7a:	bf00      	nop
 8005a7c:	3708      	adds	r7, #8
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b086      	sub	sp, #24
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	4603      	mov	r3, r0
 8005a8a:	60b9      	str	r1, [r7, #8]
 8005a8c:	607a      	str	r2, [r7, #4]
 8005a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005a90:	2300      	movs	r3, #0
 8005a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005a94:	f7ff ff64 	bl	8005960 <__NVIC_GetPriorityGrouping>
 8005a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a9a:	687a      	ldr	r2, [r7, #4]
 8005a9c:	68b9      	ldr	r1, [r7, #8]
 8005a9e:	6978      	ldr	r0, [r7, #20]
 8005aa0:	f7ff ffb2 	bl	8005a08 <NVIC_EncodePriority>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005aaa:	4611      	mov	r1, r2
 8005aac:	4618      	mov	r0, r3
 8005aae:	f7ff ff81 	bl	80059b4 <__NVIC_SetPriority>
}
 8005ab2:	bf00      	nop
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b082      	sub	sp, #8
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7ff ff57 	bl	800597c <__NVIC_EnableIRQ>
}
 8005ace:	bf00      	nop
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
	...

08005ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b08b      	sub	sp, #44	@ 0x2c
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005aea:	e169      	b.n	8005dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005aec:	2201      	movs	r2, #1
 8005aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	4013      	ands	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	f040 8158 	bne.w	8005dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	4a9a      	ldr	r2, [pc, #616]	@ (8005d78 <HAL_GPIO_Init+0x2a0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d05e      	beq.n	8005bd2 <HAL_GPIO_Init+0xfa>
 8005b14:	4a98      	ldr	r2, [pc, #608]	@ (8005d78 <HAL_GPIO_Init+0x2a0>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d875      	bhi.n	8005c06 <HAL_GPIO_Init+0x12e>
 8005b1a:	4a98      	ldr	r2, [pc, #608]	@ (8005d7c <HAL_GPIO_Init+0x2a4>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d058      	beq.n	8005bd2 <HAL_GPIO_Init+0xfa>
 8005b20:	4a96      	ldr	r2, [pc, #600]	@ (8005d7c <HAL_GPIO_Init+0x2a4>)
 8005b22:	4293      	cmp	r3, r2
 8005b24:	d86f      	bhi.n	8005c06 <HAL_GPIO_Init+0x12e>
 8005b26:	4a96      	ldr	r2, [pc, #600]	@ (8005d80 <HAL_GPIO_Init+0x2a8>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d052      	beq.n	8005bd2 <HAL_GPIO_Init+0xfa>
 8005b2c:	4a94      	ldr	r2, [pc, #592]	@ (8005d80 <HAL_GPIO_Init+0x2a8>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d869      	bhi.n	8005c06 <HAL_GPIO_Init+0x12e>
 8005b32:	4a94      	ldr	r2, [pc, #592]	@ (8005d84 <HAL_GPIO_Init+0x2ac>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d04c      	beq.n	8005bd2 <HAL_GPIO_Init+0xfa>
 8005b38:	4a92      	ldr	r2, [pc, #584]	@ (8005d84 <HAL_GPIO_Init+0x2ac>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d863      	bhi.n	8005c06 <HAL_GPIO_Init+0x12e>
 8005b3e:	4a92      	ldr	r2, [pc, #584]	@ (8005d88 <HAL_GPIO_Init+0x2b0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d046      	beq.n	8005bd2 <HAL_GPIO_Init+0xfa>
 8005b44:	4a90      	ldr	r2, [pc, #576]	@ (8005d88 <HAL_GPIO_Init+0x2b0>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d85d      	bhi.n	8005c06 <HAL_GPIO_Init+0x12e>
 8005b4a:	2b12      	cmp	r3, #18
 8005b4c:	d82a      	bhi.n	8005ba4 <HAL_GPIO_Init+0xcc>
 8005b4e:	2b12      	cmp	r3, #18
 8005b50:	d859      	bhi.n	8005c06 <HAL_GPIO_Init+0x12e>
 8005b52:	a201      	add	r2, pc, #4	@ (adr r2, 8005b58 <HAL_GPIO_Init+0x80>)
 8005b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b58:	08005bd3 	.word	0x08005bd3
 8005b5c:	08005bad 	.word	0x08005bad
 8005b60:	08005bbf 	.word	0x08005bbf
 8005b64:	08005c01 	.word	0x08005c01
 8005b68:	08005c07 	.word	0x08005c07
 8005b6c:	08005c07 	.word	0x08005c07
 8005b70:	08005c07 	.word	0x08005c07
 8005b74:	08005c07 	.word	0x08005c07
 8005b78:	08005c07 	.word	0x08005c07
 8005b7c:	08005c07 	.word	0x08005c07
 8005b80:	08005c07 	.word	0x08005c07
 8005b84:	08005c07 	.word	0x08005c07
 8005b88:	08005c07 	.word	0x08005c07
 8005b8c:	08005c07 	.word	0x08005c07
 8005b90:	08005c07 	.word	0x08005c07
 8005b94:	08005c07 	.word	0x08005c07
 8005b98:	08005c07 	.word	0x08005c07
 8005b9c:	08005bb5 	.word	0x08005bb5
 8005ba0:	08005bc9 	.word	0x08005bc9
 8005ba4:	4a79      	ldr	r2, [pc, #484]	@ (8005d8c <HAL_GPIO_Init+0x2b4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d013      	beq.n	8005bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005baa:	e02c      	b.n	8005c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	623b      	str	r3, [r7, #32]
          break;
 8005bb2:	e029      	b.n	8005c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	3304      	adds	r3, #4
 8005bba:	623b      	str	r3, [r7, #32]
          break;
 8005bbc:	e024      	b.n	8005c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	3308      	adds	r3, #8
 8005bc4:	623b      	str	r3, [r7, #32]
          break;
 8005bc6:	e01f      	b.n	8005c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	330c      	adds	r3, #12
 8005bce:	623b      	str	r3, [r7, #32]
          break;
 8005bd0:	e01a      	b.n	8005c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d102      	bne.n	8005be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005bda:	2304      	movs	r3, #4
 8005bdc:	623b      	str	r3, [r7, #32]
          break;
 8005bde:	e013      	b.n	8005c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d105      	bne.n	8005bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005be8:	2308      	movs	r3, #8
 8005bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	69fa      	ldr	r2, [r7, #28]
 8005bf0:	611a      	str	r2, [r3, #16]
          break;
 8005bf2:	e009      	b.n	8005c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	615a      	str	r2, [r3, #20]
          break;
 8005bfe:	e003      	b.n	8005c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8005c00:	2300      	movs	r3, #0
 8005c02:	623b      	str	r3, [r7, #32]
          break;
 8005c04:	e000      	b.n	8005c08 <HAL_GPIO_Init+0x130>
          break;
 8005c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2bff      	cmp	r3, #255	@ 0xff
 8005c0c:	d801      	bhi.n	8005c12 <HAL_GPIO_Init+0x13a>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	e001      	b.n	8005c16 <HAL_GPIO_Init+0x13e>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	3304      	adds	r3, #4
 8005c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2bff      	cmp	r3, #255	@ 0xff
 8005c1c:	d802      	bhi.n	8005c24 <HAL_GPIO_Init+0x14c>
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	e002      	b.n	8005c2a <HAL_GPIO_Init+0x152>
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	3b08      	subs	r3, #8
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	210f      	movs	r1, #15
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	fa01 f303 	lsl.w	r3, r1, r3
 8005c38:	43db      	mvns	r3, r3
 8005c3a:	401a      	ands	r2, r3
 8005c3c:	6a39      	ldr	r1, [r7, #32]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	fa01 f303 	lsl.w	r3, r1, r3
 8005c44:	431a      	orrs	r2, r3
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 80b1 	beq.w	8005dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005c58:	4b4d      	ldr	r3, [pc, #308]	@ (8005d90 <HAL_GPIO_Init+0x2b8>)
 8005c5a:	699b      	ldr	r3, [r3, #24]
 8005c5c:	4a4c      	ldr	r2, [pc, #304]	@ (8005d90 <HAL_GPIO_Init+0x2b8>)
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	6193      	str	r3, [r2, #24]
 8005c64:	4b4a      	ldr	r3, [pc, #296]	@ (8005d90 <HAL_GPIO_Init+0x2b8>)
 8005c66:	699b      	ldr	r3, [r3, #24]
 8005c68:	f003 0301 	and.w	r3, r3, #1
 8005c6c:	60bb      	str	r3, [r7, #8]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8005c70:	4a48      	ldr	r2, [pc, #288]	@ (8005d94 <HAL_GPIO_Init+0x2bc>)
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	089b      	lsrs	r3, r3, #2
 8005c76:	3302      	adds	r3, #2
 8005c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8005c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	009b      	lsls	r3, r3, #2
 8005c86:	220f      	movs	r2, #15
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	43db      	mvns	r3, r3
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4013      	ands	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a40      	ldr	r2, [pc, #256]	@ (8005d98 <HAL_GPIO_Init+0x2c0>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d013      	beq.n	8005cc4 <HAL_GPIO_Init+0x1ec>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8005d9c <HAL_GPIO_Init+0x2c4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00d      	beq.n	8005cc0 <HAL_GPIO_Init+0x1e8>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a3e      	ldr	r2, [pc, #248]	@ (8005da0 <HAL_GPIO_Init+0x2c8>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d007      	beq.n	8005cbc <HAL_GPIO_Init+0x1e4>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a3d      	ldr	r2, [pc, #244]	@ (8005da4 <HAL_GPIO_Init+0x2cc>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d101      	bne.n	8005cb8 <HAL_GPIO_Init+0x1e0>
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e006      	b.n	8005cc6 <HAL_GPIO_Init+0x1ee>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	e004      	b.n	8005cc6 <HAL_GPIO_Init+0x1ee>
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	e002      	b.n	8005cc6 <HAL_GPIO_Init+0x1ee>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <HAL_GPIO_Init+0x1ee>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc8:	f002 0203 	and.w	r2, r2, #3
 8005ccc:	0092      	lsls	r2, r2, #2
 8005cce:	4093      	lsls	r3, r2
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005cd6:	492f      	ldr	r1, [pc, #188]	@ (8005d94 <HAL_GPIO_Init+0x2bc>)
 8005cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cda:	089b      	lsrs	r3, r3, #2
 8005cdc:	3302      	adds	r3, #2
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d006      	beq.n	8005cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8005cf0:	4b2d      	ldr	r3, [pc, #180]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005cf2:	689a      	ldr	r2, [r3, #8]
 8005cf4:	492c      	ldr	r1, [pc, #176]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	608b      	str	r3, [r1, #8]
 8005cfc:	e006      	b.n	8005d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8005cfe:	4b2a      	ldr	r3, [pc, #168]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	4928      	ldr	r1, [pc, #160]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d08:	4013      	ands	r3, r2
 8005d0a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d006      	beq.n	8005d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005d18:	4b23      	ldr	r3, [pc, #140]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	4922      	ldr	r1, [pc, #136]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	60cb      	str	r3, [r1, #12]
 8005d24:	e006      	b.n	8005d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005d26:	4b20      	ldr	r3, [pc, #128]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	69bb      	ldr	r3, [r7, #24]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	491e      	ldr	r1, [pc, #120]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d006      	beq.n	8005d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8005d40:	4b19      	ldr	r3, [pc, #100]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d42:	685a      	ldr	r2, [r3, #4]
 8005d44:	4918      	ldr	r1, [pc, #96]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d46:	69bb      	ldr	r3, [r7, #24]
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	604b      	str	r3, [r1, #4]
 8005d4c:	e006      	b.n	8005d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8005d4e:	4b16      	ldr	r3, [pc, #88]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	43db      	mvns	r3, r3
 8005d56:	4914      	ldr	r1, [pc, #80]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d021      	beq.n	8005dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005d68:	4b0f      	ldr	r3, [pc, #60]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	490e      	ldr	r1, [pc, #56]	@ (8005da8 <HAL_GPIO_Init+0x2d0>)
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	600b      	str	r3, [r1, #0]
 8005d74:	e021      	b.n	8005dba <HAL_GPIO_Init+0x2e2>
 8005d76:	bf00      	nop
 8005d78:	10320000 	.word	0x10320000
 8005d7c:	10310000 	.word	0x10310000
 8005d80:	10220000 	.word	0x10220000
 8005d84:	10210000 	.word	0x10210000
 8005d88:	10120000 	.word	0x10120000
 8005d8c:	10110000 	.word	0x10110000
 8005d90:	40021000 	.word	0x40021000
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40010800 	.word	0x40010800
 8005d9c:	40010c00 	.word	0x40010c00
 8005da0:	40011000 	.word	0x40011000
 8005da4:	40011400 	.word	0x40011400
 8005da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8005dac:	4b0b      	ldr	r3, [pc, #44]	@ (8005ddc <HAL_GPIO_Init+0x304>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	43db      	mvns	r3, r3
 8005db4:	4909      	ldr	r1, [pc, #36]	@ (8005ddc <HAL_GPIO_Init+0x304>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f47f ae8e 	bne.w	8005aec <HAL_GPIO_Init+0x14>
  }
}
 8005dd0:	bf00      	nop
 8005dd2:	bf00      	nop
 8005dd4:	372c      	adds	r7, #44	@ 0x2c
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bc80      	pop	{r7}
 8005dda:	4770      	bx	lr
 8005ddc:	40010400 	.word	0x40010400

08005de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d101      	bne.n	8005df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e12b      	b.n	800604a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f7ff fc54 	bl	80056b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2224      	movs	r2, #36	@ 0x24
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681a      	ldr	r2, [r3, #0]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f022 0201 	bic.w	r2, r2, #1
 8005e22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005e42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e44:	f001 fbfc 	bl	8007640 <HAL_RCC_GetPCLK1Freq>
 8005e48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	4a81      	ldr	r2, [pc, #516]	@ (8006054 <HAL_I2C_Init+0x274>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d807      	bhi.n	8005e64 <HAL_I2C_Init+0x84>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	4a80      	ldr	r2, [pc, #512]	@ (8006058 <HAL_I2C_Init+0x278>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	bf94      	ite	ls
 8005e5c:	2301      	movls	r3, #1
 8005e5e:	2300      	movhi	r3, #0
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	e006      	b.n	8005e72 <HAL_I2C_Init+0x92>
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4a7d      	ldr	r2, [pc, #500]	@ (800605c <HAL_I2C_Init+0x27c>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	bf94      	ite	ls
 8005e6c:	2301      	movls	r3, #1
 8005e6e:	2300      	movhi	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e0e7      	b.n	800604a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a78      	ldr	r2, [pc, #480]	@ (8006060 <HAL_I2C_Init+0x280>)
 8005e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e82:	0c9b      	lsrs	r3, r3, #18
 8005e84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68ba      	ldr	r2, [r7, #8]
 8005e96:	430a      	orrs	r2, r1
 8005e98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	4a6a      	ldr	r2, [pc, #424]	@ (8006054 <HAL_I2C_Init+0x274>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d802      	bhi.n	8005eb4 <HAL_I2C_Init+0xd4>
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	e009      	b.n	8005ec8 <HAL_I2C_Init+0xe8>
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	4a69      	ldr	r2, [pc, #420]	@ (8006064 <HAL_I2C_Init+0x284>)
 8005ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec4:	099b      	lsrs	r3, r3, #6
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6812      	ldr	r2, [r2, #0]
 8005ecc:	430b      	orrs	r3, r1
 8005ece:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	69db      	ldr	r3, [r3, #28]
 8005ed6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005eda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	495c      	ldr	r1, [pc, #368]	@ (8006054 <HAL_I2C_Init+0x274>)
 8005ee4:	428b      	cmp	r3, r1
 8005ee6:	d819      	bhi.n	8005f1c <HAL_I2C_Init+0x13c>
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	1e59      	subs	r1, r3, #1
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	005b      	lsls	r3, r3, #1
 8005ef2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ef6:	1c59      	adds	r1, r3, #1
 8005ef8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005efc:	400b      	ands	r3, r1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_I2C_Init+0x138>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	1e59      	subs	r1, r3, #1
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	005b      	lsls	r3, r3, #1
 8005f0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f10:	3301      	adds	r3, #1
 8005f12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f16:	e051      	b.n	8005fbc <HAL_I2C_Init+0x1dc>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	e04f      	b.n	8005fbc <HAL_I2C_Init+0x1dc>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d111      	bne.n	8005f48 <HAL_I2C_Init+0x168>
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	1e58      	subs	r0, r3, #1
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6859      	ldr	r1, [r3, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	440b      	add	r3, r1
 8005f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f36:	3301      	adds	r3, #1
 8005f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf0c      	ite	eq
 8005f40:	2301      	moveq	r3, #1
 8005f42:	2300      	movne	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	e012      	b.n	8005f6e <HAL_I2C_Init+0x18e>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	1e58      	subs	r0, r3, #1
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6859      	ldr	r1, [r3, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	440b      	add	r3, r1
 8005f56:	0099      	lsls	r1, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f5e:	3301      	adds	r3, #1
 8005f60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf0c      	ite	eq
 8005f68:	2301      	moveq	r3, #1
 8005f6a:	2300      	movne	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d001      	beq.n	8005f76 <HAL_I2C_Init+0x196>
 8005f72:	2301      	movs	r3, #1
 8005f74:	e022      	b.n	8005fbc <HAL_I2C_Init+0x1dc>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10e      	bne.n	8005f9c <HAL_I2C_Init+0x1bc>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	1e58      	subs	r0, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6859      	ldr	r1, [r3, #4]
 8005f86:	460b      	mov	r3, r1
 8005f88:	005b      	lsls	r3, r3, #1
 8005f8a:	440b      	add	r3, r1
 8005f8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f90:	3301      	adds	r3, #1
 8005f92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f9a:	e00f      	b.n	8005fbc <HAL_I2C_Init+0x1dc>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	1e58      	subs	r0, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	440b      	add	r3, r1
 8005faa:	0099      	lsls	r1, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fbc:	6879      	ldr	r1, [r7, #4]
 8005fbe:	6809      	ldr	r1, [r1, #0]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69da      	ldr	r2, [r3, #28]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	431a      	orrs	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005fea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	6911      	ldr	r1, [r2, #16]
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	68d2      	ldr	r2, [r2, #12]
 8005ff6:	4311      	orrs	r1, r2
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6812      	ldr	r2, [r2, #0]
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
 8006006:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	699b      	ldr	r3, [r3, #24]
 8006012:	431a      	orrs	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	430a      	orrs	r2, r1
 800601a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006048:	2300      	movs	r3, #0
}
 800604a:	4618      	mov	r0, r3
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	000186a0 	.word	0x000186a0
 8006058:	001e847f 	.word	0x001e847f
 800605c:	003d08ff 	.word	0x003d08ff
 8006060:	431bde83 	.word	0x431bde83
 8006064:	10624dd3 	.word	0x10624dd3

08006068 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b088      	sub	sp, #32
 800606c:	af02      	add	r7, sp, #8
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	4608      	mov	r0, r1
 8006072:	4611      	mov	r1, r2
 8006074:	461a      	mov	r2, r3
 8006076:	4603      	mov	r3, r0
 8006078:	817b      	strh	r3, [r7, #10]
 800607a:	460b      	mov	r3, r1
 800607c:	813b      	strh	r3, [r7, #8]
 800607e:	4613      	mov	r3, r2
 8006080:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006082:	f7ff fc3f 	bl	8005904 <HAL_GetTick>
 8006086:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800608e:	b2db      	uxtb	r3, r3
 8006090:	2b20      	cmp	r3, #32
 8006092:	f040 80d9 	bne.w	8006248 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	2319      	movs	r3, #25
 800609c:	2201      	movs	r2, #1
 800609e:	496d      	ldr	r1, [pc, #436]	@ (8006254 <HAL_I2C_Mem_Write+0x1ec>)
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f000 fccd 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80060ac:	2302      	movs	r3, #2
 80060ae:	e0cc      	b.n	800624a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d101      	bne.n	80060be <HAL_I2C_Mem_Write+0x56>
 80060ba:	2302      	movs	r3, #2
 80060bc:	e0c5      	b.n	800624a <HAL_I2C_Mem_Write+0x1e2>
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d007      	beq.n	80060e4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	681a      	ldr	r2, [r3, #0]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0201 	orr.w	r2, r2, #1
 80060e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80060f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2221      	movs	r2, #33	@ 0x21
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2240      	movs	r2, #64	@ 0x40
 8006100:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006114:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4a4d      	ldr	r2, [pc, #308]	@ (8006258 <HAL_I2C_Mem_Write+0x1f0>)
 8006124:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006126:	88f8      	ldrh	r0, [r7, #6]
 8006128:	893a      	ldrh	r2, [r7, #8]
 800612a:	8979      	ldrh	r1, [r7, #10]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	4603      	mov	r3, r0
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 fb04 	bl	8006744 <I2C_RequestMemoryWrite>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d052      	beq.n	80061e8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e081      	b.n	800624a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f000 fd92 	bl	8006c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d00d      	beq.n	8006172 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615a:	2b04      	cmp	r3, #4
 800615c:	d107      	bne.n	800616e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800616c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e06b      	b.n	800624a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006182:	1c5a      	adds	r2, r3, #1
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800618c:	3b01      	subs	r3, #1
 800618e:	b29a      	uxth	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006198:	b29b      	uxth	r3, r3
 800619a:	3b01      	subs	r3, #1
 800619c:	b29a      	uxth	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	695b      	ldr	r3, [r3, #20]
 80061a8:	f003 0304 	and.w	r3, r3, #4
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d11b      	bne.n	80061e8 <HAL_I2C_Mem_Write+0x180>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d017      	beq.n	80061e8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061bc:	781a      	ldrb	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c8:	1c5a      	adds	r2, r3, #1
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b01      	subs	r3, #1
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d1aa      	bne.n	8006146 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061f0:	697a      	ldr	r2, [r7, #20]
 80061f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061f4:	68f8      	ldr	r0, [r7, #12]
 80061f6:	f000 fd85 	bl	8006d04 <I2C_WaitOnBTFFlagUntilTimeout>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006204:	2b04      	cmp	r3, #4
 8006206:	d107      	bne.n	8006218 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006216:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e016      	b.n	800624a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800622a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2220      	movs	r2, #32
 8006230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	e000      	b.n	800624a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006248:	2302      	movs	r3, #2
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	00100002 	.word	0x00100002
 8006258:	ffff0000 	.word	0xffff0000

0800625c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b08c      	sub	sp, #48	@ 0x30
 8006260:	af02      	add	r7, sp, #8
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	4608      	mov	r0, r1
 8006266:	4611      	mov	r1, r2
 8006268:	461a      	mov	r2, r3
 800626a:	4603      	mov	r3, r0
 800626c:	817b      	strh	r3, [r7, #10]
 800626e:	460b      	mov	r3, r1
 8006270:	813b      	strh	r3, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8006276:	2300      	movs	r3, #0
 8006278:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800627a:	f7ff fb43 	bl	8005904 <HAL_GetTick>
 800627e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b20      	cmp	r3, #32
 800628a:	f040 8250 	bne.w	800672e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	2319      	movs	r3, #25
 8006294:	2201      	movs	r2, #1
 8006296:	4982      	ldr	r1, [pc, #520]	@ (80064a0 <HAL_I2C_Mem_Read+0x244>)
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 fbd1 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d001      	beq.n	80062a8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80062a4:	2302      	movs	r3, #2
 80062a6:	e243      	b.n	8006730 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d101      	bne.n	80062b6 <HAL_I2C_Mem_Read+0x5a>
 80062b2:	2302      	movs	r3, #2
 80062b4:	e23c      	b.n	8006730 <HAL_I2C_Mem_Read+0x4d4>
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0301 	and.w	r3, r3, #1
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d007      	beq.n	80062dc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	681a      	ldr	r2, [r3, #0]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f042 0201 	orr.w	r2, r2, #1
 80062da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2222      	movs	r2, #34	@ 0x22
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2240      	movs	r2, #64	@ 0x40
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006306:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800630c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006312:	b29a      	uxth	r2, r3
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4a62      	ldr	r2, [pc, #392]	@ (80064a4 <HAL_I2C_Mem_Read+0x248>)
 800631c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800631e:	88f8      	ldrh	r0, [r7, #6]
 8006320:	893a      	ldrh	r2, [r7, #8]
 8006322:	8979      	ldrh	r1, [r7, #10]
 8006324:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006326:	9301      	str	r3, [sp, #4]
 8006328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632a:	9300      	str	r3, [sp, #0]
 800632c:	4603      	mov	r3, r0
 800632e:	68f8      	ldr	r0, [r7, #12]
 8006330:	f000 fa9e 	bl	8006870 <I2C_RequestMemoryRead>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d001      	beq.n	800633e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e1f8      	b.n	8006730 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006342:	2b00      	cmp	r3, #0
 8006344:	d113      	bne.n	800636e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006346:	2300      	movs	r3, #0
 8006348:	61fb      	str	r3, [r7, #28]
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	61fb      	str	r3, [r7, #28]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	699b      	ldr	r3, [r3, #24]
 8006358:	61fb      	str	r3, [r7, #28]
 800635a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	681a      	ldr	r2, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	e1cc      	b.n	8006708 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006372:	2b01      	cmp	r3, #1
 8006374:	d11e      	bne.n	80063b4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006384:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006386:	b672      	cpsid	i
}
 8006388:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800638a:	2300      	movs	r3, #0
 800638c:	61bb      	str	r3, [r7, #24]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	61bb      	str	r3, [r7, #24]
 800639e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063b0:	b662      	cpsie	i
}
 80063b2:	e035      	b.n	8006420 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d11e      	bne.n	80063fa <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80063cc:	b672      	cpsid	i
}
 80063ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	617b      	str	r3, [r7, #20]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80063f6:	b662      	cpsie	i
}
 80063f8:	e012      	b.n	8006420 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006408:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800640a:	2300      	movs	r3, #0
 800640c:	613b      	str	r3, [r7, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	613b      	str	r3, [r7, #16]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	613b      	str	r3, [r7, #16]
 800641e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8006420:	e172      	b.n	8006708 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006426:	2b03      	cmp	r3, #3
 8006428:	f200 811f 	bhi.w	800666a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006430:	2b01      	cmp	r3, #1
 8006432:	d123      	bne.n	800647c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006434:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006436:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 fcab 	bl	8006d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e173      	b.n	8006730 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800645a:	1c5a      	adds	r2, r3, #1
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006470:	b29b      	uxth	r3, r3
 8006472:	3b01      	subs	r3, #1
 8006474:	b29a      	uxth	r2, r3
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800647a:	e145      	b.n	8006708 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006480:	2b02      	cmp	r3, #2
 8006482:	d152      	bne.n	800652a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006486:	9300      	str	r3, [sp, #0]
 8006488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648a:	2200      	movs	r2, #0
 800648c:	4906      	ldr	r1, [pc, #24]	@ (80064a8 <HAL_I2C_Mem_Read+0x24c>)
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f000 fad6 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 8006494:	4603      	mov	r3, r0
 8006496:	2b00      	cmp	r3, #0
 8006498:	d008      	beq.n	80064ac <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e148      	b.n	8006730 <HAL_I2C_Mem_Read+0x4d4>
 800649e:	bf00      	nop
 80064a0:	00100002 	.word	0x00100002
 80064a4:	ffff0000 	.word	0xffff0000
 80064a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80064ac:	b672      	cpsid	i
}
 80064ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691a      	ldr	r2, [r3, #16]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064dc:	3b01      	subs	r3, #1
 80064de:	b29a      	uxth	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064e8:	b29b      	uxth	r3, r3
 80064ea:	3b01      	subs	r3, #1
 80064ec:	b29a      	uxth	r2, r3
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80064f2:	b662      	cpsie	i
}
 80064f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006508:	1c5a      	adds	r2, r3, #1
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006512:	3b01      	subs	r3, #1
 8006514:	b29a      	uxth	r2, r3
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800651e:	b29b      	uxth	r3, r3
 8006520:	3b01      	subs	r3, #1
 8006522:	b29a      	uxth	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006528:	e0ee      	b.n	8006708 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	9300      	str	r3, [sp, #0]
 800652e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006530:	2200      	movs	r2, #0
 8006532:	4981      	ldr	r1, [pc, #516]	@ (8006738 <HAL_I2C_Mem_Read+0x4dc>)
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fa83 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e0f5      	b.n	8006730 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006552:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8006554:	b672      	cpsid	i
}
 8006556:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	691a      	ldr	r2, [r3, #16]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006574:	3b01      	subs	r3, #1
 8006576:	b29a      	uxth	r2, r3
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006580:	b29b      	uxth	r3, r3
 8006582:	3b01      	subs	r3, #1
 8006584:	b29a      	uxth	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800658a:	4b6c      	ldr	r3, [pc, #432]	@ (800673c <HAL_I2C_Mem_Read+0x4e0>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	08db      	lsrs	r3, r3, #3
 8006590:	4a6b      	ldr	r2, [pc, #428]	@ (8006740 <HAL_I2C_Mem_Read+0x4e4>)
 8006592:	fba2 2303 	umull	r2, r3, r2, r3
 8006596:	0a1a      	lsrs	r2, r3, #8
 8006598:	4613      	mov	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	00da      	lsls	r2, r3, #3
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80065a4:	6a3b      	ldr	r3, [r7, #32]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80065aa:	6a3b      	ldr	r3, [r7, #32]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d118      	bne.n	80065e2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2220      	movs	r2, #32
 80065ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	2200      	movs	r2, #0
 80065c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ca:	f043 0220 	orr.w	r2, r3, #32
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80065d2:	b662      	cpsie	i
}
 80065d4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e0a6      	b.n	8006730 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	695b      	ldr	r3, [r3, #20]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b04      	cmp	r3, #4
 80065ee:	d1d9      	bne.n	80065a4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80065fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	691a      	ldr	r2, [r3, #16]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800660a:	b2d2      	uxtb	r2, r2
 800660c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800661c:	3b01      	subs	r3, #1
 800661e:	b29a      	uxth	r2, r3
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006628:	b29b      	uxth	r3, r3
 800662a:	3b01      	subs	r3, #1
 800662c:	b29a      	uxth	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8006632:	b662      	cpsie	i
}
 8006634:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	691a      	ldr	r2, [r3, #16]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006640:	b2d2      	uxtb	r2, r2
 8006642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006648:	1c5a      	adds	r2, r3, #1
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006652:	3b01      	subs	r3, #1
 8006654:	b29a      	uxth	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800665e:	b29b      	uxth	r3, r3
 8006660:	3b01      	subs	r3, #1
 8006662:	b29a      	uxth	r2, r3
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006668:	e04e      	b.n	8006708 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800666a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800666c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 fb90 	bl	8006d94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e058      	b.n	8006730 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	691a      	ldr	r2, [r3, #16]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	1c5a      	adds	r2, r3, #1
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	f003 0304 	and.w	r3, r3, #4
 80066ba:	2b04      	cmp	r3, #4
 80066bc:	d124      	bne.n	8006708 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c2:	2b03      	cmp	r3, #3
 80066c4:	d107      	bne.n	80066d6 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681a      	ldr	r2, [r3, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	691a      	ldr	r2, [r3, #16]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	b2d2      	uxtb	r2, r2
 80066e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e8:	1c5a      	adds	r2, r3, #1
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066f2:	3b01      	subs	r3, #1
 80066f4:	b29a      	uxth	r2, r3
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066fe:	b29b      	uxth	r3, r3
 8006700:	3b01      	subs	r3, #1
 8006702:	b29a      	uxth	r2, r3
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800670c:	2b00      	cmp	r3, #0
 800670e:	f47f ae88 	bne.w	8006422 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e000      	b.n	8006730 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 800672e:	2302      	movs	r3, #2
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	3728      	adds	r7, #40	@ 0x28
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	00010004 	.word	0x00010004
 800673c:	20000014 	.word	0x20000014
 8006740:	14f8b589 	.word	0x14f8b589

08006744 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b088      	sub	sp, #32
 8006748:	af02      	add	r7, sp, #8
 800674a:	60f8      	str	r0, [r7, #12]
 800674c:	4608      	mov	r0, r1
 800674e:	4611      	mov	r1, r2
 8006750:	461a      	mov	r2, r3
 8006752:	4603      	mov	r3, r0
 8006754:	817b      	strh	r3, [r7, #10]
 8006756:	460b      	mov	r3, r1
 8006758:	813b      	strh	r3, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681a      	ldr	r2, [r3, #0]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800676c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	2200      	movs	r2, #0
 8006776:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800677a:	68f8      	ldr	r0, [r7, #12]
 800677c:	f000 f960 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 8006780:	4603      	mov	r3, r0
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00d      	beq.n	80067a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006790:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006794:	d103      	bne.n	800679e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800679c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800679e:	2303      	movs	r3, #3
 80067a0:	e05f      	b.n	8006862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80067a2:	897b      	ldrh	r3, [r7, #10]
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	461a      	mov	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	6a3a      	ldr	r2, [r7, #32]
 80067b6:	492d      	ldr	r1, [pc, #180]	@ (800686c <I2C_RequestMemoryWrite+0x128>)
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f9bb 	bl	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e04c      	b.n	8006862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699b      	ldr	r3, [r3, #24]
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067e0:	6a39      	ldr	r1, [r7, #32]
 80067e2:	68f8      	ldr	r0, [r7, #12]
 80067e4:	f000 fa46 	bl	8006c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00d      	beq.n	800680a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d107      	bne.n	8006806 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006804:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e02b      	b.n	8006862 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800680a:	88fb      	ldrh	r3, [r7, #6]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d105      	bne.n	800681c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006810:	893b      	ldrh	r3, [r7, #8]
 8006812:	b2da      	uxtb	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	611a      	str	r2, [r3, #16]
 800681a:	e021      	b.n	8006860 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800681c:	893b      	ldrh	r3, [r7, #8]
 800681e:	0a1b      	lsrs	r3, r3, #8
 8006820:	b29b      	uxth	r3, r3
 8006822:	b2da      	uxtb	r2, r3
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800682a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800682c:	6a39      	ldr	r1, [r7, #32]
 800682e:	68f8      	ldr	r0, [r7, #12]
 8006830:	f000 fa20 	bl	8006c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00d      	beq.n	8006856 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683e:	2b04      	cmp	r3, #4
 8006840:	d107      	bne.n	8006852 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006850:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e005      	b.n	8006862 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006856:	893b      	ldrh	r3, [r7, #8]
 8006858:	b2da      	uxtb	r2, r3
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	00010002 	.word	0x00010002

08006870 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af02      	add	r7, sp, #8
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	4608      	mov	r0, r1
 800687a:	4611      	mov	r1, r2
 800687c:	461a      	mov	r2, r3
 800687e:	4603      	mov	r3, r0
 8006880:	817b      	strh	r3, [r7, #10]
 8006882:	460b      	mov	r3, r1
 8006884:	813b      	strh	r3, [r7, #8]
 8006886:	4613      	mov	r3, r2
 8006888:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006898:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	9300      	str	r3, [sp, #0]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f000 f8c2 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00d      	beq.n	80068de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068d0:	d103      	bne.n	80068da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068da:	2303      	movs	r3, #3
 80068dc:	e0aa      	b.n	8006a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068de:	897b      	ldrh	r3, [r7, #10]
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	461a      	mov	r2, r3
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80068ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068f0:	6a3a      	ldr	r2, [r7, #32]
 80068f2:	4952      	ldr	r1, [pc, #328]	@ (8006a3c <I2C_RequestMemoryRead+0x1cc>)
 80068f4:	68f8      	ldr	r0, [r7, #12]
 80068f6:	f000 f91d 	bl	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068fa:	4603      	mov	r3, r0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d001      	beq.n	8006904 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e097      	b.n	8006a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	695b      	ldr	r3, [r3, #20]
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	617b      	str	r3, [r7, #20]
 8006918:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800691a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800691c:	6a39      	ldr	r1, [r7, #32]
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f9a8 	bl	8006c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00d      	beq.n	8006946 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692e:	2b04      	cmp	r3, #4
 8006930:	d107      	bne.n	8006942 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006940:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
 8006944:	e076      	b.n	8006a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006946:	88fb      	ldrh	r3, [r7, #6]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d105      	bne.n	8006958 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800694c:	893b      	ldrh	r3, [r7, #8]
 800694e:	b2da      	uxtb	r2, r3
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	611a      	str	r2, [r3, #16]
 8006956:	e021      	b.n	800699c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006958:	893b      	ldrh	r3, [r7, #8]
 800695a:	0a1b      	lsrs	r3, r3, #8
 800695c:	b29b      	uxth	r3, r3
 800695e:	b2da      	uxtb	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006968:	6a39      	ldr	r1, [r7, #32]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f982 	bl	8006c74 <I2C_WaitOnTXEFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00d      	beq.n	8006992 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800697a:	2b04      	cmp	r3, #4
 800697c:	d107      	bne.n	800698e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681a      	ldr	r2, [r3, #0]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800698c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	e050      	b.n	8006a34 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006992:	893b      	ldrh	r3, [r7, #8]
 8006994:	b2da      	uxtb	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800699c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800699e:	6a39      	ldr	r1, [r7, #32]
 80069a0:	68f8      	ldr	r0, [r7, #12]
 80069a2:	f000 f967 	bl	8006c74 <I2C_WaitOnTXEFlagUntilTimeout>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00d      	beq.n	80069c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d107      	bne.n	80069c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e035      	b.n	8006a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80069d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80069d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	2200      	movs	r2, #0
 80069e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80069e4:	68f8      	ldr	r0, [r7, #12]
 80069e6:	f000 f82b 	bl	8006a40 <I2C_WaitOnFlagUntilTimeout>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069fe:	d103      	bne.n	8006a08 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a06:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e013      	b.n	8006a34 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006a0c:	897b      	ldrh	r3, [r7, #10]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	b2da      	uxtb	r2, r3
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a1e:	6a3a      	ldr	r2, [r7, #32]
 8006a20:	4906      	ldr	r1, [pc, #24]	@ (8006a3c <I2C_RequestMemoryRead+0x1cc>)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 f886 	bl	8006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d001      	beq.n	8006a32 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e000      	b.n	8006a34 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3718      	adds	r7, #24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	00010002 	.word	0x00010002

08006a40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a50:	e048      	b.n	8006ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a58:	d044      	beq.n	8006ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a5a:	f7fe ff53 	bl	8005904 <HAL_GetTick>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	1ad3      	subs	r3, r2, r3
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	429a      	cmp	r2, r3
 8006a68:	d302      	bcc.n	8006a70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d139      	bne.n	8006ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	0c1b      	lsrs	r3, r3, #16
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d10d      	bne.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	43da      	mvns	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4013      	ands	r3, r2
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf0c      	ite	eq
 8006a8c:	2301      	moveq	r3, #1
 8006a8e:	2300      	movne	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	461a      	mov	r2, r3
 8006a94:	e00c      	b.n	8006ab0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	43da      	mvns	r2, r3
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	bf0c      	ite	eq
 8006aa8:	2301      	moveq	r3, #1
 8006aaa:	2300      	movne	r3, #0
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	461a      	mov	r2, r3
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d116      	bne.n	8006ae4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ad0:	f043 0220 	orr.w	r2, r3, #32
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e023      	b.n	8006b2c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	0c1b      	lsrs	r3, r3, #16
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d10d      	bne.n	8006b0a <I2C_WaitOnFlagUntilTimeout+0xca>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	43da      	mvns	r2, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	4013      	ands	r3, r2
 8006afa:	b29b      	uxth	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	bf0c      	ite	eq
 8006b00:	2301      	moveq	r3, #1
 8006b02:	2300      	movne	r3, #0
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	461a      	mov	r2, r3
 8006b08:	e00c      	b.n	8006b24 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	43da      	mvns	r2, r3
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	4013      	ands	r3, r2
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	bf0c      	ite	eq
 8006b1c:	2301      	moveq	r3, #1
 8006b1e:	2300      	movne	r3, #0
 8006b20:	b2db      	uxtb	r3, r3
 8006b22:	461a      	mov	r2, r3
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d093      	beq.n	8006a52 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b2a:	2300      	movs	r3, #0
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3710      	adds	r7, #16
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b084      	sub	sp, #16
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
 8006b40:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b42:	e071      	b.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b4e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b52:	d123      	bne.n	8006b9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006b62:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b6c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b88:	f043 0204 	orr.w	r2, r3, #4
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2200      	movs	r2, #0
 8006b94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e067      	b.n	8006c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba2:	d041      	beq.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba4:	f7fe feae 	bl	8005904 <HAL_GetTick>
 8006ba8:	4602      	mov	r2, r0
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	1ad3      	subs	r3, r2, r3
 8006bae:	687a      	ldr	r2, [r7, #4]
 8006bb0:	429a      	cmp	r2, r3
 8006bb2:	d302      	bcc.n	8006bba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d136      	bne.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d10c      	bne.n	8006bde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	695b      	ldr	r3, [r3, #20]
 8006bca:	43da      	mvns	r2, r3
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bf14      	ite	ne
 8006bd6:	2301      	movne	r3, #1
 8006bd8:	2300      	moveq	r3, #0
 8006bda:	b2db      	uxtb	r3, r3
 8006bdc:	e00b      	b.n	8006bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	699b      	ldr	r3, [r3, #24]
 8006be4:	43da      	mvns	r2, r3
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	4013      	ands	r3, r2
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	bf14      	ite	ne
 8006bf0:	2301      	movne	r3, #1
 8006bf2:	2300      	moveq	r3, #0
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d016      	beq.n	8006c28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2220      	movs	r2, #32
 8006c04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c14:	f043 0220 	orr.w	r2, r3, #32
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e021      	b.n	8006c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	0c1b      	lsrs	r3, r3, #16
 8006c2c:	b2db      	uxtb	r3, r3
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d10c      	bne.n	8006c4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	43da      	mvns	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	4013      	ands	r3, r2
 8006c3e:	b29b      	uxth	r3, r3
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	bf14      	ite	ne
 8006c44:	2301      	movne	r3, #1
 8006c46:	2300      	moveq	r3, #0
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	e00b      	b.n	8006c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	43da      	mvns	r2, r3
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4013      	ands	r3, r2
 8006c58:	b29b      	uxth	r3, r3
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bf14      	ite	ne
 8006c5e:	2301      	movne	r3, #1
 8006c60:	2300      	moveq	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	f47f af6d 	bne.w	8006b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b084      	sub	sp, #16
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c80:	e034      	b.n	8006cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f000 f8e3 	bl	8006e4e <I2C_IsAcknowledgeFailed>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d001      	beq.n	8006c92 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e034      	b.n	8006cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c98:	d028      	beq.n	8006cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c9a:	f7fe fe33 	bl	8005904 <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d302      	bcc.n	8006cb0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d11d      	bne.n	8006cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cba:	2b80      	cmp	r3, #128	@ 0x80
 8006cbc:	d016      	beq.n	8006cec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd8:	f043 0220 	orr.w	r2, r3, #32
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e007      	b.n	8006cfc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	695b      	ldr	r3, [r3, #20]
 8006cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf6:	2b80      	cmp	r3, #128	@ 0x80
 8006cf8:	d1c3      	bne.n	8006c82 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d10:	e034      	b.n	8006d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f000 f89b 	bl	8006e4e <I2C_IsAcknowledgeFailed>
 8006d18:	4603      	mov	r3, r0
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d001      	beq.n	8006d22 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e034      	b.n	8006d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d28:	d028      	beq.n	8006d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d2a:	f7fe fdeb 	bl	8005904 <HAL_GetTick>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	1ad3      	subs	r3, r2, r3
 8006d34:	68ba      	ldr	r2, [r7, #8]
 8006d36:	429a      	cmp	r2, r3
 8006d38:	d302      	bcc.n	8006d40 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d11d      	bne.n	8006d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	f003 0304 	and.w	r3, r3, #4
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	d016      	beq.n	8006d7c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2200      	movs	r2, #0
 8006d52:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2220      	movs	r2, #32
 8006d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d68:	f043 0220 	orr.w	r2, r3, #32
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e007      	b.n	8006d8c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	695b      	ldr	r3, [r3, #20]
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d1c3      	bne.n	8006d12 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b084      	sub	sp, #16
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006da0:	e049      	b.n	8006e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	f003 0310 	and.w	r3, r3, #16
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d119      	bne.n	8006de4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f06f 0210 	mvn.w	r2, #16
 8006db8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	e030      	b.n	8006e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006de4:	f7fe fd8e 	bl	8005904 <HAL_GetTick>
 8006de8:	4602      	mov	r2, r0
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	68ba      	ldr	r2, [r7, #8]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d302      	bcc.n	8006dfa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d11d      	bne.n	8006e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	695b      	ldr	r3, [r3, #20]
 8006e00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e04:	2b40      	cmp	r3, #64	@ 0x40
 8006e06:	d016      	beq.n	8006e36 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e22:	f043 0220 	orr.w	r2, r3, #32
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e007      	b.n	8006e46 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e40:	2b40      	cmp	r3, #64	@ 0x40
 8006e42:	d1ae      	bne.n	8006da2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006e4e:	b480      	push	{r7}
 8006e50:	b083      	sub	sp, #12
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006e64:	d11b      	bne.n	8006e9e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e6e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8a:	f043 0204 	orr.w	r2, r3, #4
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e000      	b.n	8006ea0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006e9e:	2300      	movs	r3, #0
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	370c      	adds	r7, #12
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bc80      	pop	{r7}
 8006ea8:	4770      	bx	lr
	...

08006eac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d101      	bne.n	8006ebe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e272      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 0301 	and.w	r3, r3, #1
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8087 	beq.w	8006fda <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ecc:	4b92      	ldr	r3, [pc, #584]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	f003 030c 	and.w	r3, r3, #12
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d00c      	beq.n	8006ef2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f003 030c 	and.w	r3, r3, #12
 8006ee0:	2b08      	cmp	r3, #8
 8006ee2:	d112      	bne.n	8006f0a <HAL_RCC_OscConfig+0x5e>
 8006ee4:	4b8c      	ldr	r3, [pc, #560]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ef0:	d10b      	bne.n	8006f0a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ef2:	4b89      	ldr	r3, [pc, #548]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d06c      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x12c>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d168      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e24c      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f12:	d106      	bne.n	8006f22 <HAL_RCC_OscConfig+0x76>
 8006f14:	4b80      	ldr	r3, [pc, #512]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a7f      	ldr	r2, [pc, #508]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f1e:	6013      	str	r3, [r2, #0]
 8006f20:	e02e      	b.n	8006f80 <HAL_RCC_OscConfig+0xd4>
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10c      	bne.n	8006f44 <HAL_RCC_OscConfig+0x98>
 8006f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a7a      	ldr	r2, [pc, #488]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f34:	6013      	str	r3, [r2, #0]
 8006f36:	4b78      	ldr	r3, [pc, #480]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a77      	ldr	r2, [pc, #476]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f40:	6013      	str	r3, [r2, #0]
 8006f42:	e01d      	b.n	8006f80 <HAL_RCC_OscConfig+0xd4>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f4c:	d10c      	bne.n	8006f68 <HAL_RCC_OscConfig+0xbc>
 8006f4e:	4b72      	ldr	r3, [pc, #456]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a71      	ldr	r2, [pc, #452]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f58:	6013      	str	r3, [r2, #0]
 8006f5a:	4b6f      	ldr	r3, [pc, #444]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a6e      	ldr	r2, [pc, #440]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	e00b      	b.n	8006f80 <HAL_RCC_OscConfig+0xd4>
 8006f68:	4b6b      	ldr	r3, [pc, #428]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a6a      	ldr	r2, [pc, #424]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	4b68      	ldr	r3, [pc, #416]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a67      	ldr	r2, [pc, #412]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006f7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f7e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d013      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f88:	f7fe fcbc 	bl	8005904 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f90:	f7fe fcb8 	bl	8005904 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b64      	cmp	r3, #100	@ 0x64
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e200      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006fa2:	4b5d      	ldr	r3, [pc, #372]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f0      	beq.n	8006f90 <HAL_RCC_OscConfig+0xe4>
 8006fae:	e014      	b.n	8006fda <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fb0:	f7fe fca8 	bl	8005904 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb8:	f7fe fca4 	bl	8005904 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b64      	cmp	r3, #100	@ 0x64
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e1ec      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006fca:	4b53      	ldr	r3, [pc, #332]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x10c>
 8006fd6:	e000      	b.n	8006fda <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d063      	beq.n	80070ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006fe6:	4b4c      	ldr	r3, [pc, #304]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	f003 030c 	and.w	r3, r3, #12
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d00b      	beq.n	800700a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ff2:	4b49      	ldr	r3, [pc, #292]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	2b08      	cmp	r3, #8
 8006ffc:	d11c      	bne.n	8007038 <HAL_RCC_OscConfig+0x18c>
 8006ffe:	4b46      	ldr	r3, [pc, #280]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d116      	bne.n	8007038 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800700a:	4b43      	ldr	r3, [pc, #268]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b00      	cmp	r3, #0
 8007014:	d005      	beq.n	8007022 <HAL_RCC_OscConfig+0x176>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d001      	beq.n	8007022 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e1c0      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007022:	4b3d      	ldr	r3, [pc, #244]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	695b      	ldr	r3, [r3, #20]
 800702e:	00db      	lsls	r3, r3, #3
 8007030:	4939      	ldr	r1, [pc, #228]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8007032:	4313      	orrs	r3, r2
 8007034:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007036:	e03a      	b.n	80070ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d020      	beq.n	8007082 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007040:	4b36      	ldr	r3, [pc, #216]	@ (800711c <HAL_RCC_OscConfig+0x270>)
 8007042:	2201      	movs	r2, #1
 8007044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007046:	f7fe fc5d 	bl	8005904 <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800704e:	f7fe fc59 	bl	8005904 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e1a1      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007060:	4b2d      	ldr	r3, [pc, #180]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0302 	and.w	r3, r3, #2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d0f0      	beq.n	800704e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800706c:	4b2a      	ldr	r3, [pc, #168]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	695b      	ldr	r3, [r3, #20]
 8007078:	00db      	lsls	r3, r3, #3
 800707a:	4927      	ldr	r1, [pc, #156]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 800707c:	4313      	orrs	r3, r2
 800707e:	600b      	str	r3, [r1, #0]
 8007080:	e015      	b.n	80070ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007082:	4b26      	ldr	r3, [pc, #152]	@ (800711c <HAL_RCC_OscConfig+0x270>)
 8007084:	2200      	movs	r2, #0
 8007086:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007088:	f7fe fc3c 	bl	8005904 <HAL_GetTick>
 800708c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800708e:	e008      	b.n	80070a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007090:	f7fe fc38 	bl	8005904 <HAL_GetTick>
 8007094:	4602      	mov	r2, r0
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	1ad3      	subs	r3, r2, r3
 800709a:	2b02      	cmp	r3, #2
 800709c:	d901      	bls.n	80070a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800709e:	2303      	movs	r3, #3
 80070a0:	e180      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80070a2:	4b1d      	ldr	r3, [pc, #116]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1f0      	bne.n	8007090 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d03a      	beq.n	8007130 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d019      	beq.n	80070f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070c2:	4b17      	ldr	r3, [pc, #92]	@ (8007120 <HAL_RCC_OscConfig+0x274>)
 80070c4:	2201      	movs	r2, #1
 80070c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070c8:	f7fe fc1c 	bl	8005904 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070d0:	f7fe fc18 	bl	8005904 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e160      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80070e2:	4b0d      	ldr	r3, [pc, #52]	@ (8007118 <HAL_RCC_OscConfig+0x26c>)
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d0f0      	beq.n	80070d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80070ee:	2001      	movs	r0, #1
 80070f0:	f000 fafe 	bl	80076f0 <RCC_Delay>
 80070f4:	e01c      	b.n	8007130 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070f6:	4b0a      	ldr	r3, [pc, #40]	@ (8007120 <HAL_RCC_OscConfig+0x274>)
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80070fc:	f7fe fc02 	bl	8005904 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007102:	e00f      	b.n	8007124 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007104:	f7fe fbfe 	bl	8005904 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d908      	bls.n	8007124 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e146      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
 8007116:	bf00      	nop
 8007118:	40021000 	.word	0x40021000
 800711c:	42420000 	.word	0x42420000
 8007120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007124:	4b92      	ldr	r3, [pc, #584]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007128:	f003 0302 	and.w	r3, r3, #2
 800712c:	2b00      	cmp	r3, #0
 800712e:	d1e9      	bne.n	8007104 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 0304 	and.w	r3, r3, #4
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 80a6 	beq.w	800728a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800713e:	2300      	movs	r3, #0
 8007140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007142:	4b8b      	ldr	r3, [pc, #556]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d10d      	bne.n	800716a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800714e:	4b88      	ldr	r3, [pc, #544]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	4a87      	ldr	r2, [pc, #540]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007158:	61d3      	str	r3, [r2, #28]
 800715a:	4b85      	ldr	r3, [pc, #532]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007162:	60bb      	str	r3, [r7, #8]
 8007164:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007166:	2301      	movs	r3, #1
 8007168:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800716a:	4b82      	ldr	r3, [pc, #520]	@ (8007374 <HAL_RCC_OscConfig+0x4c8>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007172:	2b00      	cmp	r3, #0
 8007174:	d118      	bne.n	80071a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007176:	4b7f      	ldr	r3, [pc, #508]	@ (8007374 <HAL_RCC_OscConfig+0x4c8>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a7e      	ldr	r2, [pc, #504]	@ (8007374 <HAL_RCC_OscConfig+0x4c8>)
 800717c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007180:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007182:	f7fe fbbf 	bl	8005904 <HAL_GetTick>
 8007186:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007188:	e008      	b.n	800719c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800718a:	f7fe fbbb 	bl	8005904 <HAL_GetTick>
 800718e:	4602      	mov	r2, r0
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	1ad3      	subs	r3, r2, r3
 8007194:	2b64      	cmp	r3, #100	@ 0x64
 8007196:	d901      	bls.n	800719c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8007198:	2303      	movs	r3, #3
 800719a:	e103      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800719c:	4b75      	ldr	r3, [pc, #468]	@ (8007374 <HAL_RCC_OscConfig+0x4c8>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d0f0      	beq.n	800718a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d106      	bne.n	80071be <HAL_RCC_OscConfig+0x312>
 80071b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	4a6e      	ldr	r2, [pc, #440]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	6213      	str	r3, [r2, #32]
 80071bc:	e02d      	b.n	800721a <HAL_RCC_OscConfig+0x36e>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10c      	bne.n	80071e0 <HAL_RCC_OscConfig+0x334>
 80071c6:	4b6a      	ldr	r3, [pc, #424]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	4a69      	ldr	r2, [pc, #420]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071cc:	f023 0301 	bic.w	r3, r3, #1
 80071d0:	6213      	str	r3, [r2, #32]
 80071d2:	4b67      	ldr	r3, [pc, #412]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	4a66      	ldr	r2, [pc, #408]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071d8:	f023 0304 	bic.w	r3, r3, #4
 80071dc:	6213      	str	r3, [r2, #32]
 80071de:	e01c      	b.n	800721a <HAL_RCC_OscConfig+0x36e>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	2b05      	cmp	r3, #5
 80071e6:	d10c      	bne.n	8007202 <HAL_RCC_OscConfig+0x356>
 80071e8:	4b61      	ldr	r3, [pc, #388]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	4a60      	ldr	r2, [pc, #384]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071ee:	f043 0304 	orr.w	r3, r3, #4
 80071f2:	6213      	str	r3, [r2, #32]
 80071f4:	4b5e      	ldr	r3, [pc, #376]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071f6:	6a1b      	ldr	r3, [r3, #32]
 80071f8:	4a5d      	ldr	r2, [pc, #372]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80071fa:	f043 0301 	orr.w	r3, r3, #1
 80071fe:	6213      	str	r3, [r2, #32]
 8007200:	e00b      	b.n	800721a <HAL_RCC_OscConfig+0x36e>
 8007202:	4b5b      	ldr	r3, [pc, #364]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	4a5a      	ldr	r2, [pc, #360]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	6213      	str	r3, [r2, #32]
 800720e:	4b58      	ldr	r3, [pc, #352]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	4a57      	ldr	r2, [pc, #348]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007214:	f023 0304 	bic.w	r3, r3, #4
 8007218:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d015      	beq.n	800724e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007222:	f7fe fb6f 	bl	8005904 <HAL_GetTick>
 8007226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007228:	e00a      	b.n	8007240 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800722a:	f7fe fb6b 	bl	8005904 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007238:	4293      	cmp	r3, r2
 800723a:	d901      	bls.n	8007240 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800723c:	2303      	movs	r3, #3
 800723e:	e0b1      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007240:	4b4b      	ldr	r3, [pc, #300]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007242:	6a1b      	ldr	r3, [r3, #32]
 8007244:	f003 0302 	and.w	r3, r3, #2
 8007248:	2b00      	cmp	r3, #0
 800724a:	d0ee      	beq.n	800722a <HAL_RCC_OscConfig+0x37e>
 800724c:	e014      	b.n	8007278 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800724e:	f7fe fb59 	bl	8005904 <HAL_GetTick>
 8007252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007254:	e00a      	b.n	800726c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007256:	f7fe fb55 	bl	8005904 <HAL_GetTick>
 800725a:	4602      	mov	r2, r0
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	1ad3      	subs	r3, r2, r3
 8007260:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007264:	4293      	cmp	r3, r2
 8007266:	d901      	bls.n	800726c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e09b      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800726c:	4b40      	ldr	r3, [pc, #256]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	f003 0302 	and.w	r3, r3, #2
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1ee      	bne.n	8007256 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8007278:	7dfb      	ldrb	r3, [r7, #23]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d105      	bne.n	800728a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800727e:	4b3c      	ldr	r3, [pc, #240]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007280:	69db      	ldr	r3, [r3, #28]
 8007282:	4a3b      	ldr	r2, [pc, #236]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007288:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 8087 	beq.w	80073a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007294:	4b36      	ldr	r3, [pc, #216]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	f003 030c 	and.w	r3, r3, #12
 800729c:	2b08      	cmp	r3, #8
 800729e:	d061      	beq.n	8007364 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	69db      	ldr	r3, [r3, #28]
 80072a4:	2b02      	cmp	r3, #2
 80072a6:	d146      	bne.n	8007336 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072a8:	4b33      	ldr	r3, [pc, #204]	@ (8007378 <HAL_RCC_OscConfig+0x4cc>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80072ae:	f7fe fb29 	bl	8005904 <HAL_GetTick>
 80072b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072b4:	e008      	b.n	80072c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072b6:	f7fe fb25 	bl	8005904 <HAL_GetTick>
 80072ba:	4602      	mov	r2, r0
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	1ad3      	subs	r3, r2, r3
 80072c0:	2b02      	cmp	r3, #2
 80072c2:	d901      	bls.n	80072c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e06d      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80072c8:	4b29      	ldr	r3, [pc, #164]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d1f0      	bne.n	80072b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a1b      	ldr	r3, [r3, #32]
 80072d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072dc:	d108      	bne.n	80072f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80072de:	4b24      	ldr	r3, [pc, #144]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	4921      	ldr	r1, [pc, #132]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80072ec:	4313      	orrs	r3, r2
 80072ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80072f0:	4b1f      	ldr	r3, [pc, #124]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a19      	ldr	r1, [r3, #32]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007300:	430b      	orrs	r3, r1
 8007302:	491b      	ldr	r1, [pc, #108]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007304:	4313      	orrs	r3, r2
 8007306:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007308:	4b1b      	ldr	r3, [pc, #108]	@ (8007378 <HAL_RCC_OscConfig+0x4cc>)
 800730a:	2201      	movs	r2, #1
 800730c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800730e:	f7fe faf9 	bl	8005904 <HAL_GetTick>
 8007312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007314:	e008      	b.n	8007328 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007316:	f7fe faf5 	bl	8005904 <HAL_GetTick>
 800731a:	4602      	mov	r2, r0
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	1ad3      	subs	r3, r2, r3
 8007320:	2b02      	cmp	r3, #2
 8007322:	d901      	bls.n	8007328 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8007324:	2303      	movs	r3, #3
 8007326:	e03d      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8007328:	4b11      	ldr	r3, [pc, #68]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007330:	2b00      	cmp	r3, #0
 8007332:	d0f0      	beq.n	8007316 <HAL_RCC_OscConfig+0x46a>
 8007334:	e035      	b.n	80073a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007336:	4b10      	ldr	r3, [pc, #64]	@ (8007378 <HAL_RCC_OscConfig+0x4cc>)
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800733c:	f7fe fae2 	bl	8005904 <HAL_GetTick>
 8007340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007342:	e008      	b.n	8007356 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007344:	f7fe fade 	bl	8005904 <HAL_GetTick>
 8007348:	4602      	mov	r2, r0
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	1ad3      	subs	r3, r2, r3
 800734e:	2b02      	cmp	r3, #2
 8007350:	d901      	bls.n	8007356 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8007352:	2303      	movs	r3, #3
 8007354:	e026      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8007356:	4b06      	ldr	r3, [pc, #24]	@ (8007370 <HAL_RCC_OscConfig+0x4c4>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1f0      	bne.n	8007344 <HAL_RCC_OscConfig+0x498>
 8007362:	e01e      	b.n	80073a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d107      	bne.n	800737c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800736c:	2301      	movs	r3, #1
 800736e:	e019      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
 8007370:	40021000 	.word	0x40021000
 8007374:	40007000 	.word	0x40007000
 8007378:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800737c:	4b0b      	ldr	r3, [pc, #44]	@ (80073ac <HAL_RCC_OscConfig+0x500>)
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	429a      	cmp	r2, r3
 800738e:	d106      	bne.n	800739e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800739a:	429a      	cmp	r2, r3
 800739c:	d001      	beq.n	80073a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e000      	b.n	80073a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40021000 	.word	0x40021000

080073b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e0d0      	b.n	8007566 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80073c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007570 <HAL_RCC_ClockConfig+0x1c0>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d910      	bls.n	80073f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80073d2:	4b67      	ldr	r3, [pc, #412]	@ (8007570 <HAL_RCC_ClockConfig+0x1c0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f023 0207 	bic.w	r2, r3, #7
 80073da:	4965      	ldr	r1, [pc, #404]	@ (8007570 <HAL_RCC_ClockConfig+0x1c0>)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	4313      	orrs	r3, r2
 80073e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80073e2:	4b63      	ldr	r3, [pc, #396]	@ (8007570 <HAL_RCC_ClockConfig+0x1c0>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d001      	beq.n	80073f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	e0b8      	b.n	8007566 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0302 	and.w	r3, r3, #2
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d020      	beq.n	8007442 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0304 	and.w	r3, r3, #4
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800740c:	4b59      	ldr	r3, [pc, #356]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	4a58      	ldr	r2, [pc, #352]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 8007412:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007416:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f003 0308 	and.w	r3, r3, #8
 8007420:	2b00      	cmp	r3, #0
 8007422:	d005      	beq.n	8007430 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007424:	4b53      	ldr	r3, [pc, #332]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 8007426:	685b      	ldr	r3, [r3, #4]
 8007428:	4a52      	ldr	r2, [pc, #328]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 800742a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800742e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007430:	4b50      	ldr	r3, [pc, #320]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	494d      	ldr	r1, [pc, #308]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 800743e:	4313      	orrs	r3, r2
 8007440:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	2b00      	cmp	r3, #0
 800744c:	d040      	beq.n	80074d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	685b      	ldr	r3, [r3, #4]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d107      	bne.n	8007466 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007456:	4b47      	ldr	r3, [pc, #284]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800745e:	2b00      	cmp	r3, #0
 8007460:	d115      	bne.n	800748e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e07f      	b.n	8007566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	2b02      	cmp	r3, #2
 800746c:	d107      	bne.n	800747e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800746e:	4b41      	ldr	r3, [pc, #260]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007476:	2b00      	cmp	r3, #0
 8007478:	d109      	bne.n	800748e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800747a:	2301      	movs	r3, #1
 800747c:	e073      	b.n	8007566 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800747e:	4b3d      	ldr	r3, [pc, #244]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0302 	and.w	r3, r3, #2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e06b      	b.n	8007566 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800748e:	4b39      	ldr	r3, [pc, #228]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f023 0203 	bic.w	r2, r3, #3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	4936      	ldr	r1, [pc, #216]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 800749c:	4313      	orrs	r3, r2
 800749e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80074a0:	f7fe fa30 	bl	8005904 <HAL_GetTick>
 80074a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074a6:	e00a      	b.n	80074be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80074a8:	f7fe fa2c 	bl	8005904 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d901      	bls.n	80074be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80074ba:	2303      	movs	r3, #3
 80074bc:	e053      	b.n	8007566 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80074be:	4b2d      	ldr	r3, [pc, #180]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f003 020c 	and.w	r2, r3, #12
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d1eb      	bne.n	80074a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80074d0:	4b27      	ldr	r3, [pc, #156]	@ (8007570 <HAL_RCC_ClockConfig+0x1c0>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d210      	bcs.n	8007500 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074de:	4b24      	ldr	r3, [pc, #144]	@ (8007570 <HAL_RCC_ClockConfig+0x1c0>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f023 0207 	bic.w	r2, r3, #7
 80074e6:	4922      	ldr	r1, [pc, #136]	@ (8007570 <HAL_RCC_ClockConfig+0x1c0>)
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80074ee:	4b20      	ldr	r3, [pc, #128]	@ (8007570 <HAL_RCC_ClockConfig+0x1c0>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d001      	beq.n	8007500 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	e032      	b.n	8007566 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0304 	and.w	r3, r3, #4
 8007508:	2b00      	cmp	r3, #0
 800750a:	d008      	beq.n	800751e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800750c:	4b19      	ldr	r3, [pc, #100]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	68db      	ldr	r3, [r3, #12]
 8007518:	4916      	ldr	r1, [pc, #88]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 800751a:	4313      	orrs	r3, r2
 800751c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0308 	and.w	r3, r3, #8
 8007526:	2b00      	cmp	r3, #0
 8007528:	d009      	beq.n	800753e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800752a:	4b12      	ldr	r3, [pc, #72]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	00db      	lsls	r3, r3, #3
 8007538:	490e      	ldr	r1, [pc, #56]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 800753a:	4313      	orrs	r3, r2
 800753c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800753e:	f000 f821 	bl	8007584 <HAL_RCC_GetSysClockFreq>
 8007542:	4602      	mov	r2, r0
 8007544:	4b0b      	ldr	r3, [pc, #44]	@ (8007574 <HAL_RCC_ClockConfig+0x1c4>)
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	091b      	lsrs	r3, r3, #4
 800754a:	f003 030f 	and.w	r3, r3, #15
 800754e:	490a      	ldr	r1, [pc, #40]	@ (8007578 <HAL_RCC_ClockConfig+0x1c8>)
 8007550:	5ccb      	ldrb	r3, [r1, r3]
 8007552:	fa22 f303 	lsr.w	r3, r2, r3
 8007556:	4a09      	ldr	r2, [pc, #36]	@ (800757c <HAL_RCC_ClockConfig+0x1cc>)
 8007558:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800755a:	4b09      	ldr	r3, [pc, #36]	@ (8007580 <HAL_RCC_ClockConfig+0x1d0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4618      	mov	r0, r3
 8007560:	f7fe f8e6 	bl	8005730 <HAL_InitTick>

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	40022000 	.word	0x40022000
 8007574:	40021000 	.word	0x40021000
 8007578:	080081e0 	.word	0x080081e0
 800757c:	20000014 	.word	0x20000014
 8007580:	20000018 	.word	0x20000018

08007584 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007584:	b480      	push	{r7}
 8007586:	b087      	sub	sp, #28
 8007588:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	2300      	movs	r3, #0
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	2300      	movs	r3, #0
 8007598:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800759e:	4b1e      	ldr	r3, [pc, #120]	@ (8007618 <HAL_RCC_GetSysClockFreq+0x94>)
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f003 030c 	and.w	r3, r3, #12
 80075aa:	2b04      	cmp	r3, #4
 80075ac:	d002      	beq.n	80075b4 <HAL_RCC_GetSysClockFreq+0x30>
 80075ae:	2b08      	cmp	r3, #8
 80075b0:	d003      	beq.n	80075ba <HAL_RCC_GetSysClockFreq+0x36>
 80075b2:	e027      	b.n	8007604 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80075b4:	4b19      	ldr	r3, [pc, #100]	@ (800761c <HAL_RCC_GetSysClockFreq+0x98>)
 80075b6:	613b      	str	r3, [r7, #16]
      break;
 80075b8:	e027      	b.n	800760a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	0c9b      	lsrs	r3, r3, #18
 80075be:	f003 030f 	and.w	r3, r3, #15
 80075c2:	4a17      	ldr	r2, [pc, #92]	@ (8007620 <HAL_RCC_GetSysClockFreq+0x9c>)
 80075c4:	5cd3      	ldrb	r3, [r2, r3]
 80075c6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d010      	beq.n	80075f4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80075d2:	4b11      	ldr	r3, [pc, #68]	@ (8007618 <HAL_RCC_GetSysClockFreq+0x94>)
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	0c5b      	lsrs	r3, r3, #17
 80075d8:	f003 0301 	and.w	r3, r3, #1
 80075dc:	4a11      	ldr	r2, [pc, #68]	@ (8007624 <HAL_RCC_GetSysClockFreq+0xa0>)
 80075de:	5cd3      	ldrb	r3, [r2, r3]
 80075e0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a0d      	ldr	r2, [pc, #52]	@ (800761c <HAL_RCC_GetSysClockFreq+0x98>)
 80075e6:	fb03 f202 	mul.w	r2, r3, r2
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80075f0:	617b      	str	r3, [r7, #20]
 80075f2:	e004      	b.n	80075fe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a0c      	ldr	r2, [pc, #48]	@ (8007628 <HAL_RCC_GetSysClockFreq+0xa4>)
 80075f8:	fb02 f303 	mul.w	r3, r2, r3
 80075fc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	613b      	str	r3, [r7, #16]
      break;
 8007602:	e002      	b.n	800760a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007604:	4b05      	ldr	r3, [pc, #20]	@ (800761c <HAL_RCC_GetSysClockFreq+0x98>)
 8007606:	613b      	str	r3, [r7, #16]
      break;
 8007608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800760a:	693b      	ldr	r3, [r7, #16]
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	40021000 	.word	0x40021000
 800761c:	007a1200 	.word	0x007a1200
 8007620:	080081f8 	.word	0x080081f8
 8007624:	08008208 	.word	0x08008208
 8007628:	003d0900 	.word	0x003d0900

0800762c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800762c:	b480      	push	{r7}
 800762e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007630:	4b02      	ldr	r3, [pc, #8]	@ (800763c <HAL_RCC_GetHCLKFreq+0x10>)
 8007632:	681b      	ldr	r3, [r3, #0]
}
 8007634:	4618      	mov	r0, r3
 8007636:	46bd      	mov	sp, r7
 8007638:	bc80      	pop	{r7}
 800763a:	4770      	bx	lr
 800763c:	20000014 	.word	0x20000014

08007640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007644:	f7ff fff2 	bl	800762c <HAL_RCC_GetHCLKFreq>
 8007648:	4602      	mov	r2, r0
 800764a:	4b05      	ldr	r3, [pc, #20]	@ (8007660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	0a1b      	lsrs	r3, r3, #8
 8007650:	f003 0307 	and.w	r3, r3, #7
 8007654:	4903      	ldr	r1, [pc, #12]	@ (8007664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007656:	5ccb      	ldrb	r3, [r1, r3]
 8007658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800765c:	4618      	mov	r0, r3
 800765e:	bd80      	pop	{r7, pc}
 8007660:	40021000 	.word	0x40021000
 8007664:	080081f0 	.word	0x080081f0

08007668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800766c:	f7ff ffde 	bl	800762c <HAL_RCC_GetHCLKFreq>
 8007670:	4602      	mov	r2, r0
 8007672:	4b05      	ldr	r3, [pc, #20]	@ (8007688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	0adb      	lsrs	r3, r3, #11
 8007678:	f003 0307 	and.w	r3, r3, #7
 800767c:	4903      	ldr	r1, [pc, #12]	@ (800768c <HAL_RCC_GetPCLK2Freq+0x24>)
 800767e:	5ccb      	ldrb	r3, [r1, r3]
 8007680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007684:	4618      	mov	r0, r3
 8007686:	bd80      	pop	{r7, pc}
 8007688:	40021000 	.word	0x40021000
 800768c:	080081f0 	.word	0x080081f0

08007690 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	220f      	movs	r2, #15
 800769e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80076a0:	4b11      	ldr	r3, [pc, #68]	@ (80076e8 <HAL_RCC_GetClockConfig+0x58>)
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	f003 0203 	and.w	r2, r3, #3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80076ac:	4b0e      	ldr	r3, [pc, #56]	@ (80076e8 <HAL_RCC_GetClockConfig+0x58>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80076b8:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <HAL_RCC_GetClockConfig+0x58>)
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80076c4:	4b08      	ldr	r3, [pc, #32]	@ (80076e8 <HAL_RCC_GetClockConfig+0x58>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	08db      	lsrs	r3, r3, #3
 80076ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80076d2:	4b06      	ldr	r3, [pc, #24]	@ (80076ec <HAL_RCC_GetClockConfig+0x5c>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f003 0207 	and.w	r2, r3, #7
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80076de:	bf00      	nop
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bc80      	pop	{r7}
 80076e6:	4770      	bx	lr
 80076e8:	40021000 	.word	0x40021000
 80076ec:	40022000 	.word	0x40022000

080076f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80076f0:	b480      	push	{r7}
 80076f2:	b085      	sub	sp, #20
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80076f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007724 <RCC_Delay+0x34>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a0a      	ldr	r2, [pc, #40]	@ (8007728 <RCC_Delay+0x38>)
 80076fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007702:	0a5b      	lsrs	r3, r3, #9
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	fb02 f303 	mul.w	r3, r2, r3
 800770a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800770c:	bf00      	nop
  }
  while (Delay --);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	1e5a      	subs	r2, r3, #1
 8007712:	60fa      	str	r2, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1f9      	bne.n	800770c <RCC_Delay+0x1c>
}
 8007718:	bf00      	nop
 800771a:	bf00      	nop
 800771c:	3714      	adds	r7, #20
 800771e:	46bd      	mov	sp, r7
 8007720:	bc80      	pop	{r7}
 8007722:	4770      	bx	lr
 8007724:	20000014 	.word	0x20000014
 8007728:	10624dd3 	.word	0x10624dd3

0800772c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b082      	sub	sp, #8
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d101      	bne.n	800773e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800773a:	2301      	movs	r3, #1
 800773c:	e041      	b.n	80077c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d106      	bne.n	8007758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 f839 	bl	80077ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2202      	movs	r2, #2
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681a      	ldr	r2, [r3, #0]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	3304      	adds	r3, #4
 8007768:	4619      	mov	r1, r3
 800776a:	4610      	mov	r0, r2
 800776c:	f000 f99c 	bl	8007aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}

080077ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80077ca:	b480      	push	{r7}
 80077cc:	b083      	sub	sp, #12
 80077ce:	af00      	add	r7, sp, #0
 80077d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80077d2:	bf00      	nop
 80077d4:	370c      	adds	r7, #12
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bc80      	pop	{r7}
 80077da:	4770      	bx	lr

080077dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d001      	beq.n	80077f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e03a      	b.n	800786a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2202      	movs	r2, #2
 80077f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68da      	ldr	r2, [r3, #12]
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f042 0201 	orr.w	r2, r2, #1
 800780a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a18      	ldr	r2, [pc, #96]	@ (8007874 <HAL_TIM_Base_Start_IT+0x98>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00e      	beq.n	8007834 <HAL_TIM_Base_Start_IT+0x58>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800781e:	d009      	beq.n	8007834 <HAL_TIM_Base_Start_IT+0x58>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a14      	ldr	r2, [pc, #80]	@ (8007878 <HAL_TIM_Base_Start_IT+0x9c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d004      	beq.n	8007834 <HAL_TIM_Base_Start_IT+0x58>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a13      	ldr	r2, [pc, #76]	@ (800787c <HAL_TIM_Base_Start_IT+0xa0>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d111      	bne.n	8007858 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	f003 0307 	and.w	r3, r3, #7
 800783e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b06      	cmp	r3, #6
 8007844:	d010      	beq.n	8007868 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f042 0201 	orr.w	r2, r2, #1
 8007854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007856:	e007      	b.n	8007868 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f042 0201 	orr.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	3714      	adds	r7, #20
 800786e:	46bd      	mov	sp, r7
 8007870:	bc80      	pop	{r7}
 8007872:	4770      	bx	lr
 8007874:	40012c00 	.word	0x40012c00
 8007878:	40000400 	.word	0x40000400
 800787c:	40000800 	.word	0x40000800

08007880 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f003 0302 	and.w	r3, r3, #2
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d020      	beq.n	80078e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f003 0302 	and.w	r3, r3, #2
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01b      	beq.n	80078e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f06f 0202 	mvn.w	r2, #2
 80078b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	699b      	ldr	r3, [r3, #24]
 80078c2:	f003 0303 	and.w	r3, r3, #3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d003      	beq.n	80078d2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f8d1 	bl	8007a72 <HAL_TIM_IC_CaptureCallback>
 80078d0:	e005      	b.n	80078de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f8c4 	bl	8007a60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f8d3 	bl	8007a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	f003 0304 	and.w	r3, r3, #4
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d020      	beq.n	8007930 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f003 0304 	and.w	r3, r3, #4
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01b      	beq.n	8007930 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0204 	mvn.w	r2, #4
 8007900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2202      	movs	r2, #2
 8007906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699b      	ldr	r3, [r3, #24]
 800790e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007912:	2b00      	cmp	r3, #0
 8007914:	d003      	beq.n	800791e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 f8ab 	bl	8007a72 <HAL_TIM_IC_CaptureCallback>
 800791c:	e005      	b.n	800792a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f000 f89e 	bl	8007a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f8ad 	bl	8007a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	f003 0308 	and.w	r3, r3, #8
 8007936:	2b00      	cmp	r3, #0
 8007938:	d020      	beq.n	800797c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f003 0308 	and.w	r3, r3, #8
 8007940:	2b00      	cmp	r3, #0
 8007942:	d01b      	beq.n	800797c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0208 	mvn.w	r2, #8
 800794c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2204      	movs	r2, #4
 8007952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f885 	bl	8007a72 <HAL_TIM_IC_CaptureCallback>
 8007968:	e005      	b.n	8007976 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f878 	bl	8007a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f887 	bl	8007a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f003 0310 	and.w	r3, r3, #16
 8007982:	2b00      	cmp	r3, #0
 8007984:	d020      	beq.n	80079c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01b      	beq.n	80079c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f06f 0210 	mvn.w	r2, #16
 8007998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2208      	movs	r2, #8
 800799e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	69db      	ldr	r3, [r3, #28]
 80079a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 f85f 	bl	8007a72 <HAL_TIM_IC_CaptureCallback>
 80079b4:	e005      	b.n	80079c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f000 f852 	bl	8007a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 f861 	bl	8007a84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2200      	movs	r2, #0
 80079c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00c      	beq.n	80079ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f003 0301 	and.w	r3, r3, #1
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d007      	beq.n	80079ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f06f 0201 	mvn.w	r2, #1
 80079e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f7fd fe1a 	bl	8005620 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80079ec:	68bb      	ldr	r3, [r7, #8]
 80079ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00c      	beq.n	8007a10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d007      	beq.n	8007a10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007a08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 f8c3 	bl	8007b96 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00c      	beq.n	8007a34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d007      	beq.n	8007a34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f831 	bl	8007a96 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	f003 0320 	and.w	r3, r3, #32
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d00c      	beq.n	8007a58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f003 0320 	and.w	r3, r3, #32
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d007      	beq.n	8007a58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f06f 0220 	mvn.w	r2, #32
 8007a50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f896 	bl	8007b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a58:	bf00      	nop
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bc80      	pop	{r7}
 8007a70:	4770      	bx	lr

08007a72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007a72:	b480      	push	{r7}
 8007a74:	b083      	sub	sp, #12
 8007a76:	af00      	add	r7, sp, #0
 8007a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007a7a:	bf00      	nop
 8007a7c:	370c      	adds	r7, #12
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr

08007a84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bc80      	pop	{r7}
 8007a94:	4770      	bx	lr

08007a96 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b083      	sub	sp, #12
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007a9e:	bf00      	nop
 8007aa0:	370c      	adds	r7, #12
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bc80      	pop	{r7}
 8007aa6:	4770      	bx	lr

08007aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4a2f      	ldr	r2, [pc, #188]	@ (8007b78 <TIM_Base_SetConfig+0xd0>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d00b      	beq.n	8007ad8 <TIM_Base_SetConfig+0x30>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ac6:	d007      	beq.n	8007ad8 <TIM_Base_SetConfig+0x30>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	4a2c      	ldr	r2, [pc, #176]	@ (8007b7c <TIM_Base_SetConfig+0xd4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d003      	beq.n	8007ad8 <TIM_Base_SetConfig+0x30>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4a2b      	ldr	r2, [pc, #172]	@ (8007b80 <TIM_Base_SetConfig+0xd8>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d108      	bne.n	8007aea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ade:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	4a22      	ldr	r2, [pc, #136]	@ (8007b78 <TIM_Base_SetConfig+0xd0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d00b      	beq.n	8007b0a <TIM_Base_SetConfig+0x62>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007af8:	d007      	beq.n	8007b0a <TIM_Base_SetConfig+0x62>
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	4a1f      	ldr	r2, [pc, #124]	@ (8007b7c <TIM_Base_SetConfig+0xd4>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d003      	beq.n	8007b0a <TIM_Base_SetConfig+0x62>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	4a1e      	ldr	r2, [pc, #120]	@ (8007b80 <TIM_Base_SetConfig+0xd8>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d108      	bne.n	8007b1c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	4313      	orrs	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a0d      	ldr	r2, [pc, #52]	@ (8007b78 <TIM_Base_SetConfig+0xd0>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d103      	bne.n	8007b50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	691a      	ldr	r2, [r3, #16]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2201      	movs	r2, #1
 8007b54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	f003 0301 	and.w	r3, r3, #1
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d005      	beq.n	8007b6e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	691b      	ldr	r3, [r3, #16]
 8007b66:	f023 0201 	bic.w	r2, r3, #1
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	611a      	str	r2, [r3, #16]
  }
}
 8007b6e:	bf00      	nop
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc80      	pop	{r7}
 8007b76:	4770      	bx	lr
 8007b78:	40012c00 	.word	0x40012c00
 8007b7c:	40000400 	.word	0x40000400
 8007b80:	40000800 	.word	0x40000800

08007b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b8c:	bf00      	nop
 8007b8e:	370c      	adds	r7, #12
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bc80      	pop	{r7}
 8007b94:	4770      	bx	lr

08007b96 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b083      	sub	sp, #12
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b9e:	bf00      	nop
 8007ba0:	370c      	adds	r7, #12
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bc80      	pop	{r7}
 8007ba6:	4770      	bx	lr

08007ba8 <memcmp>:
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	3901      	subs	r1, #1
 8007bac:	4402      	add	r2, r0
 8007bae:	4290      	cmp	r0, r2
 8007bb0:	d101      	bne.n	8007bb6 <memcmp+0xe>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e005      	b.n	8007bc2 <memcmp+0x1a>
 8007bb6:	7803      	ldrb	r3, [r0, #0]
 8007bb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007bbc:	42a3      	cmp	r3, r4
 8007bbe:	d001      	beq.n	8007bc4 <memcmp+0x1c>
 8007bc0:	1b18      	subs	r0, r3, r4
 8007bc2:	bd10      	pop	{r4, pc}
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	e7f2      	b.n	8007bae <memcmp+0x6>

08007bc8 <memset>:
 8007bc8:	4603      	mov	r3, r0
 8007bca:	4402      	add	r2, r0
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d100      	bne.n	8007bd2 <memset+0xa>
 8007bd0:	4770      	bx	lr
 8007bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8007bd6:	e7f9      	b.n	8007bcc <memset+0x4>

08007bd8 <__errno>:
 8007bd8:	4b01      	ldr	r3, [pc, #4]	@ (8007be0 <__errno+0x8>)
 8007bda:	6818      	ldr	r0, [r3, #0]
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	20000020 	.word	0x20000020

08007be4 <__libc_init_array>:
 8007be4:	b570      	push	{r4, r5, r6, lr}
 8007be6:	2600      	movs	r6, #0
 8007be8:	4d0c      	ldr	r5, [pc, #48]	@ (8007c1c <__libc_init_array+0x38>)
 8007bea:	4c0d      	ldr	r4, [pc, #52]	@ (8007c20 <__libc_init_array+0x3c>)
 8007bec:	1b64      	subs	r4, r4, r5
 8007bee:	10a4      	asrs	r4, r4, #2
 8007bf0:	42a6      	cmp	r6, r4
 8007bf2:	d109      	bne.n	8007c08 <__libc_init_array+0x24>
 8007bf4:	f000 fa4c 	bl	8008090 <_init>
 8007bf8:	2600      	movs	r6, #0
 8007bfa:	4d0a      	ldr	r5, [pc, #40]	@ (8007c24 <__libc_init_array+0x40>)
 8007bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8007c28 <__libc_init_array+0x44>)
 8007bfe:	1b64      	subs	r4, r4, r5
 8007c00:	10a4      	asrs	r4, r4, #2
 8007c02:	42a6      	cmp	r6, r4
 8007c04:	d105      	bne.n	8007c12 <__libc_init_array+0x2e>
 8007c06:	bd70      	pop	{r4, r5, r6, pc}
 8007c08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c0c:	4798      	blx	r3
 8007c0e:	3601      	adds	r6, #1
 8007c10:	e7ee      	b.n	8007bf0 <__libc_init_array+0xc>
 8007c12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c16:	4798      	blx	r3
 8007c18:	3601      	adds	r6, #1
 8007c1a:	e7f2      	b.n	8007c02 <__libc_init_array+0x1e>
 8007c1c:	08008244 	.word	0x08008244
 8007c20:	08008244 	.word	0x08008244
 8007c24:	08008244 	.word	0x08008244
 8007c28:	08008248 	.word	0x08008248

08007c2c <memcpy>:
 8007c2c:	440a      	add	r2, r1
 8007c2e:	4291      	cmp	r1, r2
 8007c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c34:	d100      	bne.n	8007c38 <memcpy+0xc>
 8007c36:	4770      	bx	lr
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c3e:	4291      	cmp	r1, r2
 8007c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c44:	d1f9      	bne.n	8007c3a <memcpy+0xe>
 8007c46:	bd10      	pop	{r4, pc}

08007c48 <atan2f>:
 8007c48:	f000 b88a 	b.w	8007d60 <__ieee754_atan2f>

08007c4c <sqrtf>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4605      	mov	r5, r0
 8007c50:	f000 f816 	bl	8007c80 <__ieee754_sqrtf>
 8007c54:	4629      	mov	r1, r5
 8007c56:	4604      	mov	r4, r0
 8007c58:	4628      	mov	r0, r5
 8007c5a:	f7f8 fd91 	bl	8000780 <__aeabi_fcmpun>
 8007c5e:	b968      	cbnz	r0, 8007c7c <sqrtf+0x30>
 8007c60:	2100      	movs	r1, #0
 8007c62:	4628      	mov	r0, r5
 8007c64:	f7f8 fd64 	bl	8000730 <__aeabi_fcmplt>
 8007c68:	b140      	cbz	r0, 8007c7c <sqrtf+0x30>
 8007c6a:	f7ff ffb5 	bl	8007bd8 <__errno>
 8007c6e:	2321      	movs	r3, #33	@ 0x21
 8007c70:	2100      	movs	r1, #0
 8007c72:	6003      	str	r3, [r0, #0]
 8007c74:	4608      	mov	r0, r1
 8007c76:	f7f8 fc71 	bl	800055c <__aeabi_fdiv>
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}

08007c80 <__ieee754_sqrtf>:
 8007c80:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8007c84:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	4604      	mov	r4, r0
 8007c90:	d30a      	bcc.n	8007ca8 <__ieee754_sqrtf+0x28>
 8007c92:	4601      	mov	r1, r0
 8007c94:	f7f8 fbae 	bl	80003f4 <__aeabi_fmul>
 8007c98:	4601      	mov	r1, r0
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7f8 faa2 	bl	80001e4 <__addsf3>
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	4620      	mov	r0, r4
 8007ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ca8:	2a00      	cmp	r2, #0
 8007caa:	d0fa      	beq.n	8007ca2 <__ieee754_sqrtf+0x22>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	da06      	bge.n	8007cbe <__ieee754_sqrtf+0x3e>
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	f7f8 fa95 	bl	80001e0 <__aeabi_fsub>
 8007cb6:	4601      	mov	r1, r0
 8007cb8:	f7f8 fc50 	bl	800055c <__aeabi_fdiv>
 8007cbc:	e7f0      	b.n	8007ca0 <__ieee754_sqrtf+0x20>
 8007cbe:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 8007cc2:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8007cc6:	d03e      	beq.n	8007d46 <__ieee754_sqrtf+0xc6>
 8007cc8:	2400      	movs	r4, #0
 8007cca:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 8007cce:	07ca      	lsls	r2, r1, #31
 8007cd0:	f04f 0019 	mov.w	r0, #25
 8007cd4:	4626      	mov	r6, r4
 8007cd6:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 8007cda:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007cde:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007ce2:	bf58      	it	pl
 8007ce4:	005b      	lslpl	r3, r3, #1
 8007ce6:	106d      	asrs	r5, r5, #1
 8007ce8:	005b      	lsls	r3, r3, #1
 8007cea:	1872      	adds	r2, r6, r1
 8007cec:	429a      	cmp	r2, r3
 8007cee:	bfcf      	iteee	gt
 8007cf0:	461a      	movgt	r2, r3
 8007cf2:	1856      	addle	r6, r2, r1
 8007cf4:	1864      	addle	r4, r4, r1
 8007cf6:	1a9a      	suble	r2, r3, r2
 8007cf8:	3801      	subs	r0, #1
 8007cfa:	ea4f 0342 	mov.w	r3, r2, lsl #1
 8007cfe:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007d02:	d1f2      	bne.n	8007cea <__ieee754_sqrtf+0x6a>
 8007d04:	b1ba      	cbz	r2, 8007d36 <__ieee754_sqrtf+0xb6>
 8007d06:	4e14      	ldr	r6, [pc, #80]	@ (8007d58 <__ieee754_sqrtf+0xd8>)
 8007d08:	4f14      	ldr	r7, [pc, #80]	@ (8007d5c <__ieee754_sqrtf+0xdc>)
 8007d0a:	6830      	ldr	r0, [r6, #0]
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	f7f8 fa67 	bl	80001e0 <__aeabi_fsub>
 8007d12:	f8d6 8000 	ldr.w	r8, [r6]
 8007d16:	4601      	mov	r1, r0
 8007d18:	4640      	mov	r0, r8
 8007d1a:	f7f8 fd13 	bl	8000744 <__aeabi_fcmple>
 8007d1e:	b150      	cbz	r0, 8007d36 <__ieee754_sqrtf+0xb6>
 8007d20:	6830      	ldr	r0, [r6, #0]
 8007d22:	6839      	ldr	r1, [r7, #0]
 8007d24:	f7f8 fa5e 	bl	80001e4 <__addsf3>
 8007d28:	6836      	ldr	r6, [r6, #0]
 8007d2a:	4601      	mov	r1, r0
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7f8 fcff 	bl	8000730 <__aeabi_fcmplt>
 8007d32:	b168      	cbz	r0, 8007d50 <__ieee754_sqrtf+0xd0>
 8007d34:	3402      	adds	r4, #2
 8007d36:	1064      	asrs	r4, r4, #1
 8007d38:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 8007d3c:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 8007d40:	e7af      	b.n	8007ca2 <__ieee754_sqrtf+0x22>
 8007d42:	005b      	lsls	r3, r3, #1
 8007d44:	3201      	adds	r2, #1
 8007d46:	0218      	lsls	r0, r3, #8
 8007d48:	d5fb      	bpl.n	8007d42 <__ieee754_sqrtf+0xc2>
 8007d4a:	3a01      	subs	r2, #1
 8007d4c:	1a89      	subs	r1, r1, r2
 8007d4e:	e7bb      	b.n	8007cc8 <__ieee754_sqrtf+0x48>
 8007d50:	3401      	adds	r4, #1
 8007d52:	f024 0401 	bic.w	r4, r4, #1
 8007d56:	e7ee      	b.n	8007d36 <__ieee754_sqrtf+0xb6>
 8007d58:	20000074 	.word	0x20000074
 8007d5c:	20000070 	.word	0x20000070

08007d60 <__ieee754_atan2f>:
 8007d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d62:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8007d66:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	d805      	bhi.n	8007d7a <__ieee754_atan2f+0x1a>
 8007d6e:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 8007d72:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007d76:	4607      	mov	r7, r0
 8007d78:	d904      	bls.n	8007d84 <__ieee754_atan2f+0x24>
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7f8 fa32 	bl	80001e4 <__addsf3>
 8007d80:	4603      	mov	r3, r0
 8007d82:	e010      	b.n	8007da6 <__ieee754_atan2f+0x46>
 8007d84:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8007d88:	d103      	bne.n	8007d92 <__ieee754_atan2f+0x32>
 8007d8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d8e:	f000 b86f 	b.w	8007e70 <atanf>
 8007d92:	178c      	asrs	r4, r1, #30
 8007d94:	f004 0402 	and.w	r4, r4, #2
 8007d98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007d9c:	b92a      	cbnz	r2, 8007daa <__ieee754_atan2f+0x4a>
 8007d9e:	2c02      	cmp	r4, #2
 8007da0:	d04b      	beq.n	8007e3a <__ieee754_atan2f+0xda>
 8007da2:	2c03      	cmp	r4, #3
 8007da4:	d04b      	beq.n	8007e3e <__ieee754_atan2f+0xde>
 8007da6:	4618      	mov	r0, r3
 8007da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007daa:	b91e      	cbnz	r6, 8007db4 <__ieee754_atan2f+0x54>
 8007dac:	2f00      	cmp	r7, #0
 8007dae:	da4c      	bge.n	8007e4a <__ieee754_atan2f+0xea>
 8007db0:	4b27      	ldr	r3, [pc, #156]	@ (8007e50 <__ieee754_atan2f+0xf0>)
 8007db2:	e7f8      	b.n	8007da6 <__ieee754_atan2f+0x46>
 8007db4:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 8007db8:	d10e      	bne.n	8007dd8 <__ieee754_atan2f+0x78>
 8007dba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007dbe:	f104 34ff 	add.w	r4, r4, #4294967295
 8007dc2:	d105      	bne.n	8007dd0 <__ieee754_atan2f+0x70>
 8007dc4:	2c02      	cmp	r4, #2
 8007dc6:	d83c      	bhi.n	8007e42 <__ieee754_atan2f+0xe2>
 8007dc8:	4b22      	ldr	r3, [pc, #136]	@ (8007e54 <__ieee754_atan2f+0xf4>)
 8007dca:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007dce:	e7ea      	b.n	8007da6 <__ieee754_atan2f+0x46>
 8007dd0:	2c02      	cmp	r4, #2
 8007dd2:	d838      	bhi.n	8007e46 <__ieee754_atan2f+0xe6>
 8007dd4:	4b20      	ldr	r3, [pc, #128]	@ (8007e58 <__ieee754_atan2f+0xf8>)
 8007dd6:	e7f8      	b.n	8007dca <__ieee754_atan2f+0x6a>
 8007dd8:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8007ddc:	d0e6      	beq.n	8007dac <__ieee754_atan2f+0x4c>
 8007dde:	1b92      	subs	r2, r2, r6
 8007de0:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 8007de4:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8007de8:	da17      	bge.n	8007e1a <__ieee754_atan2f+0xba>
 8007dea:	2900      	cmp	r1, #0
 8007dec:	da01      	bge.n	8007df2 <__ieee754_atan2f+0x92>
 8007dee:	303c      	adds	r0, #60	@ 0x3c
 8007df0:	db15      	blt.n	8007e1e <__ieee754_atan2f+0xbe>
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7f8 fbb2 	bl	800055c <__aeabi_fdiv>
 8007df8:	f000 f946 	bl	8008088 <fabsf>
 8007dfc:	f000 f838 	bl	8007e70 <atanf>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2c01      	cmp	r4, #1
 8007e04:	d00d      	beq.n	8007e22 <__ieee754_atan2f+0xc2>
 8007e06:	2c02      	cmp	r4, #2
 8007e08:	d00e      	beq.n	8007e28 <__ieee754_atan2f+0xc8>
 8007e0a:	2c00      	cmp	r4, #0
 8007e0c:	d0cb      	beq.n	8007da6 <__ieee754_atan2f+0x46>
 8007e0e:	4913      	ldr	r1, [pc, #76]	@ (8007e5c <__ieee754_atan2f+0xfc>)
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7f8 f9e7 	bl	80001e4 <__addsf3>
 8007e16:	4912      	ldr	r1, [pc, #72]	@ (8007e60 <__ieee754_atan2f+0x100>)
 8007e18:	e00c      	b.n	8007e34 <__ieee754_atan2f+0xd4>
 8007e1a:	4b12      	ldr	r3, [pc, #72]	@ (8007e64 <__ieee754_atan2f+0x104>)
 8007e1c:	e7f1      	b.n	8007e02 <__ieee754_atan2f+0xa2>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e7ef      	b.n	8007e02 <__ieee754_atan2f+0xa2>
 8007e22:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007e26:	e7be      	b.n	8007da6 <__ieee754_atan2f+0x46>
 8007e28:	490c      	ldr	r1, [pc, #48]	@ (8007e5c <__ieee754_atan2f+0xfc>)
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7f8 f9da 	bl	80001e4 <__addsf3>
 8007e30:	4601      	mov	r1, r0
 8007e32:	480b      	ldr	r0, [pc, #44]	@ (8007e60 <__ieee754_atan2f+0x100>)
 8007e34:	f7f8 f9d4 	bl	80001e0 <__aeabi_fsub>
 8007e38:	e7a2      	b.n	8007d80 <__ieee754_atan2f+0x20>
 8007e3a:	4b09      	ldr	r3, [pc, #36]	@ (8007e60 <__ieee754_atan2f+0x100>)
 8007e3c:	e7b3      	b.n	8007da6 <__ieee754_atan2f+0x46>
 8007e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007e68 <__ieee754_atan2f+0x108>)
 8007e40:	e7b1      	b.n	8007da6 <__ieee754_atan2f+0x46>
 8007e42:	4b0a      	ldr	r3, [pc, #40]	@ (8007e6c <__ieee754_atan2f+0x10c>)
 8007e44:	e7af      	b.n	8007da6 <__ieee754_atan2f+0x46>
 8007e46:	2300      	movs	r3, #0
 8007e48:	e7ad      	b.n	8007da6 <__ieee754_atan2f+0x46>
 8007e4a:	4b06      	ldr	r3, [pc, #24]	@ (8007e64 <__ieee754_atan2f+0x104>)
 8007e4c:	e7ab      	b.n	8007da6 <__ieee754_atan2f+0x46>
 8007e4e:	bf00      	nop
 8007e50:	bfc90fdb 	.word	0xbfc90fdb
 8007e54:	08008218 	.word	0x08008218
 8007e58:	0800820c 	.word	0x0800820c
 8007e5c:	33bbbd2e 	.word	0x33bbbd2e
 8007e60:	40490fdb 	.word	0x40490fdb
 8007e64:	3fc90fdb 	.word	0x3fc90fdb
 8007e68:	c0490fdb 	.word	0xc0490fdb
 8007e6c:	3f490fdb 	.word	0x3f490fdb

08007e70 <atanf>:
 8007e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e74:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 8007e78:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	4680      	mov	r8, r0
 8007e80:	d30e      	bcc.n	8007ea0 <atanf+0x30>
 8007e82:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8007e86:	d904      	bls.n	8007e92 <atanf+0x22>
 8007e88:	4601      	mov	r1, r0
 8007e8a:	f7f8 f9ab 	bl	80001e4 <__addsf3>
 8007e8e:	4604      	mov	r4, r0
 8007e90:	e003      	b.n	8007e9a <atanf+0x2a>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	f340 80ce 	ble.w	8008034 <atanf+0x1c4>
 8007e98:	4c67      	ldr	r4, [pc, #412]	@ (8008038 <atanf+0x1c8>)
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ea0:	4b66      	ldr	r3, [pc, #408]	@ (800803c <atanf+0x1cc>)
 8007ea2:	429d      	cmp	r5, r3
 8007ea4:	d80e      	bhi.n	8007ec4 <atanf+0x54>
 8007ea6:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 8007eaa:	d208      	bcs.n	8007ebe <atanf+0x4e>
 8007eac:	4964      	ldr	r1, [pc, #400]	@ (8008040 <atanf+0x1d0>)
 8007eae:	f7f8 f999 	bl	80001e4 <__addsf3>
 8007eb2:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007eb6:	f7f8 fc59 	bl	800076c <__aeabi_fcmpgt>
 8007eba:	2800      	cmp	r0, #0
 8007ebc:	d1ed      	bne.n	8007e9a <atanf+0x2a>
 8007ebe:	f04f 36ff 	mov.w	r6, #4294967295
 8007ec2:	e01c      	b.n	8007efe <atanf+0x8e>
 8007ec4:	f000 f8e0 	bl	8008088 <fabsf>
 8007ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8008044 <atanf+0x1d4>)
 8007eca:	4604      	mov	r4, r0
 8007ecc:	429d      	cmp	r5, r3
 8007ece:	d87c      	bhi.n	8007fca <atanf+0x15a>
 8007ed0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8007ed4:	429d      	cmp	r5, r3
 8007ed6:	d867      	bhi.n	8007fa8 <atanf+0x138>
 8007ed8:	4601      	mov	r1, r0
 8007eda:	f7f8 f983 	bl	80001e4 <__addsf3>
 8007ede:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007ee2:	f7f8 f97d 	bl	80001e0 <__aeabi_fsub>
 8007ee6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8007eea:	4605      	mov	r5, r0
 8007eec:	4620      	mov	r0, r4
 8007eee:	f7f8 f979 	bl	80001e4 <__addsf3>
 8007ef2:	4601      	mov	r1, r0
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f7f8 fb31 	bl	800055c <__aeabi_fdiv>
 8007efa:	2600      	movs	r6, #0
 8007efc:	4604      	mov	r4, r0
 8007efe:	4621      	mov	r1, r4
 8007f00:	4620      	mov	r0, r4
 8007f02:	f7f8 fa77 	bl	80003f4 <__aeabi_fmul>
 8007f06:	4601      	mov	r1, r0
 8007f08:	4607      	mov	r7, r0
 8007f0a:	f7f8 fa73 	bl	80003f4 <__aeabi_fmul>
 8007f0e:	4605      	mov	r5, r0
 8007f10:	494d      	ldr	r1, [pc, #308]	@ (8008048 <atanf+0x1d8>)
 8007f12:	f7f8 fa6f 	bl	80003f4 <__aeabi_fmul>
 8007f16:	494d      	ldr	r1, [pc, #308]	@ (800804c <atanf+0x1dc>)
 8007f18:	f7f8 f964 	bl	80001e4 <__addsf3>
 8007f1c:	4629      	mov	r1, r5
 8007f1e:	f7f8 fa69 	bl	80003f4 <__aeabi_fmul>
 8007f22:	494b      	ldr	r1, [pc, #300]	@ (8008050 <atanf+0x1e0>)
 8007f24:	f7f8 f95e 	bl	80001e4 <__addsf3>
 8007f28:	4629      	mov	r1, r5
 8007f2a:	f7f8 fa63 	bl	80003f4 <__aeabi_fmul>
 8007f2e:	4949      	ldr	r1, [pc, #292]	@ (8008054 <atanf+0x1e4>)
 8007f30:	f7f8 f958 	bl	80001e4 <__addsf3>
 8007f34:	4629      	mov	r1, r5
 8007f36:	f7f8 fa5d 	bl	80003f4 <__aeabi_fmul>
 8007f3a:	4947      	ldr	r1, [pc, #284]	@ (8008058 <atanf+0x1e8>)
 8007f3c:	f7f8 f952 	bl	80001e4 <__addsf3>
 8007f40:	4629      	mov	r1, r5
 8007f42:	f7f8 fa57 	bl	80003f4 <__aeabi_fmul>
 8007f46:	4945      	ldr	r1, [pc, #276]	@ (800805c <atanf+0x1ec>)
 8007f48:	f7f8 f94c 	bl	80001e4 <__addsf3>
 8007f4c:	4639      	mov	r1, r7
 8007f4e:	f7f8 fa51 	bl	80003f4 <__aeabi_fmul>
 8007f52:	4943      	ldr	r1, [pc, #268]	@ (8008060 <atanf+0x1f0>)
 8007f54:	4607      	mov	r7, r0
 8007f56:	4628      	mov	r0, r5
 8007f58:	f7f8 fa4c 	bl	80003f4 <__aeabi_fmul>
 8007f5c:	4941      	ldr	r1, [pc, #260]	@ (8008064 <atanf+0x1f4>)
 8007f5e:	f7f8 f93f 	bl	80001e0 <__aeabi_fsub>
 8007f62:	4629      	mov	r1, r5
 8007f64:	f7f8 fa46 	bl	80003f4 <__aeabi_fmul>
 8007f68:	493f      	ldr	r1, [pc, #252]	@ (8008068 <atanf+0x1f8>)
 8007f6a:	f7f8 f939 	bl	80001e0 <__aeabi_fsub>
 8007f6e:	4629      	mov	r1, r5
 8007f70:	f7f8 fa40 	bl	80003f4 <__aeabi_fmul>
 8007f74:	493d      	ldr	r1, [pc, #244]	@ (800806c <atanf+0x1fc>)
 8007f76:	f7f8 f933 	bl	80001e0 <__aeabi_fsub>
 8007f7a:	4629      	mov	r1, r5
 8007f7c:	f7f8 fa3a 	bl	80003f4 <__aeabi_fmul>
 8007f80:	493b      	ldr	r1, [pc, #236]	@ (8008070 <atanf+0x200>)
 8007f82:	f7f8 f92d 	bl	80001e0 <__aeabi_fsub>
 8007f86:	4629      	mov	r1, r5
 8007f88:	f7f8 fa34 	bl	80003f4 <__aeabi_fmul>
 8007f8c:	4601      	mov	r1, r0
 8007f8e:	4638      	mov	r0, r7
 8007f90:	f7f8 f928 	bl	80001e4 <__addsf3>
 8007f94:	4621      	mov	r1, r4
 8007f96:	f7f8 fa2d 	bl	80003f4 <__aeabi_fmul>
 8007f9a:	1c73      	adds	r3, r6, #1
 8007f9c:	4601      	mov	r1, r0
 8007f9e:	d133      	bne.n	8008008 <atanf+0x198>
 8007fa0:	4620      	mov	r0, r4
 8007fa2:	f7f8 f91d 	bl	80001e0 <__aeabi_fsub>
 8007fa6:	e772      	b.n	8007e8e <atanf+0x1e>
 8007fa8:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007fac:	f7f8 f918 	bl	80001e0 <__aeabi_fsub>
 8007fb0:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f7f8 f914 	bl	80001e4 <__addsf3>
 8007fbc:	4601      	mov	r1, r0
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	f7f8 facc 	bl	800055c <__aeabi_fdiv>
 8007fc4:	2601      	movs	r6, #1
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	e799      	b.n	8007efe <atanf+0x8e>
 8007fca:	4b2a      	ldr	r3, [pc, #168]	@ (8008074 <atanf+0x204>)
 8007fcc:	429d      	cmp	r5, r3
 8007fce:	d814      	bhi.n	8007ffa <atanf+0x18a>
 8007fd0:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8007fd4:	f7f8 f904 	bl	80001e0 <__aeabi_fsub>
 8007fd8:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 8007fdc:	4605      	mov	r5, r0
 8007fde:	4620      	mov	r0, r4
 8007fe0:	f7f8 fa08 	bl	80003f4 <__aeabi_fmul>
 8007fe4:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8007fe8:	f7f8 f8fc 	bl	80001e4 <__addsf3>
 8007fec:	4601      	mov	r1, r0
 8007fee:	4628      	mov	r0, r5
 8007ff0:	f7f8 fab4 	bl	800055c <__aeabi_fdiv>
 8007ff4:	2602      	movs	r6, #2
 8007ff6:	4604      	mov	r4, r0
 8007ff8:	e781      	b.n	8007efe <atanf+0x8e>
 8007ffa:	4601      	mov	r1, r0
 8007ffc:	481e      	ldr	r0, [pc, #120]	@ (8008078 <atanf+0x208>)
 8007ffe:	f7f8 faad 	bl	800055c <__aeabi_fdiv>
 8008002:	2603      	movs	r6, #3
 8008004:	4604      	mov	r4, r0
 8008006:	e77a      	b.n	8007efe <atanf+0x8e>
 8008008:	4b1c      	ldr	r3, [pc, #112]	@ (800807c <atanf+0x20c>)
 800800a:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800800e:	f7f8 f8e7 	bl	80001e0 <__aeabi_fsub>
 8008012:	4621      	mov	r1, r4
 8008014:	f7f8 f8e4 	bl	80001e0 <__aeabi_fsub>
 8008018:	4b19      	ldr	r3, [pc, #100]	@ (8008080 <atanf+0x210>)
 800801a:	4601      	mov	r1, r0
 800801c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008020:	f7f8 f8de 	bl	80001e0 <__aeabi_fsub>
 8008024:	f1b8 0f00 	cmp.w	r8, #0
 8008028:	4604      	mov	r4, r0
 800802a:	f6bf af36 	bge.w	8007e9a <atanf+0x2a>
 800802e:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8008032:	e732      	b.n	8007e9a <atanf+0x2a>
 8008034:	4c13      	ldr	r4, [pc, #76]	@ (8008084 <atanf+0x214>)
 8008036:	e730      	b.n	8007e9a <atanf+0x2a>
 8008038:	3fc90fdb 	.word	0x3fc90fdb
 800803c:	3edfffff 	.word	0x3edfffff
 8008040:	7149f2ca 	.word	0x7149f2ca
 8008044:	3f97ffff 	.word	0x3f97ffff
 8008048:	3c8569d7 	.word	0x3c8569d7
 800804c:	3d4bda59 	.word	0x3d4bda59
 8008050:	3d886b35 	.word	0x3d886b35
 8008054:	3dba2e6e 	.word	0x3dba2e6e
 8008058:	3e124925 	.word	0x3e124925
 800805c:	3eaaaaab 	.word	0x3eaaaaab
 8008060:	bd15a221 	.word	0xbd15a221
 8008064:	3d6ef16b 	.word	0x3d6ef16b
 8008068:	3d9d8795 	.word	0x3d9d8795
 800806c:	3de38e38 	.word	0x3de38e38
 8008070:	3e4ccccd 	.word	0x3e4ccccd
 8008074:	401bffff 	.word	0x401bffff
 8008078:	bf800000 	.word	0xbf800000
 800807c:	08008224 	.word	0x08008224
 8008080:	08008234 	.word	0x08008234
 8008084:	bfc90fdb 	.word	0xbfc90fdb

08008088 <fabsf>:
 8008088:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800808c:	4770      	bx	lr
	...

08008090 <_init>:
 8008090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008092:	bf00      	nop
 8008094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008096:	bc08      	pop	{r3}
 8008098:	469e      	mov	lr, r3
 800809a:	4770      	bx	lr

0800809c <_fini>:
 800809c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809e:	bf00      	nop
 80080a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080a2:	bc08      	pop	{r3}
 80080a4:	469e      	mov	lr, r3
 80080a6:	4770      	bx	lr
