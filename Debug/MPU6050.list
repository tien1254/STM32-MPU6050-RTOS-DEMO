
MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d970  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb8  0800da80  0800da80  0000ea80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e738  0800e738  00010200  2**0
                  CONTENTS
  4 .ARM          00000008  0800e738  0800e738  0000f738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e740  0800e740  00010200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e740  0800e740  0000f740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e744  0800e744  0000f744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000200  20000000  0800e748  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000047cc  20000200  0800e948  00010200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200049cc  0800e948  000109cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c2f3  00000000  00000000  00010229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f66  00000000  00000000  0002c51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  00030488  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015a4  00000000  00000000  00032060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e918  00000000  00000000  00033604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020b3a  00000000  00000000  00051f1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000afd78  00000000  00000000  00072a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001227ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000894c  00000000  00000000  00122814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000086  00000000  00000000  0012b160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800da68 	.word	0x0800da68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800da68 	.word	0x0800da68

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	@ 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	20000310 	.word	0x20000310

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_frsub>:
 8000b14:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b18:	e002      	b.n	8000b20 <__addsf3>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_fsub>:
 8000b1c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b20 <__addsf3>:
 8000b20:	0042      	lsls	r2, r0, #1
 8000b22:	bf1f      	itttt	ne
 8000b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b28:	ea92 0f03 	teqne	r2, r3
 8000b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b34:	d06a      	beq.n	8000c0c <__addsf3+0xec>
 8000b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b3e:	bfc1      	itttt	gt
 8000b40:	18d2      	addgt	r2, r2, r3
 8000b42:	4041      	eorgt	r1, r0
 8000b44:	4048      	eorgt	r0, r1
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	bfb8      	it	lt
 8000b4a:	425b      	neglt	r3, r3
 8000b4c:	2b19      	cmp	r3, #25
 8000b4e:	bf88      	it	hi
 8000b50:	4770      	bxhi	lr
 8000b52:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b56:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b5a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b5e:	bf18      	it	ne
 8000b60:	4240      	negne	r0, r0
 8000b62:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b66:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b6a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b6e:	bf18      	it	ne
 8000b70:	4249      	negne	r1, r1
 8000b72:	ea92 0f03 	teq	r2, r3
 8000b76:	d03f      	beq.n	8000bf8 <__addsf3+0xd8>
 8000b78:	f1a2 0201 	sub.w	r2, r2, #1
 8000b7c:	fa41 fc03 	asr.w	ip, r1, r3
 8000b80:	eb10 000c 	adds.w	r0, r0, ip
 8000b84:	f1c3 0320 	rsb	r3, r3, #32
 8000b88:	fa01 f103 	lsl.w	r1, r1, r3
 8000b8c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b90:	d502      	bpl.n	8000b98 <__addsf3+0x78>
 8000b92:	4249      	negs	r1, r1
 8000b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b98:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b9c:	d313      	bcc.n	8000bc6 <__addsf3+0xa6>
 8000b9e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ba2:	d306      	bcc.n	8000bb2 <__addsf3+0x92>
 8000ba4:	0840      	lsrs	r0, r0, #1
 8000ba6:	ea4f 0131 	mov.w	r1, r1, rrx
 8000baa:	f102 0201 	add.w	r2, r2, #1
 8000bae:	2afe      	cmp	r2, #254	@ 0xfe
 8000bb0:	d251      	bcs.n	8000c56 <__addsf3+0x136>
 8000bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bba:	bf08      	it	eq
 8000bbc:	f020 0001 	biceq.w	r0, r0, #1
 8000bc0:	ea40 0003 	orr.w	r0, r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	0049      	lsls	r1, r1, #1
 8000bc8:	eb40 0000 	adc.w	r0, r0, r0
 8000bcc:	3a01      	subs	r2, #1
 8000bce:	bf28      	it	cs
 8000bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bd4:	d2ed      	bcs.n	8000bb2 <__addsf3+0x92>
 8000bd6:	fab0 fc80 	clz	ip, r0
 8000bda:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bde:	ebb2 020c 	subs.w	r2, r2, ip
 8000be2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000be6:	bfaa      	itet	ge
 8000be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bec:	4252      	neglt	r2, r2
 8000bee:	4318      	orrge	r0, r3
 8000bf0:	bfbc      	itt	lt
 8000bf2:	40d0      	lsrlt	r0, r2
 8000bf4:	4318      	orrlt	r0, r3
 8000bf6:	4770      	bx	lr
 8000bf8:	f092 0f00 	teq	r2, #0
 8000bfc:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c00:	bf06      	itte	eq
 8000c02:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c06:	3201      	addeq	r2, #1
 8000c08:	3b01      	subne	r3, #1
 8000c0a:	e7b5      	b.n	8000b78 <__addsf3+0x58>
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	bf18      	it	ne
 8000c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1a:	d021      	beq.n	8000c60 <__addsf3+0x140>
 8000c1c:	ea92 0f03 	teq	r2, r3
 8000c20:	d004      	beq.n	8000c2c <__addsf3+0x10c>
 8000c22:	f092 0f00 	teq	r2, #0
 8000c26:	bf08      	it	eq
 8000c28:	4608      	moveq	r0, r1
 8000c2a:	4770      	bx	lr
 8000c2c:	ea90 0f01 	teq	r0, r1
 8000c30:	bf1c      	itt	ne
 8000c32:	2000      	movne	r0, #0
 8000c34:	4770      	bxne	lr
 8000c36:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c3a:	d104      	bne.n	8000c46 <__addsf3+0x126>
 8000c3c:	0040      	lsls	r0, r0, #1
 8000c3e:	bf28      	it	cs
 8000c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c44:	4770      	bx	lr
 8000c46:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c4a:	bf3c      	itt	cc
 8000c4c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c50:	4770      	bxcc	lr
 8000c52:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c56:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c5a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c5e:	4770      	bx	lr
 8000c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c64:	bf16      	itet	ne
 8000c66:	4608      	movne	r0, r1
 8000c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c6c:	4601      	movne	r1, r0
 8000c6e:	0242      	lsls	r2, r0, #9
 8000c70:	bf06      	itte	eq
 8000c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c76:	ea90 0f01 	teqeq	r0, r1
 8000c7a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_ui2f>:
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e004      	b.n	8000c90 <__aeabi_i2f+0x8>
 8000c86:	bf00      	nop

08000c88 <__aeabi_i2f>:
 8000c88:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c8c:	bf48      	it	mi
 8000c8e:	4240      	negmi	r0, r0
 8000c90:	ea5f 0c00 	movs.w	ip, r0
 8000c94:	bf08      	it	eq
 8000c96:	4770      	bxeq	lr
 8000c98:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c9c:	4601      	mov	r1, r0
 8000c9e:	f04f 0000 	mov.w	r0, #0
 8000ca2:	e01c      	b.n	8000cde <__aeabi_l2f+0x2a>

08000ca4 <__aeabi_ul2f>:
 8000ca4:	ea50 0201 	orrs.w	r2, r0, r1
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f04f 0300 	mov.w	r3, #0
 8000cb0:	e00a      	b.n	8000cc8 <__aeabi_l2f+0x14>
 8000cb2:	bf00      	nop

08000cb4 <__aeabi_l2f>:
 8000cb4:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb8:	bf08      	it	eq
 8000cba:	4770      	bxeq	lr
 8000cbc:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000cc0:	d502      	bpl.n	8000cc8 <__aeabi_l2f+0x14>
 8000cc2:	4240      	negs	r0, r0
 8000cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc8:	ea5f 0c01 	movs.w	ip, r1
 8000ccc:	bf02      	ittt	eq
 8000cce:	4684      	moveq	ip, r0
 8000cd0:	4601      	moveq	r1, r0
 8000cd2:	2000      	moveq	r0, #0
 8000cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cd8:	bf08      	it	eq
 8000cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ce2:	fabc f28c 	clz	r2, ip
 8000ce6:	3a08      	subs	r2, #8
 8000ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cec:	db10      	blt.n	8000d10 <__aeabi_l2f+0x5c>
 8000cee:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf2:	4463      	add	r3, ip
 8000cf4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cf8:	f1c2 0220 	rsb	r2, r2, #32
 8000cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d00:	fa20 f202 	lsr.w	r2, r0, r2
 8000d04:	eb43 0002 	adc.w	r0, r3, r2
 8000d08:	bf08      	it	eq
 8000d0a:	f020 0001 	biceq.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	f102 0220 	add.w	r2, r2, #32
 8000d14:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d18:	f1c2 0220 	rsb	r2, r2, #32
 8000d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d20:	fa21 f202 	lsr.w	r2, r1, r2
 8000d24:	eb43 0002 	adc.w	r0, r3, r2
 8000d28:	bf08      	it	eq
 8000d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fmul>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d06f      	beq.n	8000e28 <__aeabi_fmul+0xf8>
 8000d48:	441a      	add	r2, r3
 8000d4a:	ea80 0c01 	eor.w	ip, r0, r1
 8000d4e:	0240      	lsls	r0, r0, #9
 8000d50:	bf18      	it	ne
 8000d52:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d56:	d01e      	beq.n	8000d96 <__aeabi_fmul+0x66>
 8000d58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d5c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d60:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d64:	fba0 3101 	umull	r3, r1, r0, r1
 8000d68:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d6c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d70:	bf3e      	ittt	cc
 8000d72:	0049      	lslcc	r1, r1, #1
 8000d74:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d78:	005b      	lslcc	r3, r3, #1
 8000d7a:	ea40 0001 	orr.w	r0, r0, r1
 8000d7e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d82:	2afd      	cmp	r2, #253	@ 0xfd
 8000d84:	d81d      	bhi.n	8000dc2 <__aeabi_fmul+0x92>
 8000d86:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d8a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d8e:	bf08      	it	eq
 8000d90:	f020 0001 	biceq.w	r0, r0, #1
 8000d94:	4770      	bx	lr
 8000d96:	f090 0f00 	teq	r0, #0
 8000d9a:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	0249      	lsleq	r1, r1, #9
 8000da2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000daa:	3a7f      	subs	r2, #127	@ 0x7f
 8000dac:	bfc2      	ittt	gt
 8000dae:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000db6:	4770      	bxgt	lr
 8000db8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	dc5d      	bgt.n	8000e80 <__aeabi_fmul+0x150>
 8000dc4:	f112 0f19 	cmn.w	r2, #25
 8000dc8:	bfdc      	itt	le
 8000dca:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000dce:	4770      	bxle	lr
 8000dd0:	f1c2 0200 	rsb	r2, r2, #0
 8000dd4:	0041      	lsls	r1, r0, #1
 8000dd6:	fa21 f102 	lsr.w	r1, r1, r2
 8000dda:	f1c2 0220 	rsb	r2, r2, #32
 8000dde:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000de6:	f140 0000 	adc.w	r0, r0, #0
 8000dea:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dee:	bf08      	it	eq
 8000df0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df4:	4770      	bx	lr
 8000df6:	f092 0f00 	teq	r2, #0
 8000dfa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dfe:	bf02      	ittt	eq
 8000e00:	0040      	lsleq	r0, r0, #1
 8000e02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e06:	3a01      	subeq	r2, #1
 8000e08:	d0f9      	beq.n	8000dfe <__aeabi_fmul+0xce>
 8000e0a:	ea40 000c 	orr.w	r0, r0, ip
 8000e0e:	f093 0f00 	teq	r3, #0
 8000e12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e16:	bf02      	ittt	eq
 8000e18:	0049      	lsleq	r1, r1, #1
 8000e1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e1e:	3b01      	subeq	r3, #1
 8000e20:	d0f9      	beq.n	8000e16 <__aeabi_fmul+0xe6>
 8000e22:	ea41 010c 	orr.w	r1, r1, ip
 8000e26:	e78f      	b.n	8000d48 <__aeabi_fmul+0x18>
 8000e28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e2c:	ea92 0f0c 	teq	r2, ip
 8000e30:	bf18      	it	ne
 8000e32:	ea93 0f0c 	teqne	r3, ip
 8000e36:	d00a      	beq.n	8000e4e <__aeabi_fmul+0x11e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e42:	d1d8      	bne.n	8000df6 <__aeabi_fmul+0xc6>
 8000e44:	ea80 0001 	eor.w	r0, r0, r1
 8000e48:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e4c:	4770      	bx	lr
 8000e4e:	f090 0f00 	teq	r0, #0
 8000e52:	bf17      	itett	ne
 8000e54:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e58:	4608      	moveq	r0, r1
 8000e5a:	f091 0f00 	teqne	r1, #0
 8000e5e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e62:	d014      	beq.n	8000e8e <__aeabi_fmul+0x15e>
 8000e64:	ea92 0f0c 	teq	r2, ip
 8000e68:	d101      	bne.n	8000e6e <__aeabi_fmul+0x13e>
 8000e6a:	0242      	lsls	r2, r0, #9
 8000e6c:	d10f      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e6e:	ea93 0f0c 	teq	r3, ip
 8000e72:	d103      	bne.n	8000e7c <__aeabi_fmul+0x14c>
 8000e74:	024b      	lsls	r3, r1, #9
 8000e76:	bf18      	it	ne
 8000e78:	4608      	movne	r0, r1
 8000e7a:	d108      	bne.n	8000e8e <__aeabi_fmul+0x15e>
 8000e7c:	ea80 0001 	eor.w	r0, r0, r1
 8000e80:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e8c:	4770      	bx	lr
 8000e8e:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e92:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e96:	4770      	bx	lr

08000e98 <__aeabi_fdiv>:
 8000e98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea0:	bf1e      	ittt	ne
 8000ea2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ea6:	ea92 0f0c 	teqne	r2, ip
 8000eaa:	ea93 0f0c 	teqne	r3, ip
 8000eae:	d069      	beq.n	8000f84 <__aeabi_fdiv+0xec>
 8000eb0:	eba2 0203 	sub.w	r2, r2, r3
 8000eb4:	ea80 0c01 	eor.w	ip, r0, r1
 8000eb8:	0249      	lsls	r1, r1, #9
 8000eba:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ebe:	d037      	beq.n	8000f30 <__aeabi_fdiv+0x98>
 8000ec0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000ec4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ec8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ecc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf38      	it	cc
 8000ed4:	005b      	lslcc	r3, r3, #1
 8000ed6:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eda:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000ede:	428b      	cmp	r3, r1
 8000ee0:	bf24      	itt	cs
 8000ee2:	1a5b      	subcs	r3, r3, r1
 8000ee4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ee8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eec:	bf24      	itt	cs
 8000eee:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ef6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efa:	bf24      	itt	cs
 8000efc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f00:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f04:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f08:	bf24      	itt	cs
 8000f0a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f0e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	bf18      	it	ne
 8000f16:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1a:	d1e0      	bne.n	8000ede <__aeabi_fdiv+0x46>
 8000f1c:	2afd      	cmp	r2, #253	@ 0xfd
 8000f1e:	f63f af50 	bhi.w	8000dc2 <__aeabi_fmul+0x92>
 8000f22:	428b      	cmp	r3, r1
 8000f24:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f28:	bf08      	it	eq
 8000f2a:	f020 0001 	biceq.w	r0, r0, #1
 8000f2e:	4770      	bx	lr
 8000f30:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f34:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f38:	327f      	adds	r2, #127	@ 0x7f
 8000f3a:	bfc2      	ittt	gt
 8000f3c:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f40:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f44:	4770      	bxgt	lr
 8000f46:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f4a:	f04f 0300 	mov.w	r3, #0
 8000f4e:	3a01      	subs	r2, #1
 8000f50:	e737      	b.n	8000dc2 <__aeabi_fmul+0x92>
 8000f52:	f092 0f00 	teq	r2, #0
 8000f56:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f5a:	bf02      	ittt	eq
 8000f5c:	0040      	lsleq	r0, r0, #1
 8000f5e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f62:	3a01      	subeq	r2, #1
 8000f64:	d0f9      	beq.n	8000f5a <__aeabi_fdiv+0xc2>
 8000f66:	ea40 000c 	orr.w	r0, r0, ip
 8000f6a:	f093 0f00 	teq	r3, #0
 8000f6e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f72:	bf02      	ittt	eq
 8000f74:	0049      	lsleq	r1, r1, #1
 8000f76:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f7a:	3b01      	subeq	r3, #1
 8000f7c:	d0f9      	beq.n	8000f72 <__aeabi_fdiv+0xda>
 8000f7e:	ea41 010c 	orr.w	r1, r1, ip
 8000f82:	e795      	b.n	8000eb0 <__aeabi_fdiv+0x18>
 8000f84:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f88:	ea92 0f0c 	teq	r2, ip
 8000f8c:	d108      	bne.n	8000fa0 <__aeabi_fdiv+0x108>
 8000f8e:	0242      	lsls	r2, r0, #9
 8000f90:	f47f af7d 	bne.w	8000e8e <__aeabi_fmul+0x15e>
 8000f94:	ea93 0f0c 	teq	r3, ip
 8000f98:	f47f af70 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000f9c:	4608      	mov	r0, r1
 8000f9e:	e776      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	d104      	bne.n	8000fb0 <__aeabi_fdiv+0x118>
 8000fa6:	024b      	lsls	r3, r1, #9
 8000fa8:	f43f af4c 	beq.w	8000e44 <__aeabi_fmul+0x114>
 8000fac:	4608      	mov	r0, r1
 8000fae:	e76e      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fb4:	bf18      	it	ne
 8000fb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fba:	d1ca      	bne.n	8000f52 <__aeabi_fdiv+0xba>
 8000fbc:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fc0:	f47f af5c 	bne.w	8000e7c <__aeabi_fmul+0x14c>
 8000fc4:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fc8:	f47f af3c 	bne.w	8000e44 <__aeabi_fmul+0x114>
 8000fcc:	e75f      	b.n	8000e8e <__aeabi_fmul+0x15e>
 8000fce:	bf00      	nop

08000fd0 <__gesf2>:
 8000fd0:	f04f 3cff 	mov.w	ip, #4294967295
 8000fd4:	e006      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fd6:	bf00      	nop

08000fd8 <__lesf2>:
 8000fd8:	f04f 0c01 	mov.w	ip, #1
 8000fdc:	e002      	b.n	8000fe4 <__cmpsf2+0x4>
 8000fde:	bf00      	nop

08000fe0 <__cmpsf2>:
 8000fe0:	f04f 0c01 	mov.w	ip, #1
 8000fe4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fe8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff4:	bf18      	it	ne
 8000ff6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffa:	d011      	beq.n	8001020 <__cmpsf2+0x40>
 8000ffc:	b001      	add	sp, #4
 8000ffe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001002:	bf18      	it	ne
 8001004:	ea90 0f01 	teqne	r0, r1
 8001008:	bf58      	it	pl
 800100a:	ebb2 0003 	subspl.w	r0, r2, r3
 800100e:	bf88      	it	hi
 8001010:	17c8      	asrhi	r0, r1, #31
 8001012:	bf38      	it	cc
 8001014:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001018:	bf18      	it	ne
 800101a:	f040 0001 	orrne.w	r0, r0, #1
 800101e:	4770      	bx	lr
 8001020:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001024:	d102      	bne.n	800102c <__cmpsf2+0x4c>
 8001026:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102a:	d105      	bne.n	8001038 <__cmpsf2+0x58>
 800102c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001030:	d1e4      	bne.n	8000ffc <__cmpsf2+0x1c>
 8001032:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001036:	d0e1      	beq.n	8000ffc <__cmpsf2+0x1c>
 8001038:	f85d 0b04 	ldr.w	r0, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__aeabi_cfrcmple>:
 8001040:	4684      	mov	ip, r0
 8001042:	4608      	mov	r0, r1
 8001044:	4661      	mov	r1, ip
 8001046:	e7ff      	b.n	8001048 <__aeabi_cfcmpeq>

08001048 <__aeabi_cfcmpeq>:
 8001048:	b50f      	push	{r0, r1, r2, r3, lr}
 800104a:	f7ff ffc9 	bl	8000fe0 <__cmpsf2>
 800104e:	2800      	cmp	r0, #0
 8001050:	bf48      	it	mi
 8001052:	f110 0f00 	cmnmi.w	r0, #0
 8001056:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001058 <__aeabi_fcmpeq>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff fff4 	bl	8001048 <__aeabi_cfcmpeq>
 8001060:	bf0c      	ite	eq
 8001062:	2001      	moveq	r0, #1
 8001064:	2000      	movne	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmplt>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffea 	bl	8001048 <__aeabi_cfcmpeq>
 8001074:	bf34      	ite	cc
 8001076:	2001      	movcc	r0, #1
 8001078:	2000      	movcs	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmple>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffe0 	bl	8001048 <__aeabi_cfcmpeq>
 8001088:	bf94      	ite	ls
 800108a:	2001      	movls	r0, #1
 800108c:	2000      	movhi	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmpge>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffd2 	bl	8001040 <__aeabi_cfrcmple>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpgt>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffc8 	bl	8001040 <__aeabi_cfrcmple>
 80010b0:	bf34      	ite	cc
 80010b2:	2001      	movcc	r0, #1
 80010b4:	2000      	movcs	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpun>:
 80010bc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010c8:	d102      	bne.n	80010d0 <__aeabi_fcmpun+0x14>
 80010ca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ce:	d108      	bne.n	80010e2 <__aeabi_fcmpun+0x26>
 80010d0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d4:	d102      	bne.n	80010dc <__aeabi_fcmpun+0x20>
 80010d6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010da:	d102      	bne.n	80010e2 <__aeabi_fcmpun+0x26>
 80010dc:	f04f 0000 	mov.w	r0, #0
 80010e0:	4770      	bx	lr
 80010e2:	f04f 0001 	mov.w	r0, #1
 80010e6:	4770      	bx	lr

080010e8 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80010ec:	4803      	ldr	r0, [pc, #12]	@ (80010fc <_cbSendSystemDesc+0x14>)
 80010ee:	f001 f9bb 	bl	8002468 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80010f2:	4803      	ldr	r0, [pc, #12]	@ (8001100 <_cbSendSystemDesc+0x18>)
 80010f4:	f001 f9b8 	bl	8002468 <SEGGER_SYSVIEW_SendSysDesc>
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800da80 	.word	0x0800da80
 8001100:	0800dab4 	.word	0x0800dab4

08001104 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <SEGGER_SYSVIEW_Conf+0x20>)
 800110a:	6818      	ldr	r0, [r3, #0]
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <SEGGER_SYSVIEW_Conf+0x20>)
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	4b05      	ldr	r3, [pc, #20]	@ (8001128 <SEGGER_SYSVIEW_Conf+0x24>)
 8001112:	4a06      	ldr	r2, [pc, #24]	@ (800112c <SEGGER_SYSVIEW_Conf+0x28>)
 8001114:	f000 fe30 	bl	8001d78 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8001118:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800111c:	f000 fe70 	bl	8001e00 <SEGGER_SYSVIEW_SetRAMBase>
}
 8001120:	bf00      	nop
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000024 	.word	0x20000024
 8001128:	080010e9 	.word	0x080010e9
 800112c:	0800dbd4 	.word	0x0800dbd4

08001130 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8001130:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001132:	b085      	sub	sp, #20
 8001134:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	e048      	b.n	80011ce <_cbSendTaskList+0x9e>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
 800113c:	4929      	ldr	r1, [pc, #164]	@ (80011e4 <_cbSendTaskList+0xb4>)
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4618      	mov	r0, r3
 800114e:	f003 fa43 	bl	80045d8 <uxTaskGetStackHighWaterMark>
 8001152:	4601      	mov	r1, r0
 8001154:	4823      	ldr	r0, [pc, #140]	@ (80011e4 <_cbSendTaskList+0xb4>)
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4403      	add	r3, r0
 8001162:	3310      	adds	r3, #16
 8001164:	6019      	str	r1, [r3, #0]
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8001166:	491f      	ldr	r1, [pc, #124]	@ (80011e4 <_cbSendTaskList+0xb4>)
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	4413      	add	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	6818      	ldr	r0, [r3, #0]
 8001176:	491b      	ldr	r1, [pc, #108]	@ (80011e4 <_cbSendTaskList+0xb4>)
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	3304      	adds	r3, #4
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	4c16      	ldr	r4, [pc, #88]	@ (80011e4 <_cbSendTaskList+0xb4>)
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	009b      	lsls	r3, r3, #2
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	4423      	add	r3, r4
 8001196:	3308      	adds	r3, #8
 8001198:	681c      	ldr	r4, [r3, #0]
 800119a:	4d12      	ldr	r5, [pc, #72]	@ (80011e4 <_cbSendTaskList+0xb4>)
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4613      	mov	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	4413      	add	r3, r2
 80011a4:	009b      	lsls	r3, r3, #2
 80011a6:	442b      	add	r3, r5
 80011a8:	330c      	adds	r3, #12
 80011aa:	681d      	ldr	r5, [r3, #0]
 80011ac:	4e0d      	ldr	r6, [pc, #52]	@ (80011e4 <_cbSendTaskList+0xb4>)
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	4433      	add	r3, r6
 80011ba:	3310      	adds	r3, #16
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	9300      	str	r3, [sp, #0]
 80011c0:	462b      	mov	r3, r5
 80011c2:	4622      	mov	r2, r4
 80011c4:	f000 f97a 	bl	80014bc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3301      	adds	r3, #1
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <_cbSendTaskList+0xb8>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d3b1      	bcc.n	800113c <_cbSendTaskList+0xc>
  }
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	2000021c 	.word	0x2000021c
 80011e8:	2000030c 	.word	0x2000030c

080011ec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80011ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80011f4:	f002 fd9e 	bl	8003d34 <xTaskGetTickCountFromISR>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2200      	movs	r2, #0
 80011fc:	469a      	mov	sl, r3
 80011fe:	4693      	mov	fp, r2
 8001200:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8001204:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	f04f 0a00 	mov.w	sl, #0
 8001210:	f04f 0b00 	mov.w	fp, #0
 8001214:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8001218:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800121c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8001220:	4652      	mov	r2, sl
 8001222:	465b      	mov	r3, fp
 8001224:	1a14      	subs	r4, r2, r0
 8001226:	eb63 0501 	sbc.w	r5, r3, r1
 800122a:	f04f 0200 	mov.w	r2, #0
 800122e:	f04f 0300 	mov.w	r3, #0
 8001232:	00ab      	lsls	r3, r5, #2
 8001234:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001238:	00a2      	lsls	r2, r4, #2
 800123a:	4614      	mov	r4, r2
 800123c:	461d      	mov	r5, r3
 800123e:	eb14 0800 	adds.w	r8, r4, r0
 8001242:	eb45 0901 	adc.w	r9, r5, r1
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	f04f 0300 	mov.w	r3, #0
 800124e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800125a:	4690      	mov	r8, r2
 800125c:	4699      	mov	r9, r3
 800125e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8001262:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8001266:	4610      	mov	r0, r2
 8001268:	4619      	mov	r1, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001274 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af02      	add	r7, sp, #8
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8001282:	2205      	movs	r2, #5
 8001284:	492b      	ldr	r1, [pc, #172]	@ (8001334 <SYSVIEW_AddTask+0xc0>)
 8001286:	68b8      	ldr	r0, [r7, #8]
 8001288:	f00a f8e7 	bl	800b45a <memcmp>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d04b      	beq.n	800132a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8001292:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <SYSVIEW_AddTask+0xc4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2b0b      	cmp	r3, #11
 8001298:	d903      	bls.n	80012a2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800129a:	4828      	ldr	r0, [pc, #160]	@ (800133c <SYSVIEW_AddTask+0xc8>)
 800129c:	f001 fc80 	bl	8002ba0 <SEGGER_SYSVIEW_Warn>
    return;
 80012a0:	e044      	b.n	800132c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80012a2:	4b25      	ldr	r3, [pc, #148]	@ (8001338 <SYSVIEW_AddTask+0xc4>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4926      	ldr	r1, [pc, #152]	@ (8001340 <SYSVIEW_AddTask+0xcc>)
 80012a8:	4613      	mov	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	4413      	add	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	440b      	add	r3, r1
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80012b6:	4b20      	ldr	r3, [pc, #128]	@ (8001338 <SYSVIEW_AddTask+0xc4>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	4921      	ldr	r1, [pc, #132]	@ (8001340 <SYSVIEW_AddTask+0xcc>)
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	440b      	add	r3, r1
 80012c6:	3304      	adds	r3, #4
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80012cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001338 <SYSVIEW_AddTask+0xc4>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	491b      	ldr	r1, [pc, #108]	@ (8001340 <SYSVIEW_AddTask+0xcc>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	440b      	add	r3, r1
 80012dc:	3308      	adds	r3, #8
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80012e2:	4b15      	ldr	r3, [pc, #84]	@ (8001338 <SYSVIEW_AddTask+0xc4>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	4916      	ldr	r1, [pc, #88]	@ (8001340 <SYSVIEW_AddTask+0xcc>)
 80012e8:	4613      	mov	r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	4413      	add	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	440b      	add	r3, r1
 80012f2:	330c      	adds	r3, #12
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <SYSVIEW_AddTask+0xc4>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4910      	ldr	r1, [pc, #64]	@ (8001340 <SYSVIEW_AddTask+0xcc>)
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	440b      	add	r3, r1
 8001308:	3310      	adds	r3, #16
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800130e:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <SYSVIEW_AddTask+0xc4>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a08      	ldr	r2, [pc, #32]	@ (8001338 <SYSVIEW_AddTask+0xc4>)
 8001316:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	68f8      	ldr	r0, [r7, #12]
 8001324:	f000 f8ca 	bl	80014bc <SYSVIEW_SendTaskInfo>
 8001328:	e000      	b.n	800132c <SYSVIEW_AddTask+0xb8>
    return;
 800132a:	bf00      	nop

}
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	0800dac4 	.word	0x0800dac4
 8001338:	2000030c 	.word	0x2000030c
 800133c:	0800dacc 	.word	0x0800dacc
 8001340:	2000021c 	.word	0x2000021c

08001344 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 800134c:	4b59      	ldr	r3, [pc, #356]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 80ab 	beq.w	80014ac <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	e00d      	b.n	8001378 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 800135c:	4956      	ldr	r1, [pc, #344]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	440b      	add	r3, r1
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	429a      	cmp	r2, r3
 8001370:	d008      	beq.n	8001384 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	3301      	adds	r3, #1
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b4e      	ldr	r3, [pc, #312]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	429a      	cmp	r2, r3
 8001380:	d3ec      	bcc.n	800135c <SYSVIEW_DeleteTask+0x18>
 8001382:	e000      	b.n	8001386 <SYSVIEW_DeleteTask+0x42>
      break;
 8001384:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8001386:	4b4b      	ldr	r3, [pc, #300]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3b01      	subs	r3, #1
 800138c:	68fa      	ldr	r2, [r7, #12]
 800138e:	429a      	cmp	r2, r3
 8001390:	d111      	bne.n	80013b6 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	4613      	mov	r3, r2
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	4413      	add	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4a46      	ldr	r2, [pc, #280]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 800139e:	4413      	add	r3, r2
 80013a0:	2214      	movs	r2, #20
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f00a f868 	bl	800b47a <memset>
    _NumTasks--;
 80013aa:	4b42      	ldr	r3, [pc, #264]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3b01      	subs	r3, #1
 80013b0:	4a40      	ldr	r2, [pc, #256]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 80013b2:	6013      	str	r3, [r2, #0]
 80013b4:	e07b      	b.n	80014ae <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 80013b6:	4b3f      	ldr	r3, [pc, #252]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d276      	bcs.n	80014ae <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80013c0:	4b3c      	ldr	r3, [pc, #240]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	1e5a      	subs	r2, r3, #1
 80013c6:	493c      	ldr	r1, [pc, #240]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	440b      	add	r3, r1
 80013d2:	6819      	ldr	r1, [r3, #0]
 80013d4:	4838      	ldr	r0, [pc, #224]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4403      	add	r3, r0
 80013e2:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80013e4:	4b33      	ldr	r3, [pc, #204]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	4933      	ldr	r1, [pc, #204]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	3304      	adds	r3, #4
 80013f8:	6819      	ldr	r1, [r3, #0]
 80013fa:	482f      	ldr	r0, [pc, #188]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4613      	mov	r3, r2
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	4413      	add	r3, r2
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	4403      	add	r3, r0
 8001408:	3304      	adds	r3, #4
 800140a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800140c:	4b29      	ldr	r3, [pc, #164]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	1e5a      	subs	r2, r3, #1
 8001412:	4929      	ldr	r1, [pc, #164]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	3308      	adds	r3, #8
 8001420:	6819      	ldr	r1, [r3, #0]
 8001422:	4825      	ldr	r0, [pc, #148]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4613      	mov	r3, r2
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	4403      	add	r3, r0
 8001430:	3308      	adds	r3, #8
 8001432:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8001434:	4b1f      	ldr	r3, [pc, #124]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	1e5a      	subs	r2, r3, #1
 800143a:	491f      	ldr	r1, [pc, #124]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 800143c:	4613      	mov	r3, r2
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	4413      	add	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	440b      	add	r3, r1
 8001446:	330c      	adds	r3, #12
 8001448:	6819      	ldr	r1, [r3, #0]
 800144a:	481b      	ldr	r0, [pc, #108]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	4613      	mov	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4403      	add	r3, r0
 8001458:	330c      	adds	r3, #12
 800145a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 800145c:	4b15      	ldr	r3, [pc, #84]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	1e5a      	subs	r2, r3, #1
 8001462:	4915      	ldr	r1, [pc, #84]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 8001464:	4613      	mov	r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	3310      	adds	r3, #16
 8001470:	6819      	ldr	r1, [r3, #0]
 8001472:	4811      	ldr	r0, [pc, #68]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	4613      	mov	r3, r2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	4413      	add	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4403      	add	r3, r0
 8001480:	3310      	adds	r3, #16
 8001482:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8001484:	4b0b      	ldr	r3, [pc, #44]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	1e5a      	subs	r2, r3, #1
 800148a:	4613      	mov	r3, r2
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	4413      	add	r3, r2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4a09      	ldr	r2, [pc, #36]	@ (80014b8 <SYSVIEW_DeleteTask+0x174>)
 8001494:	4413      	add	r3, r2
 8001496:	2214      	movs	r2, #20
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f009 ffed 	bl	800b47a <memset>
    _NumTasks--;
 80014a0:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	3b01      	subs	r3, #1
 80014a6:	4a03      	ldr	r2, [pc, #12]	@ (80014b4 <SYSVIEW_DeleteTask+0x170>)
 80014a8:	6013      	str	r3, [r2, #0]
 80014aa:	e000      	b.n	80014ae <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80014ac:	bf00      	nop
  }
}
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000030c 	.word	0x2000030c
 80014b8:	2000021c 	.word	0x2000021c

080014bc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	@ 0x28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80014ca:	f107 0310 	add.w	r3, r7, #16
 80014ce:	2218      	movs	r2, #24
 80014d0:	2100      	movs	r1, #0
 80014d2:	4618      	mov	r0, r3
 80014d4:	f009 ffd1 	bl	800b47a <memset>
  TaskInfo.TaskID     = TaskID;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80014e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80014ea:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4618      	mov	r0, r3
 80014f2:	f000 fec1 	bl	8002278 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	@ 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001506:	4b25      	ldr	r3, [pc, #148]	@ (800159c <_DoInit+0x9c>)
 8001508:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800150a:	22a8      	movs	r2, #168	@ 0xa8
 800150c:	2100      	movs	r1, #0
 800150e:	6838      	ldr	r0, [r7, #0]
 8001510:	f009 ffb3 	bl	800b47a <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	2203      	movs	r2, #3
 8001518:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	2203      	movs	r2, #3
 800151e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	4a1f      	ldr	r2, [pc, #124]	@ (80015a0 <_DoInit+0xa0>)
 8001524:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	4a1e      	ldr	r2, [pc, #120]	@ (80015a4 <_DoInit+0xa4>)
 800152a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001532:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2200      	movs	r2, #0
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	4a15      	ldr	r2, [pc, #84]	@ (80015a0 <_DoInit+0xa0>)
 800154a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	4a16      	ldr	r2, [pc, #88]	@ (80015a8 <_DoInit+0xa8>)
 8001550:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2210      	movs	r2, #16
 8001556:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	2200      	movs	r2, #0
 800155c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2200      	movs	r2, #0
 8001562:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2200      	movs	r2, #0
 8001568:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800156a:	2300      	movs	r3, #0
 800156c:	607b      	str	r3, [r7, #4]
 800156e:	e00c      	b.n	800158a <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f1c3 030f 	rsb	r3, r3, #15
 8001576:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <_DoInit+0xac>)
 8001578:	5cd1      	ldrb	r1, [r2, r3]
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4413      	add	r3, r2
 8001580:	460a      	mov	r2, r1
 8001582:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3301      	adds	r3, #1
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2b0f      	cmp	r3, #15
 800158e:	d9ef      	bls.n	8001570 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8001590:	bf00      	nop
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000310 	.word	0x20000310
 80015a0:	0800db1c 	.word	0x0800db1c
 80015a4:	200003b8 	.word	0x200003b8
 80015a8:	200007b8 	.word	0x200007b8
 80015ac:	0800dbdc 	.word	0x0800dbdc

080015b0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08c      	sub	sp, #48	@ 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80015bc:	4b3e      	ldr	r3, [pc, #248]	@ (80016b8 <SEGGER_RTT_ReadNoLock+0x108>)
 80015be:	623b      	str	r3, [r7, #32]
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b53      	cmp	r3, #83	@ 0x53
 80015c8:	d001      	beq.n	80015ce <SEGGER_RTT_ReadNoLock+0x1e>
 80015ca:	f7ff ff99 	bl	8001500 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	3360      	adds	r3, #96	@ 0x60
 80015da:	4a37      	ldr	r2, [pc, #220]	@ (80016b8 <SEGGER_RTT_ReadNoLock+0x108>)
 80015dc:	4413      	add	r3, r2
 80015de:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	691b      	ldr	r3, [r3, #16]
 80015e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	68db      	ldr	r3, [r3, #12]
 80015ee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80015f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d92b      	bls.n	8001654 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4293      	cmp	r3, r2
 800160c:	bf28      	it	cs
 800160e:	4613      	movcs	r3, r2
 8001610:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	685a      	ldr	r2, [r3, #4]
 8001616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001618:	4413      	add	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	6939      	ldr	r1, [r7, #16]
 8001620:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001622:	f009 ffb8 	bl	800b596 <memcpy>
    NumBytesRead += NumBytesRem;
 8001626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	4413      	add	r3, r2
 800162c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800162e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	4413      	add	r3, r2
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800163e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	4413      	add	r3, r2
 8001644:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800164c:	429a      	cmp	r2, r3
 800164e:	d101      	bne.n	8001654 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8001650:	2300      	movs	r3, #0
 8001652:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4293      	cmp	r3, r2
 8001662:	bf28      	it	cs
 8001664:	4613      	movcs	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d019      	beq.n	80016a2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001674:	4413      	add	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001678:	697a      	ldr	r2, [r7, #20]
 800167a:	6939      	ldr	r1, [r7, #16]
 800167c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800167e:	f009 ff8a 	bl	800b596 <memcpy>
    NumBytesRead += NumBytesRem;
 8001682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4413      	add	r3, r2
 8001688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800168a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	4413      	add	r3, r2
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800169a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4413      	add	r3, r2
 80016a0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80016a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80016ac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80016ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3730      	adds	r7, #48	@ 0x30
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000310 	.word	0x20000310

080016bc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	60f8      	str	r0, [r7, #12]
 80016c4:	60b9      	str	r1, [r7, #8]
 80016c6:	607a      	str	r2, [r7, #4]
 80016c8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80016ca:	4b3c      	ldr	r3, [pc, #240]	@ (80017bc <SEGGER_RTT_AllocUpBuffer+0x100>)
 80016cc:	61bb      	str	r3, [r7, #24]
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b53      	cmp	r3, #83	@ 0x53
 80016d6:	d001      	beq.n	80016dc <SEGGER_RTT_AllocUpBuffer+0x20>
 80016d8:	f7ff ff12 	bl	8001500 <_DoInit>
  SEGGER_RTT_LOCK();
 80016dc:	f3ef 8311 	mrs	r3, BASEPRI
 80016e0:	f04f 0120 	mov.w	r1, #32
 80016e4:	f381 8811 	msr	BASEPRI, r1
 80016e8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80016ea:	4b34      	ldr	r3, [pc, #208]	@ (80017bc <SEGGER_RTT_AllocUpBuffer+0x100>)
 80016ec:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80016f2:	6939      	ldr	r1, [r7, #16]
 80016f4:	69fb      	ldr	r3, [r7, #28]
 80016f6:	1c5a      	adds	r2, r3, #1
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	440b      	add	r3, r1
 8001702:	3304      	adds	r3, #4
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d008      	beq.n	800171c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3301      	adds	r3, #1
 800170e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	69fa      	ldr	r2, [r7, #28]
 8001716:	429a      	cmp	r2, r3
 8001718:	dbeb      	blt.n	80016f2 <SEGGER_RTT_AllocUpBuffer+0x36>
 800171a:	e000      	b.n	800171e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800171c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	429a      	cmp	r2, r3
 8001726:	da3d      	bge.n	80017a4 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8001728:	6939      	ldr	r1, [r7, #16]
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	1c5a      	adds	r2, r3, #1
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	440b      	add	r3, r1
 8001738:	68fa      	ldr	r2, [r7, #12]
 800173a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	1c5a      	adds	r2, r3, #1
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	3304      	adds	r3, #4
 800174e:	68ba      	ldr	r2, [r7, #8]
 8001750:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8001752:	6939      	ldr	r1, [r7, #16]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	4613      	mov	r3, r2
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	4413      	add	r3, r2
 800175c:	00db      	lsls	r3, r3, #3
 800175e:	440b      	add	r3, r1
 8001760:	3320      	adds	r3, #32
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8001766:	6939      	ldr	r1, [r7, #16]
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	4613      	mov	r3, r2
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	4413      	add	r3, r2
 8001770:	00db      	lsls	r3, r3, #3
 8001772:	440b      	add	r3, r1
 8001774:	3328      	adds	r3, #40	@ 0x28
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800177a:	6939      	ldr	r1, [r7, #16]
 800177c:	69fa      	ldr	r2, [r7, #28]
 800177e:	4613      	mov	r3, r2
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	3324      	adds	r3, #36	@ 0x24
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800178e:	6939      	ldr	r1, [r7, #16]
 8001790:	69fa      	ldr	r2, [r7, #28]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	440b      	add	r3, r1
 800179c:	332c      	adds	r3, #44	@ 0x2c
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e002      	b.n	80017aa <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80017b0:	69fb      	ldr	r3, [r7, #28]
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000310 	.word	0x20000310

080017c0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08a      	sub	sp, #40	@ 0x28
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
 80017cc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80017ce:	4b20      	ldr	r3, [pc, #128]	@ (8001850 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	2b53      	cmp	r3, #83	@ 0x53
 80017da:	d001      	beq.n	80017e0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 80017dc:	f7ff fe90 	bl	8001500 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 80017e2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d82a      	bhi.n	8001840 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 80017ea:	f3ef 8311 	mrs	r3, BASEPRI
 80017ee:	f04f 0120 	mov.w	r1, #32
 80017f2:	f381 8811 	msr	BASEPRI, r1
 80017f6:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80017f8:	68fa      	ldr	r2, [r7, #12]
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	00db      	lsls	r3, r3, #3
 8001802:	3360      	adds	r3, #96	@ 0x60
 8001804:	69fa      	ldr	r2, [r7, #28]
 8001806:	4413      	add	r3, r2
 8001808:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d00e      	beq.n	800182e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	683a      	ldr	r2, [r7, #0]
 8001820:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	2200      	movs	r2, #0
 800182c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001832:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800183a:	2300      	movs	r3, #0
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
 800183e:	e002      	b.n	8001846 <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8001840:	f04f 33ff 	mov.w	r3, #4294967295
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8001846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8001848:	4618      	mov	r0, r3
 800184a:	3728      	adds	r7, #40	@ 0x28
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20000310 	.word	0x20000310

08001854 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d105      	bne.n	8001872 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	60fa      	str	r2, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
 8001870:	e022      	b.n	80018b8 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	60fa      	str	r2, [r7, #12]
 800187c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b80      	cmp	r3, #128	@ 0x80
 8001882:	d90a      	bls.n	800189a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8001884:	2380      	movs	r3, #128	@ 0x80
 8001886:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8001888:	e007      	b.n	800189a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800188a:	68ba      	ldr	r2, [r7, #8]
 800188c:	1c53      	adds	r3, r2, #1
 800188e:	60bb      	str	r3, [r7, #8]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	1c59      	adds	r1, r3, #1
 8001894:	60f9      	str	r1, [r7, #12]
 8001896:	7812      	ldrb	r2, [r2, #0]
 8001898:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	1e5a      	subs	r2, r3, #1
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d003      	beq.n	80018ac <_EncodeStr+0x58>
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1ee      	bne.n	800188a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 80018ac:	68ba      	ldr	r2, [r7, #8]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 80018b8:	68fb      	ldr	r3, [r7, #12]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3307      	adds	r3, #7
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
	...

080018dc <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80018e2:	4b34      	ldr	r3, [pc, #208]	@ (80019b4 <_HandleIncomingPacket+0xd8>)
 80018e4:	7e1b      	ldrb	r3, [r3, #24]
 80018e6:	4618      	mov	r0, r3
 80018e8:	1cfb      	adds	r3, r7, #3
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7ff fe5f 	bl	80015b0 <SEGGER_RTT_ReadNoLock>
 80018f2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d057      	beq.n	80019aa <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80018fa:	78fb      	ldrb	r3, [r7, #3]
 80018fc:	2b80      	cmp	r3, #128	@ 0x80
 80018fe:	d031      	beq.n	8001964 <_HandleIncomingPacket+0x88>
 8001900:	2b80      	cmp	r3, #128	@ 0x80
 8001902:	dc40      	bgt.n	8001986 <_HandleIncomingPacket+0xaa>
 8001904:	2b07      	cmp	r3, #7
 8001906:	dc15      	bgt.n	8001934 <_HandleIncomingPacket+0x58>
 8001908:	2b00      	cmp	r3, #0
 800190a:	dd3c      	ble.n	8001986 <_HandleIncomingPacket+0xaa>
 800190c:	3b01      	subs	r3, #1
 800190e:	2b06      	cmp	r3, #6
 8001910:	d839      	bhi.n	8001986 <_HandleIncomingPacket+0xaa>
 8001912:	a201      	add	r2, pc, #4	@ (adr r2, 8001918 <_HandleIncomingPacket+0x3c>)
 8001914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001918:	0800193b 	.word	0x0800193b
 800191c:	08001941 	.word	0x08001941
 8001920:	08001947 	.word	0x08001947
 8001924:	0800194d 	.word	0x0800194d
 8001928:	08001953 	.word	0x08001953
 800192c:	08001959 	.word	0x08001959
 8001930:	0800195f 	.word	0x0800195f
 8001934:	2b7f      	cmp	r3, #127	@ 0x7f
 8001936:	d033      	beq.n	80019a0 <_HandleIncomingPacket+0xc4>
 8001938:	e025      	b.n	8001986 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800193a:	f000 fb23 	bl	8001f84 <SEGGER_SYSVIEW_Start>
      break;
 800193e:	e034      	b.n	80019aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8001940:	f000 fbda 	bl	80020f8 <SEGGER_SYSVIEW_Stop>
      break;
 8001944:	e031      	b.n	80019aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8001946:	f000 fdb3 	bl	80024b0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800194a:	e02e      	b.n	80019aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800194c:	f000 fd78 	bl	8002440 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8001950:	e02b      	b.n	80019aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8001952:	f000 fbf7 	bl	8002144 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8001956:	e028      	b.n	80019aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8001958:	f001 f8e4 	bl	8002b24 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800195c:	e025      	b.n	80019aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800195e:	f001 f8c3 	bl	8002ae8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8001962:	e022      	b.n	80019aa <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8001964:	4b13      	ldr	r3, [pc, #76]	@ (80019b4 <_HandleIncomingPacket+0xd8>)
 8001966:	7e1b      	ldrb	r3, [r3, #24]
 8001968:	4618      	mov	r0, r3
 800196a:	1cfb      	adds	r3, r7, #3
 800196c:	2201      	movs	r2, #1
 800196e:	4619      	mov	r1, r3
 8001970:	f7ff fe1e 	bl	80015b0 <SEGGER_RTT_ReadNoLock>
 8001974:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800197c:	78fb      	ldrb	r3, [r7, #3]
 800197e:	4618      	mov	r0, r3
 8001980:	f001 f828 	bl	80029d4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8001984:	e00e      	b.n	80019a4 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	b25b      	sxtb	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	da0c      	bge.n	80019a8 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <_HandleIncomingPacket+0xd8>)
 8001990:	7e1b      	ldrb	r3, [r3, #24]
 8001992:	4618      	mov	r0, r3
 8001994:	1cfb      	adds	r3, r7, #3
 8001996:	2201      	movs	r2, #1
 8001998:	4619      	mov	r1, r3
 800199a:	f7ff fe09 	bl	80015b0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800199e:	e003      	b.n	80019a8 <_HandleIncomingPacket+0xcc>
      break;
 80019a0:	bf00      	nop
 80019a2:	e002      	b.n	80019aa <_HandleIncomingPacket+0xce>
      break;
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <_HandleIncomingPacket+0xce>
      break;
 80019a8:	bf00      	nop
    }
  }
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000fd0 	.word	0x20000fd0

080019b8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08c      	sub	sp, #48	@ 0x30
 80019bc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80019be:	2301      	movs	r3, #1
 80019c0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	3301      	adds	r3, #1
 80019c6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80019cc:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <_TrySendOverflowPacket+0xdc>)
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019d2:	e00b      	b.n	80019ec <_TrySendOverflowPacket+0x34>
 80019d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019da:	1c59      	adds	r1, r3, #1
 80019dc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80019de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019e8:	09db      	lsrs	r3, r3, #7
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80019f0:	d8f0      	bhi.n	80019d4 <_TrySendOverflowPacket+0x1c>
 80019f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
 80019fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a00:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <_TrySendOverflowPacket+0xe0>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8001a08:	4b22      	ldr	r3, [pc, #136]	@ (8001a94 <_TrySendOverflowPacket+0xdc>)
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	623b      	str	r3, [r7, #32]
 8001a1a:	e00b      	b.n	8001a34 <_TrySendOverflowPacket+0x7c>
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a22:	1c59      	adds	r1, r3, #1
 8001a24:	6279      	str	r1, [r7, #36]	@ 0x24
 8001a26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	09db      	lsrs	r3, r3, #7
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	6a3b      	ldr	r3, [r7, #32]
 8001a36:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a38:	d8f0      	bhi.n	8001a1c <_TrySendOverflowPacket+0x64>
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a3c:	1c5a      	adds	r2, r3, #1
 8001a3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001a40:	6a3a      	ldr	r2, [r7, #32]
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	701a      	strb	r2, [r3, #0]
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8001a4a:	4b12      	ldr	r3, [pc, #72]	@ (8001a94 <_TrySendOverflowPacket+0xdc>)
 8001a4c:	785b      	ldrb	r3, [r3, #1]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	1d3b      	adds	r3, r7, #4
 8001a52:	69fa      	ldr	r2, [r7, #28]
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	461a      	mov	r2, r3
 8001a58:	1d3b      	adds	r3, r7, #4
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7fe fb78 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001a60:	4603      	mov	r3, r0
 8001a62:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <_TrySendOverflowPacket+0xdc>)
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <_TrySendOverflowPacket+0xdc>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	3b01      	subs	r3, #1
 8001a76:	b2da      	uxtb	r2, r3
 8001a78:	4b06      	ldr	r3, [pc, #24]	@ (8001a94 <_TrySendOverflowPacket+0xdc>)
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	e004      	b.n	8001a88 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8001a7e:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <_TrySendOverflowPacket+0xdc>)
 8001a80:	695b      	ldr	r3, [r3, #20]
 8001a82:	3301      	adds	r3, #1
 8001a84:	4a03      	ldr	r2, [pc, #12]	@ (8001a94 <_TrySendOverflowPacket+0xdc>)
 8001a86:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8001a88:	693b      	ldr	r3, [r7, #16]
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3730      	adds	r7, #48	@ 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000fd0 	.word	0x20000fd0
 8001a98:	e0001004 	.word	0xe0001004

08001a9c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08a      	sub	sp, #40	@ 0x28
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8001aa8:	4b98      	ldr	r3, [pc, #608]	@ (8001d0c <_SendPacket+0x270>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d010      	beq.n	8001ad2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8001ab0:	4b96      	ldr	r3, [pc, #600]	@ (8001d0c <_SendPacket+0x270>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 812d 	beq.w	8001d14 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8001aba:	4b94      	ldr	r3, [pc, #592]	@ (8001d0c <_SendPacket+0x270>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d109      	bne.n	8001ad6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8001ac2:	f7ff ff79 	bl	80019b8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8001ac6:	4b91      	ldr	r3, [pc, #580]	@ (8001d0c <_SendPacket+0x270>)
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	f040 8124 	bne.w	8001d18 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8001ad0:	e001      	b.n	8001ad6 <_SendPacket+0x3a>
    goto Send;
 8001ad2:	bf00      	nop
 8001ad4:	e000      	b.n	8001ad8 <_SendPacket+0x3c>
Send:
 8001ad6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b1f      	cmp	r3, #31
 8001adc:	d809      	bhi.n	8001af2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8001ade:	4b8b      	ldr	r3, [pc, #556]	@ (8001d0c <_SendPacket+0x270>)
 8001ae0:	69da      	ldr	r2, [r3, #28]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f040 8115 	bne.w	8001d1c <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b17      	cmp	r3, #23
 8001af6:	d807      	bhi.n	8001b08 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	701a      	strb	r2, [r3, #0]
 8001b06:	e0c4      	b.n	8001c92 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8001b08:	68ba      	ldr	r2, [r7, #8]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b14:	d912      	bls.n	8001b3c <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	09da      	lsrs	r2, r3, #7
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	3a01      	subs	r2, #1
 8001b2e:	60fa      	str	r2, [r7, #12]
 8001b30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	701a      	strb	r2, [r3, #0]
 8001b3a:	e006      	b.n	8001b4a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2b7e      	cmp	r3, #126	@ 0x7e
 8001b4e:	d807      	bhi.n	8001b60 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	60fb      	str	r3, [r7, #12]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	b2da      	uxtb	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	701a      	strb	r2, [r3, #0]
 8001b5e:	e098      	b.n	8001c92 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b66:	d212      	bcs.n	8001b8e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	09da      	lsrs	r2, r3, #7
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	3a01      	subs	r2, #1
 8001b80:	60fa      	str	r2, [r7, #12]
 8001b82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	701a      	strb	r2, [r3, #0]
 8001b8c:	e081      	b.n	8001c92 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001b94:	d21d      	bcs.n	8001bd2 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	0b9a      	lsrs	r2, r3, #14
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	60fb      	str	r3, [r7, #12]
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	09db      	lsrs	r3, r3, #7
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	3a01      	subs	r2, #1
 8001bb0:	60fa      	str	r2, [r7, #12]
 8001bb2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	3a01      	subs	r2, #1
 8001bc4:	60fa      	str	r2, [r7, #12]
 8001bc6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bca:	b2da      	uxtb	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	701a      	strb	r2, [r3, #0]
 8001bd0:	e05f      	b.n	8001c92 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001bd8:	d228      	bcs.n	8001c2c <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0d5a      	lsrs	r2, r3, #21
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3b01      	subs	r3, #1
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	0b9b      	lsrs	r3, r3, #14
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	3a01      	subs	r2, #1
 8001bf4:	60fa      	str	r2, [r7, #12]
 8001bf6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	09db      	lsrs	r3, r3, #7
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	3a01      	subs	r2, #1
 8001c0a:	60fa      	str	r2, [r7, #12]
 8001c0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	3a01      	subs	r2, #1
 8001c1e:	60fa      	str	r2, [r7, #12]
 8001c20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c24:	b2da      	uxtb	r2, r3
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	701a      	strb	r2, [r3, #0]
 8001c2a:	e032      	b.n	8001c92 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	0f1a      	lsrs	r2, r3, #28
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	3b01      	subs	r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	0d5b      	lsrs	r3, r3, #21
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	68fa      	ldr	r2, [r7, #12]
 8001c44:	3a01      	subs	r2, #1
 8001c46:	60fa      	str	r2, [r7, #12]
 8001c48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	0b9b      	lsrs	r3, r3, #14
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	60fa      	str	r2, [r7, #12]
 8001c5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	09db      	lsrs	r3, r3, #7
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	3a01      	subs	r2, #1
 8001c72:	60fa      	str	r2, [r7, #12]
 8001c74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	3a01      	subs	r2, #1
 8001c86:	60fa      	str	r2, [r7, #12]
 8001c88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001c92:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <_SendPacket+0x274>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8001c98:	4b1c      	ldr	r3, [pc, #112]	@ (8001d0c <_SendPacket+0x270>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	623b      	str	r3, [r7, #32]
 8001caa:	e00b      	b.n	8001cc4 <_SendPacket+0x228>
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	b2da      	uxtb	r2, r3
 8001cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb2:	1c59      	adds	r1, r3, #1
 8001cb4:	6279      	str	r1, [r7, #36]	@ 0x24
 8001cb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	09db      	lsrs	r3, r3, #7
 8001cc2:	623b      	str	r3, [r7, #32]
 8001cc4:	6a3b      	ldr	r3, [r7, #32]
 8001cc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cc8:	d8f0      	bhi.n	8001cac <_SendPacket+0x210>
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	627a      	str	r2, [r7, #36]	@ 0x24
 8001cd0:	6a3a      	ldr	r2, [r7, #32]
 8001cd2:	b2d2      	uxtb	r2, r2
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8001cda:	4b0c      	ldr	r3, [pc, #48]	@ (8001d0c <_SendPacket+0x270>)
 8001cdc:	785b      	ldrb	r3, [r3, #1]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	68f9      	ldr	r1, [r7, #12]
 8001cea:	f7fe fa31 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8001cee:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8001cf6:	4a05      	ldr	r2, [pc, #20]	@ (8001d0c <_SendPacket+0x270>)
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	60d3      	str	r3, [r2, #12]
 8001cfc:	e00f      	b.n	8001d1e <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8001cfe:	4b03      	ldr	r3, [pc, #12]	@ (8001d0c <_SendPacket+0x270>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	3301      	adds	r3, #1
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b01      	ldr	r3, [pc, #4]	@ (8001d0c <_SendPacket+0x270>)
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	e008      	b.n	8001d1e <_SendPacket+0x282>
 8001d0c:	20000fd0 	.word	0x20000fd0
 8001d10:	e0001004 	.word	0xe0001004
    goto SendDone;
 8001d14:	bf00      	nop
 8001d16:	e002      	b.n	8001d1e <_SendPacket+0x282>
      goto SendDone;
 8001d18:	bf00      	nop
 8001d1a:	e000      	b.n	8001d1e <_SendPacket+0x282>
      goto SendDone;
 8001d1c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8001d1e:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <_SendPacket+0x2d4>)
 8001d20:	7e1b      	ldrb	r3, [r3, #24]
 8001d22:	4619      	mov	r1, r3
 8001d24:	4a13      	ldr	r2, [pc, #76]	@ (8001d74 <_SendPacket+0x2d8>)
 8001d26:	460b      	mov	r3, r1
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	440b      	add	r3, r1
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	4413      	add	r3, r2
 8001d30:	336c      	adds	r3, #108	@ 0x6c
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <_SendPacket+0x2d4>)
 8001d36:	7e1b      	ldrb	r3, [r3, #24]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	490e      	ldr	r1, [pc, #56]	@ (8001d74 <_SendPacket+0x2d8>)
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4403      	add	r3, r0
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	440b      	add	r3, r1
 8001d46:	3370      	adds	r3, #112	@ 0x70
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d00b      	beq.n	8001d66 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8001d4e:	4b08      	ldr	r3, [pc, #32]	@ (8001d70 <_SendPacket+0x2d4>)
 8001d50:	789b      	ldrb	r3, [r3, #2]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d107      	bne.n	8001d66 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <_SendPacket+0x2d4>)
 8001d58:	2201      	movs	r2, #1
 8001d5a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8001d5c:	f7ff fdbe 	bl	80018dc <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8001d60:	4b03      	ldr	r3, [pc, #12]	@ (8001d70 <_SendPacket+0x2d4>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8001d66:	bf00      	nop
 8001d68:	3728      	adds	r7, #40	@ 0x28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000fd0 	.word	0x20000fd0
 8001d74:	20000310 	.word	0x20000310

08001d78 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af02      	add	r7, sp, #8
 8001d7e:	60f8      	str	r0, [r7, #12]
 8001d80:	60b9      	str	r1, [r7, #8]
 8001d82:	607a      	str	r2, [r7, #4]
 8001d84:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001d86:	2300      	movs	r3, #0
 8001d88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d8c:	4917      	ldr	r1, [pc, #92]	@ (8001dec <SEGGER_SYSVIEW_Init+0x74>)
 8001d8e:	4818      	ldr	r0, [pc, #96]	@ (8001df0 <SEGGER_SYSVIEW_Init+0x78>)
 8001d90:	f7ff fc94 	bl	80016bc <SEGGER_RTT_AllocUpBuffer>
 8001d94:	4603      	mov	r3, r0
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001d9a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8001d9c:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001d9e:	785a      	ldrb	r2, [r3, #1]
 8001da0:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001da2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8001da4:	4b13      	ldr	r3, [pc, #76]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001da6:	7e1b      	ldrb	r3, [r3, #24]
 8001da8:	4618      	mov	r0, r3
 8001daa:	2300      	movs	r3, #0
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2308      	movs	r3, #8
 8001db0:	4a11      	ldr	r2, [pc, #68]	@ (8001df8 <SEGGER_SYSVIEW_Init+0x80>)
 8001db2:	490f      	ldr	r1, [pc, #60]	@ (8001df0 <SEGGER_SYSVIEW_Init+0x78>)
 8001db4:	f7ff fd04 	bl	80017c0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8001db8:	4b0e      	ldr	r3, [pc, #56]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8001dbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001dfc <SEGGER_SYSVIEW_Init+0x84>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a0c      	ldr	r2, [pc, #48]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001dc4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8001dc6:	4a0b      	ldr	r2, [pc, #44]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8001dcc:	4a09      	ldr	r2, [pc, #36]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8001dd2:	4a08      	ldr	r2, [pc, #32]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8001dd8:	4a06      	ldr	r2, [pc, #24]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <SEGGER_SYSVIEW_Init+0x7c>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	200007c8 	.word	0x200007c8
 8001df0:	0800db30 	.word	0x0800db30
 8001df4:	20000fd0 	.word	0x20000fd0
 8001df8:	20000fc8 	.word	0x20000fc8
 8001dfc:	e0001004 	.word	0xe0001004

08001e00 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8001e00:	b480      	push	{r7}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8001e08:	4a03      	ldr	r2, [pc, #12]	@ (8001e18 <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6113      	str	r3, [r2, #16]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bc80      	pop	{r7}
 8001e16:	4770      	bx	lr
 8001e18:	20000fd0 	.word	0x20000fd0

08001e1c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8001e24:	f3ef 8311 	mrs	r3, BASEPRI
 8001e28:	f04f 0120 	mov.w	r1, #32
 8001e2c:	f381 8811 	msr	BASEPRI, r1
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4808      	ldr	r0, [pc, #32]	@ (8001e54 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8001e34:	f7ff fd46 	bl	80018c4 <_PreparePacket>
 8001e38:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68b9      	ldr	r1, [r7, #8]
 8001e3e:	68b8      	ldr	r0, [r7, #8]
 8001e40:	f7ff fe2c 	bl	8001a9c <_SendPacket>
  RECORD_END();
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f383 8811 	msr	BASEPRI, r3
}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20001000 	.word	0x20001000

08001e58 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8001e62:	f3ef 8311 	mrs	r3, BASEPRI
 8001e66:	f04f 0120 	mov.w	r1, #32
 8001e6a:	f381 8811 	msr	BASEPRI, r1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	4816      	ldr	r0, [pc, #88]	@ (8001ecc <SEGGER_SYSVIEW_RecordU32+0x74>)
 8001e72:	f7ff fd27 	bl	80018c4 <_PreparePacket>
 8001e76:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	61fb      	str	r3, [r7, #28]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	e00b      	b.n	8001e9e <SEGGER_SYSVIEW_RecordU32+0x46>
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	1c59      	adds	r1, r3, #1
 8001e8e:	61f9      	str	r1, [r7, #28]
 8001e90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	701a      	strb	r2, [r3, #0]
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	09db      	lsrs	r3, r3, #7
 8001e9c:	61bb      	str	r3, [r7, #24]
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ea2:	d8f0      	bhi.n	8001e86 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	1c5a      	adds	r2, r3, #1
 8001ea8:	61fa      	str	r2, [r7, #28]
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	701a      	strb	r2, [r3, #0]
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	68f9      	ldr	r1, [r7, #12]
 8001eb8:	6938      	ldr	r0, [r7, #16]
 8001eba:	f7ff fdef 	bl	8001a9c <_SendPacket>
  RECORD_END();
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f383 8811 	msr	BASEPRI, r3
}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	20001000 	.word	0x20001000

08001ed0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	@ 0x30
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8001edc:	f3ef 8311 	mrs	r3, BASEPRI
 8001ee0:	f04f 0120 	mov.w	r1, #32
 8001ee4:	f381 8811 	msr	BASEPRI, r1
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	4825      	ldr	r0, [pc, #148]	@ (8001f80 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8001eec:	f7ff fcea 	bl	80018c4 <_PreparePacket>
 8001ef0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001efe:	e00b      	b.n	8001f18 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8001f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f06:	1c59      	adds	r1, r3, #1
 8001f08:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001f0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f14:	09db      	lsrs	r3, r3, #7
 8001f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f1c:	d8f0      	bhi.n	8001f00 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8001f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f20:	1c5a      	adds	r2, r3, #1
 8001f22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001f24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	701a      	strb	r2, [r3, #0]
 8001f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f2c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	623b      	str	r3, [r7, #32]
 8001f36:	e00b      	b.n	8001f50 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8001f38:	6a3b      	ldr	r3, [r7, #32]
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3e:	1c59      	adds	r1, r3, #1
 8001f40:	6279      	str	r1, [r7, #36]	@ 0x24
 8001f42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001f46:	b2d2      	uxtb	r2, r2
 8001f48:	701a      	strb	r2, [r3, #0]
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	09db      	lsrs	r3, r3, #7
 8001f4e:	623b      	str	r3, [r7, #32]
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f54:	d8f0      	bhi.n	8001f38 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	1c5a      	adds	r2, r3, #1
 8001f5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8001f5c:	6a3a      	ldr	r2, [r7, #32]
 8001f5e:	b2d2      	uxtb	r2, r2
 8001f60:	701a      	strb	r2, [r3, #0]
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8001f66:	68fa      	ldr	r2, [r7, #12]
 8001f68:	6979      	ldr	r1, [r7, #20]
 8001f6a:	69b8      	ldr	r0, [r7, #24]
 8001f6c:	f7ff fd96 	bl	8001a9c <_SendPacket>
  RECORD_END();
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f383 8811 	msr	BASEPRI, r3
}
 8001f76:	bf00      	nop
 8001f78:	3730      	adds	r7, #48	@ 0x30
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20001000 	.word	0x20001000

08001f84 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08c      	sub	sp, #48	@ 0x30
 8001f88:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8001f8a:	4b58      	ldr	r3, [pc, #352]	@ (80020ec <SEGGER_SYSVIEW_Start+0x168>)
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8001f90:	f3ef 8311 	mrs	r3, BASEPRI
 8001f94:	f04f 0120 	mov.w	r1, #32
 8001f98:	f381 8811 	msr	BASEPRI, r1
 8001f9c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8001f9e:	4b53      	ldr	r3, [pc, #332]	@ (80020ec <SEGGER_SYSVIEW_Start+0x168>)
 8001fa0:	785b      	ldrb	r3, [r3, #1]
 8001fa2:	220a      	movs	r2, #10
 8001fa4:	4952      	ldr	r1, [pc, #328]	@ (80020f0 <SEGGER_SYSVIEW_Start+0x16c>)
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7fe f8d2 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8001fb2:	200a      	movs	r0, #10
 8001fb4:	f7ff ff32 	bl	8001e1c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8001fb8:	f3ef 8311 	mrs	r3, BASEPRI
 8001fbc:	f04f 0120 	mov.w	r1, #32
 8001fc0:	f381 8811 	msr	BASEPRI, r1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	484b      	ldr	r0, [pc, #300]	@ (80020f4 <SEGGER_SYSVIEW_Start+0x170>)
 8001fc8:	f7ff fc7c 	bl	80018c4 <_PreparePacket>
 8001fcc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fd6:	4b45      	ldr	r3, [pc, #276]	@ (80020ec <SEGGER_SYSVIEW_Start+0x168>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fdc:	e00b      	b.n	8001ff6 <SEGGER_SYSVIEW_Start+0x72>
 8001fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe4:	1c59      	adds	r1, r3, #1
 8001fe6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8001fe8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	701a      	strb	r2, [r3, #0]
 8001ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff2:	09db      	lsrs	r3, r3, #7
 8001ff4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff8:	2b7f      	cmp	r3, #127	@ 0x7f
 8001ffa:	d8f0      	bhi.n	8001fde <SEGGER_SYSVIEW_Start+0x5a>
 8001ffc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ffe:	1c5a      	adds	r2, r3, #1
 8002000:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002002:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	701a      	strb	r2, [r3, #0]
 8002008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002010:	4b36      	ldr	r3, [pc, #216]	@ (80020ec <SEGGER_SYSVIEW_Start+0x168>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	623b      	str	r3, [r7, #32]
 8002016:	e00b      	b.n	8002030 <SEGGER_SYSVIEW_Start+0xac>
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	b2da      	uxtb	r2, r3
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	1c59      	adds	r1, r3, #1
 8002020:	6279      	str	r1, [r7, #36]	@ 0x24
 8002022:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	701a      	strb	r2, [r3, #0]
 800202a:	6a3b      	ldr	r3, [r7, #32]
 800202c:	09db      	lsrs	r3, r3, #7
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	2b7f      	cmp	r3, #127	@ 0x7f
 8002034:	d8f0      	bhi.n	8002018 <SEGGER_SYSVIEW_Start+0x94>
 8002036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	627a      	str	r2, [r7, #36]	@ 0x24
 800203c:	6a3a      	ldr	r2, [r7, #32]
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	701a      	strb	r2, [r3, #0]
 8002042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002044:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	4b28      	ldr	r3, [pc, #160]	@ (80020ec <SEGGER_SYSVIEW_Start+0x168>)
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	61bb      	str	r3, [r7, #24]
 8002050:	e00b      	b.n	800206a <SEGGER_SYSVIEW_Start+0xe6>
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	1c59      	adds	r1, r3, #1
 800205a:	61f9      	str	r1, [r7, #28]
 800205c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002060:	b2d2      	uxtb	r2, r2
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	09db      	lsrs	r3, r3, #7
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b7f      	cmp	r3, #127	@ 0x7f
 800206e:	d8f0      	bhi.n	8002052 <SEGGER_SYSVIEW_Start+0xce>
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	61fa      	str	r2, [r7, #28]
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	617b      	str	r3, [r7, #20]
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e00b      	b.n	80020a2 <SEGGER_SYSVIEW_Start+0x11e>
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	b2da      	uxtb	r2, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	1c59      	adds	r1, r3, #1
 8002092:	6179      	str	r1, [r7, #20]
 8002094:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	701a      	strb	r2, [r3, #0]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	09db      	lsrs	r3, r3, #7
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80020a6:	d8f0      	bhi.n	800208a <SEGGER_SYSVIEW_Start+0x106>
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	617a      	str	r2, [r7, #20]
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	b2d2      	uxtb	r2, r2
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80020b8:	2218      	movs	r2, #24
 80020ba:	6839      	ldr	r1, [r7, #0]
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff fced 	bl	8001a9c <_SendPacket>
      RECORD_END();
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80020c8:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <SEGGER_SYSVIEW_Start+0x168>)
 80020ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80020d0:	4b06      	ldr	r3, [pc, #24]	@ (80020ec <SEGGER_SYSVIEW_Start+0x168>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80020d6:	f000 f9eb 	bl	80024b0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80020da:	f000 f9b1 	bl	8002440 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80020de:	f000 fd21 	bl	8002b24 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80020e2:	bf00      	nop
 80020e4:	3730      	adds	r7, #48	@ 0x30
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000fd0 	.word	0x20000fd0
 80020f0:	0800dbf0 	.word	0x0800dbf0
 80020f4:	20001000 	.word	0x20001000

080020f8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80020fe:	f3ef 8311 	mrs	r3, BASEPRI
 8002102:	f04f 0120 	mov.w	r1, #32
 8002106:	f381 8811 	msr	BASEPRI, r1
 800210a:	607b      	str	r3, [r7, #4]
 800210c:	480b      	ldr	r0, [pc, #44]	@ (800213c <SEGGER_SYSVIEW_Stop+0x44>)
 800210e:	f7ff fbd9 	bl	80018c4 <_PreparePacket>
 8002112:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002114:	4b0a      	ldr	r3, [pc, #40]	@ (8002140 <SEGGER_SYSVIEW_Stop+0x48>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d007      	beq.n	800212c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800211c:	220b      	movs	r2, #11
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	6838      	ldr	r0, [r7, #0]
 8002122:	f7ff fcbb 	bl	8001a9c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <SEGGER_SYSVIEW_Stop+0x48>)
 8002128:	2200      	movs	r2, #0
 800212a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f383 8811 	msr	BASEPRI, r3
}
 8002132:	bf00      	nop
 8002134:	3708      	adds	r7, #8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20001000 	.word	0x20001000
 8002140:	20000fd0 	.word	0x20000fd0

08002144 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	@ 0x30
 8002148:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800214a:	f3ef 8311 	mrs	r3, BASEPRI
 800214e:	f04f 0120 	mov.w	r1, #32
 8002152:	f381 8811 	msr	BASEPRI, r1
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	4845      	ldr	r0, [pc, #276]	@ (8002270 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800215a:	f7ff fbb3 	bl	80018c4 <_PreparePacket>
 800215e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002168:	4b42      	ldr	r3, [pc, #264]	@ (8002274 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800216e:	e00b      	b.n	8002188 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8002170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002172:	b2da      	uxtb	r2, r3
 8002174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002176:	1c59      	adds	r1, r3, #1
 8002178:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800217a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002184:	09db      	lsrs	r3, r3, #7
 8002186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800218a:	2b7f      	cmp	r3, #127	@ 0x7f
 800218c:	d8f0      	bhi.n	8002170 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800218e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002194:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]
 800219a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800219c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80021a2:	4b34      	ldr	r3, [pc, #208]	@ (8002274 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	623b      	str	r3, [r7, #32]
 80021a8:	e00b      	b.n	80021c2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	1c59      	adds	r1, r3, #1
 80021b2:	6279      	str	r1, [r7, #36]	@ 0x24
 80021b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	09db      	lsrs	r3, r3, #7
 80021c0:	623b      	str	r3, [r7, #32]
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80021c6:	d8f0      	bhi.n	80021aa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80021ce:	6a3a      	ldr	r2, [r7, #32]
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	701a      	strb	r2, [r3, #0]
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	e00b      	b.n	80021fc <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	1c59      	adds	r1, r3, #1
 80021ec:	61f9      	str	r1, [r7, #28]
 80021ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	09db      	lsrs	r3, r3, #7
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
 80021fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8002200:	d8f0      	bhi.n	80021e4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	1c5a      	adds	r2, r3, #1
 8002206:	61fa      	str	r2, [r7, #28]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	701a      	strb	r2, [r3, #0]
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	617b      	str	r3, [r7, #20]
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	e00b      	b.n	8002234 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	1c59      	adds	r1, r3, #1
 8002224:	6179      	str	r1, [r7, #20]
 8002226:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800222a:	b2d2      	uxtb	r2, r2
 800222c:	701a      	strb	r2, [r3, #0]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	09db      	lsrs	r3, r3, #7
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	2b7f      	cmp	r3, #127	@ 0x7f
 8002238:	d8f0      	bhi.n	800221c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	1c5a      	adds	r2, r3, #1
 800223e:	617a      	str	r2, [r7, #20]
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800224a:	2218      	movs	r2, #24
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	68b8      	ldr	r0, [r7, #8]
 8002250:	f7ff fc24 	bl	8001a9c <_SendPacket>
  RECORD_END();
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800225a:	4b06      	ldr	r3, [pc, #24]	@ (8002274 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800225c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8002262:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002264:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002266:	4798      	blx	r3
  }
}
 8002268:	bf00      	nop
 800226a:	3730      	adds	r7, #48	@ 0x30
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20001000 	.word	0x20001000
 8002274:	20000fd0 	.word	0x20000fd0

08002278 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b092      	sub	sp, #72	@ 0x48
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8002280:	f3ef 8311 	mrs	r3, BASEPRI
 8002284:	f04f 0120 	mov.w	r1, #32
 8002288:	f381 8811 	msr	BASEPRI, r1
 800228c:	617b      	str	r3, [r7, #20]
 800228e:	486a      	ldr	r0, [pc, #424]	@ (8002438 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8002290:	f7ff fb18 	bl	80018c4 <_PreparePacket>
 8002294:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	647b      	str	r3, [r7, #68]	@ 0x44
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4b66      	ldr	r3, [pc, #408]	@ (800243c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80022aa:	e00b      	b.n	80022c4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80022ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022b2:	1c59      	adds	r1, r3, #1
 80022b4:	6479      	str	r1, [r7, #68]	@ 0x44
 80022b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	701a      	strb	r2, [r3, #0]
 80022be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c0:	09db      	lsrs	r3, r3, #7
 80022c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80022c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80022c8:	d8f0      	bhi.n	80022ac <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80022ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022cc:	1c5a      	adds	r2, r3, #1
 80022ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80022d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	701a      	strb	r2, [r3, #0]
 80022d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80022d8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022e4:	e00b      	b.n	80022fe <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80022e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ec:	1c59      	adds	r1, r3, #1
 80022ee:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80022f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022fa:	09db      	lsrs	r3, r3, #7
 80022fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002300:	2b7f      	cmp	r3, #127	@ 0x7f
 8002302:	d8f0      	bhi.n	80022e6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8002304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800230a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]
 8002310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002312:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	4619      	mov	r1, r3
 800231c:	68f8      	ldr	r0, [r7, #12]
 800231e:	f7ff fa99 	bl	8001854 <_EncodeStr>
 8002322:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8002324:	2209      	movs	r2, #9
 8002326:	68f9      	ldr	r1, [r7, #12]
 8002328:	6938      	ldr	r0, [r7, #16]
 800232a:	f7ff fbb7 	bl	8001a9c <_SendPacket>
  //
  pPayload = pPayloadStart;
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b40      	ldr	r3, [pc, #256]	@ (800243c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	633b      	str	r3, [r7, #48]	@ 0x30
 8002342:	e00b      	b.n	800235c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8002344:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002346:	b2da      	uxtb	r2, r3
 8002348:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800234a:	1c59      	adds	r1, r3, #1
 800234c:	6379      	str	r1, [r7, #52]	@ 0x34
 800234e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002352:	b2d2      	uxtb	r2, r2
 8002354:	701a      	strb	r2, [r3, #0]
 8002356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002358:	09db      	lsrs	r3, r3, #7
 800235a:	633b      	str	r3, [r7, #48]	@ 0x30
 800235c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800235e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002360:	d8f0      	bhi.n	8002344 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8002362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	637a      	str	r2, [r7, #52]	@ 0x34
 8002368:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	701a      	strb	r2, [r3, #0]
 800236e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002370:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800237c:	e00b      	b.n	8002396 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800237e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002380:	b2da      	uxtb	r2, r3
 8002382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002384:	1c59      	adds	r1, r3, #1
 8002386:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8002388:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	701a      	strb	r2, [r3, #0]
 8002390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002392:	09db      	lsrs	r3, r3, #7
 8002394:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002398:	2b7f      	cmp	r3, #127	@ 0x7f
 800239a:	d8f0      	bhi.n	800237e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]
 80023a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023aa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	623b      	str	r3, [r7, #32]
 80023b6:	e00b      	b.n	80023d0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	1c59      	adds	r1, r3, #1
 80023c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80023c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	701a      	strb	r2, [r3, #0]
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	09db      	lsrs	r3, r3, #7
 80023ce:	623b      	str	r3, [r7, #32]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80023d4:	d8f0      	bhi.n	80023b8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	1c5a      	adds	r2, r3, #1
 80023da:	627a      	str	r2, [r7, #36]	@ 0x24
 80023dc:	6a3a      	ldr	r2, [r7, #32]
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	701a      	strb	r2, [r3, #0]
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	61fb      	str	r3, [r7, #28]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	61bb      	str	r3, [r7, #24]
 80023f0:	e00b      	b.n	800240a <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	1c59      	adds	r1, r3, #1
 80023fa:	61f9      	str	r1, [r7, #28]
 80023fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	09db      	lsrs	r3, r3, #7
 8002408:	61bb      	str	r3, [r7, #24]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2b7f      	cmp	r3, #127	@ 0x7f
 800240e:	d8f0      	bhi.n	80023f2 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	61fa      	str	r2, [r7, #28]
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8002420:	2215      	movs	r2, #21
 8002422:	68f9      	ldr	r1, [r7, #12]
 8002424:	6938      	ldr	r0, [r7, #16]
 8002426:	f7ff fb39 	bl	8001a9c <_SendPacket>
  RECORD_END();
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f383 8811 	msr	BASEPRI, r3
}
 8002430:	bf00      	nop
 8002432:	3748      	adds	r7, #72	@ 0x48
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	20001000 	.word	0x20001000
 800243c:	20000fd0 	.word	0x20000fd0

08002440 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002444:	4b07      	ldr	r3, [pc, #28]	@ (8002464 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800244c:	4b05      	ldr	r3, [pc, #20]	@ (8002464 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002456:	4b03      	ldr	r3, [pc, #12]	@ (8002464 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4798      	blx	r3
  }
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000fd0 	.word	0x20000fd0

08002468 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002470:	f3ef 8311 	mrs	r3, BASEPRI
 8002474:	f04f 0120 	mov.w	r1, #32
 8002478:	f381 8811 	msr	BASEPRI, r1
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	480b      	ldr	r0, [pc, #44]	@ (80024ac <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8002480:	f7ff fa20 	bl	80018c4 <_PreparePacket>
 8002484:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002486:	2280      	movs	r2, #128	@ 0x80
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	6938      	ldr	r0, [r7, #16]
 800248c:	f7ff f9e2 	bl	8001854 <_EncodeStr>
 8002490:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8002492:	220e      	movs	r2, #14
 8002494:	68f9      	ldr	r1, [r7, #12]
 8002496:	6938      	ldr	r0, [r7, #16]
 8002498:	f7ff fb00 	bl	8001a9c <_SendPacket>
  RECORD_END();
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f383 8811 	msr	BASEPRI, r3
}
 80024a2:	bf00      	nop
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20001000 	.word	0x20001000

080024b0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80024b6:	4b15      	ldr	r3, [pc, #84]	@ (800250c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80024b8:	6a1b      	ldr	r3, [r3, #32]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d01a      	beq.n	80024f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80024be:	4b13      	ldr	r3, [pc, #76]	@ (800250c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80024c0:	6a1b      	ldr	r3, [r3, #32]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d015      	beq.n	80024f4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80024c8:	4b10      	ldr	r3, [pc, #64]	@ (800250c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4798      	blx	r3
 80024d0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80024d4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80024d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	000a      	movs	r2, r1
 80024e4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80024e6:	4613      	mov	r3, r2
 80024e8:	461a      	mov	r2, r3
 80024ea:	4621      	mov	r1, r4
 80024ec:	200d      	movs	r0, #13
 80024ee:	f7ff fcef 	bl	8001ed0 <SEGGER_SYSVIEW_RecordU32x2>
 80024f2:	e006      	b.n	8002502 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4619      	mov	r1, r3
 80024fa:	200c      	movs	r0, #12
 80024fc:	f7ff fcac 	bl	8001e58 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bd90      	pop	{r4, r7, pc}
 800250a:	bf00      	nop
 800250c:	20000fd0 	.word	0x20000fd0
 8002510:	e0001004 	.word	0xe0001004

08002514 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800251a:	f3ef 8311 	mrs	r3, BASEPRI
 800251e:	f04f 0120 	mov.w	r1, #32
 8002522:	f381 8811 	msr	BASEPRI, r1
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	4819      	ldr	r0, [pc, #100]	@ (8002590 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800252a:	f7ff f9cb 	bl	80018c4 <_PreparePacket>
 800252e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8002534:	4b17      	ldr	r3, [pc, #92]	@ (8002594 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800253c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	e00b      	b.n	8002560 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	b2da      	uxtb	r2, r3
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	1c59      	adds	r1, r3, #1
 8002550:	6179      	str	r1, [r7, #20]
 8002552:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	09db      	lsrs	r3, r3, #7
 800255e:	613b      	str	r3, [r7, #16]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b7f      	cmp	r3, #127	@ 0x7f
 8002564:	d8f0      	bhi.n	8002548 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	617a      	str	r2, [r7, #20]
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8002576:	2202      	movs	r2, #2
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	68b8      	ldr	r0, [r7, #8]
 800257c:	f7ff fa8e 	bl	8001a9c <_SendPacket>
  RECORD_END();
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f383 8811 	msr	BASEPRI, r3
}
 8002586:	bf00      	nop
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20001000 	.word	0x20001000
 8002594:	e000ed04 	.word	0xe000ed04

08002598 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800259e:	f3ef 8311 	mrs	r3, BASEPRI
 80025a2:	f04f 0120 	mov.w	r1, #32
 80025a6:	f381 8811 	msr	BASEPRI, r1
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	4807      	ldr	r0, [pc, #28]	@ (80025cc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80025ae:	f7ff f989 	bl	80018c4 <_PreparePacket>
 80025b2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80025b4:	2203      	movs	r2, #3
 80025b6:	6839      	ldr	r1, [r7, #0]
 80025b8:	6838      	ldr	r0, [r7, #0]
 80025ba:	f7ff fa6f 	bl	8001a9c <_SendPacket>
  RECORD_END();
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f383 8811 	msr	BASEPRI, r3
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20001000 	.word	0x20001000

080025d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80025d6:	f3ef 8311 	mrs	r3, BASEPRI
 80025da:	f04f 0120 	mov.w	r1, #32
 80025de:	f381 8811 	msr	BASEPRI, r1
 80025e2:	607b      	str	r3, [r7, #4]
 80025e4:	4807      	ldr	r0, [pc, #28]	@ (8002604 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80025e6:	f7ff f96d 	bl	80018c4 <_PreparePacket>
 80025ea:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80025ec:	2212      	movs	r2, #18
 80025ee:	6839      	ldr	r1, [r7, #0]
 80025f0:	6838      	ldr	r0, [r7, #0]
 80025f2:	f7ff fa53 	bl	8001a9c <_SendPacket>
  RECORD_END();
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f383 8811 	msr	BASEPRI, r3
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	20001000 	.word	0x20001000

08002608 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002610:	f3ef 8311 	mrs	r3, BASEPRI
 8002614:	f04f 0120 	mov.w	r1, #32
 8002618:	f381 8811 	msr	BASEPRI, r1
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	4817      	ldr	r0, [pc, #92]	@ (800267c <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8002620:	f7ff f950 	bl	80018c4 <_PreparePacket>
 8002624:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	e00b      	b.n	800264c <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	b2da      	uxtb	r2, r3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	1c59      	adds	r1, r3, #1
 800263c:	61f9      	str	r1, [r7, #28]
 800263e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	701a      	strb	r2, [r3, #0]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	09db      	lsrs	r3, r3, #7
 800264a:	61bb      	str	r3, [r7, #24]
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002650:	d8f0      	bhi.n	8002634 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	1c5a      	adds	r2, r3, #1
 8002656:	61fa      	str	r2, [r7, #28]
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8002662:	221c      	movs	r2, #28
 8002664:	68f9      	ldr	r1, [r7, #12]
 8002666:	6938      	ldr	r0, [r7, #16]
 8002668:	f7ff fa18 	bl	8001a9c <_SendPacket>
  RECORD_END();
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	f383 8811 	msr	BASEPRI, r3
}
 8002672:	bf00      	nop
 8002674:	3720      	adds	r7, #32
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20001000 	.word	0x20001000

08002680 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	@ 0x28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800268a:	f3ef 8311 	mrs	r3, BASEPRI
 800268e:	f04f 0120 	mov.w	r1, #32
 8002692:	f381 8811 	msr	BASEPRI, r1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	4824      	ldr	r0, [pc, #144]	@ (800272c <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800269a:	f7ff f913 	bl	80018c4 <_PreparePacket>
 800269e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	623b      	str	r3, [r7, #32]
 80026ac:	e00b      	b.n	80026c6 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	1c59      	adds	r1, r3, #1
 80026b6:	6279      	str	r1, [r7, #36]	@ 0x24
 80026b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80026bc:	b2d2      	uxtb	r2, r2
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	09db      	lsrs	r3, r3, #7
 80026c4:	623b      	str	r3, [r7, #32]
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80026ca:	d8f0      	bhi.n	80026ae <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	1c5a      	adds	r2, r3, #1
 80026d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80026d2:	6a3a      	ldr	r2, [r7, #32]
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	61fb      	str	r3, [r7, #28]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	e00b      	b.n	80026fe <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	b2da      	uxtb	r2, r3
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	1c59      	adds	r1, r3, #1
 80026ee:	61f9      	str	r1, [r7, #28]
 80026f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	09db      	lsrs	r3, r3, #7
 80026fc:	61bb      	str	r3, [r7, #24]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	2b7f      	cmp	r3, #127	@ 0x7f
 8002702:	d8f0      	bhi.n	80026e6 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	61fa      	str	r2, [r7, #28]
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	b2d2      	uxtb	r2, r2
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8002714:	221c      	movs	r2, #28
 8002716:	68f9      	ldr	r1, [r7, #12]
 8002718:	6938      	ldr	r0, [r7, #16]
 800271a:	f7ff f9bf 	bl	8001a9c <_SendPacket>
  RECORD_END();
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	f383 8811 	msr	BASEPRI, r3
}
 8002724:	bf00      	nop
 8002726:	3728      	adds	r7, #40	@ 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20001000 	.word	0x20001000

08002730 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002736:	f3ef 8311 	mrs	r3, BASEPRI
 800273a:	f04f 0120 	mov.w	r1, #32
 800273e:	f381 8811 	msr	BASEPRI, r1
 8002742:	607b      	str	r3, [r7, #4]
 8002744:	4807      	ldr	r0, [pc, #28]	@ (8002764 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002746:	f7ff f8bd 	bl	80018c4 <_PreparePacket>
 800274a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800274c:	2211      	movs	r2, #17
 800274e:	6839      	ldr	r1, [r7, #0]
 8002750:	6838      	ldr	r0, [r7, #0]
 8002752:	f7ff f9a3 	bl	8001a9c <_SendPacket>
  RECORD_END();
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f383 8811 	msr	BASEPRI, r3
}
 800275c:	bf00      	nop
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	20001000 	.word	0x20001000

08002768 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002770:	f3ef 8311 	mrs	r3, BASEPRI
 8002774:	f04f 0120 	mov.w	r1, #32
 8002778:	f381 8811 	msr	BASEPRI, r1
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	4819      	ldr	r0, [pc, #100]	@ (80027e4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8002780:	f7ff f8a0 	bl	80018c4 <_PreparePacket>
 8002784:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800278a:	4b17      	ldr	r3, [pc, #92]	@ (80027e8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	61fb      	str	r3, [r7, #28]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	61bb      	str	r3, [r7, #24]
 800279c:	e00b      	b.n	80027b6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	1c59      	adds	r1, r3, #1
 80027a6:	61f9      	str	r1, [r7, #28]
 80027a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80027ac:	b2d2      	uxtb	r2, r2
 80027ae:	701a      	strb	r2, [r3, #0]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	09db      	lsrs	r3, r3, #7
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80027ba:	d8f0      	bhi.n	800279e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	61fa      	str	r2, [r7, #28]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	b2d2      	uxtb	r2, r2
 80027c6:	701a      	strb	r2, [r3, #0]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80027cc:	2208      	movs	r2, #8
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	6938      	ldr	r0, [r7, #16]
 80027d2:	f7ff f963 	bl	8001a9c <_SendPacket>
  RECORD_END();
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	f383 8811 	msr	BASEPRI, r3
}
 80027dc:	bf00      	nop
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20001000 	.word	0x20001000
 80027e8:	20000fd0 	.word	0x20000fd0

080027ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80027f4:	f3ef 8311 	mrs	r3, BASEPRI
 80027f8:	f04f 0120 	mov.w	r1, #32
 80027fc:	f381 8811 	msr	BASEPRI, r1
 8002800:	617b      	str	r3, [r7, #20]
 8002802:	4819      	ldr	r0, [pc, #100]	@ (8002868 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8002804:	f7ff f85e 	bl	80018c4 <_PreparePacket>
 8002808:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800280e:	4b17      	ldr	r3, [pc, #92]	@ (800286c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002810:	691b      	ldr	r3, [r3, #16]
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	61fb      	str	r3, [r7, #28]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	61bb      	str	r3, [r7, #24]
 8002820:	e00b      	b.n	800283a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8002822:	69bb      	ldr	r3, [r7, #24]
 8002824:	b2da      	uxtb	r2, r3
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	1c59      	adds	r1, r3, #1
 800282a:	61f9      	str	r1, [r7, #28]
 800282c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	09db      	lsrs	r3, r3, #7
 8002838:	61bb      	str	r3, [r7, #24]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	2b7f      	cmp	r3, #127	@ 0x7f
 800283e:	d8f0      	bhi.n	8002822 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	61fa      	str	r2, [r7, #28]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	b2d2      	uxtb	r2, r2
 800284a:	701a      	strb	r2, [r3, #0]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002850:	2204      	movs	r2, #4
 8002852:	68f9      	ldr	r1, [r7, #12]
 8002854:	6938      	ldr	r0, [r7, #16]
 8002856:	f7ff f921 	bl	8001a9c <_SendPacket>
  RECORD_END();
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	f383 8811 	msr	BASEPRI, r3
}
 8002860:	bf00      	nop
 8002862:	3720      	adds	r7, #32
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	20001000 	.word	0x20001000
 800286c:	20000fd0 	.word	0x20000fd0

08002870 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002878:	f3ef 8311 	mrs	r3, BASEPRI
 800287c:	f04f 0120 	mov.w	r1, #32
 8002880:	f381 8811 	msr	BASEPRI, r1
 8002884:	617b      	str	r3, [r7, #20]
 8002886:	4819      	ldr	r0, [pc, #100]	@ (80028ec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8002888:	f7ff f81c 	bl	80018c4 <_PreparePacket>
 800288c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002892:	4b17      	ldr	r3, [pc, #92]	@ (80028f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	61fb      	str	r3, [r7, #28]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	61bb      	str	r3, [r7, #24]
 80028a4:	e00b      	b.n	80028be <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	b2da      	uxtb	r2, r3
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	1c59      	adds	r1, r3, #1
 80028ae:	61f9      	str	r1, [r7, #28]
 80028b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	09db      	lsrs	r3, r3, #7
 80028bc:	61bb      	str	r3, [r7, #24]
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80028c2:	d8f0      	bhi.n	80028a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	1c5a      	adds	r2, r3, #1
 80028c8:	61fa      	str	r2, [r7, #28]
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80028d4:	2206      	movs	r2, #6
 80028d6:	68f9      	ldr	r1, [r7, #12]
 80028d8:	6938      	ldr	r0, [r7, #16]
 80028da:	f7ff f8df 	bl	8001a9c <_SendPacket>
  RECORD_END();
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f383 8811 	msr	BASEPRI, r3
}
 80028e4:	bf00      	nop
 80028e6:	3720      	adds	r7, #32
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	20001000 	.word	0x20001000
 80028f0:	20000fd0 	.word	0x20000fd0

080028f4 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	@ 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80028fe:	f3ef 8311 	mrs	r3, BASEPRI
 8002902:	f04f 0120 	mov.w	r1, #32
 8002906:	f381 8811 	msr	BASEPRI, r1
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	4827      	ldr	r0, [pc, #156]	@ (80029ac <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800290e:	f7fe ffd9 	bl	80018c4 <_PreparePacket>
 8002912:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002918:	4b25      	ldr	r3, [pc, #148]	@ (80029b0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	623b      	str	r3, [r7, #32]
 800292a:	e00b      	b.n	8002944 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800292c:	6a3b      	ldr	r3, [r7, #32]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	1c59      	adds	r1, r3, #1
 8002934:	6279      	str	r1, [r7, #36]	@ 0x24
 8002936:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	701a      	strb	r2, [r3, #0]
 800293e:	6a3b      	ldr	r3, [r7, #32]
 8002940:	09db      	lsrs	r3, r3, #7
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	6a3b      	ldr	r3, [r7, #32]
 8002946:	2b7f      	cmp	r3, #127	@ 0x7f
 8002948:	d8f0      	bhi.n	800292c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800294a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294c:	1c5a      	adds	r2, r3, #1
 800294e:	627a      	str	r2, [r7, #36]	@ 0x24
 8002950:	6a3a      	ldr	r2, [r7, #32]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	61fb      	str	r3, [r7, #28]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	e00b      	b.n	800297c <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	b2da      	uxtb	r2, r3
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	61f9      	str	r1, [r7, #28]
 800296e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	09db      	lsrs	r3, r3, #7
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002980:	d8f0      	bhi.n	8002964 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	61fa      	str	r2, [r7, #28]
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 8002992:	2207      	movs	r2, #7
 8002994:	68f9      	ldr	r1, [r7, #12]
 8002996:	6938      	ldr	r0, [r7, #16]
 8002998:	f7ff f880 	bl	8001a9c <_SendPacket>
  RECORD_END();
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f383 8811 	msr	BASEPRI, r3
}
 80029a2:	bf00      	nop
 80029a4:	3728      	adds	r7, #40	@ 0x28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20001000 	.word	0x20001000
 80029b0:	20000fd0 	.word	0x20000fd0

080029b4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	1ad3      	subs	r3, r2, r3
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bc80      	pop	{r7}
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	20000fd0 	.word	0x20000fd0

080029d4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08c      	sub	sp, #48	@ 0x30
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80029de:	4b40      	ldr	r3, [pc, #256]	@ (8002ae0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d077      	beq.n	8002ad6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80029e6:	4b3e      	ldr	r3, [pc, #248]	@ (8002ae0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80029ec:	2300      	movs	r3, #0
 80029ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029f0:	e008      	b.n	8002a04 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80029f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029f4:	691b      	ldr	r3, [r3, #16]
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80029f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80029fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a00:	3301      	adds	r3, #1
 8002a02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a04:	79fb      	ldrb	r3, [r7, #7]
 8002a06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d3f2      	bcc.n	80029f2 <SEGGER_SYSVIEW_SendModule+0x1e>
 8002a0c:	e000      	b.n	8002a10 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002a0e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d055      	beq.n	8002ac2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002a16:	f3ef 8311 	mrs	r3, BASEPRI
 8002a1a:	f04f 0120 	mov.w	r1, #32
 8002a1e:	f381 8811 	msr	BASEPRI, r1
 8002a22:	617b      	str	r3, [r7, #20]
 8002a24:	482f      	ldr	r0, [pc, #188]	@ (8002ae4 <SEGGER_SYSVIEW_SendModule+0x110>)
 8002a26:	f7fe ff4d 	bl	80018c4 <_PreparePacket>
 8002a2a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	623b      	str	r3, [r7, #32]
 8002a38:	e00b      	b.n	8002a52 <SEGGER_SYSVIEW_SendModule+0x7e>
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	1c59      	adds	r1, r3, #1
 8002a42:	6279      	str	r1, [r7, #36]	@ 0x24
 8002a44:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002a48:	b2d2      	uxtb	r2, r2
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	09db      	lsrs	r3, r3, #7
 8002a50:	623b      	str	r3, [r7, #32]
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a56:	d8f0      	bhi.n	8002a3a <SEGGER_SYSVIEW_SendModule+0x66>
 8002a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a5e:	6a3a      	ldr	r2, [r7, #32]
 8002a60:	b2d2      	uxtb	r2, r2
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	61fb      	str	r3, [r7, #28]
 8002a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
 8002a72:	e00b      	b.n	8002a8c <SEGGER_SYSVIEW_SendModule+0xb8>
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	1c59      	adds	r1, r3, #1
 8002a7c:	61f9      	str	r1, [r7, #28]
 8002a7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	09db      	lsrs	r3, r3, #7
 8002a8a:	61bb      	str	r3, [r7, #24]
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002a90:	d8f0      	bhi.n	8002a74 <SEGGER_SYSVIEW_SendModule+0xa0>
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	1c5a      	adds	r2, r3, #1
 8002a96:	61fa      	str	r2, [r7, #28]
 8002a98:	69ba      	ldr	r2, [r7, #24]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2280      	movs	r2, #128	@ 0x80
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	68f8      	ldr	r0, [r7, #12]
 8002aac:	f7fe fed2 	bl	8001854 <_EncodeStr>
 8002ab0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8002ab2:	2216      	movs	r2, #22
 8002ab4:	68f9      	ldr	r1, [r7, #12]
 8002ab6:	6938      	ldr	r0, [r7, #16]
 8002ab8:	f7fe fff0 	bl	8001a9c <_SendPacket>
      RECORD_END();
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8002ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d006      	beq.n	8002ad6 <SEGGER_SYSVIEW_SendModule+0x102>
 8002ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8002ad0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	4798      	blx	r3
    }
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	3730      	adds	r7, #48	@ 0x30
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000ff8 	.word	0x20000ff8
 8002ae4:	20001000 	.word	0x20001000

08002ae8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8002aee:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00f      	beq.n	8002b16 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8002af6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b20 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1f2      	bne.n	8002afc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	20000ff8 	.word	0x20000ff8

08002b24 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8002b2e:	f04f 0120 	mov.w	r1, #32
 8002b32:	f381 8811 	msr	BASEPRI, r1
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	4817      	ldr	r0, [pc, #92]	@ (8002b98 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002b3a:	f7fe fec3 	bl	80018c4 <_PreparePacket>
 8002b3e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	613b      	str	r3, [r7, #16]
 8002b4e:	e00b      	b.n	8002b68 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	1c59      	adds	r1, r3, #1
 8002b58:	6179      	str	r1, [r7, #20]
 8002b5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	09db      	lsrs	r3, r3, #7
 8002b66:	613b      	str	r3, [r7, #16]
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b6c:	d8f0      	bhi.n	8002b50 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	1c5a      	adds	r2, r3, #1
 8002b72:	617a      	str	r2, [r7, #20]
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002b7e:	221b      	movs	r2, #27
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68b8      	ldr	r0, [r7, #8]
 8002b84:	f7fe ff8a 	bl	8001a9c <_SendPacket>
  RECORD_END();
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f383 8811 	msr	BASEPRI, r3
}
 8002b8e:	bf00      	nop
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20001000 	.word	0x20001000
 8002b9c:	20000ffc 	.word	0x20000ffc

08002ba0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b08a      	sub	sp, #40	@ 0x28
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8002bac:	f04f 0120 	mov.w	r1, #32
 8002bb0:	f381 8811 	msr	BASEPRI, r1
 8002bb4:	617b      	str	r3, [r7, #20]
 8002bb6:	4827      	ldr	r0, [pc, #156]	@ (8002c54 <SEGGER_SYSVIEW_Warn+0xb4>)
 8002bb8:	f7fe fe84 	bl	80018c4 <_PreparePacket>
 8002bbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002bbe:	2280      	movs	r2, #128	@ 0x80
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	6938      	ldr	r0, [r7, #16]
 8002bc4:	f7fe fe46 	bl	8001854 <_EncodeStr>
 8002bc8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bce:	2301      	movs	r3, #1
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	e00b      	b.n	8002bec <SEGGER_SYSVIEW_Warn+0x4c>
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bda:	1c59      	adds	r1, r3, #1
 8002bdc:	6279      	str	r1, [r7, #36]	@ 0x24
 8002bde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	6a3b      	ldr	r3, [r7, #32]
 8002be8:	09db      	lsrs	r3, r3, #7
 8002bea:	623b      	str	r3, [r7, #32]
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8002bf0:	d8f0      	bhi.n	8002bd4 <SEGGER_SYSVIEW_Warn+0x34>
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	1c5a      	adds	r2, r3, #1
 8002bf6:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bf8:	6a3a      	ldr	r2, [r7, #32]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	61fb      	str	r3, [r7, #28]
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
 8002c0a:	e00b      	b.n	8002c24 <SEGGER_SYSVIEW_Warn+0x84>
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	1c59      	adds	r1, r3, #1
 8002c14:	61f9      	str	r1, [r7, #28]
 8002c16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	701a      	strb	r2, [r3, #0]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	09db      	lsrs	r3, r3, #7
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c28:	d8f0      	bhi.n	8002c0c <SEGGER_SYSVIEW_Warn+0x6c>
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	61fa      	str	r2, [r7, #28]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	701a      	strb	r2, [r3, #0]
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8002c3a:	221a      	movs	r2, #26
 8002c3c:	68f9      	ldr	r1, [r7, #12]
 8002c3e:	6938      	ldr	r0, [r7, #16]
 8002c40:	f7fe ff2c 	bl	8001a9c <_SendPacket>
  RECORD_END();
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f383 8811 	msr	BASEPRI, r3
}
 8002c4a:	bf00      	nop
 8002c4c:	3728      	adds	r7, #40	@ 0x28
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	20001000 	.word	0x20001000

08002c58 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f103 0208 	add.w	r2, r3, #8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f103 0208 	add.w	r2, r3, #8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f103 0208 	add.w	r2, r3, #8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002c8c:	f240 1019 	movw	r0, #281	@ 0x119
 8002c90:	f7ff fcba 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002c94:	bf00      	nop
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002caa:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002cae:	f7ff fcab 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
 8002cc2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 8002cf6:	f240 101b 	movw	r0, #283	@ 0x11b
 8002cfa:	f7ff fc85 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002cfe:	bf00      	nop
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d103      	bne.n	8002d26 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	e00c      	b.n	8002d40 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3308      	adds	r3, #8
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	e002      	b.n	8002d34 <vListInsert+0x2e>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d2f6      	bcs.n	8002d2e <vListInsert+0x28>
             * IF YOU FIND YOUR CODE STUCK HERE, SEE THE NOTE JUST ABOVE.
             */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002d6c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002d70:	f7ff fc4a 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6892      	ldr	r2, [r2, #8]
 8002d92:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6852      	ldr	r2, [r2, #4]
 8002d9c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d103      	bne.n	8002db0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	1e5a      	subs	r2, r3, #1
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f240 101d 	movw	r0, #285	@ 0x11d
 8002dca:	f7ff fc59 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002de6:	2301      	movs	r3, #1
 8002de8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10b      	bne.n	8002e0c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60fb      	str	r3, [r7, #12]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d05d      	beq.n	8002ece <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d059      	beq.n	8002ece <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e22:	2100      	movs	r1, #0
 8002e24:	fba3 2302 	umull	r2, r3, r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d000      	beq.n	8002e2e <xQueueGenericReset+0x52>
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d14c      	bne.n	8002ece <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002e34:	f002 f8ce 	bl	8004fd4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e40:	6939      	ldr	r1, [r7, #16]
 8002e42:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e44:	fb01 f303 	mul.w	r3, r1, r3
 8002e48:	441a      	add	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	2200      	movs	r2, #0
 8002e52:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e64:	3b01      	subs	r3, #1
 8002e66:	6939      	ldr	r1, [r7, #16]
 8002e68:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e6a:	fb01 f303 	mul.w	r3, r1, r3
 8002e6e:	441a      	add	r2, r3
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	22ff      	movs	r2, #255	@ 0xff
 8002e78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	22ff      	movs	r2, #255	@ 0xff
 8002e80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d114      	bne.n	8002eb4 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d01a      	beq.n	8002ec8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	3310      	adds	r3, #16
 8002e96:	4618      	mov	r0, r3
 8002e98:	f001 f97e 	bl	8004198 <xTaskRemoveFromEventList>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d012      	beq.n	8002ec8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002ea2:	4b18      	ldr	r3, [pc, #96]	@ (8002f04 <xQueueGenericReset+0x128>)
 8002ea4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ea8:	601a      	str	r2, [r3, #0]
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	e009      	b.n	8002ec8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	3310      	adds	r3, #16
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7ff fecd 	bl	8002c58 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	3324      	adds	r3, #36	@ 0x24
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7ff fec8 	bl	8002c58 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002ec8:	f002 f8b4 	bl	8005034 <vPortExitCritical>
 8002ecc:	e001      	b.n	8002ed2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10b      	bne.n	8002ef0 <xQueueGenericReset+0x114>
    __asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	60bb      	str	r3, [r7, #8]
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	e7fd      	b.n	8002eec <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	2096      	movs	r0, #150	@ 0x96
 8002ef6:	f7ff fbc3 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002efa:	697b      	ldr	r3, [r7, #20]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3718      	adds	r7, #24
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	e000ed04 	.word	0xe000ed04

08002f08 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	@ 0x28
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	4613      	mov	r3, r2
 8002f14:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d02e      	beq.n	8002f7e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002f20:	2100      	movs	r1, #0
 8002f22:	68ba      	ldr	r2, [r7, #8]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	fba3 2302 	umull	r2, r3, r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d000      	beq.n	8002f30 <xQueueGenericCreate+0x28>
 8002f2e:	2101      	movs	r1, #1
 8002f30:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d123      	bne.n	8002f7e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
            /* coverity[misra_c_2012_rule_14_3_violation] */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize ) ) )
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002f3e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002f42:	d81c      	bhi.n	8002f7e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68ba      	ldr	r2, [r7, #8]
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	3350      	adds	r3, #80	@ 0x50
 8002f52:	4618      	mov	r0, r3
 8002f54:	f002 f948 	bl	80051e8 <pvPortMalloc>
 8002f58:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d01d      	beq.n	8002f9c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3350      	adds	r3, #80	@ 0x50
 8002f68:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f6a:	79fa      	ldrb	r2, [r7, #7]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	68f8      	ldr	r0, [r7, #12]
 8002f78:	f000 f81e 	bl	8002fb8 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002f7c:	e00e      	b.n	8002f9c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10b      	bne.n	8002f9c <xQueueGenericCreate+0x94>
    __asm volatile
 8002f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f88:	f383 8811 	msr	BASEPRI, r3
 8002f8c:	f3bf 8f6f 	isb	sy
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	613b      	str	r3, [r7, #16]
}
 8002f96:	bf00      	nop
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff fd08 	bl	80029b4 <SEGGER_SYSVIEW_ShrinkId>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	2098      	movs	r0, #152	@ 0x98
 8002faa:	f7ff fb69 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8002fae:	69fb      	ldr	r3, [r7, #28]
    }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3720      	adds	r7, #32
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
 8002fc4:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d103      	bne.n	8002fd4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	601a      	str	r2, [r3, #0]
 8002fd2:	e002      	b.n	8002fda <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	68fa      	ldr	r2, [r7, #12]
 8002fde:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	69b8      	ldr	r0, [r7, #24]
 8002fea:	f7ff fef7 	bl	8002ddc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002fee:	69bb      	ldr	r3, [r7, #24]
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002ff6:	bf00      	nop
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}
	...

08003000 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08c      	sub	sp, #48	@ 0x30
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800300c:	2300      	movs	r3, #0
 800300e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <xQueueReceive+0x32>
    __asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	623b      	str	r3, [r7, #32]
}
 800302c:	bf00      	nop
 800302e:	bf00      	nop
 8003030:	e7fd      	b.n	800302e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d103      	bne.n	8003040 <xQueueReceive+0x40>
 8003038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <xQueueReceive+0x44>
 8003040:	2301      	movs	r3, #1
 8003042:	e000      	b.n	8003046 <xQueueReceive+0x46>
 8003044:	2300      	movs	r3, #0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10b      	bne.n	8003062 <xQueueReceive+0x62>
    __asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	61fb      	str	r3, [r7, #28]
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	e7fd      	b.n	800305e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003062:	f001 fb11 	bl	8004688 <xTaskGetSchedulerState>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d102      	bne.n	8003072 <xQueueReceive+0x72>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <xQueueReceive+0x76>
 8003072:	2301      	movs	r3, #1
 8003074:	e000      	b.n	8003078 <xQueueReceive+0x78>
 8003076:	2300      	movs	r3, #0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <xQueueReceive+0x94>
    __asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	61bb      	str	r3, [r7, #24]
}
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003094:	f001 ff9e 	bl	8004fd4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800309e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d023      	beq.n	80030ec <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030a4:	68b9      	ldr	r1, [r7, #8]
 80030a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030a8:	f000 f898 	bl	80031dc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	1e5a      	subs	r2, r3, #1
 80030b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00f      	beq.n	80030dc <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	3310      	adds	r3, #16
 80030c0:	4618      	mov	r0, r3
 80030c2:	f001 f869 	bl	8004198 <xTaskRemoveFromEventList>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80030cc:	4b42      	ldr	r3, [pc, #264]	@ (80031d8 <xQueueReceive+0x1d8>)
 80030ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80030dc:	f001 ffaa 	bl	8005034 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80030e0:	2101      	movs	r1, #1
 80030e2:	20a4      	movs	r0, #164	@ 0xa4
 80030e4:	f7ff facc 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e071      	b.n	80031d0 <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d107      	bne.n	8003102 <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80030f2:	f001 ff9f 	bl	8005034 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80030f6:	2100      	movs	r1, #0
 80030f8:	20a4      	movs	r0, #164	@ 0xa4
 80030fa:	f7ff fac1 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 80030fe:	2300      	movs	r3, #0
 8003100:	e066      	b.n	80031d0 <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003102:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d106      	bne.n	8003116 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003108:	f107 0310 	add.w	r3, r7, #16
 800310c:	4618      	mov	r0, r3
 800310e:	f001 f923 	bl	8004358 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003112:	2301      	movs	r3, #1
 8003114:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003116:	f001 ff8d 	bl	8005034 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800311a:	f000 fcd9 	bl	8003ad0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800311e:	f001 ff59 	bl	8004fd4 <vPortEnterCritical>
 8003122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003124:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003128:	b25b      	sxtb	r3, r3
 800312a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312e:	d103      	bne.n	8003138 <xQueueReceive+0x138>
 8003130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800313a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800313e:	b25b      	sxtb	r3, r3
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003144:	d103      	bne.n	800314e <xQueueReceive+0x14e>
 8003146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800314e:	f001 ff71 	bl	8005034 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003152:	1d3a      	adds	r2, r7, #4
 8003154:	f107 0310 	add.w	r3, r7, #16
 8003158:	4611      	mov	r1, r2
 800315a:	4618      	mov	r0, r3
 800315c:	f001 f914 	bl	8004388 <xTaskCheckForTimeOut>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d123      	bne.n	80031ae <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003168:	f000 f8b0 	bl	80032cc <prvIsQueueEmpty>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d017      	beq.n	80031a2 <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003174:	3324      	adds	r3, #36	@ 0x24
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	4611      	mov	r1, r2
 800317a:	4618      	mov	r0, r3
 800317c:	f000 ff9a 	bl	80040b4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003180:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003182:	f000 f851 	bl	8003228 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003186:	f000 fcb1 	bl	8003aec <xTaskResumeAll>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d181      	bne.n	8003094 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 8003190:	4b11      	ldr	r3, [pc, #68]	@ (80031d8 <xQueueReceive+0x1d8>)
 8003192:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	f3bf 8f4f 	dsb	sy
 800319c:	f3bf 8f6f 	isb	sy
 80031a0:	e778      	b.n	8003094 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80031a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031a4:	f000 f840 	bl	8003228 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80031a8:	f000 fca0 	bl	8003aec <xTaskResumeAll>
 80031ac:	e772      	b.n	8003094 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80031ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031b0:	f000 f83a 	bl	8003228 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80031b4:	f000 fc9a 	bl	8003aec <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031b8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80031ba:	f000 f887 	bl	80032cc <prvIsQueueEmpty>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f43f af67 	beq.w	8003094 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80031c6:	2100      	movs	r1, #0
 80031c8:	20a4      	movs	r0, #164	@ 0xa4
 80031ca:	f7ff fa59 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80031ce:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3730      	adds	r7, #48	@ 0x30
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	e000ed04 	.word	0xe000ed04

080031dc <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d018      	beq.n	8003220 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f6:	441a      	add	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68da      	ldr	r2, [r3, #12]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	429a      	cmp	r2, r3
 8003206:	d303      	bcc.n	8003210 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68d9      	ldr	r1, [r3, #12]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	461a      	mov	r2, r3
 800321a:	6838      	ldr	r0, [r7, #0]
 800321c:	f008 f9bb 	bl	800b596 <memcpy>
    }
}
 8003220:	bf00      	nop
 8003222:	3708      	adds	r7, #8
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003230:	f001 fed0 	bl	8004fd4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800323a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800323c:	e011      	b.n	8003262 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003242:	2b00      	cmp	r3, #0
 8003244:	d012      	beq.n	800326c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3324      	adds	r3, #36	@ 0x24
 800324a:	4618      	mov	r0, r3
 800324c:	f000 ffa4 	bl	8004198 <xTaskRemoveFromEventList>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003256:	f001 f913 	bl	8004480 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	3b01      	subs	r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	dce9      	bgt.n	800323e <prvUnlockQueue+0x16>
 800326a:	e000      	b.n	800326e <prvUnlockQueue+0x46>
                    break;
 800326c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	22ff      	movs	r2, #255	@ 0xff
 8003272:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003276:	f001 fedd 	bl	8005034 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800327a:	f001 feab 	bl	8004fd4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003284:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003286:	e011      	b.n	80032ac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	691b      	ldr	r3, [r3, #16]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3310      	adds	r3, #16
 8003294:	4618      	mov	r0, r3
 8003296:	f000 ff7f 	bl	8004198 <xTaskRemoveFromEventList>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80032a0:	f001 f8ee 	bl	8004480 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80032a4:	7bbb      	ldrb	r3, [r7, #14]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80032ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	dce9      	bgt.n	8003288 <prvUnlockQueue+0x60>
 80032b4:	e000      	b.n	80032b8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80032b6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	22ff      	movs	r2, #255	@ 0xff
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80032c0:	f001 feb8 	bl	8005034 <vPortExitCritical>
}
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80032d4:	f001 fe7e 	bl	8004fd4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80032e0:	2301      	movs	r3, #1
 80032e2:	60fb      	str	r3, [r7, #12]
 80032e4:	e001      	b.n	80032ea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80032ea:	f001 fea3 	bl	8005034 <vPortExitCritical>

    return xReturn;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003302:	2300      	movs	r3, #0
 8003304:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <vQueueAddToRegistry+0x2c>
    __asm volatile
 800330c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	60fb      	str	r3, [r7, #12]
}
 800331e:	bf00      	nop
 8003320:	bf00      	nop
 8003322:	e7fd      	b.n	8003320 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d024      	beq.n	8003374 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	e01e      	b.n	800336e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003330:	4a18      	ldr	r2, [pc, #96]	@ (8003394 <vQueueAddToRegistry+0x9c>)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	4413      	add	r3, r2
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	429a      	cmp	r2, r3
 800333e:	d105      	bne.n	800334c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4a13      	ldr	r2, [pc, #76]	@ (8003394 <vQueueAddToRegistry+0x9c>)
 8003346:	4413      	add	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
                    break;
 800334a:	e013      	b.n	8003374 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d10a      	bne.n	8003368 <vQueueAddToRegistry+0x70>
 8003352:	4a10      	ldr	r2, [pc, #64]	@ (8003394 <vQueueAddToRegistry+0x9c>)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4a0c      	ldr	r2, [pc, #48]	@ (8003394 <vQueueAddToRegistry+0x9c>)
 8003364:	4413      	add	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3301      	adds	r3, #1
 800336c:	617b      	str	r3, [r7, #20]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	2b07      	cmp	r3, #7
 8003372:	d9dd      	bls.n	8003330 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8003386:	20b6      	movs	r0, #182	@ 0xb6
 8003388:	f7ff f93e 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800338c:	bf00      	nop
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200010e4 	.word	0x200010e4

08003398 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80033a8:	f001 fe14 	bl	8004fd4 <vPortEnterCritical>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033b2:	b25b      	sxtb	r3, r3
 80033b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b8:	d103      	bne.n	80033c2 <vQueueWaitForMessageRestricted+0x2a>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80033c8:	b25b      	sxtb	r3, r3
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d103      	bne.n	80033d8 <vQueueWaitForMessageRestricted+0x40>
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80033d8:	f001 fe2c 	bl	8005034 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d106      	bne.n	80033f2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	3324      	adds	r3, #36	@ 0x24
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fe89 	bl	8004104 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80033f2:	6978      	ldr	r0, [r7, #20]
 80033f4:	f7ff ff18 	bl	8003228 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 80033f8:	20b9      	movs	r0, #185	@ 0xb9
 80033fa:	f7ff f905 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80033fe:	bf00      	nop
 8003400:	3718      	adds	r7, #24
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8003406:	b580      	push	{r7, lr}
 8003408:	b08a      	sub	sp, #40	@ 0x28
 800340a:	af04      	add	r7, sp, #16
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	607a      	str	r2, [r7, #4]
 8003412:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4618      	mov	r0, r3
 800341a:	f001 fee5 	bl	80051e8 <pvPortMalloc>
 800341e:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d013      	beq.n	800344e <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8003426:	2068      	movs	r0, #104	@ 0x68
 8003428:	f001 fede 	bl	80051e8 <pvPortMalloc>
 800342c:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d008      	beq.n	8003446 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003434:	2268      	movs	r2, #104	@ 0x68
 8003436:	2100      	movs	r1, #0
 8003438:	6978      	ldr	r0, [r7, #20]
 800343a:	f008 f81e 	bl	800b47a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
 8003444:	e005      	b.n	8003452 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003446:	6938      	ldr	r0, [r7, #16]
 8003448:	f002 f806 	bl	8005458 <vPortFree>
 800344c:	e001      	b.n	8003452 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003458:	2300      	movs	r3, #0
 800345a:	9303      	str	r3, [sp, #12]
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	9302      	str	r3, [sp, #8]
 8003460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003462:	9301      	str	r3, [sp, #4]
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f82d 	bl	80034ce <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003474:	697b      	ldr	r3, [r7, #20]
    }
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800347e:	b580      	push	{r7, lr}
 8003480:	b088      	sub	sp, #32
 8003482:	af02      	add	r7, sp, #8
 8003484:	60f8      	str	r0, [r7, #12]
 8003486:	60b9      	str	r1, [r7, #8]
 8003488:	607a      	str	r2, [r7, #4]
 800348a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800348c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348e:	9301      	str	r3, [sp, #4]
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	9300      	str	r3, [sp, #0]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	68b9      	ldr	r1, [r7, #8]
 800349a:	68f8      	ldr	r0, [r7, #12]
 800349c:	f7ff ffb3 	bl	8003406 <prvCreateTask>
 80034a0:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80034a8:	6938      	ldr	r0, [r7, #16]
 80034aa:	f000 f8a1 	bl	80035f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80034ae:	2301      	movs	r3, #1
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e002      	b.n	80034ba <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034b4:	f04f 33ff 	mov.w	r3, #4294967295
 80034b8:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	4619      	mov	r1, r3
 80034be:	20c2      	movs	r0, #194	@ 0xc2
 80034c0:	f7ff f8de 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80034c4:	697b      	ldr	r3, [r7, #20]
    }
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	461a      	mov	r2, r3
 80034e6:	21a5      	movs	r1, #165	@ 0xa5
 80034e8:	f007 ffc7 	bl	800b47a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034f6:	3b01      	subs	r3, #1
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f023 0307 	bic.w	r3, r3, #7
 8003504:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	617b      	str	r3, [r7, #20]
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01e      	beq.n	800356c <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e012      	b.n	800355a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	7819      	ldrb	r1, [r3, #0]
 800353c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	3334      	adds	r3, #52	@ 0x34
 8003544:	460a      	mov	r2, r1
 8003546:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d006      	beq.n	8003562 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	2b13      	cmp	r3, #19
 800355e:	d9e9      	bls.n	8003534 <prvInitialiseNewTask+0x66>
 8003560:	e000      	b.n	8003564 <prvInitialiseNewTask+0x96>
            {
                break;
 8003562:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800356c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356e:	2b04      	cmp	r3, #4
 8003570:	d90b      	bls.n	800358a <prvInitialiseNewTask+0xbc>
    __asm volatile
 8003572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003576:	f383 8811 	msr	BASEPRI, r3
 800357a:	f3bf 8f6f 	isb	sy
 800357e:	f3bf 8f4f 	dsb	sy
 8003582:	613b      	str	r3, [r7, #16]
}
 8003584:	bf00      	nop
 8003586:	bf00      	nop
 8003588:	e7fd      	b.n	8003586 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	2b04      	cmp	r3, #4
 800358e:	d901      	bls.n	8003594 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003590:	2304      	movs	r3, #4
 8003592:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003596:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003598:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800359a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800359e:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a2:	3304      	adds	r3, #4
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff fb79 	bl	8002c9c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ac:	3318      	adds	r3, #24
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fb74 	bl	8002c9c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035b8:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80035ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035bc:	f1c3 0205 	rsb	r2, r3, #5
 80035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c2:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035c8:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	68f9      	ldr	r1, [r7, #12]
 80035ce:	69b8      	ldr	r0, [r7, #24]
 80035d0:	f001 fbc4 	bl	8004d5c <pxPortInitialiseStack>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80035da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80035e6:	bf00      	nop
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80035f0:	b5b0      	push	{r4, r5, r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af02      	add	r7, sp, #8
 80035f6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80035f8:	f001 fcec 	bl	8004fd4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80035fc:	4b50      	ldr	r3, [pc, #320]	@ (8003740 <prvAddNewTaskToReadyList+0x150>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	4a4f      	ldr	r2, [pc, #316]	@ (8003740 <prvAddNewTaskToReadyList+0x150>)
 8003604:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8003606:	4b4f      	ldr	r3, [pc, #316]	@ (8003744 <prvAddNewTaskToReadyList+0x154>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800360e:	4a4d      	ldr	r2, [pc, #308]	@ (8003744 <prvAddNewTaskToReadyList+0x154>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003614:	4b4a      	ldr	r3, [pc, #296]	@ (8003740 <prvAddNewTaskToReadyList+0x150>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d110      	bne.n	800363e <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 800361c:	f000 ff54 	bl	80044c8 <prvInitialiseTaskLists>
 8003620:	e00d      	b.n	800363e <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8003622:	4b49      	ldr	r3, [pc, #292]	@ (8003748 <prvAddNewTaskToReadyList+0x158>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800362a:	4b46      	ldr	r3, [pc, #280]	@ (8003744 <prvAddNewTaskToReadyList+0x154>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003634:	429a      	cmp	r2, r3
 8003636:	d802      	bhi.n	800363e <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8003638:	4a42      	ldr	r2, [pc, #264]	@ (8003744 <prvAddNewTaskToReadyList+0x154>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800363e:	4b43      	ldr	r3, [pc, #268]	@ (800374c <prvAddNewTaskToReadyList+0x15c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a41      	ldr	r2, [pc, #260]	@ (800374c <prvAddNewTaskToReadyList+0x15c>)
 8003646:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003648:	4b40      	ldr	r3, [pc, #256]	@ (800374c <prvAddNewTaskToReadyList+0x15c>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	649a      	str	r2, [r3, #72]	@ 0x48
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d016      	beq.n	8003684 <prvAddNewTaskToReadyList+0x94>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff f885 	bl	8002768 <SEGGER_SYSVIEW_OnTaskCreate>
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366e:	461d      	mov	r5, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	461c      	mov	r4, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	1ae3      	subs	r3, r4, r3
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	462b      	mov	r3, r5
 8003680:	f7fd fdf8 	bl	8001274 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff f8f2 	bl	8002870 <SEGGER_SYSVIEW_OnTaskStartReady>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003690:	2201      	movs	r2, #1
 8003692:	409a      	lsls	r2, r3
 8003694:	4b2e      	ldr	r3, [pc, #184]	@ (8003750 <prvAddNewTaskToReadyList+0x160>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	4a2d      	ldr	r2, [pc, #180]	@ (8003750 <prvAddNewTaskToReadyList+0x160>)
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a2:	492c      	ldr	r1, [pc, #176]	@ (8003754 <prvAddNewTaskToReadyList+0x164>)
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3304      	adds	r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	3204      	adds	r2, #4
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	1d1a      	adds	r2, r3, #4
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4a1c      	ldr	r2, [pc, #112]	@ (8003754 <prvAddNewTaskToReadyList+0x164>)
 80036e2:	441a      	add	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	615a      	str	r2, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ec:	4919      	ldr	r1, [pc, #100]	@ (8003754 <prvAddNewTaskToReadyList+0x164>)
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80036fe:	1c59      	adds	r1, r3, #1
 8003700:	4814      	ldr	r0, [pc, #80]	@ (8003754 <prvAddNewTaskToReadyList+0x164>)
 8003702:	4613      	mov	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4403      	add	r3, r0
 800370c:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800370e:	f001 fc91 	bl	8005034 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003712:	4b0d      	ldr	r3, [pc, #52]	@ (8003748 <prvAddNewTaskToReadyList+0x158>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00e      	beq.n	8003738 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800371a:	4b0a      	ldr	r3, [pc, #40]	@ (8003744 <prvAddNewTaskToReadyList+0x154>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	429a      	cmp	r2, r3
 8003726:	d207      	bcs.n	8003738 <prvAddNewTaskToReadyList+0x148>
 8003728:	4b0b      	ldr	r3, [pc, #44]	@ (8003758 <prvAddNewTaskToReadyList+0x168>)
 800372a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800372e:	601a      	str	r2, [r3, #0]
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003738:	bf00      	nop
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bdb0      	pop	{r4, r5, r7, pc}
 8003740:	200011fc 	.word	0x200011fc
 8003744:	20001124 	.word	0x20001124
 8003748:	20001208 	.word	0x20001208
 800374c:	20001218 	.word	0x20001218
 8003750:	20001204 	.word	0x20001204
 8003754:	20001128 	.word	0x20001128
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 800375c:	b580      	push	{r7, lr}
 800375e:	b088      	sub	sp, #32
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8003768:	f001 fc34 	bl	8004fd4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d102      	bne.n	8003778 <vTaskDelete+0x1c>
 8003772:	4b57      	ldr	r3, [pc, #348]	@ (80038d0 <vTaskDelete+0x174>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	e000      	b.n	800377a <vTaskDelete+0x1e>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	61bb      	str	r3, [r7, #24]
            configASSERT( pxTCB != NULL );
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10b      	bne.n	800379a <vTaskDelete+0x3e>
    __asm volatile
 8003782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003786:	f383 8811 	msr	BASEPRI, r3
 800378a:	f3bf 8f6f 	isb	sy
 800378e:	f3bf 8f4f 	dsb	sy
 8003792:	613b      	str	r3, [r7, #16]
}
 8003794:	bf00      	nop
 8003796:	bf00      	nop
 8003798:	e7fd      	b.n	8003796 <vTaskDelete+0x3a>

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	3304      	adds	r3, #4
 800379e:	4618      	mov	r0, r3
 80037a0:	f7ff faec 	bl	8002d7c <uxListRemove>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d115      	bne.n	80037d6 <vTaskDelete+0x7a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ae:	4949      	ldr	r1, [pc, #292]	@ (80038d4 <vTaskDelete+0x178>)
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	440b      	add	r3, r1
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <vTaskDelete+0x7a>
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c4:	2201      	movs	r2, #1
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43da      	mvns	r2, r3
 80037cc:	4b42      	ldr	r3, [pc, #264]	@ (80038d8 <vTaskDelete+0x17c>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4013      	ands	r3, r2
 80037d2:	4a41      	ldr	r2, [pc, #260]	@ (80038d8 <vTaskDelete+0x17c>)
 80037d4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d004      	beq.n	80037e8 <vTaskDelete+0x8c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	3318      	adds	r3, #24
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7ff faca 	bl	8002d7c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80037e8:	4b3c      	ldr	r3, [pc, #240]	@ (80038dc <vTaskDelete+0x180>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	4a3b      	ldr	r2, [pc, #236]	@ (80038dc <vTaskDelete+0x180>)
 80037f0:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 80037f2:	4b37      	ldr	r3, [pc, #220]	@ (80038d0 <vTaskDelete+0x174>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d101      	bne.n	8003800 <vTaskDelete+0xa4>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <vTaskDelete+0xa6>
 8003800:	2300      	movs	r3, #0
 8003802:	617b      	str	r3, [r7, #20]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 8003804:	4b36      	ldr	r3, [pc, #216]	@ (80038e0 <vTaskDelete+0x184>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d01d      	beq.n	8003848 <vTaskDelete+0xec>
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01a      	beq.n	8003848 <vTaskDelete+0xec>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	3304      	adds	r3, #4
 8003816:	4619      	mov	r1, r3
 8003818:	4832      	ldr	r0, [pc, #200]	@ (80038e4 <vTaskDelete+0x188>)
 800381a:	f7ff fa4e 	bl	8002cba <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800381e:	4b32      	ldr	r3, [pc, #200]	@ (80038e8 <vTaskDelete+0x18c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	3301      	adds	r3, #1
 8003824:	4a30      	ldr	r2, [pc, #192]	@ (80038e8 <vTaskDelete+0x18c>)
 8003826:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	4618      	mov	r0, r3
 800382c:	f7ff f8c2 	bl	80029b4 <SEGGER_SYSVIEW_ShrinkId>
 8003830:	4603      	mov	r3, r0
 8003832:	4619      	mov	r1, r3
 8003834:	20c3      	movs	r0, #195	@ 0xc3
 8003836:	f7fe fb0f 	bl	8001e58 <SEGGER_SYSVIEW_RecordU32>
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	4618      	mov	r0, r3
 800383e:	f7fd fd81 	bl	8001344 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 8003842:	2301      	movs	r3, #1
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e013      	b.n	8003870 <vTaskDelete+0x114>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003848:	4b28      	ldr	r3, [pc, #160]	@ (80038ec <vTaskDelete+0x190>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3b01      	subs	r3, #1
 800384e:	4a27      	ldr	r2, [pc, #156]	@ (80038ec <vTaskDelete+0x190>)
 8003850:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff f8ad 	bl	80029b4 <SEGGER_SYSVIEW_ShrinkId>
 800385a:	4603      	mov	r3, r0
 800385c:	4619      	mov	r1, r3
 800385e:	20c3      	movs	r0, #195	@ 0xc3
 8003860:	f7fe fafa 	bl	8001e58 <SEGGER_SYSVIEW_RecordU32>
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fd fd6c 	bl	8001344 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800386c:	f000 fef2 	bl	8004654 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8003870:	f001 fbe0 	bl	8005034 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d002      	beq.n	8003880 <vTaskDelete+0x124>
        {
            prvDeleteTCB( pxTCB );
 800387a:	69b8      	ldr	r0, [r7, #24]
 800387c:	f000 feda 	bl	8004634 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 8003880:	4b17      	ldr	r3, [pc, #92]	@ (80038e0 <vTaskDelete+0x184>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01c      	beq.n	80038c2 <vTaskDelete+0x166>
            {
                if( pxTCB == pxCurrentTCB )
 8003888:	4b11      	ldr	r3, [pc, #68]	@ (80038d0 <vTaskDelete+0x174>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	429a      	cmp	r2, r3
 8003890:	d117      	bne.n	80038c2 <vTaskDelete+0x166>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 8003892:	4b17      	ldr	r3, [pc, #92]	@ (80038f0 <vTaskDelete+0x194>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00b      	beq.n	80038b2 <vTaskDelete+0x156>
    __asm volatile
 800389a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389e:	f383 8811 	msr	BASEPRI, r3
 80038a2:	f3bf 8f6f 	isb	sy
 80038a6:	f3bf 8f4f 	dsb	sy
 80038aa:	60fb      	str	r3, [r7, #12]
}
 80038ac:	bf00      	nop
 80038ae:	bf00      	nop
 80038b0:	e7fd      	b.n	80038ae <vTaskDelete+0x152>
                    taskYIELD_WITHIN_API();
 80038b2:	4b10      	ldr	r3, [pc, #64]	@ (80038f4 <vTaskDelete+0x198>)
 80038b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	f3bf 8f4f 	dsb	sy
 80038be:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 80038c2:	20c3      	movs	r0, #195	@ 0xc3
 80038c4:	f7fe fea0 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80038c8:	bf00      	nop
 80038ca:	3720      	adds	r7, #32
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	20001124 	.word	0x20001124
 80038d4:	20001128 	.word	0x20001128
 80038d8:	20001204 	.word	0x20001204
 80038dc:	20001218 	.word	0x20001218
 80038e0:	20001208 	.word	0x20001208
 80038e4:	200011d0 	.word	0x200011d0
 80038e8:	200011e4 	.word	0x200011e4
 80038ec:	200011fc 	.word	0x200011fc
 80038f0:	20001224 	.word	0x20001224
 80038f4:	e000ed04 	.word	0xe000ed04

080038f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003900:	2300      	movs	r3, #0
 8003902:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d018      	beq.n	800393c <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800390a:	f000 f8e1 	bl	8003ad0 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800390e:	4b14      	ldr	r3, [pc, #80]	@ (8003960 <vTaskDelay+0x68>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d00b      	beq.n	800392e <vTaskDelay+0x36>
    __asm volatile
 8003916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391a:	f383 8811 	msr	BASEPRI, r3
 800391e:	f3bf 8f6f 	isb	sy
 8003922:	f3bf 8f4f 	dsb	sy
 8003926:	60bb      	str	r3, [r7, #8]
}
 8003928:	bf00      	nop
 800392a:	bf00      	nop
 800392c:	e7fd      	b.n	800392a <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800392e:	2100      	movs	r1, #0
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fecb 	bl	80046cc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003936:	f000 f8d9 	bl	8003aec <xTaskResumeAll>
 800393a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d107      	bne.n	8003952 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8003942:	4b08      	ldr	r3, [pc, #32]	@ (8003964 <vTaskDelay+0x6c>)
 8003944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8003952:	20c5      	movs	r0, #197	@ 0xc5
 8003954:	f7fe fe58 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20001224 	.word	0x20001224
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08c      	sub	sp, #48	@ 0x30
 800396c:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800396e:	2301      	movs	r3, #1
 8003970:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ] = { 0 };
 8003972:	2300      	movs	r3, #0
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	609a      	str	r2, [r3, #8]
 8003982:	60da      	str	r2, [r3, #12]
    TaskFunction_t pxIdleTaskFunction = NULL;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
    UBaseType_t xIdleTaskNameIndex;

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-143. */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 8003988:	2300      	movs	r3, #0
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	e011      	b.n	80039b2 <prvCreateIdleTasks+0x4a>
    {
        /* MISRA Ref 18.1.1 [Configuration dependent bounds checking] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-181. */
        /* coverity[misra_c_2012_rule_18_1_violation] */
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800398e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a0c <prvCreateIdleTasks+0xa4>)
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	4413      	add	r3, r2
 8003994:	7819      	ldrb	r1, [r3, #0]
 8003996:	1d3a      	adds	r2, r7, #4
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	460a      	mov	r2, r1
 800399e:	701a      	strb	r2, [r3, #0]

        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80039a0:	1d3a      	adds	r2, r7, #4
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	4413      	add	r3, r2
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d006      	beq.n	80039ba <prvCreateIdleTasks+0x52>
    for( xIdleTaskNameIndex = 0U; xIdleTaskNameIndex < ( configMAX_TASK_NAME_LEN - taskRESERVED_TASK_NAME_LENGTH ); xIdleTaskNameIndex++ )
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	2b12      	cmp	r3, #18
 80039b6:	d9ea      	bls.n	800398e <prvCreateIdleTasks+0x26>
 80039b8:	e000      	b.n	80039bc <prvCreateIdleTasks+0x54>
        {
            break;
 80039ba:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Ensure null termination. */
    cIdleName[ xIdleTaskNameIndex ] = '\0';
 80039bc:	1d3a      	adds	r2, r7, #4
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	2200      	movs	r2, #0
 80039c4:	701a      	strb	r2, [r3, #0]

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80039c6:	2300      	movs	r3, #0
 80039c8:	623b      	str	r3, [r7, #32]
 80039ca:	e015      	b.n	80039f8 <prvCreateIdleTasks+0x90>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = &prvIdleTask;
 80039cc:	4b10      	ldr	r3, [pc, #64]	@ (8003a10 <prvCreateIdleTasks+0xa8>)
 80039ce:	61bb      	str	r3, [r7, #24]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 80039d0:	6a3b      	ldr	r3, [r7, #32]
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a14 <prvCreateIdleTasks+0xac>)
 80039d6:	4413      	add	r3, r2
 80039d8:	1d39      	adds	r1, r7, #4
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	2300      	movs	r3, #0
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	2300      	movs	r3, #0
 80039e2:	2280      	movs	r2, #128	@ 0x80
 80039e4:	69b8      	ldr	r0, [r7, #24]
 80039e6:	f7ff fd4a 	bl	800347e <xTaskCreate>
 80039ea:	6278      	str	r0, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn != pdPASS )
 80039ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d106      	bne.n	8003a00 <prvCreateIdleTasks+0x98>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	3301      	adds	r3, #1
 80039f6:	623b      	str	r3, [r7, #32]
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	dde6      	ble.n	80039cc <prvCreateIdleTasks+0x64>
 80039fe:	e000      	b.n	8003a02 <prvCreateIdleTasks+0x9a>
        {
            break;
 8003a00:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3728      	adds	r7, #40	@ 0x28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	0800db38 	.word	0x0800db38
 8003a10:	08004499 	.word	0x08004499
 8003a14:	20001220 	.word	0x20001220

08003a18 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8003a1e:	f7ff ffa3 	bl	8003968 <prvCreateIdleTasks>
 8003a22:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d102      	bne.n	8003a30 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8003a2a:	f000 fee1 	bl	80047f0 <xTimerCreateTimerTask>
 8003a2e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d126      	bne.n	8003a84 <vTaskStartScheduler+0x6c>
    __asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	60bb      	str	r3, [r7, #8]
}
 8003a48:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <vTaskStartScheduler+0xa0>)
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a52:	4b1a      	ldr	r3, [pc, #104]	@ (8003abc <vTaskStartScheduler+0xa4>)
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a58:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <vTaskStartScheduler+0xa8>)
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	601a      	str	r2, [r3, #0]
         * macro must be defined to configure the timer/counter used to generate
         * the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003a5e:	f002 f969 	bl	8005d34 <vConfigureTimerForRunTimeStats>

        traceTASK_SWITCHED_IN();
 8003a62:	4b18      	ldr	r3, [pc, #96]	@ (8003ac4 <vTaskStartScheduler+0xac>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	4b18      	ldr	r3, [pc, #96]	@ (8003ac8 <vTaskStartScheduler+0xb0>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d102      	bne.n	8003a74 <vTaskStartScheduler+0x5c>
 8003a6e:	f7fe fe5f 	bl	8002730 <SEGGER_SYSVIEW_OnIdle>
 8003a72:	e004      	b.n	8003a7e <vTaskStartScheduler+0x66>
 8003a74:	4b14      	ldr	r3, [pc, #80]	@ (8003ac8 <vTaskStartScheduler+0xb0>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7fe feb7 	bl	80027ec <SEGGER_SYSVIEW_OnTaskStartExec>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003a7e:	f001 f9eb 	bl	8004e58 <xPortStartScheduler>
 8003a82:	e00f      	b.n	8003aa4 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a8a:	d10b      	bne.n	8003aa4 <vTaskStartScheduler+0x8c>
    __asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	607b      	str	r3, [r7, #4]
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	e7fd      	b.n	8003aa0 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003aa4:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <vTaskStartScheduler+0xb4>)
 8003aa6:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8003aa8:	20cd      	movs	r0, #205	@ 0xcd
 8003aaa:	f7fe fdad 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	2000121c 	.word	0x2000121c
 8003abc:	20001208 	.word	0x20001208
 8003ac0:	20001200 	.word	0x20001200
 8003ac4:	20001220 	.word	0x20001220
 8003ac8:	20001124 	.word	0x20001124
 8003acc:	20000000 	.word	0x20000000

08003ad0 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003ad4:	4b04      	ldr	r3, [pc, #16]	@ (8003ae8 <vTaskSuspendAll+0x18>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	4a03      	ldr	r2, [pc, #12]	@ (8003ae8 <vTaskSuspendAll+0x18>)
 8003adc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8003ade:	20cf      	movs	r0, #207	@ 0xcf
 8003ae0:	f7fe fd92 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003ae4:	bf00      	nop
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20001224 	.word	0x20001224

08003aec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003afa:	f001 fa6b 	bl	8004fd4 <vPortEnterCritical>
        {
            const BaseType_t xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003afe:	2300      	movs	r3, #0
 8003b00:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003b02:	4b7a      	ldr	r3, [pc, #488]	@ (8003cec <xTaskResumeAll+0x200>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10b      	bne.n	8003b22 <xTaskResumeAll+0x36>
    __asm volatile
 8003b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b0e:	f383 8811 	msr	BASEPRI, r3
 8003b12:	f3bf 8f6f 	isb	sy
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	603b      	str	r3, [r7, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	bf00      	nop
 8003b20:	e7fd      	b.n	8003b1e <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003b22:	4b72      	ldr	r3, [pc, #456]	@ (8003cec <xTaskResumeAll+0x200>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3b01      	subs	r3, #1
 8003b28:	4a70      	ldr	r2, [pc, #448]	@ (8003cec <xTaskResumeAll+0x200>)
 8003b2a:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK( xCoreID );

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cec <xTaskResumeAll+0x200>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f040 80ce 	bne.w	8003cd2 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b36:	4b6e      	ldr	r3, [pc, #440]	@ (8003cf0 <xTaskResumeAll+0x204>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 80c9 	beq.w	8003cd2 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b40:	e092      	b.n	8003c68 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003b42:	4b6c      	ldr	r3, [pc, #432]	@ (8003cf4 <xTaskResumeAll+0x208>)
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	69fa      	ldr	r2, [r7, #28]
 8003b56:	6a12      	ldr	r2, [r2, #32]
 8003b58:	609a      	str	r2, [r3, #8]
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	69d2      	ldr	r2, [r2, #28]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	685a      	ldr	r2, [r3, #4]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3318      	adds	r3, #24
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d103      	bne.n	8003b78 <xTaskResumeAll+0x8c>
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	6a1a      	ldr	r2, [r3, #32]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	605a      	str	r2, [r3, #4]
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	1e5a      	subs	r2, r3, #1
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	695b      	ldr	r3, [r3, #20]
 8003b8c:	60bb      	str	r3, [r7, #8]
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	69fa      	ldr	r2, [r7, #28]
 8003b9e:	6892      	ldr	r2, [r2, #8]
 8003ba0:	605a      	str	r2, [r3, #4]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3304      	adds	r3, #4
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d103      	bne.n	8003bb6 <xTaskResumeAll+0xca>
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	605a      	str	r2, [r3, #4]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	615a      	str	r2, [r3, #20]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	1e5a      	subs	r2, r3, #1
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe fe51 	bl	8002870 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	4b48      	ldr	r3, [pc, #288]	@ (8003cf8 <xTaskResumeAll+0x20c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	4a46      	ldr	r2, [pc, #280]	@ (8003cf8 <xTaskResumeAll+0x20c>)
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003be4:	4945      	ldr	r1, [pc, #276]	@ (8003cfc <xTaskResumeAll+0x210>)
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	69fb      	ldr	r3, [r7, #28]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	609a      	str	r2, [r3, #8]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	60da      	str	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	3204      	adds	r2, #4
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	1d1a      	adds	r2, r3, #4
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	609a      	str	r2, [r3, #8]
 8003c16:	69fb      	ldr	r3, [r7, #28]
 8003c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a36      	ldr	r2, [pc, #216]	@ (8003cfc <xTaskResumeAll+0x210>)
 8003c24:	441a      	add	r2, r3
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	615a      	str	r2, [r3, #20]
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c2e:	4933      	ldr	r1, [pc, #204]	@ (8003cfc <xTaskResumeAll+0x210>)
 8003c30:	4613      	mov	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003c40:	1c59      	adds	r1, r3, #1
 8003c42:	482e      	ldr	r0, [pc, #184]	@ (8003cfc <xTaskResumeAll+0x210>)
 8003c44:	4613      	mov	r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4403      	add	r3, r0
 8003c4e:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c54:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <xTaskResumeAll+0x214>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d904      	bls.n	8003c68 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003c5e:	4a29      	ldr	r2, [pc, #164]	@ (8003d04 <xTaskResumeAll+0x218>)
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	2101      	movs	r1, #1
 8003c64:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c68:	4b22      	ldr	r3, [pc, #136]	@ (8003cf4 <xTaskResumeAll+0x208>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f47f af68 	bne.w	8003b42 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003c78:	f000 fcec 	bl	8004654 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003c7c:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <xTaskResumeAll+0x21c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d012      	beq.n	8003cae <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003c88:	f000 f86a 	bl	8003d60 <xTaskIncrementTick>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d004      	beq.n	8003c9c <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003c92:	4a1c      	ldr	r2, [pc, #112]	@ (8003d04 <xTaskResumeAll+0x218>)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	2101      	movs	r1, #1
 8003c98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1ef      	bne.n	8003c88 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8003ca8:	4b17      	ldr	r3, [pc, #92]	@ (8003d08 <xTaskResumeAll+0x21c>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003cae:	4a15      	ldr	r2, [pc, #84]	@ (8003d04 <xTaskResumeAll+0x218>)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003cbe:	4b10      	ldr	r3, [pc, #64]	@ (8003d00 <xTaskResumeAll+0x214>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4b12      	ldr	r3, [pc, #72]	@ (8003d0c <xTaskResumeAll+0x220>)
 8003cc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cd2:	f001 f9af 	bl	8005034 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	20d0      	movs	r0, #208	@ 0xd0
 8003cdc:	f7fe fcd0 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	20001224 	.word	0x20001224
 8003cf0:	200011fc 	.word	0x200011fc
 8003cf4:	200011bc 	.word	0x200011bc
 8003cf8:	20001204 	.word	0x20001204
 8003cfc:	20001128 	.word	0x20001128
 8003d00:	20001124 	.word	0x20001124
 8003d04:	20001210 	.word	0x20001210
 8003d08:	2000120c 	.word	0x2000120c
 8003d0c:	e000ed04 	.word	0xe000ed04

08003d10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003d16:	4b06      	ldr	r3, [pc, #24]	@ (8003d30 <xTaskGetTickCount+0x20>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	20d1      	movs	r0, #209	@ 0xd1
 8003d20:	f7fe fcae 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8003d24:	687b      	ldr	r3, [r7, #4]
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	20001200 	.word	0x20001200

08003d34 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b082      	sub	sp, #8
 8003d38:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d3a:	f001 fa15 	bl	8005168 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003d42:	4b06      	ldr	r3, [pc, #24]	@ (8003d5c <xTaskGetTickCountFromISR+0x28>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003d48:	6839      	ldr	r1, [r7, #0]
 8003d4a:	20d2      	movs	r0, #210	@ 0xd2
 8003d4c:	f7fe fc98 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003d50:	683b      	ldr	r3, [r7, #0]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20001200 	.word	0x20001200

08003d60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b08a      	sub	sp, #40	@ 0x28
 8003d64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003d6a:	4b83      	ldr	r3, [pc, #524]	@ (8003f78 <xTaskIncrementTick+0x218>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f040 80f3 	bne.w	8003f5a <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d74:	4b81      	ldr	r3, [pc, #516]	@ (8003f7c <xTaskIncrementTick+0x21c>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003d7c:	4a7f      	ldr	r2, [pc, #508]	@ (8003f7c <xTaskIncrementTick+0x21c>)
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003d82:	6a3b      	ldr	r3, [r7, #32]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d121      	bne.n	8003dcc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003d88:	4b7d      	ldr	r3, [pc, #500]	@ (8003f80 <xTaskIncrementTick+0x220>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00b      	beq.n	8003daa <xTaskIncrementTick+0x4a>
    __asm volatile
 8003d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d96:	f383 8811 	msr	BASEPRI, r3
 8003d9a:	f3bf 8f6f 	isb	sy
 8003d9e:	f3bf 8f4f 	dsb	sy
 8003da2:	607b      	str	r3, [r7, #4]
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	e7fd      	b.n	8003da6 <xTaskIncrementTick+0x46>
 8003daa:	4b75      	ldr	r3, [pc, #468]	@ (8003f80 <xTaskIncrementTick+0x220>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61fb      	str	r3, [r7, #28]
 8003db0:	4b74      	ldr	r3, [pc, #464]	@ (8003f84 <xTaskIncrementTick+0x224>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a72      	ldr	r2, [pc, #456]	@ (8003f80 <xTaskIncrementTick+0x220>)
 8003db6:	6013      	str	r3, [r2, #0]
 8003db8:	4a72      	ldr	r2, [pc, #456]	@ (8003f84 <xTaskIncrementTick+0x224>)
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	6013      	str	r3, [r2, #0]
 8003dbe:	4b72      	ldr	r3, [pc, #456]	@ (8003f88 <xTaskIncrementTick+0x228>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	4a70      	ldr	r2, [pc, #448]	@ (8003f88 <xTaskIncrementTick+0x228>)
 8003dc6:	6013      	str	r3, [r2, #0]
 8003dc8:	f000 fc44 	bl	8004654 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003dcc:	4b6f      	ldr	r3, [pc, #444]	@ (8003f8c <xTaskIncrementTick+0x22c>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6a3a      	ldr	r2, [r7, #32]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	f0c0 80ac 	bcc.w	8003f30 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dd8:	4b69      	ldr	r3, [pc, #420]	@ (8003f80 <xTaskIncrementTick+0x220>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d104      	bne.n	8003dec <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003de2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f8c <xTaskIncrementTick+0x22c>)
 8003de4:	f04f 32ff 	mov.w	r2, #4294967295
 8003de8:	601a      	str	r2, [r3, #0]
                    break;
 8003dea:	e0a1      	b.n	8003f30 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003dec:	4b64      	ldr	r3, [pc, #400]	@ (8003f80 <xTaskIncrementTick+0x220>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003dfc:	6a3a      	ldr	r2, [r7, #32]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d203      	bcs.n	8003e0c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003e04:	4a61      	ldr	r2, [pc, #388]	@ (8003f8c <xTaskIncrementTick+0x22c>)
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	6013      	str	r3, [r2, #0]
                        break;
 8003e0a:	e091      	b.n	8003f30 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	613b      	str	r3, [r7, #16]
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	69ba      	ldr	r2, [r7, #24]
 8003e18:	68d2      	ldr	r2, [r2, #12]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	6892      	ldr	r2, [r2, #8]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d103      	bne.n	8003e3a <xTaskIncrementTick+0xda>
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	68da      	ldr	r2, [r3, #12]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	605a      	str	r2, [r3, #4]
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	615a      	str	r2, [r3, #20]
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d01e      	beq.n	8003e90 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	69db      	ldr	r3, [r3, #28]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	6a12      	ldr	r2, [r2, #32]
 8003e60:	609a      	str	r2, [r3, #8]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	69d2      	ldr	r2, [r2, #28]
 8003e6a:	605a      	str	r2, [r3, #4]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	3318      	adds	r3, #24
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d103      	bne.n	8003e80 <xTaskIncrementTick+0x120>
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	6a1a      	ldr	r2, [r3, #32]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	1e5a      	subs	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f7fe fcec 	bl	8002870 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8003f90 <xTaskIncrementTick+0x230>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	4a3a      	ldr	r2, [pc, #232]	@ (8003f90 <xTaskIncrementTick+0x230>)
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003eae:	4939      	ldr	r1, [pc, #228]	@ (8003f94 <xTaskIncrementTick+0x234>)
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3304      	adds	r3, #4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60bb      	str	r3, [r7, #8]
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	609a      	str	r2, [r3, #8]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	60da      	str	r2, [r3, #12]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	69ba      	ldr	r2, [r7, #24]
 8003ed4:	3204      	adds	r2, #4
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	69bb      	ldr	r3, [r7, #24]
 8003eda:	1d1a      	adds	r2, r3, #4
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4a29      	ldr	r2, [pc, #164]	@ (8003f94 <xTaskIncrementTick+0x234>)
 8003eee:	441a      	add	r2, r3
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	615a      	str	r2, [r3, #20]
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ef8:	4926      	ldr	r1, [pc, #152]	@ (8003f94 <xTaskIncrementTick+0x234>)
 8003efa:	4613      	mov	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4413      	add	r3, r2
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	440b      	add	r3, r1
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f0a:	1c59      	adds	r1, r3, #1
 8003f0c:	4821      	ldr	r0, [pc, #132]	@ (8003f94 <xTaskIncrementTick+0x234>)
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	4403      	add	r3, r0
 8003f18:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003f98 <xTaskIncrementTick+0x238>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f24:	429a      	cmp	r2, r3
 8003f26:	f67f af57 	bls.w	8003dd8 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f2e:	e753      	b.n	8003dd8 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003f30:	4b19      	ldr	r3, [pc, #100]	@ (8003f98 <xTaskIncrementTick+0x238>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f36:	4917      	ldr	r1, [pc, #92]	@ (8003f94 <xTaskIncrementTick+0x234>)
 8003f38:	4613      	mov	r3, r2
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d901      	bls.n	8003f4c <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <xTaskIncrementTick+0x23c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d007      	beq.n	8003f64 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003f54:	2301      	movs	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f58:	e004      	b.n	8003f64 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003f5a:	4b11      	ldr	r3, [pc, #68]	@ (8003fa0 <xTaskIncrementTick+0x240>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa0 <xTaskIncrementTick+0x240>)
 8003f62:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	4619      	mov	r1, r3
 8003f68:	20db      	movs	r0, #219	@ 0xdb
 8003f6a:	f7fe fb89 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3728      	adds	r7, #40	@ 0x28
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20001224 	.word	0x20001224
 8003f7c:	20001200 	.word	0x20001200
 8003f80:	200011b4 	.word	0x200011b4
 8003f84:	200011b8 	.word	0x200011b8
 8003f88:	20001214 	.word	0x20001214
 8003f8c:	2000121c 	.word	0x2000121c
 8003f90:	20001204 	.word	0x20001204
 8003f94:	20001128 	.word	0x20001128
 8003f98:	20001124 	.word	0x20001124
 8003f9c:	20001210 	.word	0x20001210
 8003fa0:	2000120c 	.word	0x2000120c

08003fa4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003faa:	4b3a      	ldr	r3, [pc, #232]	@ (8004094 <vTaskSwitchContext+0xf0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d003      	beq.n	8003fba <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003fb2:	4b39      	ldr	r3, [pc, #228]	@ (8004098 <vTaskSwitchContext+0xf4>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003fb8:	e068      	b.n	800408c <vTaskSwitchContext+0xe8>
            xYieldPendings[ 0 ] = pdFALSE;
 8003fba:	4b37      	ldr	r3, [pc, #220]	@ (8004098 <vTaskSwitchContext+0xf4>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8003fc0:	f001 fee2 	bl	8005d88 <ulGetRunTimeCounterValue>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4a35      	ldr	r2, [pc, #212]	@ (800409c <vTaskSwitchContext+0xf8>)
 8003fc8:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8003fca:	4b34      	ldr	r3, [pc, #208]	@ (800409c <vTaskSwitchContext+0xf8>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b34      	ldr	r3, [pc, #208]	@ (80040a0 <vTaskSwitchContext+0xfc>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d909      	bls.n	8003fea <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8003fd6:	4b31      	ldr	r3, [pc, #196]	@ (800409c <vTaskSwitchContext+0xf8>)
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	4b31      	ldr	r3, [pc, #196]	@ (80040a0 <vTaskSwitchContext+0xfc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	1ad1      	subs	r1, r2, r3
 8003fe0:	4b30      	ldr	r3, [pc, #192]	@ (80040a4 <vTaskSwitchContext+0x100>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003fe6:	440a      	add	r2, r1
 8003fe8:	65da      	str	r2, [r3, #92]	@ 0x5c
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8003fea:	4b2c      	ldr	r3, [pc, #176]	@ (800409c <vTaskSwitchContext+0xf8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a2c      	ldr	r2, [pc, #176]	@ (80040a0 <vTaskSwitchContext+0xfc>)
 8003ff0:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ff2:	4b2d      	ldr	r3, [pc, #180]	@ (80040a8 <vTaskSwitchContext+0x104>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	fab3 f383 	clz	r3, r3
 8003ffe:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8004000:	7afb      	ldrb	r3, [r7, #11]
 8004002:	f1c3 031f 	rsb	r3, r3, #31
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	4928      	ldr	r1, [pc, #160]	@ (80040ac <vTaskSwitchContext+0x108>)
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <vTaskSwitchContext+0x90>
    __asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	607b      	str	r3, [r7, #4]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <vTaskSwitchContext+0x8c>
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	4613      	mov	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4a1b      	ldr	r2, [pc, #108]	@ (80040ac <vTaskSwitchContext+0x108>)
 8004040:	4413      	add	r3, r2
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	605a      	str	r2, [r3, #4]
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	3308      	adds	r3, #8
 8004056:	429a      	cmp	r2, r3
 8004058:	d103      	bne.n	8004062 <vTaskSwitchContext+0xbe>
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	68da      	ldr	r2, [r3, #12]
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	4a0e      	ldr	r2, [pc, #56]	@ (80040a4 <vTaskSwitchContext+0x100>)
 800406a:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800406c:	4b10      	ldr	r3, [pc, #64]	@ (80040b0 <vTaskSwitchContext+0x10c>)
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	4b0c      	ldr	r3, [pc, #48]	@ (80040a4 <vTaskSwitchContext+0x100>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d102      	bne.n	800407e <vTaskSwitchContext+0xda>
 8004078:	f7fe fb5a 	bl	8002730 <SEGGER_SYSVIEW_OnIdle>
 800407c:	e004      	b.n	8004088 <vTaskSwitchContext+0xe4>
 800407e:	4b09      	ldr	r3, [pc, #36]	@ (80040a4 <vTaskSwitchContext+0x100>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe fbb2 	bl	80027ec <SEGGER_SYSVIEW_OnTaskStartExec>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8004088:	4b06      	ldr	r3, [pc, #24]	@ (80040a4 <vTaskSwitchContext+0x100>)
 800408a:	681b      	ldr	r3, [r3, #0]
    }
 800408c:	bf00      	nop
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	20001224 	.word	0x20001224
 8004098:	20001210 	.word	0x20001210
 800409c:	2000122c 	.word	0x2000122c
 80040a0:	20001228 	.word	0x20001228
 80040a4:	20001124 	.word	0x20001124
 80040a8:	20001204 	.word	0x20001204
 80040ac:	20001128 	.word	0x20001128
 80040b0:	20001220 	.word	0x20001220

080040b4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10b      	bne.n	80040dc <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80040c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c8:	f383 8811 	msr	BASEPRI, r3
 80040cc:	f3bf 8f6f 	isb	sy
 80040d0:	f3bf 8f4f 	dsb	sy
 80040d4:	60fb      	str	r3, [r7, #12]
}
 80040d6:	bf00      	nop
 80040d8:	bf00      	nop
 80040da:	e7fd      	b.n	80040d8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80040dc:	4b08      	ldr	r3, [pc, #32]	@ (8004100 <vTaskPlaceOnEventList+0x4c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3318      	adds	r3, #24
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7fe fe0e 	bl	8002d06 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040ea:	2101      	movs	r1, #1
 80040ec:	6838      	ldr	r0, [r7, #0]
 80040ee:	f000 faed 	bl	80046cc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80040f2:	20e1      	movs	r0, #225	@ 0xe1
 80040f4:	f7fe fa88 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
}
 80040f8:	bf00      	nop
 80040fa:	3710      	adds	r7, #16
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20001124 	.word	0x20001124

08004104 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004104:	b580      	push	{r7, lr}
 8004106:	b086      	sub	sp, #24
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	60b9      	str	r1, [r7, #8]
 800410e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10b      	bne.n	800412e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	613b      	str	r3, [r7, #16]
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	e7fd      	b.n	800412a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	4b17      	ldr	r3, [pc, #92]	@ (8004194 <vTaskPlaceOnEventListRestricted+0x90>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	61da      	str	r2, [r3, #28]
 800413c:	4b15      	ldr	r3, [pc, #84]	@ (8004194 <vTaskPlaceOnEventListRestricted+0x90>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	6892      	ldr	r2, [r2, #8]
 8004144:	621a      	str	r2, [r3, #32]
 8004146:	4b13      	ldr	r3, [pc, #76]	@ (8004194 <vTaskPlaceOnEventListRestricted+0x90>)
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	3218      	adds	r2, #24
 8004150:	605a      	str	r2, [r3, #4]
 8004152:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <vTaskPlaceOnEventListRestricted+0x90>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f103 0218 	add.w	r2, r3, #24
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	609a      	str	r2, [r3, #8]
 800415e:	4b0d      	ldr	r3, [pc, #52]	@ (8004194 <vTaskPlaceOnEventListRestricted+0x90>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	629a      	str	r2, [r3, #40]	@ 0x28
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	1c5a      	adds	r2, r3, #1
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	68b8      	ldr	r0, [r7, #8]
 8004180:	f000 faa4 	bl	80046cc <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8004184:	20e3      	movs	r0, #227	@ 0xe3
 8004186:	f7fe fa3f 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800418a:	bf00      	nop
 800418c:	3718      	adds	r7, #24
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	20001124 	.word	0x20001124

08004198 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b08a      	sub	sp, #40	@ 0x28
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80041ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b2:	f383 8811 	msr	BASEPRI, r3
 80041b6:	f3bf 8f6f 	isb	sy
 80041ba:	f3bf 8f4f 	dsb	sy
 80041be:	60fb      	str	r3, [r7, #12]
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	e7fd      	b.n	80041c2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80041c6:	6a3b      	ldr	r3, [r7, #32]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ca:	61fb      	str	r3, [r7, #28]
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	6a3a      	ldr	r2, [r7, #32]
 80041d2:	6a12      	ldr	r2, [r2, #32]
 80041d4:	609a      	str	r2, [r3, #8]
 80041d6:	6a3b      	ldr	r3, [r7, #32]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	6a3a      	ldr	r2, [r7, #32]
 80041dc:	69d2      	ldr	r2, [r2, #28]
 80041de:	605a      	str	r2, [r3, #4]
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	3318      	adds	r3, #24
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d103      	bne.n	80041f4 <xTaskRemoveFromEventList+0x5c>
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	605a      	str	r2, [r3, #4]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	2200      	movs	r2, #0
 80041f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	1e5a      	subs	r2, r3, #1
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004204:	4b4e      	ldr	r3, [pc, #312]	@ (8004340 <xTaskRemoveFromEventList+0x1a8>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d164      	bne.n	80042d6 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	695b      	ldr	r3, [r3, #20]
 8004210:	617b      	str	r3, [r7, #20]
 8004212:	6a3b      	ldr	r3, [r7, #32]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	6a3a      	ldr	r2, [r7, #32]
 8004218:	68d2      	ldr	r2, [r2, #12]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	6a3b      	ldr	r3, [r7, #32]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	6a3a      	ldr	r2, [r7, #32]
 8004222:	6892      	ldr	r2, [r2, #8]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	3304      	adds	r3, #4
 800422e:	429a      	cmp	r2, r3
 8004230:	d103      	bne.n	800423a <xTaskRemoveFromEventList+0xa2>
 8004232:	6a3b      	ldr	r3, [r7, #32]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2200      	movs	r2, #0
 800423e:	615a      	str	r2, [r3, #20]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	1e5a      	subs	r2, r3, #1
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	4618      	mov	r0, r3
 800424e:	f7fe fb0f 	bl	8002870 <SEGGER_SYSVIEW_OnTaskStartReady>
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	2201      	movs	r2, #1
 8004258:	409a      	lsls	r2, r3
 800425a:	4b3a      	ldr	r3, [pc, #232]	@ (8004344 <xTaskRemoveFromEventList+0x1ac>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	4a38      	ldr	r2, [pc, #224]	@ (8004344 <xTaskRemoveFromEventList+0x1ac>)
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004268:	4937      	ldr	r1, [pc, #220]	@ (8004348 <xTaskRemoveFromEventList+0x1b0>)
 800426a:	4613      	mov	r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	4413      	add	r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	3304      	adds	r3, #4
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	60da      	str	r2, [r3, #12]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	6a3a      	ldr	r2, [r7, #32]
 800428e:	3204      	adds	r2, #4
 8004290:	605a      	str	r2, [r3, #4]
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	1d1a      	adds	r2, r3, #4
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	6a3b      	ldr	r3, [r7, #32]
 800429c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800429e:	4613      	mov	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	4413      	add	r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4a28      	ldr	r2, [pc, #160]	@ (8004348 <xTaskRemoveFromEventList+0x1b0>)
 80042a8:	441a      	add	r2, r3
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	615a      	str	r2, [r3, #20]
 80042ae:	6a3b      	ldr	r3, [r7, #32]
 80042b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042b2:	4925      	ldr	r1, [pc, #148]	@ (8004348 <xTaskRemoveFromEventList+0x1b0>)
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6a3a      	ldr	r2, [r7, #32]
 80042c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80042c4:	1c59      	adds	r1, r3, #1
 80042c6:	4820      	ldr	r0, [pc, #128]	@ (8004348 <xTaskRemoveFromEventList+0x1b0>)
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4403      	add	r3, r0
 80042d2:	6019      	str	r1, [r3, #0]
 80042d4:	e01b      	b.n	800430e <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80042d6:	4b1d      	ldr	r3, [pc, #116]	@ (800434c <xTaskRemoveFromEventList+0x1b4>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	61bb      	str	r3, [r7, #24]
 80042dc:	6a3b      	ldr	r3, [r7, #32]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	61da      	str	r2, [r3, #28]
 80042e2:	69bb      	ldr	r3, [r7, #24]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	621a      	str	r2, [r3, #32]
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	6a3a      	ldr	r2, [r7, #32]
 80042f0:	3218      	adds	r2, #24
 80042f2:	605a      	str	r2, [r3, #4]
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	f103 0218 	add.w	r2, r3, #24
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	609a      	str	r2, [r3, #8]
 80042fe:	6a3b      	ldr	r3, [r7, #32]
 8004300:	4a12      	ldr	r2, [pc, #72]	@ (800434c <xTaskRemoveFromEventList+0x1b4>)
 8004302:	629a      	str	r2, [r3, #40]	@ 0x28
 8004304:	4b11      	ldr	r3, [pc, #68]	@ (800434c <xTaskRemoveFromEventList+0x1b4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3301      	adds	r3, #1
 800430a:	4a10      	ldr	r2, [pc, #64]	@ (800434c <xTaskRemoveFromEventList+0x1b4>)
 800430c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800430e:	6a3b      	ldr	r3, [r7, #32]
 8004310:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004312:	4b0f      	ldr	r3, [pc, #60]	@ (8004350 <xTaskRemoveFromEventList+0x1b8>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004318:	429a      	cmp	r2, r3
 800431a:	d905      	bls.n	8004328 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800431c:	2301      	movs	r3, #1
 800431e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8004320:	4b0c      	ldr	r3, [pc, #48]	@ (8004354 <xTaskRemoveFromEventList+0x1bc>)
 8004322:	2201      	movs	r2, #1
 8004324:	601a      	str	r2, [r3, #0]
 8004326:	e001      	b.n	800432c <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8004328:	2300      	movs	r3, #0
 800432a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	4619      	mov	r1, r3
 8004330:	20e4      	movs	r0, #228	@ 0xe4
 8004332:	f7fe f9a5 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8004336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004338:	4618      	mov	r0, r3
 800433a:	3728      	adds	r7, #40	@ 0x28
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20001224 	.word	0x20001224
 8004344:	20001204 	.word	0x20001204
 8004348:	20001128 	.word	0x20001128
 800434c:	200011bc 	.word	0x200011bc
 8004350:	20001124 	.word	0x20001124
 8004354:	20001210 	.word	0x20001210

08004358 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004360:	4b07      	ldr	r3, [pc, #28]	@ (8004380 <vTaskInternalSetTimeOutState+0x28>)
 8004362:	681a      	ldr	r2, [r3, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004368:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <vTaskInternalSetTimeOutState+0x2c>)
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8004370:	20e7      	movs	r0, #231	@ 0xe7
 8004372:	f7fe f949 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	20001214 	.word	0x20001214
 8004384:	20001200 	.word	0x20001200

08004388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	613b      	str	r3, [r7, #16]
}
 80043aa:	bf00      	nop
 80043ac:	bf00      	nop
 80043ae:	e7fd      	b.n	80043ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10b      	bne.n	80043ce <xTaskCheckForTimeOut+0x46>
    __asm volatile
 80043b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ba:	f383 8811 	msr	BASEPRI, r3
 80043be:	f3bf 8f6f 	isb	sy
 80043c2:	f3bf 8f4f 	dsb	sy
 80043c6:	60fb      	str	r3, [r7, #12]
}
 80043c8:	bf00      	nop
 80043ca:	bf00      	nop
 80043cc:	e7fd      	b.n	80043ca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80043ce:	f000 fe01 	bl	8004fd4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80043d2:	4b28      	ldr	r3, [pc, #160]	@ (8004474 <xTaskCheckForTimeOut+0xec>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	617b      	str	r3, [r7, #20]

        #if ( INCLUDE_xTaskAbortDelay == 1 )
            if( pxCurrentTCB->ucDelayAborted != ( uint8_t ) pdFALSE )
 80043e2:	4b25      	ldr	r3, [pc, #148]	@ (8004478 <xTaskCheckForTimeOut+0xf0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <xTaskCheckForTimeOut+0x76>
            {
                /* The delay was aborted, which is not the same as a time out,
                 * but has the same result. */
                pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 80043ee:	4b22      	ldr	r3, [pc, #136]	@ (8004478 <xTaskCheckForTimeOut+0xf0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
                xReturn = pdTRUE;
 80043f8:	2301      	movs	r3, #1
 80043fa:	61fb      	str	r3, [r7, #28]
 80043fc:	e02e      	b.n	800445c <xTaskCheckForTimeOut+0xd4>
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	d102      	bne.n	800440e <xTaskCheckForTimeOut+0x86>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004408:	2300      	movs	r3, #0
 800440a:	61fb      	str	r3, [r7, #28]
 800440c:	e026      	b.n	800445c <xTaskCheckForTimeOut+0xd4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b1a      	ldr	r3, [pc, #104]	@ (800447c <xTaskCheckForTimeOut+0xf4>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d00a      	beq.n	8004430 <xTaskCheckForTimeOut+0xa8>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	429a      	cmp	r2, r3
 8004422:	d305      	bcc.n	8004430 <xTaskCheckForTimeOut+0xa8>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004424:	2301      	movs	r3, #1
 8004426:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	e015      	b.n	800445c <xTaskCheckForTimeOut+0xd4>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	429a      	cmp	r2, r3
 8004438:	d20b      	bcs.n	8004452 <xTaskCheckForTimeOut+0xca>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	1ad2      	subs	r2, r2, r3
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7ff ff86 	bl	8004358 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800444c:	2300      	movs	r3, #0
 800444e:	61fb      	str	r3, [r7, #28]
 8004450:	e004      	b.n	800445c <xTaskCheckForTimeOut+0xd4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004458:	2301      	movs	r3, #1
 800445a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800445c:	f000 fdea 	bl	8005034 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	4619      	mov	r1, r3
 8004464:	20e8      	movs	r0, #232	@ 0xe8
 8004466:	f7fe f90b 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800446a:	69fb      	ldr	r3, [r7, #28]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3720      	adds	r7, #32
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	20001200 	.word	0x20001200
 8004478:	20001124 	.word	0x20001124
 800447c:	20001214 	.word	0x20001214

08004480 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8004484:	4b03      	ldr	r3, [pc, #12]	@ (8004494 <vTaskMissedYield+0x14>)
 8004486:	2201      	movs	r2, #1
 8004488:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800448a:	20e9      	movs	r0, #233	@ 0xe9
 800448c:	f7fe f8bc 	bl	8002608 <SEGGER_SYSVIEW_RecordEndCall>
}
 8004490:	bf00      	nop
 8004492:	bd80      	pop	{r7, pc}
 8004494:	20001210 	.word	0x20001210

08004498 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80044a0:	f000 f852 	bl	8004548 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80044a4:	4b06      	ldr	r3, [pc, #24]	@ (80044c0 <prvIdleTask+0x28>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d9f9      	bls.n	80044a0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80044ac:	4b05      	ldr	r3, [pc, #20]	@ (80044c4 <prvIdleTask+0x2c>)
 80044ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044b2:	601a      	str	r2, [r3, #0]
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80044bc:	e7f0      	b.n	80044a0 <prvIdleTask+0x8>
 80044be:	bf00      	nop
 80044c0:	20001128 	.word	0x20001128
 80044c4:	e000ed04 	.word	0xe000ed04

080044c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044ce:	2300      	movs	r3, #0
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	e00c      	b.n	80044ee <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	4613      	mov	r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <prvInitialiseTaskLists+0x60>)
 80044e0:	4413      	add	r3, r2
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fe fbb8 	bl	8002c58 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	3301      	adds	r3, #1
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d9ef      	bls.n	80044d4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80044f4:	480d      	ldr	r0, [pc, #52]	@ (800452c <prvInitialiseTaskLists+0x64>)
 80044f6:	f7fe fbaf 	bl	8002c58 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80044fa:	480d      	ldr	r0, [pc, #52]	@ (8004530 <prvInitialiseTaskLists+0x68>)
 80044fc:	f7fe fbac 	bl	8002c58 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004500:	480c      	ldr	r0, [pc, #48]	@ (8004534 <prvInitialiseTaskLists+0x6c>)
 8004502:	f7fe fba9 	bl	8002c58 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004506:	480c      	ldr	r0, [pc, #48]	@ (8004538 <prvInitialiseTaskLists+0x70>)
 8004508:	f7fe fba6 	bl	8002c58 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800450c:	480b      	ldr	r0, [pc, #44]	@ (800453c <prvInitialiseTaskLists+0x74>)
 800450e:	f7fe fba3 	bl	8002c58 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004512:	4b0b      	ldr	r3, [pc, #44]	@ (8004540 <prvInitialiseTaskLists+0x78>)
 8004514:	4a05      	ldr	r2, [pc, #20]	@ (800452c <prvInitialiseTaskLists+0x64>)
 8004516:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004518:	4b0a      	ldr	r3, [pc, #40]	@ (8004544 <prvInitialiseTaskLists+0x7c>)
 800451a:	4a05      	ldr	r2, [pc, #20]	@ (8004530 <prvInitialiseTaskLists+0x68>)
 800451c:	601a      	str	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	20001128 	.word	0x20001128
 800452c:	2000118c 	.word	0x2000118c
 8004530:	200011a0 	.word	0x200011a0
 8004534:	200011bc 	.word	0x200011bc
 8004538:	200011d0 	.word	0x200011d0
 800453c:	200011e8 	.word	0x200011e8
 8004540:	200011b4 	.word	0x200011b4
 8004544:	200011b8 	.word	0x200011b8

08004548 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800454e:	e019      	b.n	8004584 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8004550:	f000 fd40 	bl	8004fd4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004554:	4b10      	ldr	r3, [pc, #64]	@ (8004598 <prvCheckTasksWaitingTermination+0x50>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	4618      	mov	r0, r3
 8004562:	f7fe fc0b 	bl	8002d7c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <prvCheckTasksWaitingTermination+0x54>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3b01      	subs	r3, #1
 800456c:	4a0b      	ldr	r2, [pc, #44]	@ (800459c <prvCheckTasksWaitingTermination+0x54>)
 800456e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8004570:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <prvCheckTasksWaitingTermination+0x58>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3b01      	subs	r3, #1
 8004576:	4a0a      	ldr	r2, [pc, #40]	@ (80045a0 <prvCheckTasksWaitingTermination+0x58>)
 8004578:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 800457a:	f000 fd5b 	bl	8005034 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f858 	bl	8004634 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004584:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <prvCheckTasksWaitingTermination+0x58>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e1      	bne.n	8004550 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800458c:	bf00      	nop
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	200011d0 	.word	0x200011d0
 800459c:	200011fc 	.word	0x200011fc
 80045a0:	200011e4 	.word	0x200011e4

080045a4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

    static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
    {
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
        configSTACK_DEPTH_TYPE uxCount = 0U;
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]

        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80045b0:	e005      	b.n	80045be <prvTaskCheckFreeStackSpace+0x1a>
        {
            pucStackByte -= portSTACK_GROWTH;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3301      	adds	r3, #1
 80045b6:	607b      	str	r3, [r7, #4]
            uxCount++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	3301      	adds	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	2ba5      	cmp	r3, #165	@ 0xa5
 80045c4:	d0f5      	beq.n	80045b2 <prvTaskCheckFreeStackSpace+0xe>
        }

        uxCount /= ( configSTACK_DEPTH_TYPE ) sizeof( StackType_t );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	089b      	lsrs	r3, r3, #2
 80045ca:	60fb      	str	r3, [r7, #12]

        return uxCount;
 80045cc:	68fb      	ldr	r3, [r7, #12]
    }
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr

080045d8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b086      	sub	sp, #24
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        traceENTER_uxTaskGetStackHighWaterMark( xTask );

        pxTCB = prvGetTCBFromHandle( xTask );
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d102      	bne.n	80045ec <uxTaskGetStackHighWaterMark+0x14>
 80045e6:	4b12      	ldr	r3, [pc, #72]	@ (8004630 <uxTaskGetStackHighWaterMark+0x58>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	e000      	b.n	80045ee <uxTaskGetStackHighWaterMark+0x16>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	617b      	str	r3, [r7, #20]
        configASSERT( pxTCB != NULL );
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10b      	bne.n	800460e <uxTaskGetStackHighWaterMark+0x36>
    __asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	60bb      	str	r3, [r7, #8]
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	e7fd      	b.n	800460a <uxTaskGetStackHighWaterMark+0x32>

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004612:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004614:	6938      	ldr	r0, [r7, #16]
 8004616:	f7ff ffc5 	bl	80045a4 <prvTaskCheckFreeStackSpace>
 800461a:	60f8      	str	r0, [r7, #12]

        traceRETURN_uxTaskGetStackHighWaterMark( uxReturn );
 800461c:	68f9      	ldr	r1, [r7, #12]
 800461e:	20f2      	movs	r0, #242	@ 0xf2
 8004620:	f7fe f82e 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 8004624:	68fb      	ldr	r3, [r7, #12]
    }
 8004626:	4618      	mov	r0, r3
 8004628:	3718      	adds	r7, #24
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	20001124 	.word	0x20001124

08004634 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	4618      	mov	r0, r3
 8004642:	f000 ff09 	bl	8005458 <vPortFree>
            vPortFree( pxTCB );
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 ff06 	bl	8005458 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800464c:	bf00      	nop
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004654:	b480      	push	{r7}
 8004656:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004658:	4b09      	ldr	r3, [pc, #36]	@ (8004680 <prvResetNextTaskUnblockTime+0x2c>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d104      	bne.n	800466c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004662:	4b08      	ldr	r3, [pc, #32]	@ (8004684 <prvResetNextTaskUnblockTime+0x30>)
 8004664:	f04f 32ff 	mov.w	r2, #4294967295
 8004668:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800466a:	e005      	b.n	8004678 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800466c:	4b04      	ldr	r3, [pc, #16]	@ (8004680 <prvResetNextTaskUnblockTime+0x2c>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a03      	ldr	r2, [pc, #12]	@ (8004684 <prvResetNextTaskUnblockTime+0x30>)
 8004676:	6013      	str	r3, [r2, #0]
}
 8004678:	bf00      	nop
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr
 8004680:	200011b4 	.word	0x200011b4
 8004684:	2000121c 	.word	0x2000121c

08004688 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 800468e:	4b0d      	ldr	r3, [pc, #52]	@ (80046c4 <xTaskGetSchedulerState+0x3c>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d102      	bne.n	800469c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004696:	2301      	movs	r3, #1
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	e008      	b.n	80046ae <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800469c:	4b0a      	ldr	r3, [pc, #40]	@ (80046c8 <xTaskGetSchedulerState+0x40>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d102      	bne.n	80046aa <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80046a4:	2302      	movs	r3, #2
 80046a6:	607b      	str	r3, [r7, #4]
 80046a8:	e001      	b.n	80046ae <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80046aa:	2300      	movs	r3, #0
 80046ac:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4619      	mov	r1, r3
 80046b2:	20f5      	movs	r0, #245	@ 0xf5
 80046b4:	f7fd ffe4 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80046b8:	687b      	ldr	r3, [r7, #4]
    }
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	20001208 	.word	0x20001208
 80046c8:	20001224 	.word	0x20001224

080046cc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80046d6:	4b3f      	ldr	r3, [pc, #252]	@ (80047d4 <prvAddCurrentTaskToDelayedList+0x108>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80046dc:	4b3e      	ldr	r3, [pc, #248]	@ (80047d8 <prvAddCurrentTaskToDelayedList+0x10c>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80046e2:	4b3e      	ldr	r3, [pc, #248]	@ (80047dc <prvAddCurrentTaskToDelayedList+0x110>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	617b      	str	r3, [r7, #20]
    #if ( INCLUDE_xTaskAbortDelay == 1 )
    {
        /* About to enter a delayed list, so ensure the ucDelayAborted flag is
         * reset to pdFALSE so it can be detected as having been set to pdTRUE
         * when the task leaves the Blocked state. */
        pxCurrentTCB->ucDelayAborted = ( uint8_t ) pdFALSE;
 80046e8:	4b3d      	ldr	r3, [pc, #244]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046f2:	4b3b      	ldr	r3, [pc, #236]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3304      	adds	r3, #4
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7fe fb3f 	bl	8002d7c <uxListRemove>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d10b      	bne.n	800471c <prvAddCurrentTaskToDelayedList+0x50>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004704:	4b36      	ldr	r3, [pc, #216]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470a:	2201      	movs	r2, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	43da      	mvns	r2, r3
 8004712:	4b34      	ldr	r3, [pc, #208]	@ (80047e4 <prvAddCurrentTaskToDelayedList+0x118>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4013      	ands	r3, r2
 8004718:	4a32      	ldr	r2, [pc, #200]	@ (80047e4 <prvAddCurrentTaskToDelayedList+0x118>)
 800471a:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004722:	d124      	bne.n	800476e <prvAddCurrentTaskToDelayedList+0xa2>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d021      	beq.n	800476e <prvAddCurrentTaskToDelayedList+0xa2>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472a:	4b2f      	ldr	r3, [pc, #188]	@ (80047e8 <prvAddCurrentTaskToDelayedList+0x11c>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	4b2b      	ldr	r3, [pc, #172]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	609a      	str	r2, [r3, #8]
 8004738:	4b29      	ldr	r3, [pc, #164]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	60da      	str	r2, [r3, #12]
 8004742:	4b27      	ldr	r3, [pc, #156]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	3204      	adds	r2, #4
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	4b24      	ldr	r3, [pc, #144]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	1d1a      	adds	r2, r3, #4
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	609a      	str	r2, [r3, #8]
 8004758:	4b21      	ldr	r3, [pc, #132]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a22      	ldr	r2, [pc, #136]	@ (80047e8 <prvAddCurrentTaskToDelayedList+0x11c>)
 800475e:	615a      	str	r2, [r3, #20]
 8004760:	4b21      	ldr	r3, [pc, #132]	@ (80047e8 <prvAddCurrentTaskToDelayedList+0x11c>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	4a20      	ldr	r2, [pc, #128]	@ (80047e8 <prvAddCurrentTaskToDelayedList+0x11c>)
 8004768:	6013      	str	r3, [r2, #0]
 800476a:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800476c:	e02e      	b.n	80047cc <prvAddCurrentTaskToDelayedList+0x100>
            xTimeToWake = xConstTickCount + xTicksToWait;
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4413      	add	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004776:	4b1a      	ldr	r3, [pc, #104]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	429a      	cmp	r2, r3
 8004784:	d20d      	bcs.n	80047a2 <prvAddCurrentTaskToDelayedList+0xd6>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8004786:	4b16      	ldr	r3, [pc, #88]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2104      	movs	r1, #4
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe f8b1 	bl	80028f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8004792:	4b13      	ldr	r3, [pc, #76]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	6978      	ldr	r0, [r7, #20]
 800479c:	f7fe fab3 	bl	8002d06 <vListInsert>
}
 80047a0:	e014      	b.n	80047cc <prvAddCurrentTaskToDelayedList+0x100>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80047a2:	4b0f      	ldr	r3, [pc, #60]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	2104      	movs	r1, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fe f8a3 	bl	80028f4 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80047ae:	4b0c      	ldr	r3, [pc, #48]	@ (80047e0 <prvAddCurrentTaskToDelayedList+0x114>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3304      	adds	r3, #4
 80047b4:	4619      	mov	r1, r3
 80047b6:	69b8      	ldr	r0, [r7, #24]
 80047b8:	f7fe faa5 	bl	8002d06 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80047bc:	4b0b      	ldr	r3, [pc, #44]	@ (80047ec <prvAddCurrentTaskToDelayedList+0x120>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d202      	bcs.n	80047cc <prvAddCurrentTaskToDelayedList+0x100>
                    xNextTaskUnblockTime = xTimeToWake;
 80047c6:	4a09      	ldr	r2, [pc, #36]	@ (80047ec <prvAddCurrentTaskToDelayedList+0x120>)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6013      	str	r3, [r2, #0]
}
 80047cc:	bf00      	nop
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	20001200 	.word	0x20001200
 80047d8:	200011b4 	.word	0x200011b4
 80047dc:	200011b8 	.word	0x200011b8
 80047e0:	20001124 	.word	0x20001124
 80047e4:	20001204 	.word	0x20001204
 80047e8:	200011e8 	.word	0x200011e8
 80047ec:	2000121c 	.word	0x2000121c

080047f0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80047f6:	2300      	movs	r3, #0
 80047f8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80047fa:	f000 fa79 	bl	8004cf0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80047fe:	4b15      	ldr	r3, [pc, #84]	@ (8004854 <xTimerCreateTimerTask+0x64>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00b      	beq.n	800481e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
                #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( &prvTimerTask,
 8004806:	4b14      	ldr	r3, [pc, #80]	@ (8004858 <xTimerCreateTimerTask+0x68>)
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	2302      	movs	r3, #2
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	2300      	movs	r3, #0
 8004810:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004814:	4911      	ldr	r1, [pc, #68]	@ (800485c <xTimerCreateTimerTask+0x6c>)
 8004816:	4812      	ldr	r0, [pc, #72]	@ (8004860 <xTimerCreateTimerTask+0x70>)
 8004818:	f7fe fe31 	bl	800347e <xTaskCreate>
 800481c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d10b      	bne.n	800483c <xTimerCreateTimerTask+0x4c>
    __asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	603b      	str	r3, [r7, #0]
}
 8004836:	bf00      	nop
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <xTimerCreateTimerTask+0x48>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4619      	mov	r1, r3
 8004840:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8004844:	f7fd ff1c 	bl	8002680 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8004848:	687b      	ldr	r3, [r7, #4]
    }
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20001260 	.word	0x20001260
 8004858:	20001264 	.word	0x20001264
 800485c:	0800db68 	.word	0x0800db68
 8004860:	08004909 	.word	0x08004909

08004864 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004870:	e008      	b.n	8004884 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	4413      	add	r3, r2
 800487a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	699a      	ldr	r2, [r3, #24]
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	18d1      	adds	r1, r2, r3
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 f8dd 	bl	8004a50 <prvInsertTimerInActiveList>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d1ea      	bne.n	8004872 <prvReloadTimer+0xe>
        }
    }
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80048b2:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <prvProcessExpiredTimer+0x5c>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3304      	adds	r3, #4
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fa5b 	bl	8002d7c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80048d4:	683a      	ldr	r2, [r7, #0]
 80048d6:	6879      	ldr	r1, [r7, #4]
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff ffc3 	bl	8004864 <prvReloadTimer>
 80048de:	e008      	b.n	80048f2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048e6:	f023 0301 	bic.w	r3, r3, #1
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	4798      	blx	r3
    }
 80048fa:	bf00      	nop
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	20001258 	.word	0x20001258

08004908 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004910:	f107 0308 	add.w	r3, r7, #8
 8004914:	4618      	mov	r0, r3
 8004916:	f000 f859 	bl	80049cc <prvGetNextExpireTime>
 800491a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4619      	mov	r1, r3
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 f805 	bl	8004930 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004926:	f000 f8d5 	bl	8004ad4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800492a:	bf00      	nop
 800492c:	e7f0      	b.n	8004910 <prvTimerTask+0x8>
	...

08004930 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800493a:	f7ff f8c9 	bl	8003ad0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	4618      	mov	r0, r3
 8004944:	f000 f864 	bl	8004a10 <prvSampleTimeNow>
 8004948:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d130      	bne.n	80049b2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <prvProcessTimerOrBlockTask+0x3c>
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	429a      	cmp	r2, r3
 800495c:	d806      	bhi.n	800496c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800495e:	f7ff f8c5 	bl	8003aec <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004962:	68f9      	ldr	r1, [r7, #12]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff9f 	bl	80048a8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800496a:	e024      	b.n	80049b6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d008      	beq.n	8004984 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004972:	4b13      	ldr	r3, [pc, #76]	@ (80049c0 <prvProcessTimerOrBlockTask+0x90>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <prvProcessTimerOrBlockTask+0x50>
 800497c:	2301      	movs	r3, #1
 800497e:	e000      	b.n	8004982 <prvProcessTimerOrBlockTask+0x52>
 8004980:	2300      	movs	r3, #0
 8004982:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004984:	4b0f      	ldr	r3, [pc, #60]	@ (80049c4 <prvProcessTimerOrBlockTask+0x94>)
 8004986:	6818      	ldr	r0, [r3, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	4619      	mov	r1, r3
 8004992:	f7fe fd01 	bl	8003398 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004996:	f7ff f8a9 	bl	8003aec <xTaskResumeAll>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10a      	bne.n	80049b6 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 80049a0:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <prvProcessTimerOrBlockTask+0x98>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
    }
 80049b0:	e001      	b.n	80049b6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80049b2:	f7ff f89b 	bl	8003aec <xTaskResumeAll>
    }
 80049b6:	bf00      	nop
 80049b8:	3710      	adds	r7, #16
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	2000125c 	.word	0x2000125c
 80049c4:	20001260 	.word	0x20001260
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80049d4:	4b0d      	ldr	r3, [pc, #52]	@ (8004a0c <prvGetNextExpireTime+0x40>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <prvGetNextExpireTime+0x16>
 80049de:	2201      	movs	r2, #1
 80049e0:	e000      	b.n	80049e4 <prvGetNextExpireTime+0x18>
 80049e2:	2200      	movs	r2, #0
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d105      	bne.n	80049fc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f0:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <prvGetNextExpireTime+0x40>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	60fb      	str	r3, [r7, #12]
 80049fa:	e001      	b.n	8004a00 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80049fc:	2300      	movs	r3, #0
 80049fe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004a00:	68fb      	ldr	r3, [r7, #12]
    }
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bc80      	pop	{r7}
 8004a0a:	4770      	bx	lr
 8004a0c:	20001258 	.word	0x20001258

08004a10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8004a18:	f7ff f97a 	bl	8003d10 <xTaskGetTickCount>
 8004a1c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004a4c <prvSampleTimeNow+0x3c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d205      	bcs.n	8004a34 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004a28:	f000 f93c 	bl	8004ca4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e002      	b.n	8004a3a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004a3a:	4a04      	ldr	r2, [pc, #16]	@ (8004a4c <prvSampleTimeNow+0x3c>)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004a40:	68fb      	ldr	r3, [r7, #12]
    }
 8004a42:	4618      	mov	r0, r3
 8004a44:	3710      	adds	r7, #16
 8004a46:	46bd      	mov	sp, r7
 8004a48:	bd80      	pop	{r7, pc}
 8004a4a:	bf00      	nop
 8004a4c:	20001268 	.word	0x20001268

08004a50 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b086      	sub	sp, #24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
 8004a5c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d812      	bhi.n	8004a9c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	1ad2      	subs	r2, r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d302      	bcc.n	8004a8a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004a84:	2301      	movs	r3, #1
 8004a86:	617b      	str	r3, [r7, #20]
 8004a88:	e01b      	b.n	8004ac2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004a8a:	4b10      	ldr	r3, [pc, #64]	@ (8004acc <prvInsertTimerInActiveList+0x7c>)
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	3304      	adds	r3, #4
 8004a92:	4619      	mov	r1, r3
 8004a94:	4610      	mov	r0, r2
 8004a96:	f7fe f936 	bl	8002d06 <vListInsert>
 8004a9a:	e012      	b.n	8004ac2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d206      	bcs.n	8004ab2 <prvInsertTimerInActiveList+0x62>
 8004aa4:	68ba      	ldr	r2, [r7, #8]
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d302      	bcc.n	8004ab2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004aac:	2301      	movs	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e007      	b.n	8004ac2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <prvInsertTimerInActiveList+0x80>)
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f7fe f922 	bl	8002d06 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8004ac2:	697b      	ldr	r3, [r7, #20]
    }
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3718      	adds	r7, #24
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}
 8004acc:	2000125c 	.word	0x2000125c
 8004ad0:	20001258 	.word	0x20001258

08004ad4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b08a      	sub	sp, #40	@ 0x28
 8004ad8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8004ada:	1d3b      	adds	r3, r7, #4
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]
 8004ae0:	605a      	str	r2, [r3, #4]
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	60da      	str	r2, [r3, #12]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004ae6:	e0cb      	b.n	8004c80 <prvProcessReceivedCommands+0x1ac>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
            {
                /* Negative commands are pended function calls rather than timer
                 * commands. */
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	da19      	bge.n	8004b22 <prvProcessReceivedCommands+0x4e>
                {
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004aee:	1d3b      	adds	r3, r7, #4
 8004af0:	3304      	adds	r3, #4
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* The timer uses the xCallbackParameters member to request a
                     * callback be executed.  Check the callback is not NULL. */
                    configASSERT( pxCallback );
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10b      	bne.n	8004b12 <prvProcessReceivedCommands+0x3e>
    __asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	61bb      	str	r3, [r7, #24]
}
 8004b0c:	bf00      	nop
 8004b0e:	bf00      	nop
 8004b10:	e7fd      	b.n	8004b0e <prvProcessReceivedCommands+0x3a>

                    /* Call the function. */
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b18:	6850      	ldr	r0, [r2, #4]
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1c:	6892      	ldr	r2, [r2, #8]
 8004b1e:	4611      	mov	r1, r2
 8004b20:	4798      	blx	r3
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	f2c0 80ab 	blt.w	8004c80 <prvProcessReceivedCommands+0x1ac>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	623b      	str	r3, [r7, #32]

                if( pxTimer != NULL )
 8004b2e:	6a3b      	ldr	r3, [r7, #32]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80a5 	beq.w	8004c80 <prvProcessReceivedCommands+0x1ac>
                {
                    if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8004b36:	6a3b      	ldr	r3, [r7, #32]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <prvProcessReceivedCommands+0x74>
                    {
                        /* The timer is in a list, remove it. */
                        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	3304      	adds	r3, #4
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe f91a 	bl	8002d7c <uxListRemove>
                     *  it must be present in the function call.  prvSampleTimeNow() must be
                     *  called after the message is received from xTimerQueue so there is no
                     *  possibility of a higher priority task adding a message to the message
                     *  queue with a time that is ahead of the timer daemon task (because it
                     *  pre-empted the timer daemon task after the xTimeNow value was set). */
                    xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004b48:	463b      	mov	r3, r7
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7ff ff60 	bl	8004a10 <prvSampleTimeNow>
 8004b50:	61f8      	str	r0, [r7, #28]

                    switch( xMessage.xMessageID )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	f200 808f 	bhi.w	8004c7a <prvProcessReceivedCommands+0x1a6>
 8004b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b64 <prvProcessReceivedCommands+0x90>)
 8004b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b62:	bf00      	nop
 8004b64:	08004b89 	.word	0x08004b89
 8004b68:	08004b89 	.word	0x08004b89
 8004b6c:	08004bf1 	.word	0x08004bf1
 8004b70:	08004c05 	.word	0x08004c05
 8004b74:	08004c51 	.word	0x08004c51
 8004b78:	08004b89 	.word	0x08004b89
 8004b7c:	08004b89 	.word	0x08004b89
 8004b80:	08004bf1 	.word	0x08004bf1
 8004b84:	08004c05 	.word	0x08004c05
                        case tmrCOMMAND_START:
                        case tmrCOMMAND_START_FROM_ISR:
                        case tmrCOMMAND_RESET:
                        case tmrCOMMAND_RESET_FROM_ISR:
                            /* Start or restart a timer. */
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004b88:	6a3b      	ldr	r3, [r7, #32]
 8004b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	6a3b      	ldr	r3, [r7, #32]
 8004b96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                            if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	18d1      	adds	r1, r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	6a38      	ldr	r0, [r7, #32]
 8004ba8:	f7ff ff52 	bl	8004a50 <prvInsertTimerInActiveList>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d065      	beq.n	8004c7e <prvProcessReceivedCommands+0x1aa>
                            {
                                /* The timer expired before it was added to the active
                                 * timer list.  Process it now. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bb8:	f003 0304 	and.w	r3, r3, #4
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d009      	beq.n	8004bd4 <prvProcessReceivedCommands+0x100>
                                {
                                    prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	699b      	ldr	r3, [r3, #24]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	69fa      	ldr	r2, [r7, #28]
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6a38      	ldr	r0, [r7, #32]
 8004bce:	f7ff fe49 	bl	8004864 <prvReloadTimer>
 8004bd2:	e008      	b.n	8004be6 <prvProcessReceivedCommands+0x112>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                                }

                                /* Call the timer callback. */
                                traceTIMER_EXPIRED( pxTimer );
                                pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004be6:	6a3b      	ldr	r3, [r7, #32]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	6a38      	ldr	r0, [r7, #32]
 8004bec:	4798      	blx	r3
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            break;
 8004bee:	e046      	b.n	8004c7e <prvProcessReceivedCommands+0x1aa>

                        case tmrCOMMAND_STOP:
                        case tmrCOMMAND_STOP_FROM_ISR:
                            /* The timer has already been removed from the active list. */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004bf6:	f023 0301 	bic.w	r3, r3, #1
 8004bfa:	b2da      	uxtb	r2, r3
 8004bfc:	6a3b      	ldr	r3, [r7, #32]
 8004bfe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 8004c02:	e03d      	b.n	8004c80 <prvProcessReceivedCommands+0x1ac>

                        case tmrCOMMAND_CHANGE_PERIOD:
                        case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                            pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c0a:	f043 0301 	orr.w	r3, r3, #1
 8004c0e:	b2da      	uxtb	r2, r3
 8004c10:	6a3b      	ldr	r3, [r7, #32]
 8004c12:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004c16:	68ba      	ldr	r2, [r7, #8]
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	619a      	str	r2, [r3, #24]
                            configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10b      	bne.n	8004c3c <prvProcessReceivedCommands+0x168>
    __asm volatile
 8004c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c28:	f383 8811 	msr	BASEPRI, r3
 8004c2c:	f3bf 8f6f 	isb	sy
 8004c30:	f3bf 8f4f 	dsb	sy
 8004c34:	617b      	str	r3, [r7, #20]
}
 8004c36:	bf00      	nop
 8004c38:	bf00      	nop
 8004c3a:	e7fd      	b.n	8004c38 <prvProcessReceivedCommands+0x164>
                             * be longer or shorter than the old one.  The command time is
                             * therefore set to the current time, and as the period cannot
                             * be zero the next expiry time can only be in the future,
                             * meaning (unlike for the xTimerStart() case above) there is
                             * no fail case that needs to be handled here. */
                            ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	699a      	ldr	r2, [r3, #24]
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	18d1      	adds	r1, r2, r3
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	69fa      	ldr	r2, [r7, #28]
 8004c48:	6a38      	ldr	r0, [r7, #32]
 8004c4a:	f7ff ff01 	bl	8004a50 <prvInsertTimerInActiveList>
                            break;
 8004c4e:	e017      	b.n	8004c80 <prvProcessReceivedCommands+0x1ac>
                            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <prvProcessReceivedCommands+0x192>
                                {
                                    vPortFree( pxTimer );
 8004c5e:	6a38      	ldr	r0, [r7, #32]
 8004c60:	f000 fbfa 	bl	8005458 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                            }
                            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                            break;
 8004c64:	e00c      	b.n	8004c80 <prvProcessReceivedCommands+0x1ac>
                                    pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            break;
 8004c78:	e002      	b.n	8004c80 <prvProcessReceivedCommands+0x1ac>

                        default:
                            /* Don't expect to get here. */
                            break;
 8004c7a:	bf00      	nop
 8004c7c:	e000      	b.n	8004c80 <prvProcessReceivedCommands+0x1ac>
                            break;
 8004c7e:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8004c80:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <prvProcessReceivedCommands+0x1cc>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	1d39      	adds	r1, r7, #4
 8004c86:	2200      	movs	r2, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f7fe f9b9 	bl	8003000 <xQueueReceive>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f47f af29 	bne.w	8004ae8 <prvProcessReceivedCommands+0x14>
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
    }
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	3728      	adds	r7, #40	@ 0x28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20001260 	.word	0x20001260

08004ca4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004caa:	e009      	b.n	8004cc0 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004cac:	4b0e      	ldr	r3, [pc, #56]	@ (8004ce8 <prvSwitchTimerLists+0x44>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004cb6:	f04f 31ff 	mov.w	r1, #4294967295
 8004cba:	6838      	ldr	r0, [r7, #0]
 8004cbc:	f7ff fdf4 	bl	80048a8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004cc0:	4b09      	ldr	r3, [pc, #36]	@ (8004ce8 <prvSwitchTimerLists+0x44>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1f0      	bne.n	8004cac <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004cca:	4b07      	ldr	r3, [pc, #28]	@ (8004ce8 <prvSwitchTimerLists+0x44>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004cd0:	4b06      	ldr	r3, [pc, #24]	@ (8004cec <prvSwitchTimerLists+0x48>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a04      	ldr	r2, [pc, #16]	@ (8004ce8 <prvSwitchTimerLists+0x44>)
 8004cd6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004cd8:	4a04      	ldr	r2, [pc, #16]	@ (8004cec <prvSwitchTimerLists+0x48>)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6013      	str	r3, [r2, #0]
    }
 8004cde:	bf00      	nop
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20001258 	.word	0x20001258
 8004cec:	2000125c 	.word	0x2000125c

08004cf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004cf4:	f000 f96e 	bl	8004fd4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004cf8:	4b12      	ldr	r3, [pc, #72]	@ (8004d44 <prvCheckForValidListAndQueue+0x54>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d11d      	bne.n	8004d3c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004d00:	4811      	ldr	r0, [pc, #68]	@ (8004d48 <prvCheckForValidListAndQueue+0x58>)
 8004d02:	f7fd ffa9 	bl	8002c58 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004d06:	4811      	ldr	r0, [pc, #68]	@ (8004d4c <prvCheckForValidListAndQueue+0x5c>)
 8004d08:	f7fd ffa6 	bl	8002c58 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004d0c:	4b10      	ldr	r3, [pc, #64]	@ (8004d50 <prvCheckForValidListAndQueue+0x60>)
 8004d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8004d48 <prvCheckForValidListAndQueue+0x58>)
 8004d10:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004d12:	4b10      	ldr	r3, [pc, #64]	@ (8004d54 <prvCheckForValidListAndQueue+0x64>)
 8004d14:	4a0d      	ldr	r2, [pc, #52]	@ (8004d4c <prvCheckForValidListAndQueue+0x5c>)
 8004d16:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ) );
 8004d18:	2200      	movs	r2, #0
 8004d1a:	2110      	movs	r1, #16
 8004d1c:	200a      	movs	r0, #10
 8004d1e:	f7fe f8f3 	bl	8002f08 <xQueueGenericCreate>
 8004d22:	4603      	mov	r3, r0
 8004d24:	4a07      	ldr	r2, [pc, #28]	@ (8004d44 <prvCheckForValidListAndQueue+0x54>)
 8004d26:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004d28:	4b06      	ldr	r3, [pc, #24]	@ (8004d44 <prvCheckForValidListAndQueue+0x54>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004d30:	4b04      	ldr	r3, [pc, #16]	@ (8004d44 <prvCheckForValidListAndQueue+0x54>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4908      	ldr	r1, [pc, #32]	@ (8004d58 <prvCheckForValidListAndQueue+0x68>)
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fade 	bl	80032f8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d3c:	f000 f97a 	bl	8005034 <vPortExitCritical>
    }
 8004d40:	bf00      	nop
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	20001260 	.word	0x20001260
 8004d48:	20001230 	.word	0x20001230
 8004d4c:	20001244 	.word	0x20001244
 8004d50:	20001258 	.word	0x20001258
 8004d54:	2000125c 	.word	0x2000125c
 8004d58:	0800db70 	.word	0x0800db70

08004d5c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	3b04      	subs	r3, #4
 8004d6c:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d74:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3b04      	subs	r3, #4
 8004d7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f023 0201 	bic.w	r2, r3, #1
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	3b04      	subs	r3, #4
 8004d8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004d8c:	4a08      	ldr	r2, [pc, #32]	@ (8004db0 <pxPortInitialiseStack+0x54>)
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	3b14      	subs	r3, #20
 8004d96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	3b20      	subs	r3, #32
 8004da2:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004da4:	68fb      	ldr	r3, [r7, #12]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bc80      	pop	{r7}
 8004dae:	4770      	bx	lr
 8004db0:	08004db5 	.word	0x08004db5

08004db4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004dbe:	4b12      	ldr	r3, [pc, #72]	@ (8004e08 <prvTaskExitError+0x54>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc6:	d00b      	beq.n	8004de0 <prvTaskExitError+0x2c>
    __asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	60fb      	str	r3, [r7, #12]
}
 8004dda:	bf00      	nop
 8004ddc:	bf00      	nop
 8004dde:	e7fd      	b.n	8004ddc <prvTaskExitError+0x28>
    __asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	60bb      	str	r3, [r7, #8]
}
 8004df2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004df4:	bf00      	nop
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d0fc      	beq.n	8004df6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004dfc:	bf00      	nop
 8004dfe:	bf00      	nop
 8004e00:	3714      	adds	r7, #20
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bc80      	pop	{r7}
 8004e06:	4770      	bx	lr
 8004e08:	20000004 	.word	0x20000004

08004e0c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004e0c:	4b07      	ldr	r3, [pc, #28]	@ (8004e2c <SVC_Handler+0x20>)
 8004e0e:	6819      	ldr	r1, [r3, #0]
 8004e10:	6808      	ldr	r0, [r1, #0]
 8004e12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e16:	f380 8809 	msr	PSP, r0
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f04f 0000 	mov.w	r0, #0
 8004e22:	f380 8811 	msr	BASEPRI, r0
 8004e26:	f04e 0e0d 	orr.w	lr, lr, #13
 8004e2a:	4770      	bx	lr
 8004e2c:	20001124 	.word	0x20001124
        "   orr r14, #0xd                   \n"
        "   bx r14                          \n"
        "                                   \n"
        "   .ltorg                          \n"
        );
}
 8004e30:	bf00      	nop
 8004e32:	bf00      	nop

08004e34 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004e34:	4806      	ldr	r0, [pc, #24]	@ (8004e50 <prvPortStartFirstTask+0x1c>)
 8004e36:	6800      	ldr	r0, [r0, #0]
 8004e38:	6800      	ldr	r0, [r0, #0]
 8004e3a:	f380 8808 	msr	MSP, r0
 8004e3e:	b662      	cpsie	i
 8004e40:	b661      	cpsie	f
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	df00      	svc	0
 8004e4c:	bf00      	nop
 8004e4e:	0000      	.short	0x0000
 8004e50:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004e54:	bf00      	nop
 8004e56:	bf00      	nop

08004e58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	@ 0x28
 8004e5c:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8004e5e:	4b54      	ldr	r3, [pc, #336]	@ (8004fb0 <xPortStartScheduler+0x158>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.freertos.org/Why-FreeRTOS/FAQs.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e66:	332c      	adds	r3, #44	@ 0x2c
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a52      	ldr	r2, [pc, #328]	@ (8004fb4 <xPortStartScheduler+0x15c>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00b      	beq.n	8004e88 <xPortStartScheduler+0x30>
    __asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	61fb      	str	r3, [r7, #28]
}
 8004e82:	bf00      	nop
 8004e84:	bf00      	nop
 8004e86:	e7fd      	b.n	8004e84 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8a:	3338      	adds	r3, #56	@ 0x38
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8004fb8 <xPortStartScheduler+0x160>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d00b      	beq.n	8004eac <xPortStartScheduler+0x54>
    __asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	61bb      	str	r3, [r7, #24]
}
 8004ea6:	bf00      	nop
 8004ea8:	bf00      	nop
 8004eaa:	e7fd      	b.n	8004ea8 <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004eb0:	4b42      	ldr	r3, [pc, #264]	@ (8004fbc <xPortStartScheduler+0x164>)
 8004eb2:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ebc:	6a3b      	ldr	r3, [r7, #32]
 8004ebe:	22ff      	movs	r2, #255	@ 0xff
 8004ec0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ec2:	6a3b      	ldr	r3, [r7, #32]
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8004fc0 <xPortStartScheduler+0x168>)
 8004ed6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8004ed8:	4b39      	ldr	r3, [pc, #228]	@ (8004fc0 <xPortStartScheduler+0x168>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d10b      	bne.n	8004ef8 <xPortStartScheduler+0xa0>
    __asm volatile
 8004ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee4:	f383 8811 	msr	BASEPRI, r3
 8004ee8:	f3bf 8f6f 	isb	sy
 8004eec:	f3bf 8f4f 	dsb	sy
 8004ef0:	617b      	str	r3, [r7, #20]
}
 8004ef2:	bf00      	nop
 8004ef4:	bf00      	nop
 8004ef6:	e7fd      	b.n	8004ef4 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	43db      	mvns	r3, r3
 8004efe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d013      	beq.n	8004f2e <xPortStartScheduler+0xd6>
    __asm volatile
 8004f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0a:	f383 8811 	msr	BASEPRI, r3
 8004f0e:	f3bf 8f6f 	isb	sy
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	613b      	str	r3, [r7, #16]
}
 8004f18:	bf00      	nop
 8004f1a:	bf00      	nop
 8004f1c:	e7fd      	b.n	8004f1a <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	3301      	adds	r3, #1
 8004f22:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f36:	2b80      	cmp	r3, #128	@ 0x80
 8004f38:	d0f1      	beq.n	8004f1e <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d103      	bne.n	8004f48 <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004f40:	4b20      	ldr	r3, [pc, #128]	@ (8004fc4 <xPortStartScheduler+0x16c>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	e004      	b.n	8004f52 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f1c3 0307 	rsb	r3, r3, #7
 8004f4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc4 <xPortStartScheduler+0x16c>)
 8004f50:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004f52:	4b1c      	ldr	r3, [pc, #112]	@ (8004fc4 <xPortStartScheduler+0x16c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc4 <xPortStartScheduler+0x16c>)
 8004f5a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f5c:	4b19      	ldr	r3, [pc, #100]	@ (8004fc4 <xPortStartScheduler+0x16c>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f64:	4a17      	ldr	r2, [pc, #92]	@ (8004fc4 <xPortStartScheduler+0x16c>)
 8004f66:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004f70:	4b15      	ldr	r3, [pc, #84]	@ (8004fc8 <xPortStartScheduler+0x170>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a14      	ldr	r2, [pc, #80]	@ (8004fc8 <xPortStartScheduler+0x170>)
 8004f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004f7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004f7c:	4b12      	ldr	r3, [pc, #72]	@ (8004fc8 <xPortStartScheduler+0x170>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a11      	ldr	r2, [pc, #68]	@ (8004fc8 <xPortStartScheduler+0x170>)
 8004f82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004f86:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004f88:	4b10      	ldr	r3, [pc, #64]	@ (8004fcc <xPortStartScheduler+0x174>)
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004f8e:	f000 f8c9 	bl	8005124 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004f92:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd0 <xPortStartScheduler+0x178>)
 8004f94:	2200      	movs	r2, #0
 8004f96:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004f98:	f7ff ff4c 	bl	8004e34 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004f9c:	f7ff f802 	bl	8003fa4 <vTaskSwitchContext>
    prvTaskExitError();
 8004fa0:	f7ff ff08 	bl	8004db4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3728      	adds	r7, #40	@ 0x28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	e000ed08 	.word	0xe000ed08
 8004fb4:	08004e0d 	.word	0x08004e0d
 8004fb8:	08005089 	.word	0x08005089
 8004fbc:	e000e400 	.word	0xe000e400
 8004fc0:	2000126c 	.word	0x2000126c
 8004fc4:	20001270 	.word	0x20001270
 8004fc8:	e000ed20 	.word	0xe000ed20
 8004fcc:	e000ed1c 	.word	0xe000ed1c
 8004fd0:	20000004 	.word	0x20000004

08004fd4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b083      	sub	sp, #12
 8004fd8:	af00      	add	r7, sp, #0
    __asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	607b      	str	r3, [r7, #4]
}
 8004fec:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004fee:	4b0f      	ldr	r3, [pc, #60]	@ (800502c <vPortEnterCritical+0x58>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	4a0d      	ldr	r2, [pc, #52]	@ (800502c <vPortEnterCritical+0x58>)
 8004ff6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800502c <vPortEnterCritical+0x58>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d110      	bne.n	8005022 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005000:	4b0b      	ldr	r3, [pc, #44]	@ (8005030 <vPortEnterCritical+0x5c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00b      	beq.n	8005022 <vPortEnterCritical+0x4e>
    __asm volatile
 800500a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	603b      	str	r3, [r7, #0]
}
 800501c:	bf00      	nop
 800501e:	bf00      	nop
 8005020:	e7fd      	b.n	800501e <vPortEnterCritical+0x4a>
    }
}
 8005022:	bf00      	nop
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr
 800502c:	20000004 	.word	0x20000004
 8005030:	e000ed04 	.word	0xe000ed04

08005034 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b083      	sub	sp, #12
 8005038:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800503a:	4b12      	ldr	r3, [pc, #72]	@ (8005084 <vPortExitCritical+0x50>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10b      	bne.n	800505a <vPortExitCritical+0x26>
    __asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	607b      	str	r3, [r7, #4]
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	e7fd      	b.n	8005056 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800505a:	4b0a      	ldr	r3, [pc, #40]	@ (8005084 <vPortExitCritical+0x50>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3b01      	subs	r3, #1
 8005060:	4a08      	ldr	r2, [pc, #32]	@ (8005084 <vPortExitCritical+0x50>)
 8005062:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005064:	4b07      	ldr	r3, [pc, #28]	@ (8005084 <vPortExitCritical+0x50>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d105      	bne.n	8005078 <vPortExitCritical+0x44>
 800506c:	2300      	movs	r3, #0
 800506e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8005076:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	bc80      	pop	{r7}
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	20000004 	.word	0x20000004

08005088 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005088:	f3ef 8009 	mrs	r0, PSP
 800508c:	f3bf 8f6f 	isb	sy
 8005090:	4b0d      	ldr	r3, [pc, #52]	@ (80050c8 <PendSV_Handler+0x40>)
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005098:	6010      	str	r0, [r2, #0]
 800509a:	e92d 4008 	stmdb	sp!, {r3, lr}
 800509e:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80050a2:	f380 8811 	msr	BASEPRI, r0
 80050a6:	f7fe ff7d 	bl	8003fa4 <vTaskSwitchContext>
 80050aa:	f04f 0000 	mov.w	r0, #0
 80050ae:	f380 8811 	msr	BASEPRI, r0
 80050b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80050b6:	6819      	ldr	r1, [r3, #0]
 80050b8:	6808      	ldr	r0, [r1, #0]
 80050ba:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80050be:	f380 8809 	msr	PSP, r0
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	4770      	bx	lr
 80050c8:	20001124 	.word	0x20001124
        "   bx r14                              \n"
        "                                       \n"
        "   .ltorg                              \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80050cc:	bf00      	nop
 80050ce:	bf00      	nop

080050d0 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
    __asm volatile
 80050d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050da:	f383 8811 	msr	BASEPRI, r3
 80050de:	f3bf 8f6f 	isb	sy
 80050e2:	f3bf 8f4f 	dsb	sy
 80050e6:	607b      	str	r3, [r7, #4]
}
 80050e8:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80050ea:	f7fd fa13 	bl	8002514 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80050ee:	f7fe fe37 	bl	8003d60 <xTaskIncrementTick>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d006      	beq.n	8005106 <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80050f8:	f7fd fa6a 	bl	80025d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050fc:	4b08      	ldr	r3, [pc, #32]	@ (8005120 <SysTick_Handler+0x50>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	e001      	b.n	800510a <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8005106:	f7fd fa47 	bl	8002598 <SEGGER_SYSVIEW_RecordExitISR>
 800510a:	2300      	movs	r3, #0
 800510c:	603b      	str	r3, [r7, #0]
    __asm volatile
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	f383 8811 	msr	BASEPRI, r3
}
 8005114:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8005116:	bf00      	nop
 8005118:	3708      	adds	r7, #8
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	e000ed04 	.word	0xe000ed04

08005124 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005128:	4b0a      	ldr	r3, [pc, #40]	@ (8005154 <vPortSetupTimerInterrupt+0x30>)
 800512a:	2200      	movs	r2, #0
 800512c:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800512e:	4b0a      	ldr	r3, [pc, #40]	@ (8005158 <vPortSetupTimerInterrupt+0x34>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005134:	4b09      	ldr	r3, [pc, #36]	@ (800515c <vPortSetupTimerInterrupt+0x38>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a09      	ldr	r2, [pc, #36]	@ (8005160 <vPortSetupTimerInterrupt+0x3c>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	099b      	lsrs	r3, r3, #6
 8005140:	4a08      	ldr	r2, [pc, #32]	@ (8005164 <vPortSetupTimerInterrupt+0x40>)
 8005142:	3b01      	subs	r3, #1
 8005144:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005146:	4b03      	ldr	r3, [pc, #12]	@ (8005154 <vPortSetupTimerInterrupt+0x30>)
 8005148:	2207      	movs	r2, #7
 800514a:	601a      	str	r2, [r3, #0]
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	bc80      	pop	{r7}
 8005152:	4770      	bx	lr
 8005154:	e000e010 	.word	0xe000e010
 8005158:	e000e018 	.word	0xe000e018
 800515c:	20000024 	.word	0x20000024
 8005160:	10624dd3 	.word	0x10624dd3
 8005164:	e000e014 	.word	0xe000e014

08005168 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800516e:	f3ef 8305 	mrs	r3, IPSR
 8005172:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b0f      	cmp	r3, #15
 8005178:	d915      	bls.n	80051a6 <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800517a:	4a17      	ldr	r2, [pc, #92]	@ (80051d8 <vPortValidateInterruptPriority+0x70>)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4413      	add	r3, r2
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.freertos.org/Why-FreeRTOS/FAQs */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005184:	4b15      	ldr	r3, [pc, #84]	@ (80051dc <vPortValidateInterruptPriority+0x74>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	7afa      	ldrb	r2, [r7, #11]
 800518a:	429a      	cmp	r2, r3
 800518c:	d20b      	bcs.n	80051a6 <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 800518e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	607b      	str	r3, [r7, #4]
}
 80051a0:	bf00      	nop
 80051a2:	bf00      	nop
 80051a4:	e7fd      	b.n	80051a2 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80051a6:	4b0e      	ldr	r3, [pc, #56]	@ (80051e0 <vPortValidateInterruptPriority+0x78>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80051ae:	4b0d      	ldr	r3, [pc, #52]	@ (80051e4 <vPortValidateInterruptPriority+0x7c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d90b      	bls.n	80051ce <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	603b      	str	r3, [r7, #0]
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	e7fd      	b.n	80051ca <vPortValidateInterruptPriority+0x62>
    }
 80051ce:	bf00      	nop
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr
 80051d8:	e000e3f0 	.word	0xe000e3f0
 80051dc:	2000126c 	.word	0x2000126c
 80051e0:	e000ed0c 	.word	0xe000ed0c
 80051e4:	20001270 	.word	0x20001270

080051e8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b08e      	sub	sp, #56	@ 0x38
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;
    size_t xAllocatedBlockSize = 0;
 80051f4:	2300      	movs	r3, #0
 80051f6:	62bb      	str	r3, [r7, #40]	@ 0x28

    if( xWantedSize > 0 )
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d022      	beq.n	8005244 <pvPortMalloc+0x5c>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80051fe:	2308      	movs	r3, #8
 8005200:	43db      	mvns	r3, r3
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d81b      	bhi.n	8005240 <pvPortMalloc+0x58>
        {
            xWantedSize += xHeapStructSize;
 8005208:	2208      	movs	r2, #8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4413      	add	r3, r2
 800520e:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f003 0307 	and.w	r3, r3, #7
 8005216:	2b00      	cmp	r3, #0
 8005218:	d014      	beq.n	8005244 <pvPortMalloc+0x5c>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f003 0307 	and.w	r3, r3, #7
 8005220:	f1c3 0308 	rsb	r3, r3, #8
 8005224:	627b      	str	r3, [r7, #36]	@ 0x24

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8005226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005228:	43db      	mvns	r3, r3
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	429a      	cmp	r2, r3
 800522e:	d804      	bhi.n	800523a <pvPortMalloc+0x52>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	4413      	add	r3, r2
 8005236:	607b      	str	r3, [r7, #4]
 8005238:	e004      	b.n	8005244 <pvPortMalloc+0x5c>
                }
                else
                {
                    xWantedSize = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	e001      	b.n	8005244 <pvPortMalloc+0x5c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8005244:	f7fe fc44 	bl	8003ad0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005248:	4b7c      	ldr	r3, [pc, #496]	@ (800543c <pvPortMalloc+0x254>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <pvPortMalloc+0x6c>
        {
            prvHeapInit();
 8005250:	f000 f97c 	bl	800554c <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f2c0 80d7 	blt.w	800540a <pvPortMalloc+0x222>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80d3 	beq.w	800540a <pvPortMalloc+0x222>
 8005264:	4b76      	ldr	r3, [pc, #472]	@ (8005440 <pvPortMalloc+0x258>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	429a      	cmp	r2, r3
 800526c:	f200 80cd 	bhi.w	800540a <pvPortMalloc+0x222>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005270:	4b74      	ldr	r3, [pc, #464]	@ (8005444 <pvPortMalloc+0x25c>)
 8005272:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8005274:	4b73      	ldr	r3, [pc, #460]	@ (8005444 <pvPortMalloc+0x25c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800527a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800527c:	4a72      	ldr	r2, [pc, #456]	@ (8005448 <pvPortMalloc+0x260>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d305      	bcc.n	800528e <pvPortMalloc+0xa6>
 8005282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005284:	4a71      	ldr	r2, [pc, #452]	@ (800544c <pvPortMalloc+0x264>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d801      	bhi.n	800528e <pvPortMalloc+0xa6>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <pvPortMalloc+0xa8>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d129      	bne.n	80052e8 <pvPortMalloc+0x100>
    __asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	61fb      	str	r3, [r7, #28]
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	e7fd      	b.n	80052a8 <pvPortMalloc+0xc0>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80052ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ae:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80052b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80052b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b8:	4a63      	ldr	r2, [pc, #396]	@ (8005448 <pvPortMalloc+0x260>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d305      	bcc.n	80052ca <pvPortMalloc+0xe2>
 80052be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c0:	4a62      	ldr	r2, [pc, #392]	@ (800544c <pvPortMalloc+0x264>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d801      	bhi.n	80052ca <pvPortMalloc+0xe2>
 80052c6:	2301      	movs	r3, #1
 80052c8:	e000      	b.n	80052cc <pvPortMalloc+0xe4>
 80052ca:	2300      	movs	r3, #0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d10b      	bne.n	80052e8 <pvPortMalloc+0x100>
    __asm volatile
 80052d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d4:	f383 8811 	msr	BASEPRI, r3
 80052d8:	f3bf 8f6f 	isb	sy
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	61bb      	str	r3, [r7, #24]
}
 80052e2:	bf00      	nop
 80052e4:	bf00      	nop
 80052e6:	e7fd      	b.n	80052e4 <pvPortMalloc+0xfc>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80052e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d903      	bls.n	80052fa <pvPortMalloc+0x112>
 80052f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d1d8      	bne.n	80052ac <pvPortMalloc+0xc4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80052fa:	4b50      	ldr	r3, [pc, #320]	@ (800543c <pvPortMalloc+0x254>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005300:	429a      	cmp	r2, r3
 8005302:	f000 8082 	beq.w	800540a <pvPortMalloc+0x222>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2208      	movs	r2, #8
 800530c:	4413      	add	r3, r2
 800530e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8005310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005312:	4a4d      	ldr	r2, [pc, #308]	@ (8005448 <pvPortMalloc+0x260>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d305      	bcc.n	8005324 <pvPortMalloc+0x13c>
 8005318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800531a:	4a4c      	ldr	r2, [pc, #304]	@ (800544c <pvPortMalloc+0x264>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d801      	bhi.n	8005324 <pvPortMalloc+0x13c>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <pvPortMalloc+0x13e>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <pvPortMalloc+0x15a>
    __asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	617b      	str	r3, [r7, #20]
}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	e7fd      	b.n	800533e <pvPortMalloc+0x156>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005342:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005348:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800534a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d90b      	bls.n	800536c <pvPortMalloc+0x184>
    __asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	613b      	str	r3, [r7, #16]
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <pvPortMalloc+0x180>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800536c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800536e:	685a      	ldr	r2, [r3, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	1ad2      	subs	r2, r2, r3
 8005374:	2308      	movs	r3, #8
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	429a      	cmp	r2, r3
 800537a:	d924      	bls.n	80053c6 <pvPortMalloc+0x1de>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800537c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4413      	add	r3, r2
 8005382:	623b      	str	r3, [r7, #32]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	f003 0307 	and.w	r3, r3, #7
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00b      	beq.n	80053a6 <pvPortMalloc+0x1be>
    __asm volatile
 800538e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005392:	f383 8811 	msr	BASEPRI, r3
 8005396:	f3bf 8f6f 	isb	sy
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	60fb      	str	r3, [r7, #12]
}
 80053a0:	bf00      	nop
 80053a2:	bf00      	nop
 80053a4:	e7fd      	b.n	80053a2 <pvPortMalloc+0x1ba>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	1ad2      	subs	r2, r2, r3
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80053b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b4:	687a      	ldr	r2, [r7, #4]
 80053b6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80053b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80053c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c2:	6a3a      	ldr	r2, [r7, #32]
 80053c4:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80053c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005440 <pvPortMalloc+0x258>)
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005440 <pvPortMalloc+0x258>)
 80053d2:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80053d4:	4b1a      	ldr	r3, [pc, #104]	@ (8005440 <pvPortMalloc+0x258>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005450 <pvPortMalloc+0x268>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d203      	bcs.n	80053e8 <pvPortMalloc+0x200>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80053e0:	4b17      	ldr	r3, [pc, #92]	@ (8005440 <pvPortMalloc+0x258>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005450 <pvPortMalloc+0x268>)
 80053e6:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xAllocatedBlockSize = pxBlock->xBlockSize;
 80053e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80053ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80053f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f8:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80053fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005400:	4b14      	ldr	r3, [pc, #80]	@ (8005454 <pvPortMalloc+0x26c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	3301      	adds	r3, #1
 8005406:	4a13      	ldr	r2, [pc, #76]	@ (8005454 <pvPortMalloc+0x26c>)
 8005408:	6013      	str	r3, [r2, #0]
        traceMALLOC( pvReturn, xAllocatedBlockSize );

        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xAllocatedBlockSize;
    }
    ( void ) xTaskResumeAll();
 800540a:	f7fe fb6f 	bl	8003aec <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800540e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005410:	f003 0307 	and.w	r3, r3, #7
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00b      	beq.n	8005430 <pvPortMalloc+0x248>
    __asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	60bb      	str	r3, [r7, #8]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <pvPortMalloc+0x244>
    return pvReturn;
 8005430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005432:	4618      	mov	r0, r3
 8005434:	3738      	adds	r7, #56	@ 0x38
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	2000427c 	.word	0x2000427c
 8005440:	20004280 	.word	0x20004280
 8005444:	20004274 	.word	0x20004274
 8005448:	20001274 	.word	0x20001274
 800544c:	20004273 	.word	0x20004273
 8005450:	20004284 	.word	0x20004284
 8005454:	20004288 	.word	0x20004288

08005458 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b088      	sub	sp, #32
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d064      	beq.n	8005534 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800546a:	2308      	movs	r3, #8
 800546c:	425b      	negs	r3, r3
 800546e:	69fa      	ldr	r2, [r7, #28]
 8005470:	4413      	add	r3, r2
 8005472:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	4a30      	ldr	r2, [pc, #192]	@ (800553c <vPortFree+0xe4>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d305      	bcc.n	800548c <vPortFree+0x34>
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	4a2f      	ldr	r2, [pc, #188]	@ (8005540 <vPortFree+0xe8>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d801      	bhi.n	800548c <vPortFree+0x34>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <vPortFree+0x36>
 800548c:	2300      	movs	r3, #0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <vPortFree+0x52>
    __asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	617b      	str	r3, [r7, #20]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	db0b      	blt.n	80054ca <vPortFree+0x72>
    __asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	613b      	str	r3, [r7, #16]
}
 80054c4:	bf00      	nop
 80054c6:	bf00      	nop
 80054c8:	e7fd      	b.n	80054c6 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) );
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00b      	beq.n	80054ea <vPortFree+0x92>
    __asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60fb      	str	r3, [r7, #12]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	0fdb      	lsrs	r3, r3, #31
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d01c      	beq.n	8005534 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == heapPROTECT_BLOCK_POINTER( NULL ) )
 80054fa:	69bb      	ldr	r3, [r7, #24]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d118      	bne.n	8005534 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800550a:	69bb      	ldr	r3, [r7, #24]
 800550c:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800550e:	f7fe fadf 	bl	8003ad0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	685a      	ldr	r2, [r3, #4]
 8005516:	4b0b      	ldr	r3, [pc, #44]	@ (8005544 <vPortFree+0xec>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4413      	add	r3, r2
 800551c:	4a09      	ldr	r2, [pc, #36]	@ (8005544 <vPortFree+0xec>)
 800551e:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005520:	69b8      	ldr	r0, [r7, #24]
 8005522:	f000 f86d 	bl	8005600 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005526:	4b08      	ldr	r3, [pc, #32]	@ (8005548 <vPortFree+0xf0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3301      	adds	r3, #1
 800552c:	4a06      	ldr	r2, [pc, #24]	@ (8005548 <vPortFree+0xf0>)
 800552e:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005530:	f7fe fadc 	bl	8003aec <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005534:	bf00      	nop
 8005536:	3720      	adds	r7, #32
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	20001274 	.word	0x20001274
 8005540:	20004273 	.word	0x20004273
 8005544:	20004280 	.word	0x20004280
 8005548:	2000428c 	.word	0x2000428c

0800554c <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005552:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005556:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8005558:	4b24      	ldr	r3, [pc, #144]	@ (80055ec <prvHeapInit+0xa0>)
 800555a:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00c      	beq.n	8005580 <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	3307      	adds	r3, #7
 800556a:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f023 0307 	bic.w	r3, r3, #7
 8005572:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	4a1c      	ldr	r2, [pc, #112]	@ (80055ec <prvHeapInit+0xa0>)
 800557c:	4413      	add	r3, r2
 800557e:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4a1b      	ldr	r2, [pc, #108]	@ (80055f0 <prvHeapInit+0xa4>)
 8005584:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005586:	4b1a      	ldr	r3, [pc, #104]	@ (80055f0 <prvHeapInit+0xa4>)
 8005588:	2200      	movs	r2, #0
 800558a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	4413      	add	r3, r2
 8005592:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005594:	2208      	movs	r2, #8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	1a9b      	subs	r3, r3, r2
 800559a:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f023 0307 	bic.w	r3, r3, #7
 80055a2:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a13      	ldr	r2, [pc, #76]	@ (80055f4 <prvHeapInit+0xa8>)
 80055a8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80055aa:	4b12      	ldr	r3, [pc, #72]	@ (80055f4 <prvHeapInit+0xa8>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2200      	movs	r2, #0
 80055b0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80055b2:	4b10      	ldr	r3, [pc, #64]	@ (80055f4 <prvHeapInit+0xa8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	1ad2      	subs	r2, r2, r3
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80055c8:	4b0a      	ldr	r3, [pc, #40]	@ (80055f4 <prvHeapInit+0xa8>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	4a08      	ldr	r2, [pc, #32]	@ (80055f8 <prvHeapInit+0xac>)
 80055d6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a07      	ldr	r2, [pc, #28]	@ (80055fc <prvHeapInit+0xb0>)
 80055de:	6013      	str	r3, [r2, #0]
}
 80055e0:	bf00      	nop
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bc80      	pop	{r7}
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20001274 	.word	0x20001274
 80055f0:	20004274 	.word	0x20004274
 80055f4:	2000427c 	.word	0x2000427c
 80055f8:	20004284 	.word	0x20004284
 80055fc:	20004280 	.word	0x20004280

08005600 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005608:	4b36      	ldr	r3, [pc, #216]	@ (80056e4 <prvInsertBlockIntoFreeList+0xe4>)
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e002      	b.n	8005614 <prvInsertBlockIntoFreeList+0x14>
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	429a      	cmp	r2, r3
 800561c:	d8f7      	bhi.n	800560e <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	4a30      	ldr	r2, [pc, #192]	@ (80056e4 <prvInsertBlockIntoFreeList+0xe4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d018      	beq.n	8005658 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	4a2f      	ldr	r2, [pc, #188]	@ (80056e8 <prvInsertBlockIntoFreeList+0xe8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d305      	bcc.n	800563a <prvInsertBlockIntoFreeList+0x3a>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	4a2e      	ldr	r2, [pc, #184]	@ (80056ec <prvInsertBlockIntoFreeList+0xec>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d801      	bhi.n	800563a <prvInsertBlockIntoFreeList+0x3a>
 8005636:	2301      	movs	r3, #1
 8005638:	e000      	b.n	800563c <prvInsertBlockIntoFreeList+0x3c>
 800563a:	2300      	movs	r3, #0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10b      	bne.n	8005658 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8005640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005644:	f383 8811 	msr	BASEPRI, r3
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	f3bf 8f4f 	dsb	sy
 8005650:	60fb      	str	r3, [r7, #12]
}
 8005652:	bf00      	nop
 8005654:	bf00      	nop
 8005656:	e7fd      	b.n	8005654 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4413      	add	r3, r2
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d108      	bne.n	800567c <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	441a      	add	r2, r3
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	441a      	add	r2, r3
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	429a      	cmp	r2, r3
 800568e:	d118      	bne.n	80056c2 <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	4b16      	ldr	r3, [pc, #88]	@ (80056f0 <prvInsertBlockIntoFreeList+0xf0>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d00d      	beq.n	80056b8 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	697b      	ldr	r3, [r7, #20]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	441a      	add	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e008      	b.n	80056ca <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80056b8:	4b0d      	ldr	r3, [pc, #52]	@ (80056f0 <prvInsertBlockIntoFreeList+0xf0>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e003      	b.n	80056ca <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d002      	beq.n	80056d8 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80056d8:	bf00      	nop
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bc80      	pop	{r7}
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20004274 	.word	0x20004274
 80056e8:	20001274 	.word	0x20001274
 80056ec:	20004273 	.word	0x20004273
 80056f0:	2000427c 	.word	0x2000427c

080056f4 <Kalman_getAngle>:

SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
//================================================================================
float Kalman_getAngle(Kalman_t *Kalman, float newAngle, float newRate, float dt) {
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b08b      	sub	sp, #44	@ 0x2c
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	603b      	str	r3, [r7, #0]
	/* ======= Bước 1: Dự đoán (Predict) ======= */
	Kalman->rate = newRate - Kalman->bias;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f7fb fa07 	bl	8000b1c <__aeabi_fsub>
 800570e:	4603      	mov	r3, r0
 8005710:	461a      	mov	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	609a      	str	r2, [r3, #8]
	Kalman->angle += dt * Kalman->rate;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681c      	ldr	r4, [r3, #0]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	6839      	ldr	r1, [r7, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f7fb fb05 	bl	8000d30 <__aeabi_fmul>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	4620      	mov	r0, r4
 800572c:	f7fb f9f8 	bl	8000b20 <__addsf3>
 8005730:	4603      	mov	r3, r0
 8005732:	461a      	mov	r2, r3
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	601a      	str	r2, [r3, #0]

	// Cập nhật ma trận sai số
	Kalman->P[0][0] += dt
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	68dc      	ldr	r4, [r3, #12]
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7fb faf4 	bl	8000d30 <__aeabi_fmul>
 8005748:	4603      	mov	r3, r0
 800574a:	461a      	mov	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	4619      	mov	r1, r3
 8005752:	4610      	mov	r0, r2
 8005754:	f7fb f9e2 	bl	8000b1c <__aeabi_fsub>
 8005758:	4603      	mov	r3, r0
 800575a:	461a      	mov	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	4619      	mov	r1, r3
 8005762:	4610      	mov	r0, r2
 8005764:	f7fb f9da 	bl	8000b1c <__aeabi_fsub>
 8005768:	4603      	mov	r3, r0
 800576a:	461a      	mov	r2, r3
					+ Q_angle);
 800576c:	4b6a      	ldr	r3, [pc, #424]	@ (8005918 <Kalman_getAngle+0x224>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4619      	mov	r1, r3
 8005772:	4610      	mov	r0, r2
 8005774:	f7fb f9d4 	bl	8000b20 <__addsf3>
 8005778:	4603      	mov	r3, r0
			* (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0]
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f7fb fad7 	bl	8000d30 <__aeabi_fmul>
 8005782:	4603      	mov	r3, r0
	Kalman->P[0][0] += dt
 8005784:	4619      	mov	r1, r3
 8005786:	4620      	mov	r0, r4
 8005788:	f7fb f9ca 	bl	8000b20 <__addsf3>
 800578c:	4603      	mov	r3, r0
 800578e:	461a      	mov	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	60da      	str	r2, [r3, #12]
	Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	691c      	ldr	r4, [r3, #16]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	699b      	ldr	r3, [r3, #24]
 800579c:	6839      	ldr	r1, [r7, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fb fac6 	bl	8000d30 <__aeabi_fmul>
 80057a4:	4603      	mov	r3, r0
 80057a6:	4619      	mov	r1, r3
 80057a8:	4620      	mov	r0, r4
 80057aa:	f7fb f9b7 	bl	8000b1c <__aeabi_fsub>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	611a      	str	r2, [r3, #16]
	Kalman->P[1][0] -= dt * Kalman->P[1][1];
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	695c      	ldr	r4, [r3, #20]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	699b      	ldr	r3, [r3, #24]
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fb fab5 	bl	8000d30 <__aeabi_fmul>
 80057c6:	4603      	mov	r3, r0
 80057c8:	4619      	mov	r1, r3
 80057ca:	4620      	mov	r0, r4
 80057cc:	f7fb f9a6 	bl	8000b1c <__aeabi_fsub>
 80057d0:	4603      	mov	r3, r0
 80057d2:	461a      	mov	r2, r3
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	615a      	str	r2, [r3, #20]
	Kalman->P[1][1] += Q_bias * dt;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	699c      	ldr	r4, [r3, #24]
 80057dc:	4b4f      	ldr	r3, [pc, #316]	@ (800591c <Kalman_getAngle+0x228>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fb faa4 	bl	8000d30 <__aeabi_fmul>
 80057e8:	4603      	mov	r3, r0
 80057ea:	4619      	mov	r1, r3
 80057ec:	4620      	mov	r0, r4
 80057ee:	f7fb f997 	bl	8000b20 <__addsf3>
 80057f2:	4603      	mov	r3, r0
 80057f4:	461a      	mov	r2, r3
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	619a      	str	r2, [r3, #24]

	/* ======= Bước 2: Cập nhật (Update) ======= */
	float S = Kalman->P[0][0] + R_measure; // Độ bất định đo lường
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4a48      	ldr	r2, [pc, #288]	@ (8005920 <Kalman_getAngle+0x22c>)
 8005800:	6812      	ldr	r2, [r2, #0]
 8005802:	4611      	mov	r1, r2
 8005804:	4618      	mov	r0, r3
 8005806:	f7fb f98b 	bl	8000b20 <__addsf3>
 800580a:	4603      	mov	r3, r0
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
	float K[2];                            // Kalman gain
	K[0] = Kalman->P[0][0] / S;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005814:	4618      	mov	r0, r3
 8005816:	f7fb fb3f 	bl	8000e98 <__aeabi_fdiv>
 800581a:	4603      	mov	r3, r0
 800581c:	613b      	str	r3, [r7, #16]
	K[1] = Kalman->P[1][0] / S;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	695b      	ldr	r3, [r3, #20]
 8005822:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005824:	4618      	mov	r0, r3
 8005826:	f7fb fb37 	bl	8000e98 <__aeabi_fdiv>
 800582a:	4603      	mov	r3, r0
 800582c:	617b      	str	r3, [r7, #20]

	float y = newAngle - Kalman->angle; // Sai số đo
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4619      	mov	r1, r3
 8005834:	68b8      	ldr	r0, [r7, #8]
 8005836:	f7fb f971 	bl	8000b1c <__aeabi_fsub>
 800583a:	4603      	mov	r3, r0
 800583c:	623b      	str	r3, [r7, #32]
	Kalman->angle += K[0] * y;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681c      	ldr	r4, [r3, #0]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6a39      	ldr	r1, [r7, #32]
 8005846:	4618      	mov	r0, r3
 8005848:	f7fb fa72 	bl	8000d30 <__aeabi_fmul>
 800584c:	4603      	mov	r3, r0
 800584e:	4619      	mov	r1, r3
 8005850:	4620      	mov	r0, r4
 8005852:	f7fb f965 	bl	8000b20 <__addsf3>
 8005856:	4603      	mov	r3, r0
 8005858:	461a      	mov	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	601a      	str	r2, [r3, #0]
	Kalman->bias += K[1] * y;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685c      	ldr	r4, [r3, #4]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	6a39      	ldr	r1, [r7, #32]
 8005866:	4618      	mov	r0, r3
 8005868:	f7fb fa62 	bl	8000d30 <__aeabi_fmul>
 800586c:	4603      	mov	r3, r0
 800586e:	4619      	mov	r1, r3
 8005870:	4620      	mov	r0, r4
 8005872:	f7fb f955 	bl	8000b20 <__addsf3>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]

	// Cập nhật ma trận covariance
	float P00_temp = Kalman->P[0][0];
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	61fb      	str	r3, [r7, #28]
	float P01_temp = Kalman->P[0][1];
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	61bb      	str	r3, [r7, #24]

	Kalman->P[0][0] -= K[0] * P00_temp;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	68dc      	ldr	r4, [r3, #12]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	69f9      	ldr	r1, [r7, #28]
 8005892:	4618      	mov	r0, r3
 8005894:	f7fb fa4c 	bl	8000d30 <__aeabi_fmul>
 8005898:	4603      	mov	r3, r0
 800589a:	4619      	mov	r1, r3
 800589c:	4620      	mov	r0, r4
 800589e:	f7fb f93d 	bl	8000b1c <__aeabi_fsub>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	60da      	str	r2, [r3, #12]
	Kalman->P[0][1] -= K[0] * P01_temp;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691c      	ldr	r4, [r3, #16]
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	69b9      	ldr	r1, [r7, #24]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fb fa3c 	bl	8000d30 <__aeabi_fmul>
 80058b8:	4603      	mov	r3, r0
 80058ba:	4619      	mov	r1, r3
 80058bc:	4620      	mov	r0, r4
 80058be:	f7fb f92d 	bl	8000b1c <__aeabi_fsub>
 80058c2:	4603      	mov	r3, r0
 80058c4:	461a      	mov	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	611a      	str	r2, [r3, #16]
	Kalman->P[1][0] -= K[1] * P00_temp;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	695c      	ldr	r4, [r3, #20]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	69f9      	ldr	r1, [r7, #28]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fb fa2c 	bl	8000d30 <__aeabi_fmul>
 80058d8:	4603      	mov	r3, r0
 80058da:	4619      	mov	r1, r3
 80058dc:	4620      	mov	r0, r4
 80058de:	f7fb f91d 	bl	8000b1c <__aeabi_fsub>
 80058e2:	4603      	mov	r3, r0
 80058e4:	461a      	mov	r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	615a      	str	r2, [r3, #20]
	Kalman->P[1][1] -= K[1] * P01_temp;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	699c      	ldr	r4, [r3, #24]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fb fa1c 	bl	8000d30 <__aeabi_fmul>
 80058f8:	4603      	mov	r3, r0
 80058fa:	4619      	mov	r1, r3
 80058fc:	4620      	mov	r0, r4
 80058fe:	f7fb f90d 	bl	8000b1c <__aeabi_fsub>
 8005902:	4603      	mov	r3, r0
 8005904:	461a      	mov	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	619a      	str	r2, [r3, #24]

	return Kalman->angle;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
}
 800590e:	4618      	mov	r0, r3
 8005910:	372c      	adds	r7, #44	@ 0x2c
 8005912:	46bd      	mov	sp, r7
 8005914:	bd90      	pop	{r4, r7, pc}
 8005916:	bf00      	nop
 8005918:	20000018 	.word	0x20000018
 800591c:	2000001c 	.word	0x2000001c
 8005920:	20000020 	.word	0x20000020

08005924 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800592a:	f001 fdf3 	bl	8007514 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800592e:	f000 f87d 	bl	8005a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005932:	f000 f953 	bl	8005bdc <MX_GPIO_Init>
  MX_I2C1_Init();
 8005936:	f000 f8bf 	bl	8005ab8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800593a:	f000 f8eb 	bl	8005b14 <MX_I2C2_Init>
  MX_SPI1_Init();
 800593e:	f000 f917 	bl	8005b70 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	//=============================================================================
	nrfRx.hSPIx   = &hspi1;
 8005942:	4b2e      	ldr	r3, [pc, #184]	@ (80059fc <main+0xd8>)
 8005944:	4a2e      	ldr	r2, [pc, #184]	@ (8005a00 <main+0xdc>)
 8005946:	619a      	str	r2, [r3, #24]
	nrfRx.CE_port =CE_GPIO_Port;
 8005948:	4b2c      	ldr	r3, [pc, #176]	@ (80059fc <main+0xd8>)
 800594a:	4a2e      	ldr	r2, [pc, #184]	@ (8005a04 <main+0xe0>)
 800594c:	609a      	str	r2, [r3, #8]
	nrfRx.CE_pin  = CE_Pin;
 800594e:	4b2b      	ldr	r3, [pc, #172]	@ (80059fc <main+0xd8>)
 8005950:	2208      	movs	r2, #8
 8005952:	819a      	strh	r2, [r3, #12]
	nrfRx.CSN_port= CSN_GPIO_Port;
 8005954:	4b29      	ldr	r3, [pc, #164]	@ (80059fc <main+0xd8>)
 8005956:	4a2b      	ldr	r2, [pc, #172]	@ (8005a04 <main+0xe0>)
 8005958:	601a      	str	r2, [r3, #0]
	nrfRx.CSN_pin = CSN_Pin;
 800595a:	4b28      	ldr	r3, [pc, #160]	@ (80059fc <main+0xd8>)
 800595c:	2210      	movs	r2, #16
 800595e:	809a      	strh	r2, [r3, #4]

	nrfRx.hSPIx = &hspi1;
 8005960:	4b26      	ldr	r3, [pc, #152]	@ (80059fc <main+0xd8>)
 8005962:	4a27      	ldr	r2, [pc, #156]	@ (8005a00 <main+0xdc>)
 8005964:	619a      	str	r2, [r3, #24]
	NRF24_Init(&nrfRx);
 8005966:	4825      	ldr	r0, [pc, #148]	@ (80059fc <main+0xd8>)
 8005968:	f000 fca4 	bl	80062b4 <NRF24_Init>
	NRF24_Set_DataRate(&nrfRx, _250KBS);
 800596c:	2100      	movs	r1, #0
 800596e:	4823      	ldr	r0, [pc, #140]	@ (80059fc <main+0xd8>)
 8005970:	f000 fcda 	bl	8006328 <NRF24_Set_DataRate>
	NRF24_Set_PALevel(&nrfRx, HIGH);
 8005974:	2103      	movs	r1, #3
 8005976:	4821      	ldr	r0, [pc, #132]	@ (80059fc <main+0xd8>)
 8005978:	f000 fd22 	bl	80063c0 <NRF24_Set_PALevel>
	NRF24_Set_RxPipe(&nrfRx, rxAddr, 0, SIZE_RX_BUF);
 800597c:	2308      	movs	r3, #8
 800597e:	2200      	movs	r2, #0
 8005980:	4921      	ldr	r1, [pc, #132]	@ (8005a08 <main+0xe4>)
 8005982:	481e      	ldr	r0, [pc, #120]	@ (80059fc <main+0xd8>)
 8005984:	f000 fddc 	bl	8006540 <NRF24_Set_RxPipe>
	NRF24_Set_Mode(&nrfRx, RX_MODE);
 8005988:	2103      	movs	r1, #3
 800598a:	481c      	ldr	r0, [pc, #112]	@ (80059fc <main+0xd8>)
 800598c:	f000 fd86 	bl	800649c <NRF24_Set_Mode>
	//=========================================================================
	vConfigureTimerForRunTimeStats();
 8005990:	f000 f9d0 	bl	8005d34 <vConfigureTimerForRunTimeStats>
	SEGGER_SYSVIEW_Conf(); /* Thêm vào nếu sử dụng SEGGER SystemView!*/
 8005994:	f7fb fbb6 	bl	8001104 <SEGGER_SYSVIEW_Conf>
	MPU6050Init();
 8005998:	f000 fa00 	bl	8005d9c <MPU6050Init>
	xTaskCreate(TaskMPU6050_Read, "MPU6050", 256, NULL, 2, NULL);
 800599c:	2300      	movs	r3, #0
 800599e:	9301      	str	r3, [sp, #4]
 80059a0:	2302      	movs	r3, #2
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2300      	movs	r3, #0
 80059a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059aa:	4918      	ldr	r1, [pc, #96]	@ (8005a0c <main+0xe8>)
 80059ac:	4818      	ldr	r0, [pc, #96]	@ (8005a10 <main+0xec>)
 80059ae:	f7fd fd66 	bl	800347e <xTaskCreate>
	xTaskCreate(TaskOLED_Display, "OLED", 256, NULL, 1, NULL);
 80059b2:	2300      	movs	r3, #0
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	2301      	movs	r3, #1
 80059b8:	9300      	str	r3, [sp, #0]
 80059ba:	2300      	movs	r3, #0
 80059bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059c0:	4914      	ldr	r1, [pc, #80]	@ (8005a14 <main+0xf0>)
 80059c2:	4815      	ldr	r0, [pc, #84]	@ (8005a18 <main+0xf4>)
 80059c4:	f7fd fd5b 	bl	800347e <xTaskCreate>
	xTaskCreate(TaskNRF_RX, "NRF_RX", 256, NULL, 3, NULL); // priority cao hơn OLED
 80059c8:	2300      	movs	r3, #0
 80059ca:	9301      	str	r3, [sp, #4]
 80059cc:	2303      	movs	r3, #3
 80059ce:	9300      	str	r3, [sp, #0]
 80059d0:	2300      	movs	r3, #0
 80059d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059d6:	4911      	ldr	r1, [pc, #68]	@ (8005a1c <main+0xf8>)
 80059d8:	4811      	ldr	r0, [pc, #68]	@ (8005a20 <main+0xfc>)
 80059da:	f7fd fd50 	bl	800347e <xTaskCreate>
	// Bắt đầu RTOS
	/* Tạo task khởi động SystemView */
	xTaskCreate(vSystemViewStartTask, "SysViewStart", 256, NULL,
 80059de:	2300      	movs	r3, #0
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	2304      	movs	r3, #4
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	2300      	movs	r3, #0
 80059e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059ec:	490d      	ldr	r1, [pc, #52]	@ (8005a24 <main+0x100>)
 80059ee:	480e      	ldr	r0, [pc, #56]	@ (8005a28 <main+0x104>)
 80059f0:	f7fd fd45 	bl	800347e <xTaskCreate>
	configMAX_PRIORITIES - 1, NULL);

	vTaskStartScheduler();
 80059f4:	f7fe f810 	bl	8003a18 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80059f8:	bf00      	nop
 80059fa:	e7fd      	b.n	80059f8 <main+0xd4>
 80059fc:	20004298 	.word	0x20004298
 8005a00:	200043d0 	.word	0x200043d0
 8005a04:	40010800 	.word	0x40010800
 8005a08:	20000010 	.word	0x20000010
 8005a0c:	0800db78 	.word	0x0800db78
 8005a10:	0800600d 	.word	0x0800600d
 8005a14:	0800db80 	.word	0x0800db80
 8005a18:	08006181 	.word	0x08006181
 8005a1c:	0800db88 	.word	0x0800db88
 8005a20:	08006245 	.word	0x08006245
 8005a24:	0800db90 	.word	0x0800db90
 8005a28:	08005cb5 	.word	0x08005cb5

08005a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b090      	sub	sp, #64	@ 0x40
 8005a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a32:	f107 0318 	add.w	r3, r7, #24
 8005a36:	2228      	movs	r2, #40	@ 0x28
 8005a38:	2100      	movs	r1, #0
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f005 fd1d 	bl	800b47a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a40:	1d3b      	adds	r3, r7, #4
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
 8005a46:	605a      	str	r2, [r3, #4]
 8005a48:	609a      	str	r2, [r3, #8]
 8005a4a:	60da      	str	r2, [r3, #12]
 8005a4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005a52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a60:	2302      	movs	r3, #2
 8005a62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8005a6a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8005a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a70:	f107 0318 	add.w	r3, r7, #24
 8005a74:	4618      	mov	r0, r3
 8005a76:	f003 fb4d 	bl	8009114 <HAL_RCC_OscConfig>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d001      	beq.n	8005a84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8005a80:	f000 fc12 	bl	80062a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a84:	230f      	movs	r3, #15
 8005a86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a88:	2302      	movs	r3, #2
 8005a8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a96:	2300      	movs	r3, #0
 8005a98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	2102      	movs	r1, #2
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f003 fdba 	bl	8009618 <HAL_RCC_ClockConfig>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8005aaa:	f000 fbfd 	bl	80062a8 <Error_Handler>
  }
}
 8005aae:	bf00      	nop
 8005ab0:	3740      	adds	r7, #64	@ 0x40
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005abc:	4b12      	ldr	r3, [pc, #72]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005abe:	4a13      	ldr	r2, [pc, #76]	@ (8005b0c <MX_I2C1_Init+0x54>)
 8005ac0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005ac2:	4b11      	ldr	r3, [pc, #68]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005ac4:	4a12      	ldr	r2, [pc, #72]	@ (8005b10 <MX_I2C1_Init+0x58>)
 8005ac6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005aca:	2200      	movs	r2, #0
 8005acc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005ace:	4b0e      	ldr	r3, [pc, #56]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005ad6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005ada:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005adc:	4b0a      	ldr	r3, [pc, #40]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005ade:	2200      	movs	r2, #0
 8005ae0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005ae2:	4b09      	ldr	r3, [pc, #36]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005ae8:	4b07      	ldr	r3, [pc, #28]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005aee:	4b06      	ldr	r3, [pc, #24]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005af4:	4804      	ldr	r0, [pc, #16]	@ (8005b08 <MX_I2C1_Init+0x50>)
 8005af6:	f001 fff9 	bl	8007aec <HAL_I2C_Init>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005b00:	f000 fbd2 	bl	80062a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005b04:	bf00      	nop
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20004328 	.word	0x20004328
 8005b0c:	40005400 	.word	0x40005400
 8005b10:	000186a0 	.word	0x000186a0

08005b14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005b18:	4b12      	ldr	r3, [pc, #72]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b1a:	4a13      	ldr	r2, [pc, #76]	@ (8005b68 <MX_I2C2_Init+0x54>)
 8005b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8005b1e:	4b11      	ldr	r3, [pc, #68]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b20:	4a12      	ldr	r2, [pc, #72]	@ (8005b6c <MX_I2C2_Init+0x58>)
 8005b22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005b24:	4b0f      	ldr	r3, [pc, #60]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005b30:	4b0c      	ldr	r3, [pc, #48]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005b36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005b38:	4b0a      	ldr	r3, [pc, #40]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005b3e:	4b09      	ldr	r3, [pc, #36]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b40:	2200      	movs	r2, #0
 8005b42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005b44:	4b07      	ldr	r3, [pc, #28]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b46:	2200      	movs	r2, #0
 8005b48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005b4a:	4b06      	ldr	r3, [pc, #24]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005b50:	4804      	ldr	r0, [pc, #16]	@ (8005b64 <MX_I2C2_Init+0x50>)
 8005b52:	f001 ffcb 	bl	8007aec <HAL_I2C_Init>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005b5c:	f000 fba4 	bl	80062a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005b60:	bf00      	nop
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	2000437c 	.word	0x2000437c
 8005b68:	40005800 	.word	0x40005800
 8005b6c:	00061a80 	.word	0x00061a80

08005b70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005b74:	4b17      	ldr	r3, [pc, #92]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005b76:	4a18      	ldr	r2, [pc, #96]	@ (8005bd8 <MX_SPI1_Init+0x68>)
 8005b78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005b7a:	4b16      	ldr	r3, [pc, #88]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005b7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005b80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005b82:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005b88:	4b12      	ldr	r3, [pc, #72]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b8e:	4b11      	ldr	r3, [pc, #68]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8005b94:	4b0f      	ldr	r3, [pc, #60]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005b96:	2200      	movs	r2, #0
 8005b98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005b9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ba0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005ba4:	2218      	movs	r2, #24
 8005ba6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005baa:	2200      	movs	r2, #0
 8005bac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005bae:	4b09      	ldr	r3, [pc, #36]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bb4:	4b07      	ldr	r3, [pc, #28]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8005bba:	4b06      	ldr	r3, [pc, #24]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005bbc:	220a      	movs	r2, #10
 8005bbe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005bc0:	4804      	ldr	r0, [pc, #16]	@ (8005bd4 <MX_SPI1_Init+0x64>)
 8005bc2:	f003 fee7 	bl	8009994 <HAL_SPI_Init>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d001      	beq.n	8005bd0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8005bcc:	f000 fb6c 	bl	80062a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005bd0:	bf00      	nop
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	200043d0 	.word	0x200043d0
 8005bd8:	40013000 	.word	0x40013000

08005bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005be2:	f107 0310 	add.w	r3, r7, #16
 8005be6:	2200      	movs	r2, #0
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	605a      	str	r2, [r3, #4]
 8005bec:	609a      	str	r2, [r3, #8]
 8005bee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bf0:	4b2d      	ldr	r3, [pc, #180]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	4a2c      	ldr	r2, [pc, #176]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005bf6:	f043 0310 	orr.w	r3, r3, #16
 8005bfa:	6193      	str	r3, [r2, #24]
 8005bfc:	4b2a      	ldr	r3, [pc, #168]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	60fb      	str	r3, [r7, #12]
 8005c06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c08:	4b27      	ldr	r3, [pc, #156]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	4a26      	ldr	r2, [pc, #152]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005c0e:	f043 0320 	orr.w	r3, r3, #32
 8005c12:	6193      	str	r3, [r2, #24]
 8005c14:	4b24      	ldr	r3, [pc, #144]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f003 0320 	and.w	r3, r3, #32
 8005c1c:	60bb      	str	r3, [r7, #8]
 8005c1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c20:	4b21      	ldr	r3, [pc, #132]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005c22:	699b      	ldr	r3, [r3, #24]
 8005c24:	4a20      	ldr	r2, [pc, #128]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005c26:	f043 0304 	orr.w	r3, r3, #4
 8005c2a:	6193      	str	r3, [r2, #24]
 8005c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005c2e:	699b      	ldr	r3, [r3, #24]
 8005c30:	f003 0304 	and.w	r3, r3, #4
 8005c34:	607b      	str	r3, [r7, #4]
 8005c36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005c38:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	4a1a      	ldr	r2, [pc, #104]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005c3e:	f043 0308 	orr.w	r3, r3, #8
 8005c42:	6193      	str	r3, [r2, #24]
 8005c44:	4b18      	ldr	r3, [pc, #96]	@ (8005ca8 <MX_GPIO_Init+0xcc>)
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f003 0308 	and.w	r3, r3, #8
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8005c50:	2200      	movs	r2, #0
 8005c52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005c56:	4815      	ldr	r0, [pc, #84]	@ (8005cac <MX_GPIO_Init+0xd0>)
 8005c58:	f001 ff16 	bl	8007a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	2118      	movs	r1, #24
 8005c60:	4813      	ldr	r0, [pc, #76]	@ (8005cb0 <MX_GPIO_Init+0xd4>)
 8005c62:	f001 ff11 	bl	8007a88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005c66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c70:	2301      	movs	r3, #1
 8005c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c74:	2302      	movs	r3, #2
 8005c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c78:	f107 0310 	add.w	r3, r7, #16
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	480b      	ldr	r0, [pc, #44]	@ (8005cac <MX_GPIO_Init+0xd0>)
 8005c80:	f001 fd7e 	bl	8007780 <HAL_GPIO_Init>

  /*Configure GPIO pins : CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = CE_Pin|CSN_Pin;
 8005c84:	2318      	movs	r3, #24
 8005c86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c90:	2302      	movs	r3, #2
 8005c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c94:	f107 0310 	add.w	r3, r7, #16
 8005c98:	4619      	mov	r1, r3
 8005c9a:	4805      	ldr	r0, [pc, #20]	@ (8005cb0 <MX_GPIO_Init+0xd4>)
 8005c9c:	f001 fd70 	bl	8007780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005ca0:	bf00      	nop
 8005ca2:	3720      	adds	r7, #32
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40011000 	.word	0x40011000
 8005cb0:	40010800 	.word	0x40010800

08005cb4 <vSystemViewStartTask>:

/* USER CODE BEGIN 4 */
//====================================SystemView=================================
void vSystemViewStartTask(void *argument) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b082      	sub	sp, #8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
	// THÊM DÒNG NÀY: Chờ 1 giây để J-Link và SystemView trên PC sẵn sàng
	vTaskDelay(pdMS_TO_TICKS(100));
 8005cbc:	2064      	movs	r0, #100	@ 0x64
 8005cbe:	f7fd fe1b 	bl	80038f8 <vTaskDelay>

	/* Bật trace, DWT, ITM an toàn khi đang debug */
	if (CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk) {
 8005cc2:	4b19      	ldr	r3, [pc, #100]	@ (8005d28 <vSystemViewStartTask+0x74>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d024      	beq.n	8005d18 <vSystemViewStartTask+0x64>
		CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8005cce:	4b16      	ldr	r3, [pc, #88]	@ (8005d28 <vSystemViewStartTask+0x74>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <vSystemViewStartTask+0x74>)
 8005cd4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cd8:	60d3      	str	r3, [r2, #12]
		DWT->CYCCNT = 0;
 8005cda:	4b14      	ldr	r3, [pc, #80]	@ (8005d2c <vSystemViewStartTask+0x78>)
 8005cdc:	2200      	movs	r2, #0
 8005cde:	605a      	str	r2, [r3, #4]
		DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8005ce0:	4b12      	ldr	r3, [pc, #72]	@ (8005d2c <vSystemViewStartTask+0x78>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a11      	ldr	r2, [pc, #68]	@ (8005d2c <vSystemViewStartTask+0x78>)
 8005ce6:	f043 0301 	orr.w	r3, r3, #1
 8005cea:	6013      	str	r3, [r2, #0]

		ITM->LAR = 0xC5ACCE55;
 8005cec:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005cf0:	4a0f      	ldr	r2, [pc, #60]	@ (8005d30 <vSystemViewStartTask+0x7c>)
 8005cf2:	f8c3 2fb0 	str.w	r2, [r3, #4016]	@ 0xfb0
		ITM->TCR = 0;
 8005cf6:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
		ITM->TCR = ITM_TCR_ITMENA_Msk | (1 << ITM_TCR_TSENA_Pos);
 8005d00:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005d04:	2203      	movs	r2, #3
 8005d06:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
		ITM->TER = 1;
 8005d0a:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00

		SEGGER_SYSVIEW_Start();
 8005d14:	f7fc f936 	bl	8001f84 <SEGGER_SYSVIEW_Start>
	}
	/* Task này chỉ chạy 1 lần và tự xóa */
	vTaskDelete(NULL);
 8005d18:	2000      	movs	r0, #0
 8005d1a:	f7fd fd1f 	bl	800375c <vTaskDelete>
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	e000edf0 	.word	0xe000edf0
 8005d2c:	e0001000 	.word	0xe0001000
 8005d30:	c5acce55 	.word	0xc5acce55

08005d34 <vConfigureTimerForRunTimeStats>:
void vConfigureTimerForRunTimeStats(void) {
 8005d34:	b480      	push	{r7}
 8005d36:	af00      	add	r7, sp, #0
	// Bật clock cho TIM2
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8005d38:	4b10      	ldr	r3, [pc, #64]	@ (8005d7c <vConfigureTimerForRunTimeStats+0x48>)
 8005d3a:	69db      	ldr	r3, [r3, #28]
 8005d3c:	4a0f      	ldr	r2, [pc, #60]	@ (8005d7c <vConfigureTimerForRunTimeStats+0x48>)
 8005d3e:	f043 0301 	orr.w	r3, r3, #1
 8005d42:	61d3      	str	r3, [r2, #28]
	// Cấu hình TIM2 chạy ở 1 MHz
	TIM2->ARR = 0xFFFFFFFF; // Đếm tối đa
 8005d44:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d48:	f04f 32ff 	mov.w	r2, #4294967295
 8005d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->PSC = (SystemCoreClock / 1000000) - 1; // Prescaler để đạt 1 MHz
 8005d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005d80 <vConfigureTimerForRunTimeStats+0x4c>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a0c      	ldr	r2, [pc, #48]	@ (8005d84 <vConfigureTimerForRunTimeStats+0x50>)
 8005d54:	fba2 2303 	umull	r2, r3, r2, r3
 8005d58:	0c9b      	lsrs	r3, r3, #18
 8005d5a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->CR1 |= TIM_CR1_CEN; // Bật Timer
 8005d62:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8005d6c:	f043 0301 	orr.w	r3, r3, #1
 8005d70:	6013      	str	r3, [r2, #0]
}
 8005d72:	bf00      	nop
 8005d74:	46bd      	mov	sp, r7
 8005d76:	bc80      	pop	{r7}
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	40021000 	.word	0x40021000
 8005d80:	20000024 	.word	0x20000024
 8005d84:	431bde83 	.word	0x431bde83

08005d88 <ulGetRunTimeCounterValue>:

unsigned long ulGetRunTimeCounterValue(void) {
 8005d88:	b480      	push	{r7}
 8005d8a:	af00      	add	r7, sp, #0
	return TIM2->CNT; // Trả về giá trị đếm
 8005d8c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bc80      	pop	{r7}
 8005d98:	4770      	bx	lr
	...

08005d9c <MPU6050Init>:
//=======================================MPU6050Init=======================================
void MPU6050Init(void) {
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af04      	add	r7, sp, #16
	// Đọc thanh ghi WHO_AM_I (0x75), kết quả phải là 0x68
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x75, I2C_MEMADD_SIZE_8BIT, &check, 1, 1000);
 8005da2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005da6:	9302      	str	r3, [sp, #8]
 8005da8:	2301      	movs	r3, #1
 8005daa:	9301      	str	r3, [sp, #4]
 8005dac:	4b27      	ldr	r3, [pc, #156]	@ (8005e4c <MPU6050Init+0xb0>)
 8005dae:	9300      	str	r3, [sp, #0]
 8005db0:	2301      	movs	r3, #1
 8005db2:	2275      	movs	r2, #117	@ 0x75
 8005db4:	21d0      	movs	r1, #208	@ 0xd0
 8005db6:	4826      	ldr	r0, [pc, #152]	@ (8005e50 <MPU6050Init+0xb4>)
 8005db8:	f002 f9d4 	bl	8008164 <HAL_I2C_Mem_Read>

	if (check == 0x68) {
 8005dbc:	4b23      	ldr	r3, [pc, #140]	@ (8005e4c <MPU6050Init+0xb0>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b68      	cmp	r3, #104	@ 0x68
 8005dc2:	d13f      	bne.n	8005e44 <MPU6050Init+0xa8>
		// Thoát chế độ sleep (ghi 0 vào thanh ghi PWR_MGMT_1)
		mData = 0x00;
 8005dc4:	4b23      	ldr	r3, [pc, #140]	@ (8005e54 <MPU6050Init+0xb8>)
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x6B, I2C_MEMADD_SIZE_8BIT, &mData, 1,
 8005dca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005dce:	9302      	str	r3, [sp, #8]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	9301      	str	r3, [sp, #4]
 8005dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8005e54 <MPU6050Init+0xb8>)
 8005dd6:	9300      	str	r3, [sp, #0]
 8005dd8:	2301      	movs	r3, #1
 8005dda:	226b      	movs	r2, #107	@ 0x6b
 8005ddc:	21d0      	movs	r1, #208	@ 0xd0
 8005dde:	481c      	ldr	r0, [pc, #112]	@ (8005e50 <MPU6050Init+0xb4>)
 8005de0:	f002 f8c6 	bl	8007f70 <HAL_I2C_Mem_Write>
				1000);

		// Cấu hình sample rate: 1kHz / (1+7) = 125Hz
		mData = 0x07;
 8005de4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e54 <MPU6050Init+0xb8>)
 8005de6:	2207      	movs	r2, #7
 8005de8:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x19, I2C_MEMADD_SIZE_8BIT, &mData, 1,
 8005dea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005dee:	9302      	str	r3, [sp, #8]
 8005df0:	2301      	movs	r3, #1
 8005df2:	9301      	str	r3, [sp, #4]
 8005df4:	4b17      	ldr	r3, [pc, #92]	@ (8005e54 <MPU6050Init+0xb8>)
 8005df6:	9300      	str	r3, [sp, #0]
 8005df8:	2301      	movs	r3, #1
 8005dfa:	2219      	movs	r2, #25
 8005dfc:	21d0      	movs	r1, #208	@ 0xd0
 8005dfe:	4814      	ldr	r0, [pc, #80]	@ (8005e50 <MPU6050Init+0xb4>)
 8005e00:	f002 f8b6 	bl	8007f70 <HAL_I2C_Mem_Write>
				1000);

		// Cấu hình thang đo gyro ±250 °/s
		mData = 0x00;
 8005e04:	4b13      	ldr	r3, [pc, #76]	@ (8005e54 <MPU6050Init+0xb8>)
 8005e06:	2200      	movs	r2, #0
 8005e08:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x1B, I2C_MEMADD_SIZE_8BIT, &mData, 1,
 8005e0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e0e:	9302      	str	r3, [sp, #8]
 8005e10:	2301      	movs	r3, #1
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	4b0f      	ldr	r3, [pc, #60]	@ (8005e54 <MPU6050Init+0xb8>)
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	2301      	movs	r3, #1
 8005e1a:	221b      	movs	r2, #27
 8005e1c:	21d0      	movs	r1, #208	@ 0xd0
 8005e1e:	480c      	ldr	r0, [pc, #48]	@ (8005e50 <MPU6050Init+0xb4>)
 8005e20:	f002 f8a6 	bl	8007f70 <HAL_I2C_Mem_Write>
				1000);

		// Cấu hình thang đo accel ±2g
		mData = 0x00;
 8005e24:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <MPU6050Init+0xb8>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x1C, I2C_MEMADD_SIZE_8BIT, &mData, 1,
 8005e2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e2e:	9302      	str	r3, [sp, #8]
 8005e30:	2301      	movs	r3, #1
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	4b07      	ldr	r3, [pc, #28]	@ (8005e54 <MPU6050Init+0xb8>)
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2301      	movs	r3, #1
 8005e3a:	221c      	movs	r2, #28
 8005e3c:	21d0      	movs	r1, #208	@ 0xd0
 8005e3e:	4804      	ldr	r0, [pc, #16]	@ (8005e50 <MPU6050Init+0xb4>)
 8005e40:	f002 f896 	bl	8007f70 <HAL_I2C_Mem_Write>
				1000);
	}
}
 8005e44:	bf00      	nop
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	200042ec 	.word	0x200042ec
 8005e50:	20004328 	.word	0x20004328
 8005e54:	200042ed 	.word	0x200042ed

08005e58 <MPU6050ReadG>:
//====================================ReadG=======================================
void MPU6050ReadG(void) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af04      	add	r7, sp, #16
	uint8_t dataG[6];
	// Đọc 6 byte từ thanh ghi GYRO_XOUT_H (0x43)
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x43, I2C_MEMADD_SIZE_8BIT, dataG, 6, 1000);
 8005e5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005e62:	9302      	str	r3, [sp, #8]
 8005e64:	2306      	movs	r3, #6
 8005e66:	9301      	str	r3, [sp, #4]
 8005e68:	463b      	mov	r3, r7
 8005e6a:	9300      	str	r3, [sp, #0]
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	2243      	movs	r2, #67	@ 0x43
 8005e70:	21d0      	movs	r1, #208	@ 0xd0
 8005e72:	4827      	ldr	r0, [pc, #156]	@ (8005f10 <MPU6050ReadG+0xb8>)
 8005e74:	f002 f976 	bl	8008164 <HAL_I2C_Mem_Read>

	// Gộp byte high và low thành số 16-bit
	gx = (int16_t) (dataG[0] << 8 | dataG[1]);
 8005e78:	783b      	ldrb	r3, [r7, #0]
 8005e7a:	021b      	lsls	r3, r3, #8
 8005e7c:	b21a      	sxth	r2, r3
 8005e7e:	787b      	ldrb	r3, [r7, #1]
 8005e80:	b21b      	sxth	r3, r3
 8005e82:	4313      	orrs	r3, r2
 8005e84:	b21a      	sxth	r2, r3
 8005e86:	4b23      	ldr	r3, [pc, #140]	@ (8005f14 <MPU6050ReadG+0xbc>)
 8005e88:	801a      	strh	r2, [r3, #0]
	gy = (int16_t) (dataG[2] << 8 | dataG[3]);
 8005e8a:	78bb      	ldrb	r3, [r7, #2]
 8005e8c:	021b      	lsls	r3, r3, #8
 8005e8e:	b21a      	sxth	r2, r3
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	b21b      	sxth	r3, r3
 8005e94:	4313      	orrs	r3, r2
 8005e96:	b21a      	sxth	r2, r3
 8005e98:	4b1f      	ldr	r3, [pc, #124]	@ (8005f18 <MPU6050ReadG+0xc0>)
 8005e9a:	801a      	strh	r2, [r3, #0]
	gz = (int16_t) (dataG[4] << 8 | dataG[5]);
 8005e9c:	793b      	ldrb	r3, [r7, #4]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	b21a      	sxth	r2, r3
 8005ea2:	797b      	ldrb	r3, [r7, #5]
 8005ea4:	b21b      	sxth	r3, r3
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	b21a      	sxth	r2, r3
 8005eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8005f1c <MPU6050ReadG+0xc4>)
 8005eac:	801a      	strh	r2, [r3, #0]

	// Chuyển đổi sang °/s (scale ±250°/s → 131 LSB/°/s)
	GX = (float) gx / 131.0;
 8005eae:	4b19      	ldr	r3, [pc, #100]	@ (8005f14 <MPU6050ReadG+0xbc>)
 8005eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fa fee7 	bl	8000c88 <__aeabi_i2f>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	4918      	ldr	r1, [pc, #96]	@ (8005f20 <MPU6050ReadG+0xc8>)
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fa ffea 	bl	8000e98 <__aeabi_fdiv>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	4b16      	ldr	r3, [pc, #88]	@ (8005f24 <MPU6050ReadG+0xcc>)
 8005eca:	601a      	str	r2, [r3, #0]
	GY = (float) gy / 131.0;
 8005ecc:	4b12      	ldr	r3, [pc, #72]	@ (8005f18 <MPU6050ReadG+0xc0>)
 8005ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f7fa fed8 	bl	8000c88 <__aeabi_i2f>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	4911      	ldr	r1, [pc, #68]	@ (8005f20 <MPU6050ReadG+0xc8>)
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fa ffdb 	bl	8000e98 <__aeabi_fdiv>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	4b10      	ldr	r3, [pc, #64]	@ (8005f28 <MPU6050ReadG+0xd0>)
 8005ee8:	601a      	str	r2, [r3, #0]
	GZ = (float) gz / 131.0;
 8005eea:	4b0c      	ldr	r3, [pc, #48]	@ (8005f1c <MPU6050ReadG+0xc4>)
 8005eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fa fec9 	bl	8000c88 <__aeabi_i2f>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	4909      	ldr	r1, [pc, #36]	@ (8005f20 <MPU6050ReadG+0xc8>)
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fa ffcc 	bl	8000e98 <__aeabi_fdiv>
 8005f00:	4603      	mov	r3, r0
 8005f02:	461a      	mov	r2, r3
 8005f04:	4b09      	ldr	r3, [pc, #36]	@ (8005f2c <MPU6050ReadG+0xd4>)
 8005f06:	601a      	str	r2, [r3, #0]
}
 8005f08:	bf00      	nop
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20004328 	.word	0x20004328
 8005f14:	200042e2 	.word	0x200042e2
 8005f18:	200042e4 	.word	0x200042e4
 8005f1c:	200042e6 	.word	0x200042e6
 8005f20:	43030000 	.word	0x43030000
 8005f24:	200042d0 	.word	0x200042d0
 8005f28:	200042d4 	.word	0x200042d4
 8005f2c:	200042d8 	.word	0x200042d8

08005f30 <MPU6050ReadA>:
//================================ReadA================================
void MPU6050ReadA(void) {
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af04      	add	r7, sp, #16
	uint8_t dataA[6];
	// Đọc 6 byte từ thanh ghi ACCEL_XOUT_H (0x3B)
	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x3B, I2C_MEMADD_SIZE_8BIT, dataA, 6, 1000);
 8005f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005f3a:	9302      	str	r3, [sp, #8]
 8005f3c:	2306      	movs	r3, #6
 8005f3e:	9301      	str	r3, [sp, #4]
 8005f40:	463b      	mov	r3, r7
 8005f42:	9300      	str	r3, [sp, #0]
 8005f44:	2301      	movs	r3, #1
 8005f46:	223b      	movs	r2, #59	@ 0x3b
 8005f48:	21d0      	movs	r1, #208	@ 0xd0
 8005f4a:	4829      	ldr	r0, [pc, #164]	@ (8005ff0 <MPU6050ReadA+0xc0>)
 8005f4c:	f002 f90a 	bl	8008164 <HAL_I2C_Mem_Read>

	ax = (int16_t) (dataA[0] << 8 | dataA[1]);
 8005f50:	783b      	ldrb	r3, [r7, #0]
 8005f52:	021b      	lsls	r3, r3, #8
 8005f54:	b21a      	sxth	r2, r3
 8005f56:	787b      	ldrb	r3, [r7, #1]
 8005f58:	b21b      	sxth	r3, r3
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	b21a      	sxth	r2, r3
 8005f5e:	4b25      	ldr	r3, [pc, #148]	@ (8005ff4 <MPU6050ReadA+0xc4>)
 8005f60:	801a      	strh	r2, [r3, #0]
	ay = (int16_t) (dataA[2] << 8 | dataA[3]);
 8005f62:	78bb      	ldrb	r3, [r7, #2]
 8005f64:	021b      	lsls	r3, r3, #8
 8005f66:	b21a      	sxth	r2, r3
 8005f68:	78fb      	ldrb	r3, [r7, #3]
 8005f6a:	b21b      	sxth	r3, r3
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	b21a      	sxth	r2, r3
 8005f70:	4b21      	ldr	r3, [pc, #132]	@ (8005ff8 <MPU6050ReadA+0xc8>)
 8005f72:	801a      	strh	r2, [r3, #0]
	az = (int16_t) (dataA[4] << 8 | dataA[5]);
 8005f74:	793b      	ldrb	r3, [r7, #4]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	b21a      	sxth	r2, r3
 8005f7a:	797b      	ldrb	r3, [r7, #5]
 8005f7c:	b21b      	sxth	r3, r3
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	b21a      	sxth	r2, r3
 8005f82:	4b1e      	ldr	r3, [pc, #120]	@ (8005ffc <MPU6050ReadA+0xcc>)
 8005f84:	801a      	strh	r2, [r3, #0]

	// Chuyển đổi sang đơn vị g (scale ±2g → 16384 LSB/g)
	AX = (float) ax / 16384.0;
 8005f86:	4b1b      	ldr	r3, [pc, #108]	@ (8005ff4 <MPU6050ReadA+0xc4>)
 8005f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fa fe7b 	bl	8000c88 <__aeabi_i2f>
 8005f92:	4603      	mov	r3, r0
 8005f94:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fa ff7d 	bl	8000e98 <__aeabi_fdiv>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	4b17      	ldr	r3, [pc, #92]	@ (8006000 <MPU6050ReadA+0xd0>)
 8005fa4:	601a      	str	r2, [r3, #0]
	AY = (float) ay / 16384.0;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	@ (8005ff8 <MPU6050ReadA+0xc8>)
 8005fa8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fa fe6b 	bl	8000c88 <__aeabi_i2f>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f7fa ff6d 	bl	8000e98 <__aeabi_fdiv>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	461a      	mov	r2, r3
 8005fc2:	4b10      	ldr	r3, [pc, #64]	@ (8006004 <MPU6050ReadA+0xd4>)
 8005fc4:	601a      	str	r2, [r3, #0]
	AZ = (float) az / 16384.0;
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <MPU6050ReadA+0xcc>)
 8005fc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f7fa fe5b 	bl	8000c88 <__aeabi_i2f>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	f04f 418d 	mov.w	r1, #1182793728	@ 0x46800000
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f7fa ff5d 	bl	8000e98 <__aeabi_fdiv>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	461a      	mov	r2, r3
 8005fe2:	4b09      	ldr	r3, [pc, #36]	@ (8006008 <MPU6050ReadA+0xd8>)
 8005fe4:	601a      	str	r2, [r3, #0]
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20004328 	.word	0x20004328
 8005ff4:	200042dc 	.word	0x200042dc
 8005ff8:	200042de 	.word	0x200042de
 8005ffc:	200042e0 	.word	0x200042e0
 8006000:	200042c4 	.word	0x200042c4
 8006004:	200042c8 	.word	0x200042c8
 8006008:	200042cc 	.word	0x200042cc

0800600c <TaskMPU6050_Read>:
//==================================TaskMPU6050==========================
void TaskMPU6050_Read(void *argument) {
 800600c:	b5b0      	push	{r4, r5, r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	lastTime = HAL_GetTick();
 8006014:	f001 faa6 	bl	8007564 <HAL_GetTick>
 8006018:	4603      	mov	r3, r0
 800601a:	4a4b      	ldr	r2, [pc, #300]	@ (8006148 <TaskMPU6050_Read+0x13c>)
 800601c:	6013      	str	r3, [r2, #0]

	for (;;) {
		// Đọc cảm biến
		MPU6050ReadA();
 800601e:	f7ff ff87 	bl	8005f30 <MPU6050ReadA>
		MPU6050ReadG();
 8006022:	f7ff ff19 	bl	8005e58 <MPU6050ReadG>

		// Tính khoảng thời gian delta t
		uint32_t now = HAL_GetTick();
 8006026:	f001 fa9d 	bl	8007564 <HAL_GetTick>
 800602a:	6178      	str	r0, [r7, #20]
		float dt = (now - lastTime) / 1000.0f;
 800602c:	4b46      	ldr	r3, [pc, #280]	@ (8006148 <TaskMPU6050_Read+0x13c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	4618      	mov	r0, r3
 8006036:	f7fa fe23 	bl	8000c80 <__aeabi_ui2f>
 800603a:	4603      	mov	r3, r0
 800603c:	4943      	ldr	r1, [pc, #268]	@ (800614c <TaskMPU6050_Read+0x140>)
 800603e:	4618      	mov	r0, r3
 8006040:	f7fa ff2a 	bl	8000e98 <__aeabi_fdiv>
 8006044:	4603      	mov	r3, r0
 8006046:	613b      	str	r3, [r7, #16]
		lastTime = now;
 8006048:	4a3f      	ldr	r2, [pc, #252]	@ (8006148 <TaskMPU6050_Read+0x13c>)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	6013      	str	r3, [r2, #0]

		// Góc tính từ accelerometer (độ)
		float pitchAcc = atan2f(AX, sqrtf(AY * AY + AZ * AZ)) * 57.2958f;
 800604e:	4b40      	ldr	r3, [pc, #256]	@ (8006150 <TaskMPU6050_Read+0x144>)
 8006050:	681c      	ldr	r4, [r3, #0]
 8006052:	4b40      	ldr	r3, [pc, #256]	@ (8006154 <TaskMPU6050_Read+0x148>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a3f      	ldr	r2, [pc, #252]	@ (8006154 <TaskMPU6050_Read+0x148>)
 8006058:	6812      	ldr	r2, [r2, #0]
 800605a:	4611      	mov	r1, r2
 800605c:	4618      	mov	r0, r3
 800605e:	f7fa fe67 	bl	8000d30 <__aeabi_fmul>
 8006062:	4603      	mov	r3, r0
 8006064:	461d      	mov	r5, r3
 8006066:	4b3c      	ldr	r3, [pc, #240]	@ (8006158 <TaskMPU6050_Read+0x14c>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a3b      	ldr	r2, [pc, #236]	@ (8006158 <TaskMPU6050_Read+0x14c>)
 800606c:	6812      	ldr	r2, [r2, #0]
 800606e:	4611      	mov	r1, r2
 8006070:	4618      	mov	r0, r3
 8006072:	f7fa fe5d 	bl	8000d30 <__aeabi_fmul>
 8006076:	4603      	mov	r3, r0
 8006078:	4619      	mov	r1, r3
 800607a:	4628      	mov	r0, r5
 800607c:	f7fa fd50 	bl	8000b20 <__addsf3>
 8006080:	4603      	mov	r3, r0
 8006082:	4618      	mov	r0, r3
 8006084:	f007 face 	bl	800d624 <sqrtf>
 8006088:	4603      	mov	r3, r0
 800608a:	4619      	mov	r1, r3
 800608c:	4620      	mov	r0, r4
 800608e:	f007 fac7 	bl	800d620 <atan2f>
 8006092:	4603      	mov	r3, r0
 8006094:	4931      	ldr	r1, [pc, #196]	@ (800615c <TaskMPU6050_Read+0x150>)
 8006096:	4618      	mov	r0, r3
 8006098:	f7fa fe4a 	bl	8000d30 <__aeabi_fmul>
 800609c:	4603      	mov	r3, r0
 800609e:	60fb      	str	r3, [r7, #12]
		float rollAcc = atan2f(AY, sqrtf(AX * AX + AZ * AZ)) * 57.2958f;
 80060a0:	4b2c      	ldr	r3, [pc, #176]	@ (8006154 <TaskMPU6050_Read+0x148>)
 80060a2:	681c      	ldr	r4, [r3, #0]
 80060a4:	4b2a      	ldr	r3, [pc, #168]	@ (8006150 <TaskMPU6050_Read+0x144>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a29      	ldr	r2, [pc, #164]	@ (8006150 <TaskMPU6050_Read+0x144>)
 80060aa:	6812      	ldr	r2, [r2, #0]
 80060ac:	4611      	mov	r1, r2
 80060ae:	4618      	mov	r0, r3
 80060b0:	f7fa fe3e 	bl	8000d30 <__aeabi_fmul>
 80060b4:	4603      	mov	r3, r0
 80060b6:	461d      	mov	r5, r3
 80060b8:	4b27      	ldr	r3, [pc, #156]	@ (8006158 <TaskMPU6050_Read+0x14c>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a26      	ldr	r2, [pc, #152]	@ (8006158 <TaskMPU6050_Read+0x14c>)
 80060be:	6812      	ldr	r2, [r2, #0]
 80060c0:	4611      	mov	r1, r2
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fa fe34 	bl	8000d30 <__aeabi_fmul>
 80060c8:	4603      	mov	r3, r0
 80060ca:	4619      	mov	r1, r3
 80060cc:	4628      	mov	r0, r5
 80060ce:	f7fa fd27 	bl	8000b20 <__addsf3>
 80060d2:	4603      	mov	r3, r0
 80060d4:	4618      	mov	r0, r3
 80060d6:	f007 faa5 	bl	800d624 <sqrtf>
 80060da:	4603      	mov	r3, r0
 80060dc:	4619      	mov	r1, r3
 80060de:	4620      	mov	r0, r4
 80060e0:	f007 fa9e 	bl	800d620 <atan2f>
 80060e4:	4603      	mov	r3, r0
 80060e6:	491d      	ldr	r1, [pc, #116]	@ (800615c <TaskMPU6050_Read+0x150>)
 80060e8:	4618      	mov	r0, r3
 80060ea:	f7fa fe21 	bl	8000d30 <__aeabi_fmul>
 80060ee:	4603      	mov	r3, r0
 80060f0:	60bb      	str	r3, [r7, #8]

		// Lọc Kalman (kết hợp gyro + accel)
		pitch_val = Kalman_getAngle(&kalmanPitch, pitchAcc, GX, dt);
 80060f2:	4b1b      	ldr	r3, [pc, #108]	@ (8006160 <TaskMPU6050_Read+0x154>)
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	68f9      	ldr	r1, [r7, #12]
 80060fa:	481a      	ldr	r0, [pc, #104]	@ (8006164 <TaskMPU6050_Read+0x158>)
 80060fc:	f7ff fafa 	bl	80056f4 <Kalman_getAngle>
 8006100:	4603      	mov	r3, r0
 8006102:	4a19      	ldr	r2, [pc, #100]	@ (8006168 <TaskMPU6050_Read+0x15c>)
 8006104:	6013      	str	r3, [r2, #0]
		roll_val = Kalman_getAngle(&kalmanRoll, rollAcc, GY, dt);
 8006106:	4b19      	ldr	r3, [pc, #100]	@ (800616c <TaskMPU6050_Read+0x160>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4818      	ldr	r0, [pc, #96]	@ (8006170 <TaskMPU6050_Read+0x164>)
 8006110:	f7ff faf0 	bl	80056f4 <Kalman_getAngle>
 8006114:	4603      	mov	r3, r0
 8006116:	4a17      	ldr	r2, [pc, #92]	@ (8006174 <TaskMPU6050_Read+0x168>)
 8006118:	6013      	str	r3, [r2, #0]
		// Tích phân từ gyro Z
		yaw_val += GZ * dt;   // GZ: deg/s, dt: thời gian (s)
 800611a:	4b17      	ldr	r3, [pc, #92]	@ (8006178 <TaskMPU6050_Read+0x16c>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	6939      	ldr	r1, [r7, #16]
 8006120:	4618      	mov	r0, r3
 8006122:	f7fa fe05 	bl	8000d30 <__aeabi_fmul>
 8006126:	4603      	mov	r3, r0
 8006128:	461a      	mov	r2, r3
 800612a:	4b14      	ldr	r3, [pc, #80]	@ (800617c <TaskMPU6050_Read+0x170>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4619      	mov	r1, r3
 8006130:	4610      	mov	r0, r2
 8006132:	f7fa fcf5 	bl	8000b20 <__addsf3>
 8006136:	4603      	mov	r3, r0
 8006138:	461a      	mov	r2, r3
 800613a:	4b10      	ldr	r3, [pc, #64]	@ (800617c <TaskMPU6050_Read+0x170>)
 800613c:	601a      	str	r2, [r3, #0]

		// Debug (in ra UART nếu cần)
		// printf("Pitch: %.2f, Roll: %.2f\r\n", pitch_val, roll_val);

		// Delay 10ms → tần số 100Hz
		vTaskDelay(pdMS_TO_TICKS(10));
 800613e:	200a      	movs	r0, #10
 8006140:	f7fd fbda 	bl	80038f8 <vTaskDelay>
	for (;;) {
 8006144:	bf00      	nop
 8006146:	e76a      	b.n	800601e <TaskMPU6050_Read+0x12>
 8006148:	200042e8 	.word	0x200042e8
 800614c:	447a0000 	.word	0x447a0000
 8006150:	200042c4 	.word	0x200042c4
 8006154:	200042c8 	.word	0x200042c8
 8006158:	200042cc 	.word	0x200042cc
 800615c:	42652ee6 	.word	0x42652ee6
 8006160:	200042d0 	.word	0x200042d0
 8006164:	200042f0 	.word	0x200042f0
 8006168:	200042b8 	.word	0x200042b8
 800616c:	200042d4 	.word	0x200042d4
 8006170:	2000430c 	.word	0x2000430c
 8006174:	200042bc 	.word	0x200042bc
 8006178:	200042d8 	.word	0x200042d8
 800617c:	200042c0 	.word	0x200042c0

08006180 <TaskOLED_Display>:
	}
}
//======================================TaskOLED_Display=======================
void TaskOLED_Display(void *argument) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b08a      	sub	sp, #40	@ 0x28
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	SSD1306_Init();
 8006188:	f000 fc96 	bl	8006ab8 <SSD1306_Init>
	char buf[32];

	for (;;) {
		// Xóa màn hình
		SSD1306_Clear();
 800618c:	f000 feb5 	bl	8006efa <SSD1306_Clear>

		// In Pitch
		sprintf(buf, "Pitch: %.2f", pitch_val);
 8006190:	4b25      	ldr	r3, [pc, #148]	@ (8006228 <TaskOLED_Display+0xa8>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f7fa f98d 	bl	80004b4 <__aeabi_f2d>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	f107 0008 	add.w	r0, r7, #8
 80061a2:	4922      	ldr	r1, [pc, #136]	@ (800622c <TaskOLED_Display+0xac>)
 80061a4:	f005 f8f6 	bl	800b394 <siprintf>
		SSD1306_GotoXY(0, 0);
 80061a8:	2100      	movs	r1, #0
 80061aa:	2000      	movs	r0, #0
 80061ac:	f000 fdec 	bl	8006d88 <SSD1306_GotoXY>
		SSD1306_Puts(buf, &Font_7x10, 1);
 80061b0:	f107 0308 	add.w	r3, r7, #8
 80061b4:	2201      	movs	r2, #1
 80061b6:	491e      	ldr	r1, [pc, #120]	@ (8006230 <TaskOLED_Display+0xb0>)
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fe79 	bl	8006eb0 <SSD1306_Puts>

		// In Roll
		sprintf(buf, "Roll : %.2f", roll_val);
 80061be:	4b1d      	ldr	r3, [pc, #116]	@ (8006234 <TaskOLED_Display+0xb4>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fa f976 	bl	80004b4 <__aeabi_f2d>
 80061c8:	4602      	mov	r2, r0
 80061ca:	460b      	mov	r3, r1
 80061cc:	f107 0008 	add.w	r0, r7, #8
 80061d0:	4919      	ldr	r1, [pc, #100]	@ (8006238 <TaskOLED_Display+0xb8>)
 80061d2:	f005 f8df 	bl	800b394 <siprintf>
		SSD1306_GotoXY(0, 12);
 80061d6:	210c      	movs	r1, #12
 80061d8:	2000      	movs	r0, #0
 80061da:	f000 fdd5 	bl	8006d88 <SSD1306_GotoXY>
		SSD1306_Puts(buf, &Font_7x10, 1);
 80061de:	f107 0308 	add.w	r3, r7, #8
 80061e2:	2201      	movs	r2, #1
 80061e4:	4912      	ldr	r1, [pc, #72]	@ (8006230 <TaskOLED_Display+0xb0>)
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 fe62 	bl	8006eb0 <SSD1306_Puts>

		// In Yaw
		sprintf(buf, "Yaw  : %.2f", yaw_val);
 80061ec:	4b13      	ldr	r3, [pc, #76]	@ (800623c <TaskOLED_Display+0xbc>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fa f95f 	bl	80004b4 <__aeabi_f2d>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	f107 0008 	add.w	r0, r7, #8
 80061fe:	4910      	ldr	r1, [pc, #64]	@ (8006240 <TaskOLED_Display+0xc0>)
 8006200:	f005 f8c8 	bl	800b394 <siprintf>
		SSD1306_GotoXY(0, 24);
 8006204:	2118      	movs	r1, #24
 8006206:	2000      	movs	r0, #0
 8006208:	f000 fdbe 	bl	8006d88 <SSD1306_GotoXY>
		SSD1306_Puts(buf, &Font_7x10, 1);
 800620c:	f107 0308 	add.w	r3, r7, #8
 8006210:	2201      	movs	r2, #1
 8006212:	4907      	ldr	r1, [pc, #28]	@ (8006230 <TaskOLED_Display+0xb0>)
 8006214:	4618      	mov	r0, r3
 8006216:	f000 fe4b 	bl	8006eb0 <SSD1306_Puts>

		// Cập nhật màn hình
		SSD1306_UpdateScreen();
 800621a:	f000 fd11 	bl	8006c40 <SSD1306_UpdateScreen>

		// Delay 200ms
		vTaskDelay(pdMS_TO_TICKS(200));
 800621e:	20c8      	movs	r0, #200	@ 0xc8
 8006220:	f7fd fb6a 	bl	80038f8 <vTaskDelay>
		SSD1306_Clear();
 8006224:	bf00      	nop
 8006226:	e7b1      	b.n	800618c <TaskOLED_Display+0xc>
 8006228:	200042b8 	.word	0x200042b8
 800622c:	0800dba0 	.word	0x0800dba0
 8006230:	20000008 	.word	0x20000008
 8006234:	200042bc 	.word	0x200042bc
 8006238:	0800dbac 	.word	0x0800dbac
 800623c:	200042c0 	.word	0x200042c0
 8006240:	0800dbb8 	.word	0x0800dbb8

08006244 <TaskNRF_RX>:
	}
}
//===================================TaskNRF_RX=======================================
void TaskNRF_RX(void *argument)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b082      	sub	sp, #8
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
    for(;;)
    {
        // Nếu có dữ liệu từ TX gửi sang
        if (NRF24_Available(&nrfRx, 0)) {
 800624c:	2100      	movs	r1, #0
 800624e:	480a      	ldr	r0, [pc, #40]	@ (8006278 <TaskNRF_RX+0x34>)
 8006250:	f000 fa0a 	bl	8006668 <NRF24_Available>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <TaskNRF_RX+0x2a>
            NRF24_Receive(&nrfRx, rx_data, SIZE_RX_BUF);
 800625a:	2208      	movs	r2, #8
 800625c:	4907      	ldr	r1, [pc, #28]	@ (800627c <TaskNRF_RX+0x38>)
 800625e:	4806      	ldr	r0, [pc, #24]	@ (8006278 <TaskNRF_RX+0x34>)
 8006260:	f000 fa32 	bl	80066c8 <NRF24_Receive>

            // Chỉ đảo LED PC13
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8006264:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8006268:	4805      	ldr	r0, [pc, #20]	@ (8006280 <TaskNRF_RX+0x3c>)
 800626a:	f001 fc25 	bl	8007ab8 <HAL_GPIO_TogglePin>
        }

        vTaskDelay(pdMS_TO_TICKS(10)); // 100Hz
 800626e:	200a      	movs	r0, #10
 8006270:	f7fd fb42 	bl	80038f8 <vTaskDelay>
        if (NRF24_Available(&nrfRx, 0)) {
 8006274:	e7ea      	b.n	800624c <TaskNRF_RX+0x8>
 8006276:	bf00      	nop
 8006278:	20004298 	.word	0x20004298
 800627c:	20004290 	.word	0x20004290
 8006280:	40011000 	.word	0x40011000

08006284 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a04      	ldr	r2, [pc, #16]	@ (80062a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d101      	bne.n	800629a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8006296:	f001 f953 	bl	8007540 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800629a:	bf00      	nop
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40012c00 	.word	0x40012c00

080062a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80062ac:	b672      	cpsid	i
}
 80062ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80062b0:	bf00      	nop
 80062b2:	e7fd      	b.n	80062b0 <Error_Handler+0x8>

080062b4 <NRF24_Init>:
static void NRF24_Read_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len);
static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd);
static void NRF24_Reset(nrf24 *node, uint8_t reg);

void NRF24_Init(nrf24 *node)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	NRF24_CE_Disable(node);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 fa55 	bl	800676c <NRF24_CE_Disable>
	NRF24_Write_Reg(node, CONFIG, 0);
 80062c2:	2200      	movs	r2, #0
 80062c4:	2100      	movs	r1, #0
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fa80 	bl	80067cc <NRF24_Write_Reg>
	node->crc = NO_CRC;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	77da      	strb	r2, [r3, #31]
	NRF24_Write_Reg(node, EN_AA, 0x00);
 80062d2:	2200      	movs	r2, #0
 80062d4:	2101      	movs	r1, #1
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa78 	bl	80067cc <NRF24_Write_Reg>
	NRF24_Write_Reg(node, EN_RXADDR, 0x00);
 80062dc:	2200      	movs	r2, #0
 80062de:	2102      	movs	r1, #2
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fa73 	bl	80067cc <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_AW, 0x03);
 80062e6:	2203      	movs	r2, #3
 80062e8:	2103      	movs	r1, #3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 fa6e 	bl	80067cc <NRF24_Write_Reg>
	NRF24_Write_Reg(node, SETUP_RETR, 0);
 80062f0:	2200      	movs	r2, #0
 80062f2:	2104      	movs	r1, #4
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 fa69 	bl	80067cc <NRF24_Write_Reg>
	NRF24_Set_DataRate(node, _250KBS);
 80062fa:	2100      	movs	r1, #0
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f813 	bl	8006328 <NRF24_Set_DataRate>
	NRF24_Set_PALevel(node, HIGH);
 8006302:	2103      	movs	r1, #3
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f85b 	bl	80063c0 <NRF24_Set_PALevel>
	NRF24_Set_Channel(node, DEFAULT_CHANNEL);
 800630a:	2164      	movs	r1, #100	@ 0x64
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f8af 	bl	8006470 <NRF24_Set_Channel>
	NRF24_Set_Mode(node, STANDBY);
 8006312:	2101      	movs	r1, #1
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f8c1 	bl	800649c <NRF24_Set_Mode>
	NRF24_CE_Enable(node);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa16 	bl	800674c <NRF24_CE_Enable>
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <NRF24_Set_DataRate>:

void NRF24_Set_DataRate(nrf24 *node, dat_rate _bitRate)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	460b      	mov	r3, r1
 8006332:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 fa19 	bl	800676c <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 800633a:	2106      	movs	r1, #6
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 faac 	bl	800689a <NRF24_Read_Reg>
 8006342:	4603      	mov	r3, r0
 8006344:	73fb      	strb	r3, [r7, #15]

	switch (_bitRate)
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	2b02      	cmp	r3, #2
 800634a:	d01e      	beq.n	800638a <NRF24_Set_DataRate+0x62>
 800634c:	2b02      	cmp	r3, #2
 800634e:	dc28      	bgt.n	80063a2 <NRF24_Set_DataRate+0x7a>
 8006350:	2b00      	cmp	r3, #0
 8006352:	d002      	beq.n	800635a <NRF24_Set_DataRate+0x32>
 8006354:	2b01      	cmp	r3, #1
 8006356:	d00c      	beq.n	8006372 <NRF24_Set_DataRate+0x4a>
			config |= (1 << 3);
			node->bitRate = _2MBS;
			break;

		default:
			break;
 8006358:	e023      	b.n	80063a2 <NRF24_Set_DataRate+0x7a>
			config |= (1 << 5);
 800635a:	7bfb      	ldrb	r3, [r7, #15]
 800635c:	f043 0320 	orr.w	r3, r3, #32
 8006360:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 8006362:	7bfb      	ldrb	r3, [r7, #15]
 8006364:	f023 0308 	bic.w	r3, r3, #8
 8006368:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _250KBS;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	775a      	strb	r2, [r3, #29]
			break;
 8006370:	e018      	b.n	80063a4 <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	f023 0320 	bic.w	r3, r3, #32
 8006378:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 3);
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	f023 0308 	bic.w	r3, r3, #8
 8006380:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _1MBS;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2201      	movs	r2, #1
 8006386:	775a      	strb	r2, [r3, #29]
			break;
 8006388:	e00c      	b.n	80063a4 <NRF24_Set_DataRate+0x7c>
			config &=~(1 << 5);
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	f023 0320 	bic.w	r3, r3, #32
 8006390:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 3);
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	f043 0308 	orr.w	r3, r3, #8
 8006398:	73fb      	strb	r3, [r7, #15]
			node->bitRate = _2MBS;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2202      	movs	r2, #2
 800639e:	775a      	strb	r2, [r3, #29]
			break;
 80063a0:	e000      	b.n	80063a4 <NRF24_Set_DataRate+0x7c>
			break;
 80063a2:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
 80063a6:	461a      	mov	r2, r3
 80063a8:	2106      	movs	r1, #6
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa0e 	bl	80067cc <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f9cb 	bl	800674c <NRF24_CE_Enable>
}
 80063b6:	bf00      	nop
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
	...

080063c0 <NRF24_Set_PALevel>:

void NRF24_Set_PALevel(nrf24 *node, p_level pwr)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f9cd 	bl	800676c <NRF24_CE_Disable>
	uint8_t config = NRF24_Read_Reg(node, RF_SETUP);
 80063d2:	2106      	movs	r1, #6
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fa60 	bl	800689a <NRF24_Read_Reg>
 80063da:	4603      	mov	r3, r0
 80063dc:	73fb      	strb	r3, [r7, #15]

	switch (pwr) {
 80063de:	78fb      	ldrb	r3, [r7, #3]
 80063e0:	2b03      	cmp	r3, #3
 80063e2:	d837      	bhi.n	8006454 <NRF24_Set_PALevel+0x94>
 80063e4:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <NRF24_Set_PALevel+0x2c>)
 80063e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ea:	bf00      	nop
 80063ec:	080063fd 	.word	0x080063fd
 80063f0:	08006415 	.word	0x08006415
 80063f4:	0800642d 	.word	0x0800642d
 80063f8:	08006445 	.word	0x08006445
		case VERY_LOW:
			config &=~(1 << 2);
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	f023 0304 	bic.w	r3, r3, #4
 8006402:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 8006404:	7bfb      	ldrb	r3, [r7, #15]
 8006406:	f023 0302 	bic.w	r3, r3, #2
 800640a:	73fb      	strb	r3, [r7, #15]
			node->pa = VERY_LOW;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	771a      	strb	r2, [r3, #28]
			break;
 8006412:	e020      	b.n	8006456 <NRF24_Set_PALevel+0x96>

		case LOW:
			config &=~(1 << 2);
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	f023 0304 	bic.w	r3, r3, #4
 800641a:	73fb      	strb	r3, [r7, #15]
			config |= (1 << 1);
 800641c:	7bfb      	ldrb	r3, [r7, #15]
 800641e:	f043 0302 	orr.w	r3, r3, #2
 8006422:	73fb      	strb	r3, [r7, #15]
			node->pa = LOW;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	771a      	strb	r2, [r3, #28]
			break;
 800642a:	e014      	b.n	8006456 <NRF24_Set_PALevel+0x96>

		case MID:
			config |= (1 << 2);
 800642c:	7bfb      	ldrb	r3, [r7, #15]
 800642e:	f043 0304 	orr.w	r3, r3, #4
 8006432:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 1);
 8006434:	7bfb      	ldrb	r3, [r7, #15]
 8006436:	f023 0302 	bic.w	r3, r3, #2
 800643a:	73fb      	strb	r3, [r7, #15]
			node->pa = MID;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2202      	movs	r2, #2
 8006440:	771a      	strb	r2, [r3, #28]
			break;
 8006442:	e008      	b.n	8006456 <NRF24_Set_PALevel+0x96>

		case HIGH:
			config |= (1 << 2) | (1 << 1);
 8006444:	7bfb      	ldrb	r3, [r7, #15]
 8006446:	f043 0306 	orr.w	r3, r3, #6
 800644a:	73fb      	strb	r3, [r7, #15]
			node->pa = HIGH;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2203      	movs	r2, #3
 8006450:	771a      	strb	r2, [r3, #28]
			break;
 8006452:	e000      	b.n	8006456 <NRF24_Set_PALevel+0x96>

		default:
			break;
 8006454:	bf00      	nop
	}
	NRF24_Write_Reg(node, RF_SETUP, config);
 8006456:	7bfb      	ldrb	r3, [r7, #15]
 8006458:	461a      	mov	r2, r3
 800645a:	2106      	movs	r1, #6
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 f9b5 	bl	80067cc <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f972 	bl	800674c <NRF24_CE_Enable>
}
 8006468:	bf00      	nop
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <NRF24_Set_Channel>:

void NRF24_Set_Channel(nrf24 *node, uint8_t channel)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
	NRF24_CE_Disable(node);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 f975 	bl	800676c <NRF24_CE_Disable>
	NRF24_Write_Reg(node, RF_CH, channel);
 8006482:	78fb      	ldrb	r3, [r7, #3]
 8006484:	461a      	mov	r2, r3
 8006486:	2105      	movs	r1, #5
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f000 f99f 	bl	80067cc <NRF24_Write_Reg>
	NRF24_CE_Enable(node);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f000 f95c 	bl	800674c <NRF24_CE_Enable>
}
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <NRF24_Set_Mode>:

void NRF24_Set_Mode(nrf24 *node, mode_nrf _mode)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	460b      	mov	r3, r1
 80064a6:	70fb      	strb	r3, [r7, #3]
	uint8_t config = NRF24_Read_Reg(node, CONFIG);
 80064a8:	2100      	movs	r1, #0
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9f5 	bl	800689a <NRF24_Read_Reg>
 80064b0:	4603      	mov	r3, r0
 80064b2:	73fb      	strb	r3, [r7, #15]

	switch (_mode)
 80064b4:	78fb      	ldrb	r3, [r7, #3]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d837      	bhi.n	800652a <NRF24_Set_Mode+0x8e>
 80064ba:	a201      	add	r2, pc, #4	@ (adr r2, 80064c0 <NRF24_Set_Mode+0x24>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	080064d1 	.word	0x080064d1
 80064c4:	080064e1 	.word	0x080064e1
 80064c8:	080064f7 	.word	0x080064f7
 80064cc:	08006515 	.word	0x08006515
	{
		case PWR_DOWN:
			config &=~(1 << 1);
 80064d0:	7bfb      	ldrb	r3, [r7, #15]
 80064d2:	f023 0302 	bic.w	r3, r3, #2
 80064d6:	73fb      	strb	r3, [r7, #15]
			node->mode = PWR_DOWN;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	779a      	strb	r2, [r3, #30]
			break;
 80064de:	e025      	b.n	800652c <NRF24_Set_Mode+0x90>

		case STANDBY:
			NRF24_CE_Disable(node);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f000 f943 	bl	800676c <NRF24_CE_Disable>
			config |= (1 << 1);
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
 80064e8:	f043 0302 	orr.w	r3, r3, #2
 80064ec:	73fb      	strb	r3, [r7, #15]
			node->mode = STANDBY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	779a      	strb	r2, [r3, #30]
			break;
 80064f4:	e01a      	b.n	800652c <NRF24_Set_Mode+0x90>

		case TX_MODE:
			NRF24_CE_Enable(node);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f928 	bl	800674c <NRF24_CE_Enable>
			config |= (1 << 1);
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
 80064fe:	f043 0302 	orr.w	r3, r3, #2
 8006502:	73fb      	strb	r3, [r7, #15]
			config &=~(1 << 0);
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	f023 0301 	bic.w	r3, r3, #1
 800650a:	73fb      	strb	r3, [r7, #15]
			node->mode = TX_MODE;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	779a      	strb	r2, [r3, #30]
			break;
 8006512:	e00b      	b.n	800652c <NRF24_Set_Mode+0x90>

		case RX_MODE:
			NRF24_CE_Enable(node);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f919 	bl	800674c <NRF24_CE_Enable>
			config |= (1 << 1) | (1 << 0);
 800651a:	7bfb      	ldrb	r3, [r7, #15]
 800651c:	f043 0303 	orr.w	r3, r3, #3
 8006520:	73fb      	strb	r3, [r7, #15]
			node->mode = RX_MODE;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2203      	movs	r2, #3
 8006526:	779a      	strb	r2, [r3, #30]
			break;
 8006528:	e000      	b.n	800652c <NRF24_Set_Mode+0x90>

		default:
			break;
 800652a:	bf00      	nop
	}
	NRF24_Write_Reg(node, CONFIG, config);
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	461a      	mov	r2, r3
 8006530:	2100      	movs	r1, #0
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f94a 	bl	80067cc <NRF24_Write_Reg>
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <NRF24_Set_RxPipe>:
	}
	return (0);
}

void NRF24_Set_RxPipe(nrf24 *node, uint8_t *addr, uint8_t pipe, uint8_t payload)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	4611      	mov	r1, r2
 800654c:	461a      	mov	r2, r3
 800654e:	460b      	mov	r3, r1
 8006550:	71fb      	strb	r3, [r7, #7]
 8006552:	4613      	mov	r3, r2
 8006554:	71bb      	strb	r3, [r7, #6]
	NRF24_CE_Disable(node);
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 f908 	bl	800676c <NRF24_CE_Disable>
	NRF24_Reset(node, STATUS);
 800655c:	2107      	movs	r1, #7
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f9ea 	bl	8006938 <NRF24_Reset>
	uint8_t en_rxaddr = NRF24_Read_Reg(node, EN_RXADDR);
 8006564:	2102      	movs	r1, #2
 8006566:	68f8      	ldr	r0, [r7, #12]
 8006568:	f000 f997 	bl	800689a <NRF24_Read_Reg>
 800656c:	4603      	mov	r3, r0
 800656e:	75fb      	strb	r3, [r7, #23]
	en_rxaddr |= (1 << pipe);
 8006570:	79fb      	ldrb	r3, [r7, #7]
 8006572:	2201      	movs	r2, #1
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	b25a      	sxtb	r2, r3
 800657a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800657e:	4313      	orrs	r3, r2
 8006580:	b25b      	sxtb	r3, r3
 8006582:	75fb      	strb	r3, [r7, #23]
	NRF24_Write_Reg(node, EN_RXADDR, en_rxaddr);
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	461a      	mov	r2, r3
 8006588:	2102      	movs	r1, #2
 800658a:	68f8      	ldr	r0, [r7, #12]
 800658c:	f000 f91e 	bl	80067cc <NRF24_Write_Reg>

	switch(pipe)
 8006590:	79fb      	ldrb	r3, [r7, #7]
 8006592:	2b05      	cmp	r3, #5
 8006594:	d860      	bhi.n	8006658 <NRF24_Set_RxPipe+0x118>
 8006596:	a201      	add	r2, pc, #4	@ (adr r2, 800659c <NRF24_Set_RxPipe+0x5c>)
 8006598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800659c:	080065b5 	.word	0x080065b5
 80065a0:	080065cf 	.word	0x080065cf
 80065a4:	080065e9 	.word	0x080065e9
 80065a8:	08006605 	.word	0x08006605
 80065ac:	08006621 	.word	0x08006621
 80065b0:	0800663d 	.word	0x0800663d
	{
		case 0:
			NRF24_Write_Buffer(node, RX_ADDR_P0, addr, 5);
 80065b4:	2305      	movs	r3, #5
 80065b6:	68ba      	ldr	r2, [r7, #8]
 80065b8:	210a      	movs	r1, #10
 80065ba:	68f8      	ldr	r0, [r7, #12]
 80065bc:	f000 f931 	bl	8006822 <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P0, payload);
 80065c0:	79bb      	ldrb	r3, [r7, #6]
 80065c2:	461a      	mov	r2, r3
 80065c4:	2111      	movs	r1, #17
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	f000 f900 	bl	80067cc <NRF24_Write_Reg>
			break;
 80065cc:	e045      	b.n	800665a <NRF24_Set_RxPipe+0x11a>

		case 1:
			NRF24_Write_Buffer(node, RX_ADDR_P1, addr, 5);
 80065ce:	2305      	movs	r3, #5
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	210b      	movs	r1, #11
 80065d4:	68f8      	ldr	r0, [r7, #12]
 80065d6:	f000 f924 	bl	8006822 <NRF24_Write_Buffer>
			NRF24_Write_Reg(node, RX_PW_P1, payload);
 80065da:	79bb      	ldrb	r3, [r7, #6]
 80065dc:	461a      	mov	r2, r3
 80065de:	2112      	movs	r1, #18
 80065e0:	68f8      	ldr	r0, [r7, #12]
 80065e2:	f000 f8f3 	bl	80067cc <NRF24_Write_Reg>
			break;
 80065e6:	e038      	b.n	800665a <NRF24_Set_RxPipe+0x11a>

		case 2:
			NRF24_Write_Reg(node, RX_ADDR_P2, addr[0]);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	461a      	mov	r2, r3
 80065ee:	210c      	movs	r1, #12
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f000 f8eb 	bl	80067cc <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P2, payload);
 80065f6:	79bb      	ldrb	r3, [r7, #6]
 80065f8:	461a      	mov	r2, r3
 80065fa:	2113      	movs	r1, #19
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 f8e5 	bl	80067cc <NRF24_Write_Reg>
			break;
 8006602:	e02a      	b.n	800665a <NRF24_Set_RxPipe+0x11a>

		case 3:
			NRF24_Write_Reg(node, RX_ADDR_P3, addr[0]);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	210d      	movs	r1, #13
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f8dd 	bl	80067cc <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P3, payload);
 8006612:	79bb      	ldrb	r3, [r7, #6]
 8006614:	461a      	mov	r2, r3
 8006616:	2114      	movs	r1, #20
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f8d7 	bl	80067cc <NRF24_Write_Reg>
			break;
 800661e:	e01c      	b.n	800665a <NRF24_Set_RxPipe+0x11a>

		case 4:
			NRF24_Write_Reg(node, RX_ADDR_P4, addr[0]);
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	461a      	mov	r2, r3
 8006626:	210e      	movs	r1, #14
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f8cf 	bl	80067cc <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P4, payload);
 800662e:	79bb      	ldrb	r3, [r7, #6]
 8006630:	461a      	mov	r2, r3
 8006632:	2115      	movs	r1, #21
 8006634:	68f8      	ldr	r0, [r7, #12]
 8006636:	f000 f8c9 	bl	80067cc <NRF24_Write_Reg>
			break;
 800663a:	e00e      	b.n	800665a <NRF24_Set_RxPipe+0x11a>

		case 5:
			NRF24_Write_Reg(node, RX_ADDR_P5, addr[0]);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	461a      	mov	r2, r3
 8006642:	210f      	movs	r1, #15
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f000 f8c1 	bl	80067cc <NRF24_Write_Reg>
			NRF24_Write_Reg(node, RX_PW_P5, payload);
 800664a:	79bb      	ldrb	r3, [r7, #6]
 800664c:	461a      	mov	r2, r3
 800664e:	2116      	movs	r1, #22
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f000 f8bb 	bl	80067cc <NRF24_Write_Reg>
			break;
 8006656:	e000      	b.n	800665a <NRF24_Set_RxPipe+0x11a>

		default:
			break;
 8006658:	bf00      	nop
	}
	NRF24_CE_Enable(node);
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f000 f876 	bl	800674c <NRF24_CE_Enable>
}
 8006660:	bf00      	nop
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <NRF24_Available>:

uint8_t NRF24_Available(nrf24 *node, uint8_t pipenum)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
	uint8_t status = NRF24_Read_Reg(node, STATUS);
 8006674:	2107      	movs	r1, #7
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f000 f90f 	bl	800689a <NRF24_Read_Reg>
 800667c:	4603      	mov	r3, r0
 800667e:	73fb      	strb	r3, [r7, #15]
	if((status - 64 == 0) && pipenum == 0)
 8006680:	7bfb      	ldrb	r3, [r7, #15]
 8006682:	2b40      	cmp	r3, #64	@ 0x40
 8006684:	d109      	bne.n	800669a <NRF24_Available+0x32>
 8006686:	78fb      	ldrb	r3, [r7, #3]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d106      	bne.n	800669a <NRF24_Available+0x32>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 800668c:	2240      	movs	r2, #64	@ 0x40
 800668e:	2107      	movs	r1, #7
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 f89b 	bl	80067cc <NRF24_Write_Reg>
		return 1;
 8006696:	2301      	movs	r3, #1
 8006698:	e012      	b.n	80066c0 <NRF24_Available+0x58>
	}
	else if((status & (1 << 6)) && (status & (pipenum << 1)))
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00c      	beq.n	80066be <NRF24_Available+0x56>
 80066a4:	7bfa      	ldrb	r2, [r7, #15]
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	4013      	ands	r3, r2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d006      	beq.n	80066be <NRF24_Available+0x56>
	{
		NRF24_Write_Reg(node, STATUS, (1 << 6));
 80066b0:	2240      	movs	r2, #64	@ 0x40
 80066b2:	2107      	movs	r1, #7
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f889 	bl	80067cc <NRF24_Write_Reg>
		return 1;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e000      	b.n	80066c0 <NRF24_Available+0x58>
	}
	return 0;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3710      	adds	r7, #16
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <NRF24_Receive>:

void NRF24_Receive(nrf24 *node, uint8_t *data, uint8_t len)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b086      	sub	sp, #24
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	60f8      	str	r0, [r7, #12]
 80066d0:	60b9      	str	r1, [r7, #8]
 80066d2:	4613      	mov	r3, r2
 80066d4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmdtosend = 0;
 80066d6:	2300      	movs	r3, #0
 80066d8:	75fb      	strb	r3, [r7, #23]

	NRF24_CSN_Enable(node);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f000 f856 	bl	800678c <NRF24_CSN_Enable>
	cmdtosend = R_RX_PAYLOAD;
 80066e0:	2361      	movs	r3, #97	@ 0x61
 80066e2:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(node->hSPIx, &cmdtosend, 1, 100);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6998      	ldr	r0, [r3, #24]
 80066e8:	f107 0117 	add.w	r1, r7, #23
 80066ec:	2364      	movs	r3, #100	@ 0x64
 80066ee:	2201      	movs	r2, #1
 80066f0:	f003 f9d4 	bl	8009a9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80066f4:	bf00      	nop
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	699b      	ldr	r3, [r3, #24]
 80066fa:	4618      	mov	r0, r3
 80066fc:	f003 fdd4 	bl	800a2a8 <HAL_SPI_GetState>
 8006700:	4603      	mov	r3, r0
 8006702:	2b01      	cmp	r3, #1
 8006704:	d1f7      	bne.n	80066f6 <NRF24_Receive+0x2e>
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6998      	ldr	r0, [r3, #24]
 800670a:	79fb      	ldrb	r3, [r7, #7]
 800670c:	b29a      	uxth	r2, r3
 800670e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006712:	68b9      	ldr	r1, [r7, #8]
 8006714:	f003 fb06 	bl	8009d24 <HAL_SPI_Receive>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8006718:	bf00      	nop
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	4618      	mov	r0, r3
 8006720:	f003 fdc2 	bl	800a2a8 <HAL_SPI_GetState>
 8006724:	4603      	mov	r3, r0
 8006726:	2b01      	cmp	r3, #1
 8006728:	d1f7      	bne.n	800671a <NRF24_Receive+0x52>
	NRF24_CSN_Disable(node);
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	f000 f83e 	bl	80067ac <NRF24_CSN_Disable>
	HAL_Delay(1);
 8006730:	2001      	movs	r0, #1
 8006732:	f000 ff21 	bl	8007578 <HAL_Delay>
	cmdtosend = FLUSH_RX;
 8006736:	23e2      	movs	r3, #226	@ 0xe2
 8006738:	75fb      	strb	r3, [r7, #23]
	NRF24_Send_Cmd(node, cmdtosend);
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	4619      	mov	r1, r3
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f8d8 	bl	80068f4 <NRF24_Send_Cmd>
}
 8006744:	bf00      	nop
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <NRF24_CE_Enable>:
	for (int i = 29; i < 38; i++)
		*(data + i) = NRF24_Read_Reg(node, i - 12);
}

static void NRF24_CE_Enable(nrf24 *node)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_SET);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6898      	ldr	r0, [r3, #8]
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	899b      	ldrh	r3, [r3, #12]
 800675c:	2201      	movs	r2, #1
 800675e:	4619      	mov	r1, r3
 8006760:	f001 f992 	bl	8007a88 <HAL_GPIO_WritePin>
}
 8006764:	bf00      	nop
 8006766:	3708      	adds	r7, #8
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <NRF24_CE_Disable>:

static void NRF24_CE_Disable(nrf24 *node)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CE_port, node->CE_pin, GPIO_PIN_RESET);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6898      	ldr	r0, [r3, #8]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	899b      	ldrh	r3, [r3, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	4619      	mov	r1, r3
 8006780:	f001 f982 	bl	8007a88 <HAL_GPIO_WritePin>
}
 8006784:	bf00      	nop
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <NRF24_CSN_Enable>:

static void NRF24_CSN_Enable(nrf24 *node)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_RESET);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	889b      	ldrh	r3, [r3, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	4619      	mov	r1, r3
 80067a0:	f001 f972 	bl	8007a88 <HAL_GPIO_WritePin>
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <NRF24_CSN_Disable>:

static void NRF24_CSN_Disable(nrf24 *node)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(node->CSN_port, node->CSN_pin, GPIO_PIN_SET);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6818      	ldr	r0, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	889b      	ldrh	r3, [r3, #4]
 80067bc:	2201      	movs	r2, #1
 80067be:	4619      	mov	r1, r3
 80067c0:	f001 f962 	bl	8007a88 <HAL_GPIO_WritePin>
}
 80067c4:	bf00      	nop
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <NRF24_Write_Reg>:

static void NRF24_Write_Reg(nrf24 *node, uint8_t reg, uint8_t data)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	460b      	mov	r3, r1
 80067d6:	70fb      	strb	r3, [r7, #3]
 80067d8:	4613      	mov	r3, r2
 80067da:	70bb      	strb	r3, [r7, #2]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 80067dc:	78fb      	ldrb	r3, [r7, #3]
 80067de:	f043 0320 	orr.w	r3, r3, #32
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	733b      	strb	r3, [r7, #12]
	buf[1] = data;
 80067e6:	78bb      	ldrb	r3, [r7, #2]
 80067e8:	737b      	strb	r3, [r7, #13]
	NRF24_CSN_Enable(node);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff ffce 	bl	800678c <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 2, NRF_TX_TIMEOUT);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6998      	ldr	r0, [r3, #24]
 80067f4:	f107 010c 	add.w	r1, r7, #12
 80067f8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80067fc:	2202      	movs	r2, #2
 80067fe:	f003 f94d 	bl	8009a9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8006802:	bf00      	nop
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	4618      	mov	r0, r3
 800680a:	f003 fd4d 	bl	800a2a8 <HAL_SPI_GetState>
 800680e:	4603      	mov	r3, r0
 8006810:	2b01      	cmp	r3, #1
 8006812:	d1f7      	bne.n	8006804 <NRF24_Write_Reg+0x38>
	NRF24_CSN_Disable(node);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7ff ffc9 	bl	80067ac <NRF24_CSN_Disable>
}
 800681a:	bf00      	nop
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <NRF24_Write_Buffer>:

static void NRF24_Write_Buffer(nrf24 *node, uint8_t reg, uint8_t *data, uint16_t len)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b086      	sub	sp, #24
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	461a      	mov	r2, r3
 800682e:	460b      	mov	r3, r1
 8006830:	72fb      	strb	r3, [r7, #11]
 8006832:	4613      	mov	r3, r2
 8006834:	813b      	strh	r3, [r7, #8]
	uint8_t buf[2];
	buf[0] = (reg | 1 << 5);
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	f043 0320 	orr.w	r3, r3, #32
 800683c:	b2db      	uxtb	r3, r3
 800683e:	753b      	strb	r3, [r7, #20]
	NRF24_CSN_Enable(node);
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7ff ffa3 	bl	800678c <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, buf, 1, NRF_TX_TIMEOUT);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	6998      	ldr	r0, [r3, #24]
 800684a:	f107 0114 	add.w	r1, r7, #20
 800684e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006852:	2201      	movs	r2, #1
 8006854:	f003 f922 	bl	8009a9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8006858:	bf00      	nop
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	4618      	mov	r0, r3
 8006860:	f003 fd22 	bl	800a2a8 <HAL_SPI_GetState>
 8006864:	4603      	mov	r3, r0
 8006866:	2b01      	cmp	r3, #1
 8006868:	d1f7      	bne.n	800685a <NRF24_Write_Buffer+0x38>
	HAL_SPI_Transmit(node->hSPIx, data, len, NRF_TX_TIMEOUT);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6998      	ldr	r0, [r3, #24]
 800686e:	893a      	ldrh	r2, [r7, #8]
 8006870:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006874:	6879      	ldr	r1, [r7, #4]
 8006876:	f003 f911 	bl	8009a9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 800687a:	bf00      	nop
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	4618      	mov	r0, r3
 8006882:	f003 fd11 	bl	800a2a8 <HAL_SPI_GetState>
 8006886:	4603      	mov	r3, r0
 8006888:	2b01      	cmp	r3, #1
 800688a:	d1f7      	bne.n	800687c <NRF24_Write_Buffer+0x5a>
	NRF24_CSN_Disable(node);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff ff8d 	bl	80067ac <NRF24_CSN_Disable>
}
 8006892:	bf00      	nop
 8006894:	3718      	adds	r7, #24
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <NRF24_Read_Reg>:

static uint8_t NRF24_Read_Reg(nrf24 *node, uint8_t reg)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
	uint8_t data = 0;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
	NRF24_CSN_Enable(node);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f7ff ff6e 	bl	800678c <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &reg, 1, NRF_TX_TIMEOUT);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6998      	ldr	r0, [r3, #24]
 80068b4:	1cf9      	adds	r1, r7, #3
 80068b6:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80068ba:	2201      	movs	r2, #1
 80068bc:	f003 f8ee 	bl	8009a9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 80068c0:	bf00      	nop
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f003 fcee 	bl	800a2a8 <HAL_SPI_GetState>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d1f7      	bne.n	80068c2 <NRF24_Read_Reg+0x28>
	HAL_SPI_Receive(node->hSPIx, &data, 1, NRF_RX_TIMEOUT);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6998      	ldr	r0, [r3, #24]
 80068d6:	f107 010f 	add.w	r1, r7, #15
 80068da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80068de:	2201      	movs	r2, #1
 80068e0:	f003 fa20 	bl	8009d24 <HAL_SPI_Receive>
	NRF24_CSN_Disable(node);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff ff61 	bl	80067ac <NRF24_CSN_Disable>
	return data;
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3710      	adds	r7, #16
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <NRF24_Send_Cmd>:
	HAL_SPI_Receive(node->hSPIx, data, len, NRF_RX_TIMEOUT);
	NRF24_CSN_Disable(node);
}

static void NRF24_Send_Cmd(nrf24 *node, uint8_t cmd)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
	NRF24_CSN_Enable(node);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f7ff ff43 	bl	800678c <NRF24_CSN_Enable>
	HAL_SPI_Transmit(node->hSPIx, &cmd, 1, NRF_TX_TIMEOUT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6998      	ldr	r0, [r3, #24]
 800690a:	1cf9      	adds	r1, r7, #3
 800690c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8006910:	2201      	movs	r2, #1
 8006912:	f003 f8c3 	bl	8009a9c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(node->hSPIx) != HAL_SPI_STATE_READY);
 8006916:	bf00      	nop
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	4618      	mov	r0, r3
 800691e:	f003 fcc3 	bl	800a2a8 <HAL_SPI_GetState>
 8006922:	4603      	mov	r3, r0
 8006924:	2b01      	cmp	r3, #1
 8006926:	d1f7      	bne.n	8006918 <NRF24_Send_Cmd+0x24>
	NRF24_CSN_Disable(node);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ff3f 	bl	80067ac <NRF24_CSN_Disable>
}
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
	...

08006938 <NRF24_Reset>:

static void NRF24_Reset(nrf24 *node, uint8_t reg)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	70fb      	strb	r3, [r7, #3]
	if(reg == STATUS)
 8006944:	78fb      	ldrb	r3, [r7, #3]
 8006946:	2b07      	cmp	r3, #7
 8006948:	d105      	bne.n	8006956 <NRF24_Reset+0x1e>
	{
		NRF24_Write_Reg(node, STATUS, 0x00);
 800694a:	2200      	movs	r2, #0
 800694c:	2107      	movs	r1, #7
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7ff ff3c 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
		NRF24_Write_Reg(node, DYNPD, 0);
		NRF24_Write_Reg(node, FEATURE, 0);
	}
}
 8006954:	e0a8      	b.n	8006aa8 <NRF24_Reset+0x170>
	else if(reg == FIFO_STATUS)
 8006956:	78fb      	ldrb	r3, [r7, #3]
 8006958:	2b17      	cmp	r3, #23
 800695a:	d105      	bne.n	8006968 <NRF24_Reset+0x30>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 800695c:	2211      	movs	r2, #17
 800695e:	2117      	movs	r1, #23
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f7ff ff33 	bl	80067cc <NRF24_Write_Reg>
}
 8006966:	e09f      	b.n	8006aa8 <NRF24_Reset+0x170>
		NRF24_Write_Reg(node, CONFIG, 0x08);
 8006968:	2208      	movs	r2, #8
 800696a:	2100      	movs	r1, #0
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7ff ff2d 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_AA, 0x3F);
 8006972:	223f      	movs	r2, #63	@ 0x3f
 8006974:	2101      	movs	r1, #1
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f7ff ff28 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, EN_RXADDR, 0x03);
 800697c:	2203      	movs	r2, #3
 800697e:	2102      	movs	r1, #2
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f7ff ff23 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_AW, 0x03);
 8006986:	2203      	movs	r2, #3
 8006988:	2103      	movs	r1, #3
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f7ff ff1e 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, SETUP_RETR, 0x03);
 8006990:	2203      	movs	r2, #3
 8006992:	2104      	movs	r1, #4
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f7ff ff19 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_CH, 0x02);
 800699a:	2202      	movs	r2, #2
 800699c:	2105      	movs	r1, #5
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7ff ff14 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RF_SETUP, 0x0E);
 80069a4:	220e      	movs	r2, #14
 80069a6:	2106      	movs	r1, #6
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff ff0f 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, STATUS, 0x00);
 80069ae:	2200      	movs	r2, #0
 80069b0:	2107      	movs	r1, #7
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff ff0a 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, OBSERVE_TX, 0x00);
 80069b8:	2200      	movs	r2, #0
 80069ba:	2108      	movs	r1, #8
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7ff ff05 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RPD, 0x00);
 80069c2:	2200      	movs	r2, #0
 80069c4:	2109      	movs	r1, #9
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f7ff ff00 	bl	80067cc <NRF24_Write_Reg>
		uint8_t rx_addr_p0_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 80069cc:	4a38      	ldr	r2, [pc, #224]	@ (8006ab0 <NRF24_Reset+0x178>)
 80069ce:	f107 0318 	add.w	r3, r7, #24
 80069d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069d6:	6018      	str	r0, [r3, #0]
 80069d8:	3304      	adds	r3, #4
 80069da:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P0, rx_addr_p0_def, 5);
 80069dc:	f107 0218 	add.w	r2, r7, #24
 80069e0:	2305      	movs	r3, #5
 80069e2:	210a      	movs	r1, #10
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7ff ff1c 	bl	8006822 <NRF24_Write_Buffer>
		uint8_t rx_addr_p1_def[5] = {0xC2, 0xC2, 0xC2, 0xC2, 0xC2};
 80069ea:	4a32      	ldr	r2, [pc, #200]	@ (8006ab4 <NRF24_Reset+0x17c>)
 80069ec:	f107 0310 	add.w	r3, r7, #16
 80069f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80069f4:	6018      	str	r0, [r3, #0]
 80069f6:	3304      	adds	r3, #4
 80069f8:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, RX_ADDR_P1, rx_addr_p1_def, 5);
 80069fa:	f107 0210 	add.w	r2, r7, #16
 80069fe:	2305      	movs	r3, #5
 8006a00:	210b      	movs	r1, #11
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f7ff ff0d 	bl	8006822 <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_ADDR_P2, 0xC3);
 8006a08:	22c3      	movs	r2, #195	@ 0xc3
 8006a0a:	210c      	movs	r1, #12
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f7ff fedd 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P3, 0xC4);
 8006a12:	22c4      	movs	r2, #196	@ 0xc4
 8006a14:	210d      	movs	r1, #13
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff fed8 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P4, 0xC5);
 8006a1c:	22c5      	movs	r2, #197	@ 0xc5
 8006a1e:	210e      	movs	r1, #14
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7ff fed3 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_ADDR_P5, 0xC6);
 8006a26:	22c6      	movs	r2, #198	@ 0xc6
 8006a28:	210f      	movs	r1, #15
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7ff fece 	bl	80067cc <NRF24_Write_Reg>
		uint8_t tx_addr_def[5] = {0xE7, 0xE7, 0xE7, 0xE7, 0xE7};
 8006a30:	4a1f      	ldr	r2, [pc, #124]	@ (8006ab0 <NRF24_Reset+0x178>)
 8006a32:	f107 0308 	add.w	r3, r7, #8
 8006a36:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a3a:	6018      	str	r0, [r3, #0]
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	7019      	strb	r1, [r3, #0]
		NRF24_Write_Buffer(node, TX_ADDR, tx_addr_def, 5);
 8006a40:	f107 0208 	add.w	r2, r7, #8
 8006a44:	2305      	movs	r3, #5
 8006a46:	2110      	movs	r1, #16
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f7ff feea 	bl	8006822 <NRF24_Write_Buffer>
		NRF24_Write_Reg(node, RX_PW_P0, 0);
 8006a4e:	2200      	movs	r2, #0
 8006a50:	2111      	movs	r1, #17
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff feba 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P1, 0);
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2112      	movs	r1, #18
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f7ff feb5 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P2, 0);
 8006a62:	2200      	movs	r2, #0
 8006a64:	2113      	movs	r1, #19
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff feb0 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P3, 0);
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2114      	movs	r1, #20
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f7ff feab 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P4, 0);
 8006a76:	2200      	movs	r2, #0
 8006a78:	2115      	movs	r1, #21
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fea6 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, RX_PW_P5, 0);
 8006a80:	2200      	movs	r2, #0
 8006a82:	2116      	movs	r1, #22
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7ff fea1 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FIFO_STATUS, 0x11);
 8006a8a:	2211      	movs	r2, #17
 8006a8c:	2117      	movs	r1, #23
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f7ff fe9c 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, DYNPD, 0);
 8006a94:	2200      	movs	r2, #0
 8006a96:	211c      	movs	r1, #28
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f7ff fe97 	bl	80067cc <NRF24_Write_Reg>
		NRF24_Write_Reg(node, FEATURE, 0);
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	211d      	movs	r1, #29
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff fe92 	bl	80067cc <NRF24_Write_Reg>
}
 8006aa8:	bf00      	nop
 8006aaa:	3720      	adds	r7, #32
 8006aac:	46bd      	mov	sp, r7
 8006aae:	bd80      	pop	{r7, pc}
 8006ab0:	0800dbc4 	.word	0x0800dbc4
 8006ab4:	0800dbcc 	.word	0x0800dbcc

08006ab8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8006abe:	f000 fa25 	bl	8006f0c <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8006ac2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	2178      	movs	r1, #120	@ 0x78
 8006aca:	485b      	ldr	r0, [pc, #364]	@ (8006c38 <SSD1306_Init+0x180>)
 8006acc:	f001 fdbe 	bl	800864c <HAL_I2C_IsDeviceReady>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e0a9      	b.n	8006c2e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8006ada:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8006ade:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006ae0:	e002      	b.n	8006ae8 <SSD1306_Init+0x30>
		p--;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1f9      	bne.n	8006ae2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8006aee:	22ae      	movs	r2, #174	@ 0xae
 8006af0:	2100      	movs	r1, #0
 8006af2:	2078      	movs	r0, #120	@ 0x78
 8006af4:	f000 fa84 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8006af8:	2220      	movs	r2, #32
 8006afa:	2100      	movs	r1, #0
 8006afc:	2078      	movs	r0, #120	@ 0x78
 8006afe:	f000 fa7f 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8006b02:	2210      	movs	r2, #16
 8006b04:	2100      	movs	r1, #0
 8006b06:	2078      	movs	r0, #120	@ 0x78
 8006b08:	f000 fa7a 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006b0c:	22b0      	movs	r2, #176	@ 0xb0
 8006b0e:	2100      	movs	r1, #0
 8006b10:	2078      	movs	r0, #120	@ 0x78
 8006b12:	f000 fa75 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8006b16:	22c8      	movs	r2, #200	@ 0xc8
 8006b18:	2100      	movs	r1, #0
 8006b1a:	2078      	movs	r0, #120	@ 0x78
 8006b1c:	f000 fa70 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8006b20:	2200      	movs	r2, #0
 8006b22:	2100      	movs	r1, #0
 8006b24:	2078      	movs	r0, #120	@ 0x78
 8006b26:	f000 fa6b 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	2078      	movs	r0, #120	@ 0x78
 8006b30:	f000 fa66 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8006b34:	2240      	movs	r2, #64	@ 0x40
 8006b36:	2100      	movs	r1, #0
 8006b38:	2078      	movs	r0, #120	@ 0x78
 8006b3a:	f000 fa61 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8006b3e:	2281      	movs	r2, #129	@ 0x81
 8006b40:	2100      	movs	r1, #0
 8006b42:	2078      	movs	r0, #120	@ 0x78
 8006b44:	f000 fa5c 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8006b48:	22ff      	movs	r2, #255	@ 0xff
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	2078      	movs	r0, #120	@ 0x78
 8006b4e:	f000 fa57 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8006b52:	22a1      	movs	r2, #161	@ 0xa1
 8006b54:	2100      	movs	r1, #0
 8006b56:	2078      	movs	r0, #120	@ 0x78
 8006b58:	f000 fa52 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8006b5c:	22a6      	movs	r2, #166	@ 0xa6
 8006b5e:	2100      	movs	r1, #0
 8006b60:	2078      	movs	r0, #120	@ 0x78
 8006b62:	f000 fa4d 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8006b66:	22a8      	movs	r2, #168	@ 0xa8
 8006b68:	2100      	movs	r1, #0
 8006b6a:	2078      	movs	r0, #120	@ 0x78
 8006b6c:	f000 fa48 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8006b70:	223f      	movs	r2, #63	@ 0x3f
 8006b72:	2100      	movs	r1, #0
 8006b74:	2078      	movs	r0, #120	@ 0x78
 8006b76:	f000 fa43 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8006b7a:	22a4      	movs	r2, #164	@ 0xa4
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	2078      	movs	r0, #120	@ 0x78
 8006b80:	f000 fa3e 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8006b84:	22d3      	movs	r2, #211	@ 0xd3
 8006b86:	2100      	movs	r1, #0
 8006b88:	2078      	movs	r0, #120	@ 0x78
 8006b8a:	f000 fa39 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2100      	movs	r1, #0
 8006b92:	2078      	movs	r0, #120	@ 0x78
 8006b94:	f000 fa34 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8006b98:	22d5      	movs	r2, #213	@ 0xd5
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	2078      	movs	r0, #120	@ 0x78
 8006b9e:	f000 fa2f 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8006ba2:	22f0      	movs	r2, #240	@ 0xf0
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	2078      	movs	r0, #120	@ 0x78
 8006ba8:	f000 fa2a 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8006bac:	22d9      	movs	r2, #217	@ 0xd9
 8006bae:	2100      	movs	r1, #0
 8006bb0:	2078      	movs	r0, #120	@ 0x78
 8006bb2:	f000 fa25 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8006bb6:	2222      	movs	r2, #34	@ 0x22
 8006bb8:	2100      	movs	r1, #0
 8006bba:	2078      	movs	r0, #120	@ 0x78
 8006bbc:	f000 fa20 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8006bc0:	22da      	movs	r2, #218	@ 0xda
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	2078      	movs	r0, #120	@ 0x78
 8006bc6:	f000 fa1b 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8006bca:	2212      	movs	r2, #18
 8006bcc:	2100      	movs	r1, #0
 8006bce:	2078      	movs	r0, #120	@ 0x78
 8006bd0:	f000 fa16 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8006bd4:	22db      	movs	r2, #219	@ 0xdb
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	2078      	movs	r0, #120	@ 0x78
 8006bda:	f000 fa11 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8006bde:	2220      	movs	r2, #32
 8006be0:	2100      	movs	r1, #0
 8006be2:	2078      	movs	r0, #120	@ 0x78
 8006be4:	f000 fa0c 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8006be8:	228d      	movs	r2, #141	@ 0x8d
 8006bea:	2100      	movs	r1, #0
 8006bec:	2078      	movs	r0, #120	@ 0x78
 8006bee:	f000 fa07 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8006bf2:	2214      	movs	r2, #20
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	2078      	movs	r0, #120	@ 0x78
 8006bf8:	f000 fa02 	bl	8007000 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8006bfc:	22af      	movs	r2, #175	@ 0xaf
 8006bfe:	2100      	movs	r1, #0
 8006c00:	2078      	movs	r0, #120	@ 0x78
 8006c02:	f000 f9fd 	bl	8007000 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8006c06:	222e      	movs	r2, #46	@ 0x2e
 8006c08:	2100      	movs	r1, #0
 8006c0a:	2078      	movs	r0, #120	@ 0x78
 8006c0c:	f000 f9f8 	bl	8007000 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8006c10:	2000      	movs	r0, #0
 8006c12:	f000 f843 	bl	8006c9c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8006c16:	f000 f813 	bl	8006c40 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8006c1a:	4b08      	ldr	r3, [pc, #32]	@ (8006c3c <SSD1306_Init+0x184>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8006c20:	4b06      	ldr	r3, [pc, #24]	@ (8006c3c <SSD1306_Init+0x184>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8006c26:	4b05      	ldr	r3, [pc, #20]	@ (8006c3c <SSD1306_Init+0x184>)
 8006c28:	2201      	movs	r2, #1
 8006c2a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8006c2c:	2301      	movs	r3, #1
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	2000437c 	.word	0x2000437c
 8006c3c:	20004828 	.word	0x20004828

08006c40 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8006c46:	2300      	movs	r3, #0
 8006c48:	71fb      	strb	r3, [r7, #7]
 8006c4a:	e01d      	b.n	8006c88 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8006c4c:	79fb      	ldrb	r3, [r7, #7]
 8006c4e:	3b50      	subs	r3, #80	@ 0x50
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	461a      	mov	r2, r3
 8006c54:	2100      	movs	r1, #0
 8006c56:	2078      	movs	r0, #120	@ 0x78
 8006c58:	f000 f9d2 	bl	8007000 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	2100      	movs	r1, #0
 8006c60:	2078      	movs	r0, #120	@ 0x78
 8006c62:	f000 f9cd 	bl	8007000 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8006c66:	2210      	movs	r2, #16
 8006c68:	2100      	movs	r1, #0
 8006c6a:	2078      	movs	r0, #120	@ 0x78
 8006c6c:	f000 f9c8 	bl	8007000 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8006c70:	79fb      	ldrb	r3, [r7, #7]
 8006c72:	01db      	lsls	r3, r3, #7
 8006c74:	4a08      	ldr	r2, [pc, #32]	@ (8006c98 <SSD1306_UpdateScreen+0x58>)
 8006c76:	441a      	add	r2, r3
 8006c78:	2380      	movs	r3, #128	@ 0x80
 8006c7a:	2140      	movs	r1, #64	@ 0x40
 8006c7c:	2078      	movs	r0, #120	@ 0x78
 8006c7e:	f000 f959 	bl	8006f34 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	3301      	adds	r3, #1
 8006c86:	71fb      	strb	r3, [r7, #7]
 8006c88:	79fb      	ldrb	r3, [r7, #7]
 8006c8a:	2b07      	cmp	r3, #7
 8006c8c:	d9de      	bls.n	8006c4c <SSD1306_UpdateScreen+0xc>
	}
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20004428 	.word	0x20004428

08006c9c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8006ca6:	79fb      	ldrb	r3, [r7, #7]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <SSD1306_Fill+0x14>
 8006cac:	2300      	movs	r3, #0
 8006cae:	e000      	b.n	8006cb2 <SSD1306_Fill+0x16>
 8006cb0:	23ff      	movs	r3, #255	@ 0xff
 8006cb2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	4803      	ldr	r0, [pc, #12]	@ (8006cc8 <SSD1306_Fill+0x2c>)
 8006cba:	f004 fbde 	bl	800b47a <memset>
}
 8006cbe:	bf00      	nop
 8006cc0:	3708      	adds	r7, #8
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20004428 	.word	0x20004428

08006ccc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	80fb      	strh	r3, [r7, #6]
 8006cd6:	460b      	mov	r3, r1
 8006cd8:	80bb      	strh	r3, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	70fb      	strb	r3, [r7, #3]
	if (
 8006cde:	88fb      	ldrh	r3, [r7, #6]
 8006ce0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ce2:	d848      	bhi.n	8006d76 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8006ce4:	88bb      	ldrh	r3, [r7, #4]
 8006ce6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ce8:	d845      	bhi.n	8006d76 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8006cea:	4b25      	ldr	r3, [pc, #148]	@ (8006d80 <SSD1306_DrawPixel+0xb4>)
 8006cec:	791b      	ldrb	r3, [r3, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d006      	beq.n	8006d00 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8006cf2:	78fb      	ldrb	r3, [r7, #3]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	bf0c      	ite	eq
 8006cf8:	2301      	moveq	r3, #1
 8006cfa:	2300      	movne	r3, #0
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8006d00:	78fb      	ldrb	r3, [r7, #3]
 8006d02:	2b01      	cmp	r3, #1
 8006d04:	d11a      	bne.n	8006d3c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8006d06:	88fa      	ldrh	r2, [r7, #6]
 8006d08:	88bb      	ldrh	r3, [r7, #4]
 8006d0a:	08db      	lsrs	r3, r3, #3
 8006d0c:	b298      	uxth	r0, r3
 8006d0e:	4603      	mov	r3, r0
 8006d10:	01db      	lsls	r3, r3, #7
 8006d12:	4413      	add	r3, r2
 8006d14:	4a1b      	ldr	r2, [pc, #108]	@ (8006d84 <SSD1306_DrawPixel+0xb8>)
 8006d16:	5cd3      	ldrb	r3, [r2, r3]
 8006d18:	b25a      	sxtb	r2, r3
 8006d1a:	88bb      	ldrh	r3, [r7, #4]
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	2101      	movs	r1, #1
 8006d22:	fa01 f303 	lsl.w	r3, r1, r3
 8006d26:	b25b      	sxtb	r3, r3
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	b259      	sxtb	r1, r3
 8006d2c:	88fa      	ldrh	r2, [r7, #6]
 8006d2e:	4603      	mov	r3, r0
 8006d30:	01db      	lsls	r3, r3, #7
 8006d32:	4413      	add	r3, r2
 8006d34:	b2c9      	uxtb	r1, r1
 8006d36:	4a13      	ldr	r2, [pc, #76]	@ (8006d84 <SSD1306_DrawPixel+0xb8>)
 8006d38:	54d1      	strb	r1, [r2, r3]
 8006d3a:	e01d      	b.n	8006d78 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006d3c:	88fa      	ldrh	r2, [r7, #6]
 8006d3e:	88bb      	ldrh	r3, [r7, #4]
 8006d40:	08db      	lsrs	r3, r3, #3
 8006d42:	b298      	uxth	r0, r3
 8006d44:	4603      	mov	r3, r0
 8006d46:	01db      	lsls	r3, r3, #7
 8006d48:	4413      	add	r3, r2
 8006d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8006d84 <SSD1306_DrawPixel+0xb8>)
 8006d4c:	5cd3      	ldrb	r3, [r2, r3]
 8006d4e:	b25a      	sxtb	r2, r3
 8006d50:	88bb      	ldrh	r3, [r7, #4]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	2101      	movs	r1, #1
 8006d58:	fa01 f303 	lsl.w	r3, r1, r3
 8006d5c:	b25b      	sxtb	r3, r3
 8006d5e:	43db      	mvns	r3, r3
 8006d60:	b25b      	sxtb	r3, r3
 8006d62:	4013      	ands	r3, r2
 8006d64:	b259      	sxtb	r1, r3
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	4603      	mov	r3, r0
 8006d6a:	01db      	lsls	r3, r3, #7
 8006d6c:	4413      	add	r3, r2
 8006d6e:	b2c9      	uxtb	r1, r1
 8006d70:	4a04      	ldr	r2, [pc, #16]	@ (8006d84 <SSD1306_DrawPixel+0xb8>)
 8006d72:	54d1      	strb	r1, [r2, r3]
 8006d74:	e000      	b.n	8006d78 <SSD1306_DrawPixel+0xac>
		return;
 8006d76:	bf00      	nop
	}
}
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bc80      	pop	{r7}
 8006d7e:	4770      	bx	lr
 8006d80:	20004828 	.word	0x20004828
 8006d84:	20004428 	.word	0x20004428

08006d88 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	4603      	mov	r3, r0
 8006d90:	460a      	mov	r2, r1
 8006d92:	80fb      	strh	r3, [r7, #6]
 8006d94:	4613      	mov	r3, r2
 8006d96:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8006d98:	4a05      	ldr	r2, [pc, #20]	@ (8006db0 <SSD1306_GotoXY+0x28>)
 8006d9a:	88fb      	ldrh	r3, [r7, #6]
 8006d9c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8006d9e:	4a04      	ldr	r2, [pc, #16]	@ (8006db0 <SSD1306_GotoXY+0x28>)
 8006da0:	88bb      	ldrh	r3, [r7, #4]
 8006da2:	8053      	strh	r3, [r2, #2]
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bc80      	pop	{r7}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	20004828 	.word	0x20004828

08006db4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	4603      	mov	r3, r0
 8006dbc:	6039      	str	r1, [r7, #0]
 8006dbe:	71fb      	strb	r3, [r7, #7]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006dc4:	4b39      	ldr	r3, [pc, #228]	@ (8006eac <SSD1306_Putc+0xf8>)
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	4413      	add	r3, r2
	if (
 8006dd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dd2:	dc07      	bgt.n	8006de4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8006dd4:	4b35      	ldr	r3, [pc, #212]	@ (8006eac <SSD1306_Putc+0xf8>)
 8006dd6:	885b      	ldrh	r3, [r3, #2]
 8006dd8:	461a      	mov	r2, r3
 8006dda:	683b      	ldr	r3, [r7, #0]
 8006ddc:	785b      	ldrb	r3, [r3, #1]
 8006dde:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8006de0:	2b3f      	cmp	r3, #63	@ 0x3f
 8006de2:	dd01      	ble.n	8006de8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8006de4:	2300      	movs	r3, #0
 8006de6:	e05d      	b.n	8006ea4 <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
 8006dec:	e04b      	b.n	8006e86 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	79fb      	ldrb	r3, [r7, #7]
 8006df4:	3b20      	subs	r3, #32
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	7849      	ldrb	r1, [r1, #1]
 8006dfa:	fb01 f303 	mul.w	r3, r1, r3
 8006dfe:	4619      	mov	r1, r3
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	440b      	add	r3, r1
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	4413      	add	r3, r2
 8006e08:	881b      	ldrh	r3, [r3, #0]
 8006e0a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	e030      	b.n	8006e74 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	fa02 f303 	lsl.w	r3, r2, r3
 8006e1a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d010      	beq.n	8006e44 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8006e22:	4b22      	ldr	r3, [pc, #136]	@ (8006eac <SSD1306_Putc+0xf8>)
 8006e24:	881a      	ldrh	r2, [r3, #0]
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	4413      	add	r3, r2
 8006e2c:	b298      	uxth	r0, r3
 8006e2e:	4b1f      	ldr	r3, [pc, #124]	@ (8006eac <SSD1306_Putc+0xf8>)
 8006e30:	885a      	ldrh	r2, [r3, #2]
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	4413      	add	r3, r2
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	79ba      	ldrb	r2, [r7, #6]
 8006e3c:	4619      	mov	r1, r3
 8006e3e:	f7ff ff45 	bl	8006ccc <SSD1306_DrawPixel>
 8006e42:	e014      	b.n	8006e6e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8006e44:	4b19      	ldr	r3, [pc, #100]	@ (8006eac <SSD1306_Putc+0xf8>)
 8006e46:	881a      	ldrh	r2, [r3, #0]
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	4413      	add	r3, r2
 8006e4e:	b298      	uxth	r0, r3
 8006e50:	4b16      	ldr	r3, [pc, #88]	@ (8006eac <SSD1306_Putc+0xf8>)
 8006e52:	885a      	ldrh	r2, [r3, #2]
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	4413      	add	r3, r2
 8006e5a:	b299      	uxth	r1, r3
 8006e5c:	79bb      	ldrb	r3, [r7, #6]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	bf0c      	ite	eq
 8006e62:	2301      	moveq	r3, #1
 8006e64:	2300      	movne	r3, #0
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	461a      	mov	r2, r3
 8006e6a:	f7ff ff2f 	bl	8006ccc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	3301      	adds	r3, #1
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	461a      	mov	r2, r3
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d3c8      	bcc.n	8006e12 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3301      	adds	r3, #1
 8006e84:	617b      	str	r3, [r7, #20]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	785b      	ldrb	r3, [r3, #1]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d3ad      	bcc.n	8006dee <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8006e92:	4b06      	ldr	r3, [pc, #24]	@ (8006eac <SSD1306_Putc+0xf8>)
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	683a      	ldr	r2, [r7, #0]
 8006e98:	7812      	ldrb	r2, [r2, #0]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	4b03      	ldr	r3, [pc, #12]	@ (8006eac <SSD1306_Putc+0xf8>)
 8006ea0:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8006ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3718      	adds	r7, #24
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	20004828 	.word	0x20004828

08006eb0 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8006ebe:	e012      	b.n	8006ee6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	79fa      	ldrb	r2, [r7, #7]
 8006ec6:	68b9      	ldr	r1, [r7, #8]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7ff ff73 	bl	8006db4 <SSD1306_Putc>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d002      	beq.n	8006ee0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	781b      	ldrb	r3, [r3, #0]
 8006ede:	e008      	b.n	8006ef2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1e8      	bne.n	8006ec0 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3710      	adds	r7, #16
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}

08006efa <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 8006efa:	b580      	push	{r7, lr}
 8006efc:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8006efe:	2000      	movs	r0, #0
 8006f00:	f7ff fecc 	bl	8006c9c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8006f04:	f7ff fe9c 	bl	8006c40 <SSD1306_UpdateScreen>
}
 8006f08:	bf00      	nop
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8006f12:	4b07      	ldr	r3, [pc, #28]	@ (8006f30 <ssd1306_I2C_Init+0x24>)
 8006f14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006f16:	e002      	b.n	8006f1e <ssd1306_I2C_Init+0x12>
		p--;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1f9      	bne.n	8006f18 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8006f24:	bf00      	nop
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bc80      	pop	{r7}
 8006f2e:	4770      	bx	lr
 8006f30:	0003d090 	.word	0x0003d090

08006f34 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8006f34:	b590      	push	{r4, r7, lr}
 8006f36:	b0c7      	sub	sp, #284	@ 0x11c
 8006f38:	af02      	add	r7, sp, #8
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8006f42:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8006f46:	600a      	str	r2, [r1, #0]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f4e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8006f52:	4622      	mov	r2, r4
 8006f54:	701a      	strb	r2, [r3, #0]
 8006f56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f5a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8006f5e:	4602      	mov	r2, r0
 8006f60:	701a      	strb	r2, [r3, #0]
 8006f62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f66:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006f6a:	460a      	mov	r2, r1
 8006f6c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8006f6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8006f7a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8006f7e:	7812      	ldrb	r2, [r2, #0]
 8006f80:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8006f82:	2300      	movs	r3, #0
 8006f84:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8006f88:	e015      	b.n	8006fb6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8006f8a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006f8e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8006f92:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8006f96:	6812      	ldr	r2, [r2, #0]
 8006f98:	441a      	add	r2, r3
 8006f9a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	7811      	ldrb	r1, [r2, #0]
 8006fa2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8006fa6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8006faa:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8006fac:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8006fb6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8006fc0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8006fc4:	8812      	ldrh	r2, [r2, #0]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d8df      	bhi.n	8006f8a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c2, address, dt, count+1, 10);
 8006fca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006fce:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	b299      	uxth	r1, r3
 8006fd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8006fda:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f107 020c 	add.w	r2, r7, #12
 8006fe8:	200a      	movs	r0, #10
 8006fea:	9000      	str	r0, [sp, #0]
 8006fec:	4803      	ldr	r0, [pc, #12]	@ (8006ffc <ssd1306_I2C_WriteMulti+0xc8>)
 8006fee:	f000 fec1 	bl	8007d74 <HAL_I2C_Master_Transmit>
}
 8006ff2:	bf00      	nop
 8006ff4:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd90      	pop	{r4, r7, pc}
 8006ffc:	2000437c 	.word	0x2000437c

08007000 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b086      	sub	sp, #24
 8007004:	af02      	add	r7, sp, #8
 8007006:	4603      	mov	r3, r0
 8007008:	71fb      	strb	r3, [r7, #7]
 800700a:	460b      	mov	r3, r1
 800700c:	71bb      	strb	r3, [r7, #6]
 800700e:	4613      	mov	r3, r2
 8007010:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8007012:	79bb      	ldrb	r3, [r7, #6]
 8007014:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8007016:	797b      	ldrb	r3, [r7, #5]
 8007018:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 800701a:	79fb      	ldrb	r3, [r7, #7]
 800701c:	b299      	uxth	r1, r3
 800701e:	f107 020c 	add.w	r2, r7, #12
 8007022:	230a      	movs	r3, #10
 8007024:	9300      	str	r3, [sp, #0]
 8007026:	2302      	movs	r3, #2
 8007028:	4803      	ldr	r0, [pc, #12]	@ (8007038 <ssd1306_I2C_Write+0x38>)
 800702a:	f000 fea3 	bl	8007d74 <HAL_I2C_Master_Transmit>
}
 800702e:	bf00      	nop
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	2000437c 	.word	0x2000437c

0800703c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007042:	4b15      	ldr	r3, [pc, #84]	@ (8007098 <HAL_MspInit+0x5c>)
 8007044:	699b      	ldr	r3, [r3, #24]
 8007046:	4a14      	ldr	r2, [pc, #80]	@ (8007098 <HAL_MspInit+0x5c>)
 8007048:	f043 0301 	orr.w	r3, r3, #1
 800704c:	6193      	str	r3, [r2, #24]
 800704e:	4b12      	ldr	r3, [pc, #72]	@ (8007098 <HAL_MspInit+0x5c>)
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	f003 0301 	and.w	r3, r3, #1
 8007056:	60bb      	str	r3, [r7, #8]
 8007058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800705a:	4b0f      	ldr	r3, [pc, #60]	@ (8007098 <HAL_MspInit+0x5c>)
 800705c:	69db      	ldr	r3, [r3, #28]
 800705e:	4a0e      	ldr	r2, [pc, #56]	@ (8007098 <HAL_MspInit+0x5c>)
 8007060:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007064:	61d3      	str	r3, [r2, #28]
 8007066:	4b0c      	ldr	r3, [pc, #48]	@ (8007098 <HAL_MspInit+0x5c>)
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800706e:	607b      	str	r3, [r7, #4]
 8007070:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8007072:	4b0a      	ldr	r3, [pc, #40]	@ (800709c <HAL_MspInit+0x60>)
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800707e:	60fb      	str	r3, [r7, #12]
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	4a04      	ldr	r2, [pc, #16]	@ (800709c <HAL_MspInit+0x60>)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800708e:	bf00      	nop
 8007090:	3714      	adds	r7, #20
 8007092:	46bd      	mov	sp, r7
 8007094:	bc80      	pop	{r7}
 8007096:	4770      	bx	lr
 8007098:	40021000 	.word	0x40021000
 800709c:	40010000 	.word	0x40010000

080070a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08a      	sub	sp, #40	@ 0x28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070a8:	f107 0318 	add.w	r3, r7, #24
 80070ac:	2200      	movs	r2, #0
 80070ae:	601a      	str	r2, [r3, #0]
 80070b0:	605a      	str	r2, [r3, #4]
 80070b2:	609a      	str	r2, [r3, #8]
 80070b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007168 <HAL_I2C_MspInit+0xc8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d124      	bne.n	800710a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070c0:	4b2a      	ldr	r3, [pc, #168]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	4a29      	ldr	r2, [pc, #164]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 80070c6:	f043 0308 	orr.w	r3, r3, #8
 80070ca:	6193      	str	r3, [r2, #24]
 80070cc:	4b27      	ldr	r3, [pc, #156]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	617b      	str	r3, [r7, #20]
 80070d6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80070d8:	23c0      	movs	r3, #192	@ 0xc0
 80070da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80070dc:	2312      	movs	r3, #18
 80070de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80070e0:	2303      	movs	r3, #3
 80070e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070e4:	f107 0318 	add.w	r3, r7, #24
 80070e8:	4619      	mov	r1, r3
 80070ea:	4821      	ldr	r0, [pc, #132]	@ (8007170 <HAL_I2C_MspInit+0xd0>)
 80070ec:	f000 fb48 	bl	8007780 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80070f0:	4b1e      	ldr	r3, [pc, #120]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	4a1d      	ldr	r2, [pc, #116]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 80070f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070fa:	61d3      	str	r3, [r2, #28]
 80070fc:	4b1b      	ldr	r3, [pc, #108]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 80070fe:	69db      	ldr	r3, [r3, #28]
 8007100:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007104:	613b      	str	r3, [r7, #16]
 8007106:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007108:	e029      	b.n	800715e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a19      	ldr	r2, [pc, #100]	@ (8007174 <HAL_I2C_MspInit+0xd4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d124      	bne.n	800715e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007114:	4b15      	ldr	r3, [pc, #84]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	4a14      	ldr	r2, [pc, #80]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 800711a:	f043 0308 	orr.w	r3, r3, #8
 800711e:	6193      	str	r3, [r2, #24]
 8007120:	4b12      	ldr	r3, [pc, #72]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	f003 0308 	and.w	r3, r3, #8
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800712c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8007130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007132:	2312      	movs	r3, #18
 8007134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007136:	2303      	movs	r3, #3
 8007138:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800713a:	f107 0318 	add.w	r3, r7, #24
 800713e:	4619      	mov	r1, r3
 8007140:	480b      	ldr	r0, [pc, #44]	@ (8007170 <HAL_I2C_MspInit+0xd0>)
 8007142:	f000 fb1d 	bl	8007780 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007146:	4b09      	ldr	r3, [pc, #36]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 8007148:	69db      	ldr	r3, [r3, #28]
 800714a:	4a08      	ldr	r2, [pc, #32]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 800714c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007150:	61d3      	str	r3, [r2, #28]
 8007152:	4b06      	ldr	r3, [pc, #24]	@ (800716c <HAL_I2C_MspInit+0xcc>)
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800715a:	60bb      	str	r3, [r7, #8]
 800715c:	68bb      	ldr	r3, [r7, #8]
}
 800715e:	bf00      	nop
 8007160:	3728      	adds	r7, #40	@ 0x28
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	40005400 	.word	0x40005400
 800716c:	40021000 	.word	0x40021000
 8007170:	40010c00 	.word	0x40010c00
 8007174:	40005800 	.word	0x40005800

08007178 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007180:	f107 0310 	add.w	r3, r7, #16
 8007184:	2200      	movs	r2, #0
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	609a      	str	r2, [r3, #8]
 800718c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a1b      	ldr	r2, [pc, #108]	@ (8007200 <HAL_SPI_MspInit+0x88>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d12f      	bne.n	80071f8 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007198:	4b1a      	ldr	r3, [pc, #104]	@ (8007204 <HAL_SPI_MspInit+0x8c>)
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	4a19      	ldr	r2, [pc, #100]	@ (8007204 <HAL_SPI_MspInit+0x8c>)
 800719e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80071a2:	6193      	str	r3, [r2, #24]
 80071a4:	4b17      	ldr	r3, [pc, #92]	@ (8007204 <HAL_SPI_MspInit+0x8c>)
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80071b0:	4b14      	ldr	r3, [pc, #80]	@ (8007204 <HAL_SPI_MspInit+0x8c>)
 80071b2:	699b      	ldr	r3, [r3, #24]
 80071b4:	4a13      	ldr	r2, [pc, #76]	@ (8007204 <HAL_SPI_MspInit+0x8c>)
 80071b6:	f043 0304 	orr.w	r3, r3, #4
 80071ba:	6193      	str	r3, [r2, #24]
 80071bc:	4b11      	ldr	r3, [pc, #68]	@ (8007204 <HAL_SPI_MspInit+0x8c>)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	60bb      	str	r3, [r7, #8]
 80071c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80071c8:	23a0      	movs	r3, #160	@ 0xa0
 80071ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071cc:	2302      	movs	r3, #2
 80071ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80071d0:	2303      	movs	r3, #3
 80071d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071d4:	f107 0310 	add.w	r3, r7, #16
 80071d8:	4619      	mov	r1, r3
 80071da:	480b      	ldr	r0, [pc, #44]	@ (8007208 <HAL_SPI_MspInit+0x90>)
 80071dc:	f000 fad0 	bl	8007780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80071e0:	2340      	movs	r3, #64	@ 0x40
 80071e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ec:	f107 0310 	add.w	r3, r7, #16
 80071f0:	4619      	mov	r1, r3
 80071f2:	4805      	ldr	r0, [pc, #20]	@ (8007208 <HAL_SPI_MspInit+0x90>)
 80071f4:	f000 fac4 	bl	8007780 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80071f8:	bf00      	nop
 80071fa:	3720      	adds	r7, #32
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	40013000 	.word	0x40013000
 8007204:	40021000 	.word	0x40021000
 8007208:	40010800 	.word	0x40010800

0800720c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08c      	sub	sp, #48	@ 0x30
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8007218:	2300      	movs	r3, #0
 800721a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 800721c:	2300      	movs	r3, #0
 800721e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8007222:	4b2e      	ldr	r3, [pc, #184]	@ (80072dc <HAL_InitTick+0xd0>)
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	4a2d      	ldr	r2, [pc, #180]	@ (80072dc <HAL_InitTick+0xd0>)
 8007228:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800722c:	6193      	str	r3, [r2, #24]
 800722e:	4b2b      	ldr	r3, [pc, #172]	@ (80072dc <HAL_InitTick+0xd0>)
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007236:	60bb      	str	r3, [r7, #8]
 8007238:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800723a:	f107 020c 	add.w	r2, r7, #12
 800723e:	f107 0310 	add.w	r3, r7, #16
 8007242:	4611      	mov	r1, r2
 8007244:	4618      	mov	r0, r3
 8007246:	f002 fb57 	bl	80098f8 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800724a:	f002 fb41 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 800724e:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	4a23      	ldr	r2, [pc, #140]	@ (80072e0 <HAL_InitTick+0xd4>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	0c9b      	lsrs	r3, r3, #18
 800725a:	3b01      	subs	r3, #1
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800725e:	4b21      	ldr	r3, [pc, #132]	@ (80072e4 <HAL_InitTick+0xd8>)
 8007260:	4a21      	ldr	r2, [pc, #132]	@ (80072e8 <HAL_InitTick+0xdc>)
 8007262:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8007264:	4b1f      	ldr	r3, [pc, #124]	@ (80072e4 <HAL_InitTick+0xd8>)
 8007266:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800726a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800726c:	4a1d      	ldr	r2, [pc, #116]	@ (80072e4 <HAL_InitTick+0xd8>)
 800726e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007270:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8007272:	4b1c      	ldr	r3, [pc, #112]	@ (80072e4 <HAL_InitTick+0xd8>)
 8007274:	2200      	movs	r2, #0
 8007276:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007278:	4b1a      	ldr	r3, [pc, #104]	@ (80072e4 <HAL_InitTick+0xd8>)
 800727a:	2200      	movs	r2, #0
 800727c:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800727e:	4b19      	ldr	r3, [pc, #100]	@ (80072e4 <HAL_InitTick+0xd8>)
 8007280:	2200      	movs	r2, #0
 8007282:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8007284:	4817      	ldr	r0, [pc, #92]	@ (80072e4 <HAL_InitTick+0xd8>)
 8007286:	f003 f928 	bl	800a4da <HAL_TIM_Base_Init>
 800728a:	4603      	mov	r3, r0
 800728c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8007290:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007294:	2b00      	cmp	r3, #0
 8007296:	d11b      	bne.n	80072d0 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8007298:	4812      	ldr	r0, [pc, #72]	@ (80072e4 <HAL_InitTick+0xd8>)
 800729a:	f003 f977 	bl	800a58c <HAL_TIM_Base_Start_IT>
 800729e:	4603      	mov	r3, r0
 80072a0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80072a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d111      	bne.n	80072d0 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80072ac:	2019      	movs	r0, #25
 80072ae:	f000 fa58 	bl	8007762 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b0f      	cmp	r3, #15
 80072b6:	d808      	bhi.n	80072ca <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80072b8:	2200      	movs	r2, #0
 80072ba:	6879      	ldr	r1, [r7, #4]
 80072bc:	2019      	movs	r0, #25
 80072be:	f000 fa34 	bl	800772a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80072c2:	4a0a      	ldr	r2, [pc, #40]	@ (80072ec <HAL_InitTick+0xe0>)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	e002      	b.n	80072d0 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80072ca:	2301      	movs	r3, #1
 80072cc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80072d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3730      	adds	r7, #48	@ 0x30
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	40021000 	.word	0x40021000
 80072e0:	431bde83 	.word	0x431bde83
 80072e4:	20004830 	.word	0x20004830
 80072e8:	40012c00 	.word	0x40012c00
 80072ec:	20000028 	.word	0x20000028

080072f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80072f0:	b480      	push	{r7}
 80072f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <NMI_Handler+0x4>

080072f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80072fc:	bf00      	nop
 80072fe:	e7fd      	b.n	80072fc <HardFault_Handler+0x4>

08007300 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007300:	b480      	push	{r7}
 8007302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007304:	bf00      	nop
 8007306:	e7fd      	b.n	8007304 <MemManage_Handler+0x4>

08007308 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007308:	b480      	push	{r7}
 800730a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800730c:	bf00      	nop
 800730e:	e7fd      	b.n	800730c <BusFault_Handler+0x4>

08007310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007310:	b480      	push	{r7}
 8007312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <UsageFault_Handler+0x4>

08007318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007318:	b480      	push	{r7}
 800731a:	af00      	add	r7, sp, #0
//
  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */
//
  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800731c:	bf00      	nop
 800731e:	46bd      	mov	sp, r7
 8007320:	bc80      	pop	{r7}
 8007322:	4770      	bx	lr

08007324 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007328:	4802      	ldr	r0, [pc, #8]	@ (8007334 <TIM1_UP_IRQHandler+0x10>)
 800732a:	f003 f981 	bl	800a630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800732e:	bf00      	nop
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	20004830 	.word	0x20004830

08007338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007338:	b480      	push	{r7}
 800733a:	af00      	add	r7, sp, #0
  return 1;
 800733c:	2301      	movs	r3, #1
}
 800733e:	4618      	mov	r0, r3
 8007340:	46bd      	mov	sp, r7
 8007342:	bc80      	pop	{r7}
 8007344:	4770      	bx	lr

08007346 <_kill>:

int _kill(int pid, int sig)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b082      	sub	sp, #8
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007350:	f004 f8e6 	bl	800b520 <__errno>
 8007354:	4603      	mov	r3, r0
 8007356:	2216      	movs	r2, #22
 8007358:	601a      	str	r2, [r3, #0]
  return -1;
 800735a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800735e:	4618      	mov	r0, r3
 8007360:	3708      	adds	r7, #8
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <_exit>:

void _exit (int status)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800736e:	f04f 31ff 	mov.w	r1, #4294967295
 8007372:	6878      	ldr	r0, [r7, #4]
 8007374:	f7ff ffe7 	bl	8007346 <_kill>
  while (1) {}    /* Make sure we hang here */
 8007378:	bf00      	nop
 800737a:	e7fd      	b.n	8007378 <_exit+0x12>

0800737c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
 8007382:	60f8      	str	r0, [r7, #12]
 8007384:	60b9      	str	r1, [r7, #8]
 8007386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	e00a      	b.n	80073a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800738e:	f3af 8000 	nop.w
 8007392:	4601      	mov	r1, r0
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	60ba      	str	r2, [r7, #8]
 800739a:	b2ca      	uxtb	r2, r1
 800739c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	3301      	adds	r3, #1
 80073a2:	617b      	str	r3, [r7, #20]
 80073a4:	697a      	ldr	r2, [r7, #20]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	dbf0      	blt.n	800738e <_read+0x12>
  }

  return len;
 80073ac:	687b      	ldr	r3, [r7, #4]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3718      	adds	r7, #24
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b086      	sub	sp, #24
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	60f8      	str	r0, [r7, #12]
 80073be:	60b9      	str	r1, [r7, #8]
 80073c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073c2:	2300      	movs	r3, #0
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	e009      	b.n	80073dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	60ba      	str	r2, [r7, #8]
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	3301      	adds	r3, #1
 80073da:	617b      	str	r3, [r7, #20]
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	dbf1      	blt.n	80073c8 <_write+0x12>
  }
  return len;
 80073e4:	687b      	ldr	r3, [r7, #4]
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <_close>:

int _close(int file)
{
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80073f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	bc80      	pop	{r7}
 8007402:	4770      	bx	lr

08007404 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007414:	605a      	str	r2, [r3, #4]
  return 0;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	370c      	adds	r7, #12
 800741c:	46bd      	mov	sp, r7
 800741e:	bc80      	pop	{r7}
 8007420:	4770      	bx	lr

08007422 <_isatty>:

int _isatty(int file)
{
 8007422:	b480      	push	{r7}
 8007424:	b083      	sub	sp, #12
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800742a:	2301      	movs	r3, #1
}
 800742c:	4618      	mov	r0, r3
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	bc80      	pop	{r7}
 8007434:	4770      	bx	lr

08007436 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007436:	b480      	push	{r7}
 8007438:	b085      	sub	sp, #20
 800743a:	af00      	add	r7, sp, #0
 800743c:	60f8      	str	r0, [r7, #12]
 800743e:	60b9      	str	r1, [r7, #8]
 8007440:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	bc80      	pop	{r7}
 800744c:	4770      	bx	lr
	...

08007450 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b086      	sub	sp, #24
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007458:	4a14      	ldr	r2, [pc, #80]	@ (80074ac <_sbrk+0x5c>)
 800745a:	4b15      	ldr	r3, [pc, #84]	@ (80074b0 <_sbrk+0x60>)
 800745c:	1ad3      	subs	r3, r2, r3
 800745e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007464:	4b13      	ldr	r3, [pc, #76]	@ (80074b4 <_sbrk+0x64>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800746c:	4b11      	ldr	r3, [pc, #68]	@ (80074b4 <_sbrk+0x64>)
 800746e:	4a12      	ldr	r2, [pc, #72]	@ (80074b8 <_sbrk+0x68>)
 8007470:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007472:	4b10      	ldr	r3, [pc, #64]	@ (80074b4 <_sbrk+0x64>)
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4413      	add	r3, r2
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	429a      	cmp	r2, r3
 800747e:	d207      	bcs.n	8007490 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007480:	f004 f84e 	bl	800b520 <__errno>
 8007484:	4603      	mov	r3, r0
 8007486:	220c      	movs	r2, #12
 8007488:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800748a:	f04f 33ff 	mov.w	r3, #4294967295
 800748e:	e009      	b.n	80074a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007490:	4b08      	ldr	r3, [pc, #32]	@ (80074b4 <_sbrk+0x64>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007496:	4b07      	ldr	r3, [pc, #28]	@ (80074b4 <_sbrk+0x64>)
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	4413      	add	r3, r2
 800749e:	4a05      	ldr	r2, [pc, #20]	@ (80074b4 <_sbrk+0x64>)
 80074a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80074a2:	68fb      	ldr	r3, [r7, #12]
}
 80074a4:	4618      	mov	r0, r3
 80074a6:	3718      	adds	r7, #24
 80074a8:	46bd      	mov	sp, r7
 80074aa:	bd80      	pop	{r7, pc}
 80074ac:	20005000 	.word	0x20005000
 80074b0:	00000400 	.word	0x00000400
 80074b4:	20004878 	.word	0x20004878
 80074b8:	200049d0 	.word	0x200049d0

080074bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80074c0:	bf00      	nop
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bc80      	pop	{r7}
 80074c6:	4770      	bx	lr

080074c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80074c8:	f7ff fff8 	bl	80074bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80074cc:	480b      	ldr	r0, [pc, #44]	@ (80074fc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80074ce:	490c      	ldr	r1, [pc, #48]	@ (8007500 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80074d0:	4a0c      	ldr	r2, [pc, #48]	@ (8007504 <LoopFillZerobss+0x16>)
  movs r3, #0
 80074d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80074d4:	e002      	b.n	80074dc <LoopCopyDataInit>

080074d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80074d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80074d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80074da:	3304      	adds	r3, #4

080074dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80074dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80074de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80074e0:	d3f9      	bcc.n	80074d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80074e2:	4a09      	ldr	r2, [pc, #36]	@ (8007508 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80074e4:	4c09      	ldr	r4, [pc, #36]	@ (800750c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80074e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80074e8:	e001      	b.n	80074ee <LoopFillZerobss>

080074ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80074ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80074ec:	3204      	adds	r2, #4

080074ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80074ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80074f0:	d3fb      	bcc.n	80074ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80074f2:	f004 f81b 	bl	800b52c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80074f6:	f7fe fa15 	bl	8005924 <main>
  bx lr
 80074fa:	4770      	bx	lr
  ldr r0, =_sdata
 80074fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007500:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8007504:	0800e748 	.word	0x0800e748
  ldr r2, =_sbss
 8007508:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800750c:	200049cc 	.word	0x200049cc

08007510 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007510:	e7fe      	b.n	8007510 <ADC1_2_IRQHandler>
	...

08007514 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007518:	4b08      	ldr	r3, [pc, #32]	@ (800753c <HAL_Init+0x28>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a07      	ldr	r2, [pc, #28]	@ (800753c <HAL_Init+0x28>)
 800751e:	f043 0310 	orr.w	r3, r3, #16
 8007522:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007524:	2003      	movs	r0, #3
 8007526:	f000 f8f5 	bl	8007714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800752a:	200f      	movs	r0, #15
 800752c:	f7ff fe6e 	bl	800720c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007530:	f7ff fd84 	bl	800703c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007534:	2300      	movs	r3, #0
}
 8007536:	4618      	mov	r0, r3
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	40022000 	.word	0x40022000

08007540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007544:	4b05      	ldr	r3, [pc, #20]	@ (800755c <HAL_IncTick+0x1c>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	4b05      	ldr	r3, [pc, #20]	@ (8007560 <HAL_IncTick+0x20>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4413      	add	r3, r2
 8007550:	4a03      	ldr	r2, [pc, #12]	@ (8007560 <HAL_IncTick+0x20>)
 8007552:	6013      	str	r3, [r2, #0]
}
 8007554:	bf00      	nop
 8007556:	46bd      	mov	sp, r7
 8007558:	bc80      	pop	{r7}
 800755a:	4770      	bx	lr
 800755c:	2000002c 	.word	0x2000002c
 8007560:	2000487c 	.word	0x2000487c

08007564 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007564:	b480      	push	{r7}
 8007566:	af00      	add	r7, sp, #0
  return uwTick;
 8007568:	4b02      	ldr	r3, [pc, #8]	@ (8007574 <HAL_GetTick+0x10>)
 800756a:	681b      	ldr	r3, [r3, #0]
}
 800756c:	4618      	mov	r0, r3
 800756e:	46bd      	mov	sp, r7
 8007570:	bc80      	pop	{r7}
 8007572:	4770      	bx	lr
 8007574:	2000487c 	.word	0x2000487c

08007578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007580:	f7ff fff0 	bl	8007564 <HAL_GetTick>
 8007584:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007590:	d005      	beq.n	800759e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007592:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <HAL_Delay+0x44>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	4413      	add	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800759e:	bf00      	nop
 80075a0:	f7ff ffe0 	bl	8007564 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d8f7      	bhi.n	80075a0 <HAL_Delay+0x28>
  {
  }
}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	2000002c 	.word	0x2000002c

080075c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b085      	sub	sp, #20
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f003 0307 	and.w	r3, r3, #7
 80075ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075d0:	4b0c      	ldr	r3, [pc, #48]	@ (8007604 <__NVIC_SetPriorityGrouping+0x44>)
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80075dc:	4013      	ands	r3, r2
 80075de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80075e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80075ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80075f2:	4a04      	ldr	r2, [pc, #16]	@ (8007604 <__NVIC_SetPriorityGrouping+0x44>)
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	60d3      	str	r3, [r2, #12]
}
 80075f8:	bf00      	nop
 80075fa:	3714      	adds	r7, #20
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bc80      	pop	{r7}
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	e000ed00 	.word	0xe000ed00

08007608 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007608:	b480      	push	{r7}
 800760a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800760c:	4b04      	ldr	r3, [pc, #16]	@ (8007620 <__NVIC_GetPriorityGrouping+0x18>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	0a1b      	lsrs	r3, r3, #8
 8007612:	f003 0307 	and.w	r3, r3, #7
}
 8007616:	4618      	mov	r0, r3
 8007618:	46bd      	mov	sp, r7
 800761a:	bc80      	pop	{r7}
 800761c:	4770      	bx	lr
 800761e:	bf00      	nop
 8007620:	e000ed00 	.word	0xe000ed00

08007624 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007624:	b480      	push	{r7}
 8007626:	b083      	sub	sp, #12
 8007628:	af00      	add	r7, sp, #0
 800762a:	4603      	mov	r3, r0
 800762c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800762e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007632:	2b00      	cmp	r3, #0
 8007634:	db0b      	blt.n	800764e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	f003 021f 	and.w	r2, r3, #31
 800763c:	4906      	ldr	r1, [pc, #24]	@ (8007658 <__NVIC_EnableIRQ+0x34>)
 800763e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	2001      	movs	r0, #1
 8007646:	fa00 f202 	lsl.w	r2, r0, r2
 800764a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800764e:	bf00      	nop
 8007650:	370c      	adds	r7, #12
 8007652:	46bd      	mov	sp, r7
 8007654:	bc80      	pop	{r7}
 8007656:	4770      	bx	lr
 8007658:	e000e100 	.word	0xe000e100

0800765c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
 8007662:	4603      	mov	r3, r0
 8007664:	6039      	str	r1, [r7, #0]
 8007666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800766c:	2b00      	cmp	r3, #0
 800766e:	db0a      	blt.n	8007686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	b2da      	uxtb	r2, r3
 8007674:	490c      	ldr	r1, [pc, #48]	@ (80076a8 <__NVIC_SetPriority+0x4c>)
 8007676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800767a:	0112      	lsls	r2, r2, #4
 800767c:	b2d2      	uxtb	r2, r2
 800767e:	440b      	add	r3, r1
 8007680:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007684:	e00a      	b.n	800769c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	b2da      	uxtb	r2, r3
 800768a:	4908      	ldr	r1, [pc, #32]	@ (80076ac <__NVIC_SetPriority+0x50>)
 800768c:	79fb      	ldrb	r3, [r7, #7]
 800768e:	f003 030f 	and.w	r3, r3, #15
 8007692:	3b04      	subs	r3, #4
 8007694:	0112      	lsls	r2, r2, #4
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	440b      	add	r3, r1
 800769a:	761a      	strb	r2, [r3, #24]
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	bc80      	pop	{r7}
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	e000e100 	.word	0xe000e100
 80076ac:	e000ed00 	.word	0xe000ed00

080076b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b089      	sub	sp, #36	@ 0x24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	60b9      	str	r1, [r7, #8]
 80076ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	f003 0307 	and.w	r3, r3, #7
 80076c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	f1c3 0307 	rsb	r3, r3, #7
 80076ca:	2b04      	cmp	r3, #4
 80076cc:	bf28      	it	cs
 80076ce:	2304      	movcs	r3, #4
 80076d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	3304      	adds	r3, #4
 80076d6:	2b06      	cmp	r3, #6
 80076d8:	d902      	bls.n	80076e0 <NVIC_EncodePriority+0x30>
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	3b03      	subs	r3, #3
 80076de:	e000      	b.n	80076e2 <NVIC_EncodePriority+0x32>
 80076e0:	2300      	movs	r3, #0
 80076e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80076e4:	f04f 32ff 	mov.w	r2, #4294967295
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	fa02 f303 	lsl.w	r3, r2, r3
 80076ee:	43da      	mvns	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	401a      	ands	r2, r3
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80076f8:	f04f 31ff 	mov.w	r1, #4294967295
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007702:	43d9      	mvns	r1, r3
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007708:	4313      	orrs	r3, r2
         );
}
 800770a:	4618      	mov	r0, r3
 800770c:	3724      	adds	r7, #36	@ 0x24
 800770e:	46bd      	mov	sp, r7
 8007710:	bc80      	pop	{r7}
 8007712:	4770      	bx	lr

08007714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b082      	sub	sp, #8
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f7ff ff4f 	bl	80075c0 <__NVIC_SetPriorityGrouping>
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af00      	add	r7, sp, #0
 8007730:	4603      	mov	r3, r0
 8007732:	60b9      	str	r1, [r7, #8]
 8007734:	607a      	str	r2, [r7, #4]
 8007736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007738:	2300      	movs	r3, #0
 800773a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800773c:	f7ff ff64 	bl	8007608 <__NVIC_GetPriorityGrouping>
 8007740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	6978      	ldr	r0, [r7, #20]
 8007748:	f7ff ffb2 	bl	80076b0 <NVIC_EncodePriority>
 800774c:	4602      	mov	r2, r0
 800774e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007752:	4611      	mov	r1, r2
 8007754:	4618      	mov	r0, r3
 8007756:	f7ff ff81 	bl	800765c <__NVIC_SetPriority>
}
 800775a:	bf00      	nop
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	4603      	mov	r3, r0
 800776a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800776c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007770:	4618      	mov	r0, r3
 8007772:	f7ff ff57 	bl	8007624 <__NVIC_EnableIRQ>
}
 8007776:	bf00      	nop
 8007778:	3708      	adds	r7, #8
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
	...

08007780 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007780:	b480      	push	{r7}
 8007782:	b08b      	sub	sp, #44	@ 0x2c
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800778a:	2300      	movs	r3, #0
 800778c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800778e:	2300      	movs	r3, #0
 8007790:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007792:	e169      	b.n	8007a68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8007794:	2201      	movs	r2, #1
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	69fa      	ldr	r2, [r7, #28]
 80077a4:	4013      	ands	r3, r2
 80077a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	f040 8158 	bne.w	8007a62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	4a9a      	ldr	r2, [pc, #616]	@ (8007a20 <HAL_GPIO_Init+0x2a0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d05e      	beq.n	800787a <HAL_GPIO_Init+0xfa>
 80077bc:	4a98      	ldr	r2, [pc, #608]	@ (8007a20 <HAL_GPIO_Init+0x2a0>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d875      	bhi.n	80078ae <HAL_GPIO_Init+0x12e>
 80077c2:	4a98      	ldr	r2, [pc, #608]	@ (8007a24 <HAL_GPIO_Init+0x2a4>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d058      	beq.n	800787a <HAL_GPIO_Init+0xfa>
 80077c8:	4a96      	ldr	r2, [pc, #600]	@ (8007a24 <HAL_GPIO_Init+0x2a4>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d86f      	bhi.n	80078ae <HAL_GPIO_Init+0x12e>
 80077ce:	4a96      	ldr	r2, [pc, #600]	@ (8007a28 <HAL_GPIO_Init+0x2a8>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d052      	beq.n	800787a <HAL_GPIO_Init+0xfa>
 80077d4:	4a94      	ldr	r2, [pc, #592]	@ (8007a28 <HAL_GPIO_Init+0x2a8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d869      	bhi.n	80078ae <HAL_GPIO_Init+0x12e>
 80077da:	4a94      	ldr	r2, [pc, #592]	@ (8007a2c <HAL_GPIO_Init+0x2ac>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d04c      	beq.n	800787a <HAL_GPIO_Init+0xfa>
 80077e0:	4a92      	ldr	r2, [pc, #584]	@ (8007a2c <HAL_GPIO_Init+0x2ac>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d863      	bhi.n	80078ae <HAL_GPIO_Init+0x12e>
 80077e6:	4a92      	ldr	r2, [pc, #584]	@ (8007a30 <HAL_GPIO_Init+0x2b0>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d046      	beq.n	800787a <HAL_GPIO_Init+0xfa>
 80077ec:	4a90      	ldr	r2, [pc, #576]	@ (8007a30 <HAL_GPIO_Init+0x2b0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d85d      	bhi.n	80078ae <HAL_GPIO_Init+0x12e>
 80077f2:	2b12      	cmp	r3, #18
 80077f4:	d82a      	bhi.n	800784c <HAL_GPIO_Init+0xcc>
 80077f6:	2b12      	cmp	r3, #18
 80077f8:	d859      	bhi.n	80078ae <HAL_GPIO_Init+0x12e>
 80077fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007800 <HAL_GPIO_Init+0x80>)
 80077fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007800:	0800787b 	.word	0x0800787b
 8007804:	08007855 	.word	0x08007855
 8007808:	08007867 	.word	0x08007867
 800780c:	080078a9 	.word	0x080078a9
 8007810:	080078af 	.word	0x080078af
 8007814:	080078af 	.word	0x080078af
 8007818:	080078af 	.word	0x080078af
 800781c:	080078af 	.word	0x080078af
 8007820:	080078af 	.word	0x080078af
 8007824:	080078af 	.word	0x080078af
 8007828:	080078af 	.word	0x080078af
 800782c:	080078af 	.word	0x080078af
 8007830:	080078af 	.word	0x080078af
 8007834:	080078af 	.word	0x080078af
 8007838:	080078af 	.word	0x080078af
 800783c:	080078af 	.word	0x080078af
 8007840:	080078af 	.word	0x080078af
 8007844:	0800785d 	.word	0x0800785d
 8007848:	08007871 	.word	0x08007871
 800784c:	4a79      	ldr	r2, [pc, #484]	@ (8007a34 <HAL_GPIO_Init+0x2b4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d013      	beq.n	800787a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007852:	e02c      	b.n	80078ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	623b      	str	r3, [r7, #32]
          break;
 800785a:	e029      	b.n	80078b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	3304      	adds	r3, #4
 8007862:	623b      	str	r3, [r7, #32]
          break;
 8007864:	e024      	b.n	80078b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	3308      	adds	r3, #8
 800786c:	623b      	str	r3, [r7, #32]
          break;
 800786e:	e01f      	b.n	80078b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	330c      	adds	r3, #12
 8007876:	623b      	str	r3, [r7, #32]
          break;
 8007878:	e01a      	b.n	80078b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d102      	bne.n	8007888 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8007882:	2304      	movs	r3, #4
 8007884:	623b      	str	r3, [r7, #32]
          break;
 8007886:	e013      	b.n	80078b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2b01      	cmp	r3, #1
 800788e:	d105      	bne.n	800789c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8007890:	2308      	movs	r3, #8
 8007892:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	69fa      	ldr	r2, [r7, #28]
 8007898:	611a      	str	r2, [r3, #16]
          break;
 800789a:	e009      	b.n	80078b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800789c:	2308      	movs	r3, #8
 800789e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	69fa      	ldr	r2, [r7, #28]
 80078a4:	615a      	str	r2, [r3, #20]
          break;
 80078a6:	e003      	b.n	80078b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80078a8:	2300      	movs	r3, #0
 80078aa:	623b      	str	r3, [r7, #32]
          break;
 80078ac:	e000      	b.n	80078b0 <HAL_GPIO_Init+0x130>
          break;
 80078ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	2bff      	cmp	r3, #255	@ 0xff
 80078b4:	d801      	bhi.n	80078ba <HAL_GPIO_Init+0x13a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	e001      	b.n	80078be <HAL_GPIO_Init+0x13e>
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	3304      	adds	r3, #4
 80078be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	2bff      	cmp	r3, #255	@ 0xff
 80078c4:	d802      	bhi.n	80078cc <HAL_GPIO_Init+0x14c>
 80078c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c8:	009b      	lsls	r3, r3, #2
 80078ca:	e002      	b.n	80078d2 <HAL_GPIO_Init+0x152>
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	3b08      	subs	r3, #8
 80078d0:	009b      	lsls	r3, r3, #2
 80078d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	210f      	movs	r1, #15
 80078da:	693b      	ldr	r3, [r7, #16]
 80078dc:	fa01 f303 	lsl.w	r3, r1, r3
 80078e0:	43db      	mvns	r3, r3
 80078e2:	401a      	ands	r2, r3
 80078e4:	6a39      	ldr	r1, [r7, #32]
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	fa01 f303 	lsl.w	r3, r1, r3
 80078ec:	431a      	orrs	r2, r3
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 80b1 	beq.w	8007a62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8007900:	4b4d      	ldr	r3, [pc, #308]	@ (8007a38 <HAL_GPIO_Init+0x2b8>)
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	4a4c      	ldr	r2, [pc, #304]	@ (8007a38 <HAL_GPIO_Init+0x2b8>)
 8007906:	f043 0301 	orr.w	r3, r3, #1
 800790a:	6193      	str	r3, [r2, #24]
 800790c:	4b4a      	ldr	r3, [pc, #296]	@ (8007a38 <HAL_GPIO_Init+0x2b8>)
 800790e:	699b      	ldr	r3, [r3, #24]
 8007910:	f003 0301 	and.w	r3, r3, #1
 8007914:	60bb      	str	r3, [r7, #8]
 8007916:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007918:	4a48      	ldr	r2, [pc, #288]	@ (8007a3c <HAL_GPIO_Init+0x2bc>)
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	089b      	lsrs	r3, r3, #2
 800791e:	3302      	adds	r3, #2
 8007920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007924:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	f003 0303 	and.w	r3, r3, #3
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	220f      	movs	r2, #15
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	43db      	mvns	r3, r3
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	4013      	ands	r3, r2
 800793a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a40      	ldr	r2, [pc, #256]	@ (8007a40 <HAL_GPIO_Init+0x2c0>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d013      	beq.n	800796c <HAL_GPIO_Init+0x1ec>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a3f      	ldr	r2, [pc, #252]	@ (8007a44 <HAL_GPIO_Init+0x2c4>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d00d      	beq.n	8007968 <HAL_GPIO_Init+0x1e8>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a3e      	ldr	r2, [pc, #248]	@ (8007a48 <HAL_GPIO_Init+0x2c8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d007      	beq.n	8007964 <HAL_GPIO_Init+0x1e4>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4a3d      	ldr	r2, [pc, #244]	@ (8007a4c <HAL_GPIO_Init+0x2cc>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d101      	bne.n	8007960 <HAL_GPIO_Init+0x1e0>
 800795c:	2303      	movs	r3, #3
 800795e:	e006      	b.n	800796e <HAL_GPIO_Init+0x1ee>
 8007960:	2304      	movs	r3, #4
 8007962:	e004      	b.n	800796e <HAL_GPIO_Init+0x1ee>
 8007964:	2302      	movs	r3, #2
 8007966:	e002      	b.n	800796e <HAL_GPIO_Init+0x1ee>
 8007968:	2301      	movs	r3, #1
 800796a:	e000      	b.n	800796e <HAL_GPIO_Init+0x1ee>
 800796c:	2300      	movs	r3, #0
 800796e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007970:	f002 0203 	and.w	r2, r2, #3
 8007974:	0092      	lsls	r2, r2, #2
 8007976:	4093      	lsls	r3, r2
 8007978:	68fa      	ldr	r2, [r7, #12]
 800797a:	4313      	orrs	r3, r2
 800797c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800797e:	492f      	ldr	r1, [pc, #188]	@ (8007a3c <HAL_GPIO_Init+0x2bc>)
 8007980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007982:	089b      	lsrs	r3, r3, #2
 8007984:	3302      	adds	r3, #2
 8007986:	68fa      	ldr	r2, [r7, #12]
 8007988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d006      	beq.n	80079a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007998:	4b2d      	ldr	r3, [pc, #180]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	492c      	ldr	r1, [pc, #176]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	608b      	str	r3, [r1, #8]
 80079a4:	e006      	b.n	80079b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80079a6:	4b2a      	ldr	r3, [pc, #168]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 80079a8:	689a      	ldr	r2, [r3, #8]
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	43db      	mvns	r3, r3
 80079ae:	4928      	ldr	r1, [pc, #160]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 80079b0:	4013      	ands	r3, r2
 80079b2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d006      	beq.n	80079ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80079c0:	4b23      	ldr	r3, [pc, #140]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 80079c2:	68da      	ldr	r2, [r3, #12]
 80079c4:	4922      	ldr	r1, [pc, #136]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 80079c6:	69bb      	ldr	r3, [r7, #24]
 80079c8:	4313      	orrs	r3, r2
 80079ca:	60cb      	str	r3, [r1, #12]
 80079cc:	e006      	b.n	80079dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80079ce:	4b20      	ldr	r3, [pc, #128]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 80079d0:	68da      	ldr	r2, [r3, #12]
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	43db      	mvns	r3, r3
 80079d6:	491e      	ldr	r1, [pc, #120]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 80079d8:	4013      	ands	r3, r2
 80079da:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d006      	beq.n	80079f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80079e8:	4b19      	ldr	r3, [pc, #100]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 80079ea:	685a      	ldr	r2, [r3, #4]
 80079ec:	4918      	ldr	r1, [pc, #96]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	604b      	str	r3, [r1, #4]
 80079f4:	e006      	b.n	8007a04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80079f6:	4b16      	ldr	r3, [pc, #88]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 80079f8:	685a      	ldr	r2, [r3, #4]
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	43db      	mvns	r3, r3
 80079fe:	4914      	ldr	r1, [pc, #80]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 8007a00:	4013      	ands	r3, r2
 8007a02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d021      	beq.n	8007a54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8007a10:	4b0f      	ldr	r3, [pc, #60]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	490e      	ldr	r1, [pc, #56]	@ (8007a50 <HAL_GPIO_Init+0x2d0>)
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	600b      	str	r3, [r1, #0]
 8007a1c:	e021      	b.n	8007a62 <HAL_GPIO_Init+0x2e2>
 8007a1e:	bf00      	nop
 8007a20:	10320000 	.word	0x10320000
 8007a24:	10310000 	.word	0x10310000
 8007a28:	10220000 	.word	0x10220000
 8007a2c:	10210000 	.word	0x10210000
 8007a30:	10120000 	.word	0x10120000
 8007a34:	10110000 	.word	0x10110000
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	40010000 	.word	0x40010000
 8007a40:	40010800 	.word	0x40010800
 8007a44:	40010c00 	.word	0x40010c00
 8007a48:	40011000 	.word	0x40011000
 8007a4c:	40011400 	.word	0x40011400
 8007a50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007a54:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <HAL_GPIO_Init+0x304>)
 8007a56:	681a      	ldr	r2, [r3, #0]
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	43db      	mvns	r3, r3
 8007a5c:	4909      	ldr	r1, [pc, #36]	@ (8007a84 <HAL_GPIO_Init+0x304>)
 8007a5e:	4013      	ands	r3, r2
 8007a60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8007a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a64:	3301      	adds	r3, #1
 8007a66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681a      	ldr	r2, [r3, #0]
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	f47f ae8e 	bne.w	8007794 <HAL_GPIO_Init+0x14>
  }
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	372c      	adds	r7, #44	@ 0x2c
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bc80      	pop	{r7}
 8007a82:	4770      	bx	lr
 8007a84:	40010400 	.word	0x40010400

08007a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b083      	sub	sp, #12
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	460b      	mov	r3, r1
 8007a92:	807b      	strh	r3, [r7, #2]
 8007a94:	4613      	mov	r3, r2
 8007a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007a98:	787b      	ldrb	r3, [r7, #1]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007a9e:	887a      	ldrh	r2, [r7, #2]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8007aa4:	e003      	b.n	8007aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8007aa6:	887b      	ldrh	r3, [r7, #2]
 8007aa8:	041a      	lsls	r2, r3, #16
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	611a      	str	r2, [r3, #16]
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bc80      	pop	{r7}
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	68db      	ldr	r3, [r3, #12]
 8007ac8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007aca:	887a      	ldrh	r2, [r7, #2]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4013      	ands	r3, r2
 8007ad0:	041a      	lsls	r2, r3, #16
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	43d9      	mvns	r1, r3
 8007ad6:	887b      	ldrh	r3, [r7, #2]
 8007ad8:	400b      	ands	r3, r1
 8007ada:	431a      	orrs	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	611a      	str	r2, [r3, #16]
}
 8007ae0:	bf00      	nop
 8007ae2:	3714      	adds	r7, #20
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bc80      	pop	{r7}
 8007ae8:	4770      	bx	lr
	...

08007aec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d101      	bne.n	8007afe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007afa:	2301      	movs	r3, #1
 8007afc:	e12b      	b.n	8007d56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d106      	bne.n	8007b18 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f7ff fac4 	bl	80070a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2224      	movs	r2, #36	@ 0x24
 8007b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f022 0201 	bic.w	r2, r2, #1
 8007b2e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b3e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007b4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007b50:	f001 feaa 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8007b54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	4a81      	ldr	r2, [pc, #516]	@ (8007d60 <HAL_I2C_Init+0x274>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d807      	bhi.n	8007b70 <HAL_I2C_Init+0x84>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4a80      	ldr	r2, [pc, #512]	@ (8007d64 <HAL_I2C_Init+0x278>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	bf94      	ite	ls
 8007b68:	2301      	movls	r3, #1
 8007b6a:	2300      	movhi	r3, #0
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	e006      	b.n	8007b7e <HAL_I2C_Init+0x92>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	4a7d      	ldr	r2, [pc, #500]	@ (8007d68 <HAL_I2C_Init+0x27c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	bf94      	ite	ls
 8007b78:	2301      	movls	r3, #1
 8007b7a:	2300      	movhi	r3, #0
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d001      	beq.n	8007b86 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	e0e7      	b.n	8007d56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	4a78      	ldr	r2, [pc, #480]	@ (8007d6c <HAL_I2C_Init+0x280>)
 8007b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8e:	0c9b      	lsrs	r3, r3, #18
 8007b90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	430a      	orrs	r2, r1
 8007ba4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	4a6a      	ldr	r2, [pc, #424]	@ (8007d60 <HAL_I2C_Init+0x274>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d802      	bhi.n	8007bc0 <HAL_I2C_Init+0xd4>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	e009      	b.n	8007bd4 <HAL_I2C_Init+0xe8>
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8007bc6:	fb02 f303 	mul.w	r3, r2, r3
 8007bca:	4a69      	ldr	r2, [pc, #420]	@ (8007d70 <HAL_I2C_Init+0x284>)
 8007bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd0:	099b      	lsrs	r3, r3, #6
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6812      	ldr	r2, [r2, #0]
 8007bd8:	430b      	orrs	r3, r1
 8007bda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	69db      	ldr	r3, [r3, #28]
 8007be2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8007be6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	495c      	ldr	r1, [pc, #368]	@ (8007d60 <HAL_I2C_Init+0x274>)
 8007bf0:	428b      	cmp	r3, r1
 8007bf2:	d819      	bhi.n	8007c28 <HAL_I2C_Init+0x13c>
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	1e59      	subs	r1, r3, #1
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	685b      	ldr	r3, [r3, #4]
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c02:	1c59      	adds	r1, r3, #1
 8007c04:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007c08:	400b      	ands	r3, r1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d00a      	beq.n	8007c24 <HAL_I2C_Init+0x138>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	1e59      	subs	r1, r3, #1
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	005b      	lsls	r3, r3, #1
 8007c18:	fbb1 f3f3 	udiv	r3, r1, r3
 8007c1c:	3301      	adds	r3, #1
 8007c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c22:	e051      	b.n	8007cc8 <HAL_I2C_Init+0x1dc>
 8007c24:	2304      	movs	r3, #4
 8007c26:	e04f      	b.n	8007cc8 <HAL_I2C_Init+0x1dc>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d111      	bne.n	8007c54 <HAL_I2C_Init+0x168>
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	1e58      	subs	r0, r3, #1
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6859      	ldr	r1, [r3, #4]
 8007c38:	460b      	mov	r3, r1
 8007c3a:	005b      	lsls	r3, r3, #1
 8007c3c:	440b      	add	r3, r1
 8007c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c42:	3301      	adds	r3, #1
 8007c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	bf0c      	ite	eq
 8007c4c:	2301      	moveq	r3, #1
 8007c4e:	2300      	movne	r3, #0
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	e012      	b.n	8007c7a <HAL_I2C_Init+0x18e>
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	1e58      	subs	r0, r3, #1
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6859      	ldr	r1, [r3, #4]
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	440b      	add	r3, r1
 8007c62:	0099      	lsls	r1, r3, #2
 8007c64:	440b      	add	r3, r1
 8007c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	bf0c      	ite	eq
 8007c74:	2301      	moveq	r3, #1
 8007c76:	2300      	movne	r3, #0
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d001      	beq.n	8007c82 <HAL_I2C_Init+0x196>
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e022      	b.n	8007cc8 <HAL_I2C_Init+0x1dc>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10e      	bne.n	8007ca8 <HAL_I2C_Init+0x1bc>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	1e58      	subs	r0, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6859      	ldr	r1, [r3, #4]
 8007c92:	460b      	mov	r3, r1
 8007c94:	005b      	lsls	r3, r3, #1
 8007c96:	440b      	add	r3, r1
 8007c98:	fbb0 f3f3 	udiv	r3, r0, r3
 8007c9c:	3301      	adds	r3, #1
 8007c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ca2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ca6:	e00f      	b.n	8007cc8 <HAL_I2C_Init+0x1dc>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	1e58      	subs	r0, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6859      	ldr	r1, [r3, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	0099      	lsls	r1, r3, #2
 8007cb8:	440b      	add	r3, r1
 8007cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cc4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cc8:	6879      	ldr	r1, [r7, #4]
 8007cca:	6809      	ldr	r1, [r1, #0]
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	69da      	ldr	r2, [r3, #28]
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	431a      	orrs	r2, r3
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	689b      	ldr	r3, [r3, #8]
 8007cf2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8007cf6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	6911      	ldr	r1, [r2, #16]
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	68d2      	ldr	r2, [r2, #12]
 8007d02:	4311      	orrs	r1, r2
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	6812      	ldr	r2, [r2, #0]
 8007d08:	430b      	orrs	r3, r1
 8007d0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68db      	ldr	r3, [r3, #12]
 8007d12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	695a      	ldr	r2, [r3, #20]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	431a      	orrs	r2, r3
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	430a      	orrs	r2, r1
 8007d26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f042 0201 	orr.w	r2, r2, #1
 8007d36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3710      	adds	r7, #16
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}
 8007d5e:	bf00      	nop
 8007d60:	000186a0 	.word	0x000186a0
 8007d64:	001e847f 	.word	0x001e847f
 8007d68:	003d08ff 	.word	0x003d08ff
 8007d6c:	431bde83 	.word	0x431bde83
 8007d70:	10624dd3 	.word	0x10624dd3

08007d74 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b088      	sub	sp, #32
 8007d78:	af02      	add	r7, sp, #8
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	607a      	str	r2, [r7, #4]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	460b      	mov	r3, r1
 8007d82:	817b      	strh	r3, [r7, #10]
 8007d84:	4613      	mov	r3, r2
 8007d86:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007d88:	f7ff fbec 	bl	8007564 <HAL_GetTick>
 8007d8c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	f040 80e0 	bne.w	8007f5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007d9c:	697b      	ldr	r3, [r7, #20]
 8007d9e:	9300      	str	r3, [sp, #0]
 8007da0:	2319      	movs	r3, #25
 8007da2:	2201      	movs	r2, #1
 8007da4:	4970      	ldr	r1, [pc, #448]	@ (8007f68 <HAL_I2C_Master_Transmit+0x1f4>)
 8007da6:	68f8      	ldr	r0, [r7, #12]
 8007da8:	f000 ff7e 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8007db2:	2302      	movs	r3, #2
 8007db4:	e0d3      	b.n	8007f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d101      	bne.n	8007dc4 <HAL_I2C_Master_Transmit+0x50>
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	e0cc      	b.n	8007f5e <HAL_I2C_Master_Transmit+0x1ea>
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d007      	beq.n	8007dea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f042 0201 	orr.w	r2, r2, #1
 8007de8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007df8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2221      	movs	r2, #33	@ 0x21
 8007dfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2210      	movs	r2, #16
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	893a      	ldrh	r2, [r7, #8]
 8007e1a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e20:	b29a      	uxth	r2, r3
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	4a50      	ldr	r2, [pc, #320]	@ (8007f6c <HAL_I2C_Master_Transmit+0x1f8>)
 8007e2a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007e2c:	8979      	ldrh	r1, [r7, #10]
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	6a3a      	ldr	r2, [r7, #32]
 8007e32:	68f8      	ldr	r0, [r7, #12]
 8007e34:	f000 fd38 	bl	80088a8 <I2C_MasterRequestWrite>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d001      	beq.n	8007e42 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e08d      	b.n	8007f5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e42:	2300      	movs	r3, #0
 8007e44:	613b      	str	r3, [r7, #16]
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	695b      	ldr	r3, [r3, #20]
 8007e4c:	613b      	str	r3, [r7, #16]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	699b      	ldr	r3, [r3, #24]
 8007e54:	613b      	str	r3, [r7, #16]
 8007e56:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007e58:	e066      	b.n	8007f28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e5a:	697a      	ldr	r2, [r7, #20]
 8007e5c:	6a39      	ldr	r1, [r7, #32]
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f001 f83c 	bl	8008edc <I2C_WaitOnTXEFlagUntilTimeout>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00d      	beq.n	8007e86 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e6e:	2b04      	cmp	r3, #4
 8007e70:	d107      	bne.n	8007e82 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	681a      	ldr	r2, [r3, #0]
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007e80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007e82:	2301      	movs	r3, #1
 8007e84:	e06b      	b.n	8007f5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e8a:	781a      	ldrb	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ea0:	b29b      	uxth	r3, r3
 8007ea2:	3b01      	subs	r3, #1
 8007ea4:	b29a      	uxth	r2, r3
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	695b      	ldr	r3, [r3, #20]
 8007ebc:	f003 0304 	and.w	r3, r3, #4
 8007ec0:	2b04      	cmp	r3, #4
 8007ec2:	d11b      	bne.n	8007efc <HAL_I2C_Master_Transmit+0x188>
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d017      	beq.n	8007efc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ed0:	781a      	ldrb	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ee6:	b29b      	uxth	r3, r3
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	b29a      	uxth	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	6a39      	ldr	r1, [r7, #32]
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f001 f833 	bl	8008f6c <I2C_WaitOnBTFFlagUntilTimeout>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00d      	beq.n	8007f28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f10:	2b04      	cmp	r3, #4
 8007f12:	d107      	bne.n	8007f24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e01a      	b.n	8007f5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d194      	bne.n	8007e5a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2200      	movs	r2, #0
 8007f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	e000      	b.n	8007f5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007f5c:	2302      	movs	r3, #2
  }
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	00100002 	.word	0x00100002
 8007f6c:	ffff0000 	.word	0xffff0000

08007f70 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b088      	sub	sp, #32
 8007f74:	af02      	add	r7, sp, #8
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	4608      	mov	r0, r1
 8007f7a:	4611      	mov	r1, r2
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	4603      	mov	r3, r0
 8007f80:	817b      	strh	r3, [r7, #10]
 8007f82:	460b      	mov	r3, r1
 8007f84:	813b      	strh	r3, [r7, #8]
 8007f86:	4613      	mov	r3, r2
 8007f88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007f8a:	f7ff faeb 	bl	8007564 <HAL_GetTick>
 8007f8e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007f96:	b2db      	uxtb	r3, r3
 8007f98:	2b20      	cmp	r3, #32
 8007f9a:	f040 80d9 	bne.w	8008150 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	9300      	str	r3, [sp, #0]
 8007fa2:	2319      	movs	r3, #25
 8007fa4:	2201      	movs	r2, #1
 8007fa6:	496d      	ldr	r1, [pc, #436]	@ (800815c <HAL_I2C_Mem_Write+0x1ec>)
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f000 fe7d 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e0cc      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007fbe:	2b01      	cmp	r3, #1
 8007fc0:	d101      	bne.n	8007fc6 <HAL_I2C_Mem_Write+0x56>
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	e0c5      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2201      	movs	r2, #1
 8007fca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f003 0301 	and.w	r3, r3, #1
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d007      	beq.n	8007fec <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f042 0201 	orr.w	r2, r2, #1
 8007fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	681a      	ldr	r2, [r3, #0]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2221      	movs	r2, #33	@ 0x21
 8008000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2240      	movs	r2, #64	@ 0x40
 8008008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2200      	movs	r2, #0
 8008010:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6a3a      	ldr	r2, [r7, #32]
 8008016:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800801c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008022:	b29a      	uxth	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	4a4d      	ldr	r2, [pc, #308]	@ (8008160 <HAL_I2C_Mem_Write+0x1f0>)
 800802c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800802e:	88f8      	ldrh	r0, [r7, #6]
 8008030:	893a      	ldrh	r2, [r7, #8]
 8008032:	8979      	ldrh	r1, [r7, #10]
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	9301      	str	r3, [sp, #4]
 8008038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803a:	9300      	str	r3, [sp, #0]
 800803c:	4603      	mov	r3, r0
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 fcb4 	bl	80089ac <I2C_RequestMemoryWrite>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d052      	beq.n	80080f0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e081      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800804e:	697a      	ldr	r2, [r7, #20]
 8008050:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f000 ff42 	bl	8008edc <I2C_WaitOnTXEFlagUntilTimeout>
 8008058:	4603      	mov	r3, r0
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00d      	beq.n	800807a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008062:	2b04      	cmp	r3, #4
 8008064:	d107      	bne.n	8008076 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	681a      	ldr	r2, [r3, #0]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008074:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e06b      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800807e:	781a      	ldrb	r2, [r3, #0]
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008094:	3b01      	subs	r3, #1
 8008096:	b29a      	uxth	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080a0:	b29b      	uxth	r3, r3
 80080a2:	3b01      	subs	r3, #1
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	f003 0304 	and.w	r3, r3, #4
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d11b      	bne.n	80080f0 <HAL_I2C_Mem_Write+0x180>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d017      	beq.n	80080f0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c4:	781a      	ldrb	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d0:	1c5a      	adds	r2, r3, #1
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080da:	3b01      	subs	r3, #1
 80080dc:	b29a      	uxth	r2, r3
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80080e6:	b29b      	uxth	r3, r3
 80080e8:	3b01      	subs	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1aa      	bne.n	800804e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80080f8:	697a      	ldr	r2, [r7, #20]
 80080fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 ff35 	bl	8008f6c <I2C_WaitOnBTFFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00d      	beq.n	8008124 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800810c:	2b04      	cmp	r3, #4
 800810e:	d107      	bne.n	8008120 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800811e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e016      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	681a      	ldr	r2, [r3, #0]
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2220      	movs	r2, #32
 8008138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2200      	movs	r2, #0
 8008140:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2200      	movs	r2, #0
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800814c:	2300      	movs	r3, #0
 800814e:	e000      	b.n	8008152 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8008150:	2302      	movs	r3, #2
  }
}
 8008152:	4618      	mov	r0, r3
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	00100002 	.word	0x00100002
 8008160:	ffff0000 	.word	0xffff0000

08008164 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b08c      	sub	sp, #48	@ 0x30
 8008168:	af02      	add	r7, sp, #8
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	4608      	mov	r0, r1
 800816e:	4611      	mov	r1, r2
 8008170:	461a      	mov	r2, r3
 8008172:	4603      	mov	r3, r0
 8008174:	817b      	strh	r3, [r7, #10]
 8008176:	460b      	mov	r3, r1
 8008178:	813b      	strh	r3, [r7, #8]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008182:	f7ff f9ef 	bl	8007564 <HAL_GetTick>
 8008186:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b20      	cmp	r3, #32
 8008192:	f040 8250 	bne.w	8008636 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	2319      	movs	r3, #25
 800819c:	2201      	movs	r2, #1
 800819e:	4982      	ldr	r1, [pc, #520]	@ (80083a8 <HAL_I2C_Mem_Read+0x244>)
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 fd81 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80081ac:	2302      	movs	r3, #2
 80081ae:	e243      	b.n	8008638 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80081b6:	2b01      	cmp	r3, #1
 80081b8:	d101      	bne.n	80081be <HAL_I2C_Mem_Read+0x5a>
 80081ba:	2302      	movs	r3, #2
 80081bc:	e23c      	b.n	8008638 <HAL_I2C_Mem_Read+0x4d4>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2201      	movs	r2, #1
 80081c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 0301 	and.w	r3, r3, #1
 80081d0:	2b01      	cmp	r3, #1
 80081d2:	d007      	beq.n	80081e4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f042 0201 	orr.w	r2, r2, #1
 80081e2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80081f2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2222      	movs	r2, #34	@ 0x22
 80081f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2240      	movs	r2, #64	@ 0x40
 8008200:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800820e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8008214:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800821a:	b29a      	uxth	r2, r3
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4a62      	ldr	r2, [pc, #392]	@ (80083ac <HAL_I2C_Mem_Read+0x248>)
 8008224:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008226:	88f8      	ldrh	r0, [r7, #6]
 8008228:	893a      	ldrh	r2, [r7, #8]
 800822a:	8979      	ldrh	r1, [r7, #10]
 800822c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800822e:	9301      	str	r3, [sp, #4]
 8008230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008232:	9300      	str	r3, [sp, #0]
 8008234:	4603      	mov	r3, r0
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f000 fc4e 	bl	8008ad8 <I2C_RequestMemoryRead>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e1f8      	b.n	8008638 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800824a:	2b00      	cmp	r3, #0
 800824c:	d113      	bne.n	8008276 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800824e:	2300      	movs	r3, #0
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	695b      	ldr	r3, [r3, #20]
 8008258:	61fb      	str	r3, [r7, #28]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	61fb      	str	r3, [r7, #28]
 8008262:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008272:	601a      	str	r2, [r3, #0]
 8008274:	e1cc      	b.n	8008610 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800827a:	2b01      	cmp	r3, #1
 800827c:	d11e      	bne.n	80082bc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800828c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800828e:	b672      	cpsid	i
}
 8008290:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008292:	2300      	movs	r3, #0
 8008294:	61bb      	str	r3, [r7, #24]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	695b      	ldr	r3, [r3, #20]
 800829c:	61bb      	str	r3, [r7, #24]
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	699b      	ldr	r3, [r3, #24]
 80082a4:	61bb      	str	r3, [r7, #24]
 80082a6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80082b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80082b8:	b662      	cpsie	i
}
 80082ba:	e035      	b.n	8008328 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d11e      	bne.n	8008302 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082d2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80082d4:	b672      	cpsid	i
}
 80082d6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082d8:	2300      	movs	r3, #0
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	695b      	ldr	r3, [r3, #20]
 80082e2:	617b      	str	r3, [r7, #20]
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	699b      	ldr	r3, [r3, #24]
 80082ea:	617b      	str	r3, [r7, #20]
 80082ec:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80082fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80082fe:	b662      	cpsie	i
}
 8008300:	e012      	b.n	8008328 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008310:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008312:	2300      	movs	r3, #0
 8008314:	613b      	str	r3, [r7, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	695b      	ldr	r3, [r3, #20]
 800831c:	613b      	str	r3, [r7, #16]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	699b      	ldr	r3, [r3, #24]
 8008324:	613b      	str	r3, [r7, #16]
 8008326:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8008328:	e172      	b.n	8008610 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800832e:	2b03      	cmp	r3, #3
 8008330:	f200 811f 	bhi.w	8008572 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008338:	2b01      	cmp	r3, #1
 800833a:	d123      	bne.n	8008384 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800833c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800833e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008340:	68f8      	ldr	r0, [r7, #12]
 8008342:	f000 fe5b 	bl	8008ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e173      	b.n	8008638 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	691a      	ldr	r2, [r3, #16]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835a:	b2d2      	uxtb	r2, r2
 800835c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008362:	1c5a      	adds	r2, r3, #1
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800836c:	3b01      	subs	r3, #1
 800836e:	b29a      	uxth	r2, r3
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008378:	b29b      	uxth	r3, r3
 800837a:	3b01      	subs	r3, #1
 800837c:	b29a      	uxth	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008382:	e145      	b.n	8008610 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008388:	2b02      	cmp	r3, #2
 800838a:	d152      	bne.n	8008432 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800838c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838e:	9300      	str	r3, [sp, #0]
 8008390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008392:	2200      	movs	r2, #0
 8008394:	4906      	ldr	r1, [pc, #24]	@ (80083b0 <HAL_I2C_Mem_Read+0x24c>)
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fc86 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 800839c:	4603      	mov	r3, r0
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d008      	beq.n	80083b4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e148      	b.n	8008638 <HAL_I2C_Mem_Read+0x4d4>
 80083a6:	bf00      	nop
 80083a8:	00100002 	.word	0x00100002
 80083ac:	ffff0000 	.word	0xffff0000
 80083b0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80083b4:	b672      	cpsid	i
}
 80083b6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80083c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	691a      	ldr	r2, [r3, #16]
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d2:	b2d2      	uxtb	r2, r2
 80083d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80083e4:	3b01      	subs	r3, #1
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	3b01      	subs	r3, #1
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80083fa:	b662      	cpsie	i
}
 80083fc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	691a      	ldr	r2, [r3, #16]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008408:	b2d2      	uxtb	r2, r2
 800840a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008410:	1c5a      	adds	r2, r3, #1
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800841a:	3b01      	subs	r3, #1
 800841c:	b29a      	uxth	r2, r3
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008426:	b29b      	uxth	r3, r3
 8008428:	3b01      	subs	r3, #1
 800842a:	b29a      	uxth	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008430:	e0ee      	b.n	8008610 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8008432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008438:	2200      	movs	r2, #0
 800843a:	4981      	ldr	r1, [pc, #516]	@ (8008640 <HAL_I2C_Mem_Read+0x4dc>)
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 fc33 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	e0f5      	b.n	8008638 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800845a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800845c:	b672      	cpsid	i
}
 800845e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	691a      	ldr	r2, [r3, #16]
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846a:	b2d2      	uxtb	r2, r2
 800846c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800847c:	3b01      	subs	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008488:	b29b      	uxth	r3, r3
 800848a:	3b01      	subs	r3, #1
 800848c:	b29a      	uxth	r2, r3
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008492:	4b6c      	ldr	r3, [pc, #432]	@ (8008644 <HAL_I2C_Mem_Read+0x4e0>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	08db      	lsrs	r3, r3, #3
 8008498:	4a6b      	ldr	r2, [pc, #428]	@ (8008648 <HAL_I2C_Mem_Read+0x4e4>)
 800849a:	fba2 2303 	umull	r2, r3, r2, r3
 800849e:	0a1a      	lsrs	r2, r3, #8
 80084a0:	4613      	mov	r3, r2
 80084a2:	009b      	lsls	r3, r3, #2
 80084a4:	4413      	add	r3, r2
 80084a6:	00da      	lsls	r2, r3, #3
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80084ac:	6a3b      	ldr	r3, [r7, #32]
 80084ae:	3b01      	subs	r3, #1
 80084b0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80084b2:	6a3b      	ldr	r3, [r7, #32]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d118      	bne.n	80084ea <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	2200      	movs	r2, #0
 80084bc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2220      	movs	r2, #32
 80084c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084d2:	f043 0220 	orr.w	r2, r3, #32
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80084da:	b662      	cpsie	i
}
 80084dc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e0a6      	b.n	8008638 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	695b      	ldr	r3, [r3, #20]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d1d9      	bne.n	80084ac <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008506:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	691a      	ldr	r2, [r3, #16]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008512:	b2d2      	uxtb	r2, r2
 8008514:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851a:	1c5a      	adds	r2, r3, #1
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008524:	3b01      	subs	r3, #1
 8008526:	b29a      	uxth	r2, r3
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008530:	b29b      	uxth	r3, r3
 8008532:	3b01      	subs	r3, #1
 8008534:	b29a      	uxth	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800853a:	b662      	cpsie	i
}
 800853c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	691a      	ldr	r2, [r3, #16]
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008548:	b2d2      	uxtb	r2, r2
 800854a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008550:	1c5a      	adds	r2, r3, #1
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800855a:	3b01      	subs	r3, #1
 800855c:	b29a      	uxth	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008566:	b29b      	uxth	r3, r3
 8008568:	3b01      	subs	r3, #1
 800856a:	b29a      	uxth	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008570:	e04e      	b.n	8008610 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008574:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008576:	68f8      	ldr	r0, [r7, #12]
 8008578:	f000 fd40 	bl	8008ffc <I2C_WaitOnRXNEFlagUntilTimeout>
 800857c:	4603      	mov	r3, r0
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8008582:	2301      	movs	r3, #1
 8008584:	e058      	b.n	8008638 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008590:	b2d2      	uxtb	r2, r2
 8008592:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	3b01      	subs	r3, #1
 80085b2:	b29a      	uxth	r2, r3
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	695b      	ldr	r3, [r3, #20]
 80085be:	f003 0304 	and.w	r3, r3, #4
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d124      	bne.n	8008610 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085ca:	2b03      	cmp	r3, #3
 80085cc:	d107      	bne.n	80085de <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085dc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	691a      	ldr	r2, [r3, #16]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085e8:	b2d2      	uxtb	r2, r2
 80085ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085f0:	1c5a      	adds	r2, r3, #1
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80085fa:	3b01      	subs	r3, #1
 80085fc:	b29a      	uxth	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008606:	b29b      	uxth	r3, r3
 8008608:	3b01      	subs	r3, #1
 800860a:	b29a      	uxth	r2, r3
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008614:	2b00      	cmp	r3, #0
 8008616:	f47f ae88 	bne.w	800832a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2220      	movs	r2, #32
 800861e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	2200      	movs	r2, #0
 800862e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8008632:	2300      	movs	r3, #0
 8008634:	e000      	b.n	8008638 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8008636:	2302      	movs	r3, #2
  }
}
 8008638:	4618      	mov	r0, r3
 800863a:	3728      	adds	r7, #40	@ 0x28
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}
 8008640:	00010004 	.word	0x00010004
 8008644:	20000024 	.word	0x20000024
 8008648:	14f8b589 	.word	0x14f8b589

0800864c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08a      	sub	sp, #40	@ 0x28
 8008650:	af02      	add	r7, sp, #8
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	607a      	str	r2, [r7, #4]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	460b      	mov	r3, r1
 800865a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800865c:	f7fe ff82 	bl	8007564 <HAL_GetTick>
 8008660:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b20      	cmp	r3, #32
 8008670:	f040 8111 	bne.w	8008896 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	2319      	movs	r3, #25
 800867a:	2201      	movs	r2, #1
 800867c:	4988      	ldr	r1, [pc, #544]	@ (80088a0 <HAL_I2C_IsDeviceReady+0x254>)
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 fb12 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 8008684:	4603      	mov	r3, r0
 8008686:	2b00      	cmp	r3, #0
 8008688:	d001      	beq.n	800868e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800868a:	2302      	movs	r3, #2
 800868c:	e104      	b.n	8008898 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008694:	2b01      	cmp	r3, #1
 8008696:	d101      	bne.n	800869c <HAL_I2C_IsDeviceReady+0x50>
 8008698:	2302      	movs	r3, #2
 800869a:	e0fd      	b.n	8008898 <HAL_I2C_IsDeviceReady+0x24c>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f003 0301 	and.w	r3, r3, #1
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d007      	beq.n	80086c2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	681a      	ldr	r2, [r3, #0]
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f042 0201 	orr.w	r2, r2, #1
 80086c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80086d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	2224      	movs	r2, #36	@ 0x24
 80086d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4a70      	ldr	r2, [pc, #448]	@ (80088a4 <HAL_I2C_IsDeviceReady+0x258>)
 80086e4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681a      	ldr	r2, [r3, #0]
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80086f4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80086f6:	69fb      	ldr	r3, [r7, #28]
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fad0 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d00d      	beq.n	800872a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008718:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800871c:	d103      	bne.n	8008726 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008724:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e0b6      	b.n	8008898 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800872a:	897b      	ldrh	r3, [r7, #10]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	461a      	mov	r2, r3
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008738:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800873a:	f7fe ff13 	bl	8007564 <HAL_GetTick>
 800873e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	695b      	ldr	r3, [r3, #20]
 8008746:	f003 0302 	and.w	r3, r3, #2
 800874a:	2b02      	cmp	r3, #2
 800874c:	bf0c      	ite	eq
 800874e:	2301      	moveq	r3, #1
 8008750:	2300      	movne	r3, #0
 8008752:	b2db      	uxtb	r3, r3
 8008754:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	695b      	ldr	r3, [r3, #20]
 800875c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008760:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008764:	bf0c      	ite	eq
 8008766:	2301      	moveq	r3, #1
 8008768:	2300      	movne	r3, #0
 800876a:	b2db      	uxtb	r3, r3
 800876c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800876e:	e025      	b.n	80087bc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008770:	f7fe fef8 	bl	8007564 <HAL_GetTick>
 8008774:	4602      	mov	r2, r0
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	1ad3      	subs	r3, r2, r3
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d302      	bcc.n	8008786 <HAL_I2C_IsDeviceReady+0x13a>
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d103      	bne.n	800878e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	22a0      	movs	r2, #160	@ 0xa0
 800878a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	695b      	ldr	r3, [r3, #20]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b02      	cmp	r3, #2
 800879a:	bf0c      	ite	eq
 800879c:	2301      	moveq	r3, #1
 800879e:	2300      	movne	r3, #0
 80087a0:	b2db      	uxtb	r3, r3
 80087a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695b      	ldr	r3, [r3, #20]
 80087aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80087ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80087b2:	bf0c      	ite	eq
 80087b4:	2301      	moveq	r3, #1
 80087b6:	2300      	movne	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2ba0      	cmp	r3, #160	@ 0xa0
 80087c6:	d005      	beq.n	80087d4 <HAL_I2C_IsDeviceReady+0x188>
 80087c8:	7dfb      	ldrb	r3, [r7, #23]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d102      	bne.n	80087d4 <HAL_I2C_IsDeviceReady+0x188>
 80087ce:	7dbb      	ldrb	r3, [r7, #22]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d0cd      	beq.n	8008770 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2220      	movs	r2, #32
 80087d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	695b      	ldr	r3, [r3, #20]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b02      	cmp	r3, #2
 80087e8:	d129      	bne.n	800883e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80087f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80087fa:	2300      	movs	r3, #0
 80087fc:	613b      	str	r3, [r7, #16]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695b      	ldr	r3, [r3, #20]
 8008804:	613b      	str	r3, [r7, #16]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	699b      	ldr	r3, [r3, #24]
 800880c:	613b      	str	r3, [r7, #16]
 800880e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	2319      	movs	r3, #25
 8008816:	2201      	movs	r2, #1
 8008818:	4921      	ldr	r1, [pc, #132]	@ (80088a0 <HAL_I2C_IsDeviceReady+0x254>)
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	f000 fa44 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 8008820:	4603      	mov	r3, r0
 8008822:	2b00      	cmp	r3, #0
 8008824:	d001      	beq.n	800882a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8008826:	2301      	movs	r3, #1
 8008828:	e036      	b.n	8008898 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2220      	movs	r2, #32
 800882e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	e02c      	b.n	8008898 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800884c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008856:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	9300      	str	r3, [sp, #0]
 800885c:	2319      	movs	r3, #25
 800885e:	2201      	movs	r2, #1
 8008860:	490f      	ldr	r1, [pc, #60]	@ (80088a0 <HAL_I2C_IsDeviceReady+0x254>)
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 fa20 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800886e:	2301      	movs	r3, #1
 8008870:	e012      	b.n	8008898 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8008872:	69bb      	ldr	r3, [r7, #24]
 8008874:	3301      	adds	r3, #1
 8008876:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008878:	69ba      	ldr	r2, [r7, #24]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	429a      	cmp	r2, r3
 800887e:	f4ff af32 	bcc.w	80086e6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2220      	movs	r2, #32
 8008886:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	2200      	movs	r2, #0
 800888e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e000      	b.n	8008898 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8008896:	2302      	movs	r3, #2
  }
}
 8008898:	4618      	mov	r0, r3
 800889a:	3720      	adds	r7, #32
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	00100002 	.word	0x00100002
 80088a4:	ffff0000 	.word	0xffff0000

080088a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b088      	sub	sp, #32
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	607a      	str	r2, [r7, #4]
 80088b2:	603b      	str	r3, [r7, #0]
 80088b4:	460b      	mov	r3, r1
 80088b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d006      	beq.n	80088d2 <I2C_MasterRequestWrite+0x2a>
 80088c4:	697b      	ldr	r3, [r7, #20]
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d003      	beq.n	80088d2 <I2C_MasterRequestWrite+0x2a>
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80088d0:	d108      	bne.n	80088e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088e0:	601a      	str	r2, [r3, #0]
 80088e2:	e00b      	b.n	80088fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e8:	2b12      	cmp	r3, #18
 80088ea:	d107      	bne.n	80088fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80088fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	9300      	str	r3, [sp, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 f9cd 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00d      	beq.n	8008930 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800891e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008922:	d103      	bne.n	800892c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800892a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800892c:	2303      	movs	r3, #3
 800892e:	e035      	b.n	800899c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	691b      	ldr	r3, [r3, #16]
 8008934:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008938:	d108      	bne.n	800894c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800893a:	897b      	ldrh	r3, [r7, #10]
 800893c:	b2db      	uxtb	r3, r3
 800893e:	461a      	mov	r2, r3
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008948:	611a      	str	r2, [r3, #16]
 800894a:	e01b      	b.n	8008984 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800894c:	897b      	ldrh	r3, [r7, #10]
 800894e:	11db      	asrs	r3, r3, #7
 8008950:	b2db      	uxtb	r3, r3
 8008952:	f003 0306 	and.w	r3, r3, #6
 8008956:	b2db      	uxtb	r3, r3
 8008958:	f063 030f 	orn	r3, r3, #15
 800895c:	b2da      	uxtb	r2, r3
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	490e      	ldr	r1, [pc, #56]	@ (80089a4 <I2C_MasterRequestWrite+0xfc>)
 800896a:	68f8      	ldr	r0, [r7, #12]
 800896c:	f000 fa16 	bl	8008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008970:	4603      	mov	r3, r0
 8008972:	2b00      	cmp	r3, #0
 8008974:	d001      	beq.n	800897a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e010      	b.n	800899c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800897a:	897b      	ldrh	r3, [r7, #10]
 800897c:	b2da      	uxtb	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	4907      	ldr	r1, [pc, #28]	@ (80089a8 <I2C_MasterRequestWrite+0x100>)
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 fa06 	bl	8008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008990:	4603      	mov	r3, r0
 8008992:	2b00      	cmp	r3, #0
 8008994:	d001      	beq.n	800899a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	00010008 	.word	0x00010008
 80089a8:	00010002 	.word	0x00010002

080089ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	4608      	mov	r0, r1
 80089b6:	4611      	mov	r1, r2
 80089b8:	461a      	mov	r2, r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	817b      	strh	r3, [r7, #10]
 80089be:	460b      	mov	r3, r1
 80089c0:	813b      	strh	r3, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80089d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80089d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	6a3b      	ldr	r3, [r7, #32]
 80089dc:	2200      	movs	r2, #0
 80089de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80089e2:	68f8      	ldr	r0, [r7, #12]
 80089e4:	f000 f960 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00d      	beq.n	8008a0a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089fc:	d103      	bne.n	8008a06 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a04:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008a06:	2303      	movs	r3, #3
 8008a08:	e05f      	b.n	8008aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a0a:	897b      	ldrh	r3, [r7, #10]
 8008a0c:	b2db      	uxtb	r3, r3
 8008a0e:	461a      	mov	r2, r3
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008a18:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1c:	6a3a      	ldr	r2, [r7, #32]
 8008a1e:	492d      	ldr	r1, [pc, #180]	@ (8008ad4 <I2C_RequestMemoryWrite+0x128>)
 8008a20:	68f8      	ldr	r0, [r7, #12]
 8008a22:	f000 f9bb 	bl	8008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d001      	beq.n	8008a30 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e04c      	b.n	8008aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008a30:	2300      	movs	r3, #0
 8008a32:	617b      	str	r3, [r7, #20]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	695b      	ldr	r3, [r3, #20]
 8008a3a:	617b      	str	r3, [r7, #20]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	617b      	str	r3, [r7, #20]
 8008a44:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a48:	6a39      	ldr	r1, [r7, #32]
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 fa46 	bl	8008edc <I2C_WaitOnTXEFlagUntilTimeout>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00d      	beq.n	8008a72 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a5a:	2b04      	cmp	r3, #4
 8008a5c:	d107      	bne.n	8008a6e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681a      	ldr	r2, [r3, #0]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008a6c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e02b      	b.n	8008aca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a72:	88fb      	ldrh	r3, [r7, #6]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d105      	bne.n	8008a84 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008a78:	893b      	ldrh	r3, [r7, #8]
 8008a7a:	b2da      	uxtb	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	611a      	str	r2, [r3, #16]
 8008a82:	e021      	b.n	8008ac8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008a84:	893b      	ldrh	r3, [r7, #8]
 8008a86:	0a1b      	lsrs	r3, r3, #8
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	b2da      	uxtb	r2, r3
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a94:	6a39      	ldr	r1, [r7, #32]
 8008a96:	68f8      	ldr	r0, [r7, #12]
 8008a98:	f000 fa20 	bl	8008edc <I2C_WaitOnTXEFlagUntilTimeout>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00d      	beq.n	8008abe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d107      	bne.n	8008aba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ab8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e005      	b.n	8008aca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008abe:	893b      	ldrh	r3, [r7, #8]
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3718      	adds	r7, #24
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	00010002 	.word	0x00010002

08008ad8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b088      	sub	sp, #32
 8008adc:	af02      	add	r7, sp, #8
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	4611      	mov	r1, r2
 8008ae4:	461a      	mov	r2, r3
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	817b      	strh	r3, [r7, #10]
 8008aea:	460b      	mov	r3, r1
 8008aec:	813b      	strh	r3, [r7, #8]
 8008aee:	4613      	mov	r3, r2
 8008af0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	681a      	ldr	r2, [r3, #0]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008b10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008b1e:	68f8      	ldr	r0, [r7, #12]
 8008b20:	f000 f8c2 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d00d      	beq.n	8008b46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b38:	d103      	bne.n	8008b42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b40:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e0aa      	b.n	8008c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008b46:	897b      	ldrh	r3, [r7, #10]
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8008b54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	6a3a      	ldr	r2, [r7, #32]
 8008b5a:	4952      	ldr	r1, [pc, #328]	@ (8008ca4 <I2C_RequestMemoryRead+0x1cc>)
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 f91d 	bl	8008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008b68:	2301      	movs	r3, #1
 8008b6a:	e097      	b.n	8008c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	695b      	ldr	r3, [r3, #20]
 8008b76:	617b      	str	r3, [r7, #20]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	617b      	str	r3, [r7, #20]
 8008b80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b84:	6a39      	ldr	r1, [r7, #32]
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 f9a8 	bl	8008edc <I2C_WaitOnTXEFlagUntilTimeout>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00d      	beq.n	8008bae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b96:	2b04      	cmp	r3, #4
 8008b98:	d107      	bne.n	8008baa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681a      	ldr	r2, [r3, #0]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008ba8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e076      	b.n	8008c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008bae:	88fb      	ldrh	r3, [r7, #6]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d105      	bne.n	8008bc0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bb4:	893b      	ldrh	r3, [r7, #8]
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	611a      	str	r2, [r3, #16]
 8008bbe:	e021      	b.n	8008c04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008bc0:	893b      	ldrh	r3, [r7, #8]
 8008bc2:	0a1b      	lsrs	r3, r3, #8
 8008bc4:	b29b      	uxth	r3, r3
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bd0:	6a39      	ldr	r1, [r7, #32]
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 f982 	bl	8008edc <I2C_WaitOnTXEFlagUntilTimeout>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00d      	beq.n	8008bfa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008be2:	2b04      	cmp	r3, #4
 8008be4:	d107      	bne.n	8008bf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008bf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e050      	b.n	8008c9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008bfa:	893b      	ldrh	r3, [r7, #8]
 8008bfc:	b2da      	uxtb	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c06:	6a39      	ldr	r1, [r7, #32]
 8008c08:	68f8      	ldr	r0, [r7, #12]
 8008c0a:	f000 f967 	bl	8008edc <I2C_WaitOnTXEFlagUntilTimeout>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d00d      	beq.n	8008c30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	d107      	bne.n	8008c2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681a      	ldr	r2, [r3, #0]
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008c2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	e035      	b.n	8008c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8008c3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	6a3b      	ldr	r3, [r7, #32]
 8008c46:	2200      	movs	r2, #0
 8008c48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8008c4c:	68f8      	ldr	r0, [r7, #12]
 8008c4e:	f000 f82b 	bl	8008ca8 <I2C_WaitOnFlagUntilTimeout>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00d      	beq.n	8008c74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c66:	d103      	bne.n	8008c70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8008c70:	2303      	movs	r3, #3
 8008c72:	e013      	b.n	8008c9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008c74:	897b      	ldrh	r3, [r7, #10]
 8008c76:	b2db      	uxtb	r3, r3
 8008c78:	f043 0301 	orr.w	r3, r3, #1
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c86:	6a3a      	ldr	r2, [r7, #32]
 8008c88:	4906      	ldr	r1, [pc, #24]	@ (8008ca4 <I2C_RequestMemoryRead+0x1cc>)
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 f886 	bl	8008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8008c96:	2301      	movs	r3, #1
 8008c98:	e000      	b.n	8008c9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3718      	adds	r7, #24
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}
 8008ca4:	00010002 	.word	0x00010002

08008ca8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	4613      	mov	r3, r2
 8008cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cb8:	e048      	b.n	8008d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc0:	d044      	beq.n	8008d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cc2:	f7fe fc4f 	bl	8007564 <HAL_GetTick>
 8008cc6:	4602      	mov	r2, r0
 8008cc8:	69bb      	ldr	r3, [r7, #24]
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	683a      	ldr	r2, [r7, #0]
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d302      	bcc.n	8008cd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d139      	bne.n	8008d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	0c1b      	lsrs	r3, r3, #16
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d10d      	bne.n	8008cfe <I2C_WaitOnFlagUntilTimeout+0x56>
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	43da      	mvns	r2, r3
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	4013      	ands	r3, r2
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	bf0c      	ite	eq
 8008cf4:	2301      	moveq	r3, #1
 8008cf6:	2300      	movne	r3, #0
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	e00c      	b.n	8008d18 <I2C_WaitOnFlagUntilTimeout+0x70>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	699b      	ldr	r3, [r3, #24]
 8008d04:	43da      	mvns	r2, r3
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	4013      	ands	r3, r2
 8008d0a:	b29b      	uxth	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	bf0c      	ite	eq
 8008d10:	2301      	moveq	r3, #1
 8008d12:	2300      	movne	r3, #0
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	461a      	mov	r2, r3
 8008d18:	79fb      	ldrb	r3, [r7, #7]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d116      	bne.n	8008d4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2220      	movs	r2, #32
 8008d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d38:	f043 0220 	orr.w	r2, r3, #32
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e023      	b.n	8008d94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	0c1b      	lsrs	r3, r3, #16
 8008d50:	b2db      	uxtb	r3, r3
 8008d52:	2b01      	cmp	r3, #1
 8008d54:	d10d      	bne.n	8008d72 <I2C_WaitOnFlagUntilTimeout+0xca>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	43da      	mvns	r2, r3
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	4013      	ands	r3, r2
 8008d62:	b29b      	uxth	r3, r3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bf0c      	ite	eq
 8008d68:	2301      	moveq	r3, #1
 8008d6a:	2300      	movne	r3, #0
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	461a      	mov	r2, r3
 8008d70:	e00c      	b.n	8008d8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	699b      	ldr	r3, [r3, #24]
 8008d78:	43da      	mvns	r2, r3
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	4013      	ands	r3, r2
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	bf0c      	ite	eq
 8008d84:	2301      	moveq	r3, #1
 8008d86:	2300      	movne	r3, #0
 8008d88:	b2db      	uxtb	r3, r3
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	79fb      	ldrb	r3, [r7, #7]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d093      	beq.n	8008cba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d92:	2300      	movs	r3, #0
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008daa:	e071      	b.n	8008e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008dba:	d123      	bne.n	8008e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008dca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8008dd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2220      	movs	r2, #32
 8008de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	2200      	movs	r2, #0
 8008de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df0:	f043 0204 	orr.w	r2, r3, #4
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e067      	b.n	8008ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e0a:	d041      	beq.n	8008e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e0c:	f7fe fbaa 	bl	8007564 <HAL_GetTick>
 8008e10:	4602      	mov	r2, r0
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	1ad3      	subs	r3, r2, r3
 8008e16:	687a      	ldr	r2, [r7, #4]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d302      	bcc.n	8008e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d136      	bne.n	8008e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	0c1b      	lsrs	r3, r3, #16
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d10c      	bne.n	8008e46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	695b      	ldr	r3, [r3, #20]
 8008e32:	43da      	mvns	r2, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	4013      	ands	r3, r2
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bf14      	ite	ne
 8008e3e:	2301      	movne	r3, #1
 8008e40:	2300      	moveq	r3, #0
 8008e42:	b2db      	uxtb	r3, r3
 8008e44:	e00b      	b.n	8008e5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	699b      	ldr	r3, [r3, #24]
 8008e4c:	43da      	mvns	r2, r3
 8008e4e:	68bb      	ldr	r3, [r7, #8]
 8008e50:	4013      	ands	r3, r2
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bf14      	ite	ne
 8008e58:	2301      	movne	r3, #1
 8008e5a:	2300      	moveq	r3, #0
 8008e5c:	b2db      	uxtb	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d016      	beq.n	8008e90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2200      	movs	r2, #0
 8008e66:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	2220      	movs	r2, #32
 8008e6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e7c:	f043 0220 	orr.w	r2, r3, #32
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e021      	b.n	8008ed4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	0c1b      	lsrs	r3, r3, #16
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b01      	cmp	r3, #1
 8008e98:	d10c      	bne.n	8008eb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	43da      	mvns	r2, r3
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	b29b      	uxth	r3, r3
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	bf14      	ite	ne
 8008eac:	2301      	movne	r3, #1
 8008eae:	2300      	moveq	r3, #0
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	e00b      	b.n	8008ecc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	699b      	ldr	r3, [r3, #24]
 8008eba:	43da      	mvns	r2, r3
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	4013      	ands	r3, r2
 8008ec0:	b29b      	uxth	r3, r3
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	bf14      	ite	ne
 8008ec6:	2301      	movne	r3, #1
 8008ec8:	2300      	moveq	r3, #0
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f47f af6d 	bne.w	8008dac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8008ed2:	2300      	movs	r3, #0
}
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b084      	sub	sp, #16
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008ee8:	e034      	b.n	8008f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f8e3 	bl	80090b6 <I2C_IsAcknowledgeFailed>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e034      	b.n	8008f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f00:	d028      	beq.n	8008f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f02:	f7fe fb2f 	bl	8007564 <HAL_GetTick>
 8008f06:	4602      	mov	r2, r0
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	68ba      	ldr	r2, [r7, #8]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d302      	bcc.n	8008f18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d11d      	bne.n	8008f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f22:	2b80      	cmp	r3, #128	@ 0x80
 8008f24:	d016      	beq.n	8008f54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	2220      	movs	r2, #32
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f40:	f043 0220 	orr.w	r2, r3, #32
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e007      	b.n	8008f64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	695b      	ldr	r3, [r3, #20]
 8008f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f5e:	2b80      	cmp	r3, #128	@ 0x80
 8008f60:	d1c3      	bne.n	8008eea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008f62:	2300      	movs	r3, #0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3710      	adds	r7, #16
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008f78:	e034      	b.n	8008fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 f89b 	bl	80090b6 <I2C_IsAcknowledgeFailed>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008f86:	2301      	movs	r3, #1
 8008f88:	e034      	b.n	8008ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f90:	d028      	beq.n	8008fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008f92:	f7fe fae7 	bl	8007564 <HAL_GetTick>
 8008f96:	4602      	mov	r2, r0
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d302      	bcc.n	8008fa8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d11d      	bne.n	8008fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	f003 0304 	and.w	r3, r3, #4
 8008fb2:	2b04      	cmp	r3, #4
 8008fb4:	d016      	beq.n	8008fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fd0:	f043 0220 	orr.w	r2, r3, #32
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e007      	b.n	8008ff4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	f003 0304 	and.w	r3, r3, #4
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d1c3      	bne.n	8008f7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008ff2:	2300      	movs	r3, #0
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3710      	adds	r7, #16
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}

08008ffc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b084      	sub	sp, #16
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009008:	e049      	b.n	800909e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	695b      	ldr	r3, [r3, #20]
 8009010:	f003 0310 	and.w	r3, r3, #16
 8009014:	2b10      	cmp	r3, #16
 8009016:	d119      	bne.n	800904c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f06f 0210 	mvn.w	r2, #16
 8009020:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2220      	movs	r2, #32
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e030      	b.n	80090ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800904c:	f7fe fa8a 	bl	8007564 <HAL_GetTick>
 8009050:	4602      	mov	r2, r0
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	1ad3      	subs	r3, r2, r3
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	429a      	cmp	r2, r3
 800905a:	d302      	bcc.n	8009062 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d11d      	bne.n	800909e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800906c:	2b40      	cmp	r3, #64	@ 0x40
 800906e:	d016      	beq.n	800909e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	2200      	movs	r2, #0
 8009074:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	2220      	movs	r2, #32
 800907a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2200      	movs	r2, #0
 8009082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800908a:	f043 0220 	orr.w	r2, r3, #32
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800909a:	2301      	movs	r3, #1
 800909c:	e007      	b.n	80090ae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	695b      	ldr	r3, [r3, #20]
 80090a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a8:	2b40      	cmp	r3, #64	@ 0x40
 80090aa:	d1ae      	bne.n	800900a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80090cc:	d11b      	bne.n	8009106 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80090d6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2220      	movs	r2, #32
 80090e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090f2:	f043 0204 	orr.w	r2, r3, #4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e000      	b.n	8009108 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	bc80      	pop	{r7}
 8009110:	4770      	bx	lr
	...

08009114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b086      	sub	sp, #24
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d101      	bne.n	8009126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e272      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	f000 8087 	beq.w	8009242 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009134:	4b92      	ldr	r3, [pc, #584]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 8009136:	685b      	ldr	r3, [r3, #4]
 8009138:	f003 030c 	and.w	r3, r3, #12
 800913c:	2b04      	cmp	r3, #4
 800913e:	d00c      	beq.n	800915a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009140:	4b8f      	ldr	r3, [pc, #572]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	f003 030c 	and.w	r3, r3, #12
 8009148:	2b08      	cmp	r3, #8
 800914a:	d112      	bne.n	8009172 <HAL_RCC_OscConfig+0x5e>
 800914c:	4b8c      	ldr	r3, [pc, #560]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009158:	d10b      	bne.n	8009172 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800915a:	4b89      	ldr	r3, [pc, #548]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009162:	2b00      	cmp	r3, #0
 8009164:	d06c      	beq.n	8009240 <HAL_RCC_OscConfig+0x12c>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d168      	bne.n	8009240 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e24c      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800917a:	d106      	bne.n	800918a <HAL_RCC_OscConfig+0x76>
 800917c:	4b80      	ldr	r3, [pc, #512]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	4a7f      	ldr	r2, [pc, #508]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 8009182:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	e02e      	b.n	80091e8 <HAL_RCC_OscConfig+0xd4>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	685b      	ldr	r3, [r3, #4]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10c      	bne.n	80091ac <HAL_RCC_OscConfig+0x98>
 8009192:	4b7b      	ldr	r3, [pc, #492]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a7a      	ldr	r2, [pc, #488]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 8009198:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	4b78      	ldr	r3, [pc, #480]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a77      	ldr	r2, [pc, #476]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091a8:	6013      	str	r3, [r2, #0]
 80091aa:	e01d      	b.n	80091e8 <HAL_RCC_OscConfig+0xd4>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80091b4:	d10c      	bne.n	80091d0 <HAL_RCC_OscConfig+0xbc>
 80091b6:	4b72      	ldr	r3, [pc, #456]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a71      	ldr	r2, [pc, #452]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	4b6f      	ldr	r3, [pc, #444]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a6e      	ldr	r2, [pc, #440]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	e00b      	b.n	80091e8 <HAL_RCC_OscConfig+0xd4>
 80091d0:	4b6b      	ldr	r3, [pc, #428]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a6a      	ldr	r2, [pc, #424]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	4b68      	ldr	r3, [pc, #416]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a67      	ldr	r2, [pc, #412]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80091e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	685b      	ldr	r3, [r3, #4]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d013      	beq.n	8009218 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091f0:	f7fe f9b8 	bl	8007564 <HAL_GetTick>
 80091f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091f6:	e008      	b.n	800920a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091f8:	f7fe f9b4 	bl	8007564 <HAL_GetTick>
 80091fc:	4602      	mov	r2, r0
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	1ad3      	subs	r3, r2, r3
 8009202:	2b64      	cmp	r3, #100	@ 0x64
 8009204:	d901      	bls.n	800920a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009206:	2303      	movs	r3, #3
 8009208:	e200      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800920a:	4b5d      	ldr	r3, [pc, #372]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009212:	2b00      	cmp	r3, #0
 8009214:	d0f0      	beq.n	80091f8 <HAL_RCC_OscConfig+0xe4>
 8009216:	e014      	b.n	8009242 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009218:	f7fe f9a4 	bl	8007564 <HAL_GetTick>
 800921c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800921e:	e008      	b.n	8009232 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009220:	f7fe f9a0 	bl	8007564 <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	693b      	ldr	r3, [r7, #16]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	2b64      	cmp	r3, #100	@ 0x64
 800922c:	d901      	bls.n	8009232 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e1ec      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009232:	4b53      	ldr	r3, [pc, #332]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1f0      	bne.n	8009220 <HAL_RCC_OscConfig+0x10c>
 800923e:	e000      	b.n	8009242 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009240:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d063      	beq.n	8009316 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800924e:	4b4c      	ldr	r3, [pc, #304]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 8009250:	685b      	ldr	r3, [r3, #4]
 8009252:	f003 030c 	and.w	r3, r3, #12
 8009256:	2b00      	cmp	r3, #0
 8009258:	d00b      	beq.n	8009272 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800925a:	4b49      	ldr	r3, [pc, #292]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f003 030c 	and.w	r3, r3, #12
 8009262:	2b08      	cmp	r3, #8
 8009264:	d11c      	bne.n	80092a0 <HAL_RCC_OscConfig+0x18c>
 8009266:	4b46      	ldr	r3, [pc, #280]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d116      	bne.n	80092a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009272:	4b43      	ldr	r3, [pc, #268]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 0302 	and.w	r3, r3, #2
 800927a:	2b00      	cmp	r3, #0
 800927c:	d005      	beq.n	800928a <HAL_RCC_OscConfig+0x176>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	691b      	ldr	r3, [r3, #16]
 8009282:	2b01      	cmp	r3, #1
 8009284:	d001      	beq.n	800928a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8009286:	2301      	movs	r3, #1
 8009288:	e1c0      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800928a:	4b3d      	ldr	r3, [pc, #244]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	00db      	lsls	r3, r3, #3
 8009298:	4939      	ldr	r1, [pc, #228]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 800929a:	4313      	orrs	r3, r2
 800929c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800929e:	e03a      	b.n	8009316 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	691b      	ldr	r3, [r3, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d020      	beq.n	80092ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80092a8:	4b36      	ldr	r3, [pc, #216]	@ (8009384 <HAL_RCC_OscConfig+0x270>)
 80092aa:	2201      	movs	r2, #1
 80092ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092ae:	f7fe f959 	bl	8007564 <HAL_GetTick>
 80092b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092b4:	e008      	b.n	80092c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092b6:	f7fe f955 	bl	8007564 <HAL_GetTick>
 80092ba:	4602      	mov	r2, r0
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	1ad3      	subs	r3, r2, r3
 80092c0:	2b02      	cmp	r3, #2
 80092c2:	d901      	bls.n	80092c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80092c4:	2303      	movs	r3, #3
 80092c6:	e1a1      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d0f0      	beq.n	80092b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092d4:	4b2a      	ldr	r3, [pc, #168]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	695b      	ldr	r3, [r3, #20]
 80092e0:	00db      	lsls	r3, r3, #3
 80092e2:	4927      	ldr	r1, [pc, #156]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	600b      	str	r3, [r1, #0]
 80092e8:	e015      	b.n	8009316 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092ea:	4b26      	ldr	r3, [pc, #152]	@ (8009384 <HAL_RCC_OscConfig+0x270>)
 80092ec:	2200      	movs	r2, #0
 80092ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80092f0:	f7fe f938 	bl	8007564 <HAL_GetTick>
 80092f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092f6:	e008      	b.n	800930a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092f8:	f7fe f934 	bl	8007564 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	2b02      	cmp	r3, #2
 8009304:	d901      	bls.n	800930a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8009306:	2303      	movs	r3, #3
 8009308:	e180      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800930a:	4b1d      	ldr	r3, [pc, #116]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0302 	and.w	r3, r3, #2
 8009312:	2b00      	cmp	r3, #0
 8009314:	d1f0      	bne.n	80092f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0308 	and.w	r3, r3, #8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d03a      	beq.n	8009398 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d019      	beq.n	800935e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800932a:	4b17      	ldr	r3, [pc, #92]	@ (8009388 <HAL_RCC_OscConfig+0x274>)
 800932c:	2201      	movs	r2, #1
 800932e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009330:	f7fe f918 	bl	8007564 <HAL_GetTick>
 8009334:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009338:	f7fe f914 	bl	8007564 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b02      	cmp	r3, #2
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e160      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800934a:	4b0d      	ldr	r3, [pc, #52]	@ (8009380 <HAL_RCC_OscConfig+0x26c>)
 800934c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934e:	f003 0302 	and.w	r3, r3, #2
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0f0      	beq.n	8009338 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8009356:	2001      	movs	r0, #1
 8009358:	f000 fafe 	bl	8009958 <RCC_Delay>
 800935c:	e01c      	b.n	8009398 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800935e:	4b0a      	ldr	r3, [pc, #40]	@ (8009388 <HAL_RCC_OscConfig+0x274>)
 8009360:	2200      	movs	r2, #0
 8009362:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009364:	f7fe f8fe 	bl	8007564 <HAL_GetTick>
 8009368:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800936a:	e00f      	b.n	800938c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800936c:	f7fe f8fa 	bl	8007564 <HAL_GetTick>
 8009370:	4602      	mov	r2, r0
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	2b02      	cmp	r3, #2
 8009378:	d908      	bls.n	800938c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e146      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
 800937e:	bf00      	nop
 8009380:	40021000 	.word	0x40021000
 8009384:	42420000 	.word	0x42420000
 8009388:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800938c:	4b92      	ldr	r3, [pc, #584]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 800938e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b00      	cmp	r3, #0
 8009396:	d1e9      	bne.n	800936c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f003 0304 	and.w	r3, r3, #4
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	f000 80a6 	beq.w	80094f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80093a6:	2300      	movs	r3, #0
 80093a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80093aa:	4b8b      	ldr	r3, [pc, #556]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d10d      	bne.n	80093d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80093b6:	4b88      	ldr	r3, [pc, #544]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	4a87      	ldr	r2, [pc, #540]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80093bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093c0:	61d3      	str	r3, [r2, #28]
 80093c2:	4b85      	ldr	r3, [pc, #532]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80093c4:	69db      	ldr	r3, [r3, #28]
 80093c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093ca:	60bb      	str	r3, [r7, #8]
 80093cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093ce:	2301      	movs	r3, #1
 80093d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093d2:	4b82      	ldr	r3, [pc, #520]	@ (80095dc <HAL_RCC_OscConfig+0x4c8>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d118      	bne.n	8009410 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093de:	4b7f      	ldr	r3, [pc, #508]	@ (80095dc <HAL_RCC_OscConfig+0x4c8>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a7e      	ldr	r2, [pc, #504]	@ (80095dc <HAL_RCC_OscConfig+0x4c8>)
 80093e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093ea:	f7fe f8bb 	bl	8007564 <HAL_GetTick>
 80093ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093f0:	e008      	b.n	8009404 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093f2:	f7fe f8b7 	bl	8007564 <HAL_GetTick>
 80093f6:	4602      	mov	r2, r0
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	2b64      	cmp	r3, #100	@ 0x64
 80093fe:	d901      	bls.n	8009404 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8009400:	2303      	movs	r3, #3
 8009402:	e103      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009404:	4b75      	ldr	r3, [pc, #468]	@ (80095dc <HAL_RCC_OscConfig+0x4c8>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800940c:	2b00      	cmp	r3, #0
 800940e:	d0f0      	beq.n	80093f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	2b01      	cmp	r3, #1
 8009416:	d106      	bne.n	8009426 <HAL_RCC_OscConfig+0x312>
 8009418:	4b6f      	ldr	r3, [pc, #444]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	4a6e      	ldr	r2, [pc, #440]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 800941e:	f043 0301 	orr.w	r3, r3, #1
 8009422:	6213      	str	r3, [r2, #32]
 8009424:	e02d      	b.n	8009482 <HAL_RCC_OscConfig+0x36e>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d10c      	bne.n	8009448 <HAL_RCC_OscConfig+0x334>
 800942e:	4b6a      	ldr	r3, [pc, #424]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009430:	6a1b      	ldr	r3, [r3, #32]
 8009432:	4a69      	ldr	r2, [pc, #420]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009434:	f023 0301 	bic.w	r3, r3, #1
 8009438:	6213      	str	r3, [r2, #32]
 800943a:	4b67      	ldr	r3, [pc, #412]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 800943c:	6a1b      	ldr	r3, [r3, #32]
 800943e:	4a66      	ldr	r2, [pc, #408]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009440:	f023 0304 	bic.w	r3, r3, #4
 8009444:	6213      	str	r3, [r2, #32]
 8009446:	e01c      	b.n	8009482 <HAL_RCC_OscConfig+0x36e>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	2b05      	cmp	r3, #5
 800944e:	d10c      	bne.n	800946a <HAL_RCC_OscConfig+0x356>
 8009450:	4b61      	ldr	r3, [pc, #388]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009452:	6a1b      	ldr	r3, [r3, #32]
 8009454:	4a60      	ldr	r2, [pc, #384]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009456:	f043 0304 	orr.w	r3, r3, #4
 800945a:	6213      	str	r3, [r2, #32]
 800945c:	4b5e      	ldr	r3, [pc, #376]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 800945e:	6a1b      	ldr	r3, [r3, #32]
 8009460:	4a5d      	ldr	r2, [pc, #372]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009462:	f043 0301 	orr.w	r3, r3, #1
 8009466:	6213      	str	r3, [r2, #32]
 8009468:	e00b      	b.n	8009482 <HAL_RCC_OscConfig+0x36e>
 800946a:	4b5b      	ldr	r3, [pc, #364]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 800946c:	6a1b      	ldr	r3, [r3, #32]
 800946e:	4a5a      	ldr	r2, [pc, #360]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009470:	f023 0301 	bic.w	r3, r3, #1
 8009474:	6213      	str	r3, [r2, #32]
 8009476:	4b58      	ldr	r3, [pc, #352]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009478:	6a1b      	ldr	r3, [r3, #32]
 800947a:	4a57      	ldr	r2, [pc, #348]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 800947c:	f023 0304 	bic.w	r3, r3, #4
 8009480:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d015      	beq.n	80094b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800948a:	f7fe f86b 	bl	8007564 <HAL_GetTick>
 800948e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009490:	e00a      	b.n	80094a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009492:	f7fe f867 	bl	8007564 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d901      	bls.n	80094a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e0b1      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80094a8:	4b4b      	ldr	r3, [pc, #300]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80094aa:	6a1b      	ldr	r3, [r3, #32]
 80094ac:	f003 0302 	and.w	r3, r3, #2
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d0ee      	beq.n	8009492 <HAL_RCC_OscConfig+0x37e>
 80094b4:	e014      	b.n	80094e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80094b6:	f7fe f855 	bl	8007564 <HAL_GetTick>
 80094ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094bc:	e00a      	b.n	80094d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80094be:	f7fe f851 	bl	8007564 <HAL_GetTick>
 80094c2:	4602      	mov	r2, r0
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d901      	bls.n	80094d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e09b      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094d4:	4b40      	ldr	r3, [pc, #256]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80094d6:	6a1b      	ldr	r3, [r3, #32]
 80094d8:	f003 0302 	and.w	r3, r3, #2
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d1ee      	bne.n	80094be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80094e0:	7dfb      	ldrb	r3, [r7, #23]
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d105      	bne.n	80094f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094e6:	4b3c      	ldr	r3, [pc, #240]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80094e8:	69db      	ldr	r3, [r3, #28]
 80094ea:	4a3b      	ldr	r2, [pc, #236]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80094ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80094f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	69db      	ldr	r3, [r3, #28]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 8087 	beq.w	800960a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80094fc:	4b36      	ldr	r3, [pc, #216]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	f003 030c 	and.w	r3, r3, #12
 8009504:	2b08      	cmp	r3, #8
 8009506:	d061      	beq.n	80095cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d146      	bne.n	800959e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009510:	4b33      	ldr	r3, [pc, #204]	@ (80095e0 <HAL_RCC_OscConfig+0x4cc>)
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009516:	f7fe f825 	bl	8007564 <HAL_GetTick>
 800951a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800951c:	e008      	b.n	8009530 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800951e:	f7fe f821 	bl	8007564 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	2b02      	cmp	r3, #2
 800952a:	d901      	bls.n	8009530 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800952c:	2303      	movs	r3, #3
 800952e:	e06d      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8009530:	4b29      	ldr	r3, [pc, #164]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1f0      	bne.n	800951e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a1b      	ldr	r3, [r3, #32]
 8009540:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009544:	d108      	bne.n	8009558 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8009546:	4b24      	ldr	r3, [pc, #144]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	4921      	ldr	r1, [pc, #132]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009554:	4313      	orrs	r3, r2
 8009556:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009558:	4b1f      	ldr	r3, [pc, #124]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6a19      	ldr	r1, [r3, #32]
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009568:	430b      	orrs	r3, r1
 800956a:	491b      	ldr	r1, [pc, #108]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 800956c:	4313      	orrs	r3, r2
 800956e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009570:	4b1b      	ldr	r3, [pc, #108]	@ (80095e0 <HAL_RCC_OscConfig+0x4cc>)
 8009572:	2201      	movs	r2, #1
 8009574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009576:	f7fd fff5 	bl	8007564 <HAL_GetTick>
 800957a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800957c:	e008      	b.n	8009590 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800957e:	f7fd fff1 	bl	8007564 <HAL_GetTick>
 8009582:	4602      	mov	r2, r0
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	1ad3      	subs	r3, r2, r3
 8009588:	2b02      	cmp	r3, #2
 800958a:	d901      	bls.n	8009590 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800958c:	2303      	movs	r3, #3
 800958e:	e03d      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8009590:	4b11      	ldr	r3, [pc, #68]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d0f0      	beq.n	800957e <HAL_RCC_OscConfig+0x46a>
 800959c:	e035      	b.n	800960a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800959e:	4b10      	ldr	r3, [pc, #64]	@ (80095e0 <HAL_RCC_OscConfig+0x4cc>)
 80095a0:	2200      	movs	r2, #0
 80095a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80095a4:	f7fd ffde 	bl	8007564 <HAL_GetTick>
 80095a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095aa:	e008      	b.n	80095be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80095ac:	f7fd ffda 	bl	8007564 <HAL_GetTick>
 80095b0:	4602      	mov	r2, r0
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d901      	bls.n	80095be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80095ba:	2303      	movs	r3, #3
 80095bc:	e026      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80095be:	4b06      	ldr	r3, [pc, #24]	@ (80095d8 <HAL_RCC_OscConfig+0x4c4>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d1f0      	bne.n	80095ac <HAL_RCC_OscConfig+0x498>
 80095ca:	e01e      	b.n	800960a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	69db      	ldr	r3, [r3, #28]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d107      	bne.n	80095e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80095d4:	2301      	movs	r3, #1
 80095d6:	e019      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
 80095d8:	40021000 	.word	0x40021000
 80095dc:	40007000 	.word	0x40007000
 80095e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80095e4:	4b0b      	ldr	r3, [pc, #44]	@ (8009614 <HAL_RCC_OscConfig+0x500>)
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6a1b      	ldr	r3, [r3, #32]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d106      	bne.n	8009606 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009602:	429a      	cmp	r2, r3
 8009604:	d001      	beq.n	800960a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8009606:	2301      	movs	r3, #1
 8009608:	e000      	b.n	800960c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800960a:	2300      	movs	r3, #0
}
 800960c:	4618      	mov	r0, r3
 800960e:	3718      	adds	r7, #24
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}
 8009614:	40021000 	.word	0x40021000

08009618 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d101      	bne.n	800962c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e0d0      	b.n	80097ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800962c:	4b6a      	ldr	r3, [pc, #424]	@ (80097d8 <HAL_RCC_ClockConfig+0x1c0>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0307 	and.w	r3, r3, #7
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d910      	bls.n	800965c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800963a:	4b67      	ldr	r3, [pc, #412]	@ (80097d8 <HAL_RCC_ClockConfig+0x1c0>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f023 0207 	bic.w	r2, r3, #7
 8009642:	4965      	ldr	r1, [pc, #404]	@ (80097d8 <HAL_RCC_ClockConfig+0x1c0>)
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	4313      	orrs	r3, r2
 8009648:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800964a:	4b63      	ldr	r3, [pc, #396]	@ (80097d8 <HAL_RCC_ClockConfig+0x1c0>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f003 0307 	and.w	r3, r3, #7
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	429a      	cmp	r2, r3
 8009656:	d001      	beq.n	800965c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8009658:	2301      	movs	r3, #1
 800965a:	e0b8      	b.n	80097ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f003 0302 	and.w	r3, r3, #2
 8009664:	2b00      	cmp	r3, #0
 8009666:	d020      	beq.n	80096aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f003 0304 	and.w	r3, r3, #4
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009674:	4b59      	ldr	r3, [pc, #356]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	4a58      	ldr	r2, [pc, #352]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 800967a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800967e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f003 0308 	and.w	r3, r3, #8
 8009688:	2b00      	cmp	r3, #0
 800968a:	d005      	beq.n	8009698 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800968c:	4b53      	ldr	r3, [pc, #332]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	4a52      	ldr	r2, [pc, #328]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 8009692:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8009696:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009698:	4b50      	ldr	r3, [pc, #320]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	494d      	ldr	r1, [pc, #308]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 80096a6:	4313      	orrs	r3, r2
 80096a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d040      	beq.n	8009738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d107      	bne.n	80096ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096be:	4b47      	ldr	r3, [pc, #284]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d115      	bne.n	80096f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e07f      	b.n	80097ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	2b02      	cmp	r3, #2
 80096d4:	d107      	bne.n	80096e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096d6:	4b41      	ldr	r3, [pc, #260]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d109      	bne.n	80096f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096e2:	2301      	movs	r3, #1
 80096e4:	e073      	b.n	80097ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096e6:	4b3d      	ldr	r3, [pc, #244]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0302 	and.w	r3, r3, #2
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e06b      	b.n	80097ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096f6:	4b39      	ldr	r3, [pc, #228]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f023 0203 	bic.w	r2, r3, #3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	4936      	ldr	r1, [pc, #216]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 8009704:	4313      	orrs	r3, r2
 8009706:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009708:	f7fd ff2c 	bl	8007564 <HAL_GetTick>
 800970c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800970e:	e00a      	b.n	8009726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009710:	f7fd ff28 	bl	8007564 <HAL_GetTick>
 8009714:	4602      	mov	r2, r0
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	1ad3      	subs	r3, r2, r3
 800971a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800971e:	4293      	cmp	r3, r2
 8009720:	d901      	bls.n	8009726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009722:	2303      	movs	r3, #3
 8009724:	e053      	b.n	80097ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009726:	4b2d      	ldr	r3, [pc, #180]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 8009728:	685b      	ldr	r3, [r3, #4]
 800972a:	f003 020c 	and.w	r2, r3, #12
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	429a      	cmp	r2, r3
 8009736:	d1eb      	bne.n	8009710 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009738:	4b27      	ldr	r3, [pc, #156]	@ (80097d8 <HAL_RCC_ClockConfig+0x1c0>)
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0307 	and.w	r3, r3, #7
 8009740:	683a      	ldr	r2, [r7, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d210      	bcs.n	8009768 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009746:	4b24      	ldr	r3, [pc, #144]	@ (80097d8 <HAL_RCC_ClockConfig+0x1c0>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f023 0207 	bic.w	r2, r3, #7
 800974e:	4922      	ldr	r1, [pc, #136]	@ (80097d8 <HAL_RCC_ClockConfig+0x1c0>)
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	4313      	orrs	r3, r2
 8009754:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009756:	4b20      	ldr	r3, [pc, #128]	@ (80097d8 <HAL_RCC_ClockConfig+0x1c0>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0307 	and.w	r3, r3, #7
 800975e:	683a      	ldr	r2, [r7, #0]
 8009760:	429a      	cmp	r2, r3
 8009762:	d001      	beq.n	8009768 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8009764:	2301      	movs	r3, #1
 8009766:	e032      	b.n	80097ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f003 0304 	and.w	r3, r3, #4
 8009770:	2b00      	cmp	r3, #0
 8009772:	d008      	beq.n	8009786 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009774:	4b19      	ldr	r3, [pc, #100]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	4916      	ldr	r1, [pc, #88]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 8009782:	4313      	orrs	r3, r2
 8009784:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 0308 	and.w	r3, r3, #8
 800978e:	2b00      	cmp	r3, #0
 8009790:	d009      	beq.n	80097a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8009792:	4b12      	ldr	r3, [pc, #72]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	691b      	ldr	r3, [r3, #16]
 800979e:	00db      	lsls	r3, r3, #3
 80097a0:	490e      	ldr	r1, [pc, #56]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 80097a2:	4313      	orrs	r3, r2
 80097a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80097a6:	f000 f821 	bl	80097ec <HAL_RCC_GetSysClockFreq>
 80097aa:	4602      	mov	r2, r0
 80097ac:	4b0b      	ldr	r3, [pc, #44]	@ (80097dc <HAL_RCC_ClockConfig+0x1c4>)
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	091b      	lsrs	r3, r3, #4
 80097b2:	f003 030f 	and.w	r3, r3, #15
 80097b6:	490a      	ldr	r1, [pc, #40]	@ (80097e0 <HAL_RCC_ClockConfig+0x1c8>)
 80097b8:	5ccb      	ldrb	r3, [r1, r3]
 80097ba:	fa22 f303 	lsr.w	r3, r2, r3
 80097be:	4a09      	ldr	r2, [pc, #36]	@ (80097e4 <HAL_RCC_ClockConfig+0x1cc>)
 80097c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80097c2:	4b09      	ldr	r3, [pc, #36]	@ (80097e8 <HAL_RCC_ClockConfig+0x1d0>)
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7fd fd20 	bl	800720c <HAL_InitTick>

  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	40022000 	.word	0x40022000
 80097dc:	40021000 	.word	0x40021000
 80097e0:	0800e368 	.word	0x0800e368
 80097e4:	20000024 	.word	0x20000024
 80097e8:	20000028 	.word	0x20000028

080097ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80097f2:	2300      	movs	r3, #0
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	2300      	movs	r3, #0
 80097f8:	60bb      	str	r3, [r7, #8]
 80097fa:	2300      	movs	r3, #0
 80097fc:	617b      	str	r3, [r7, #20]
 80097fe:	2300      	movs	r3, #0
 8009800:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8009802:	2300      	movs	r3, #0
 8009804:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8009806:	4b1e      	ldr	r3, [pc, #120]	@ (8009880 <HAL_RCC_GetSysClockFreq+0x94>)
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f003 030c 	and.w	r3, r3, #12
 8009812:	2b04      	cmp	r3, #4
 8009814:	d002      	beq.n	800981c <HAL_RCC_GetSysClockFreq+0x30>
 8009816:	2b08      	cmp	r3, #8
 8009818:	d003      	beq.n	8009822 <HAL_RCC_GetSysClockFreq+0x36>
 800981a:	e027      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800981c:	4b19      	ldr	r3, [pc, #100]	@ (8009884 <HAL_RCC_GetSysClockFreq+0x98>)
 800981e:	613b      	str	r3, [r7, #16]
      break;
 8009820:	e027      	b.n	8009872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	0c9b      	lsrs	r3, r3, #18
 8009826:	f003 030f 	and.w	r3, r3, #15
 800982a:	4a17      	ldr	r2, [pc, #92]	@ (8009888 <HAL_RCC_GetSysClockFreq+0x9c>)
 800982c:	5cd3      	ldrb	r3, [r2, r3]
 800982e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009836:	2b00      	cmp	r3, #0
 8009838:	d010      	beq.n	800985c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800983a:	4b11      	ldr	r3, [pc, #68]	@ (8009880 <HAL_RCC_GetSysClockFreq+0x94>)
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	0c5b      	lsrs	r3, r3, #17
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	4a11      	ldr	r2, [pc, #68]	@ (800988c <HAL_RCC_GetSysClockFreq+0xa0>)
 8009846:	5cd3      	ldrb	r3, [r2, r3]
 8009848:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a0d      	ldr	r2, [pc, #52]	@ (8009884 <HAL_RCC_GetSysClockFreq+0x98>)
 800984e:	fb03 f202 	mul.w	r2, r3, r2
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	fbb2 f3f3 	udiv	r3, r2, r3
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	e004      	b.n	8009866 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a0c      	ldr	r2, [pc, #48]	@ (8009890 <HAL_RCC_GetSysClockFreq+0xa4>)
 8009860:	fb02 f303 	mul.w	r3, r2, r3
 8009864:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	613b      	str	r3, [r7, #16]
      break;
 800986a:	e002      	b.n	8009872 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800986c:	4b05      	ldr	r3, [pc, #20]	@ (8009884 <HAL_RCC_GetSysClockFreq+0x98>)
 800986e:	613b      	str	r3, [r7, #16]
      break;
 8009870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009872:	693b      	ldr	r3, [r7, #16]
}
 8009874:	4618      	mov	r0, r3
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	bc80      	pop	{r7}
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	40021000 	.word	0x40021000
 8009884:	007a1200 	.word	0x007a1200
 8009888:	0800e380 	.word	0x0800e380
 800988c:	0800e390 	.word	0x0800e390
 8009890:	003d0900 	.word	0x003d0900

08009894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009894:	b480      	push	{r7}
 8009896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009898:	4b02      	ldr	r3, [pc, #8]	@ (80098a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800989a:	681b      	ldr	r3, [r3, #0]
}
 800989c:	4618      	mov	r0, r3
 800989e:	46bd      	mov	sp, r7
 80098a0:	bc80      	pop	{r7}
 80098a2:	4770      	bx	lr
 80098a4:	20000024 	.word	0x20000024

080098a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80098ac:	f7ff fff2 	bl	8009894 <HAL_RCC_GetHCLKFreq>
 80098b0:	4602      	mov	r2, r0
 80098b2:	4b05      	ldr	r3, [pc, #20]	@ (80098c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	0a1b      	lsrs	r3, r3, #8
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	4903      	ldr	r1, [pc, #12]	@ (80098cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80098be:	5ccb      	ldrb	r3, [r1, r3]
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	40021000 	.word	0x40021000
 80098cc:	0800e378 	.word	0x0800e378

080098d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80098d4:	f7ff ffde 	bl	8009894 <HAL_RCC_GetHCLKFreq>
 80098d8:	4602      	mov	r2, r0
 80098da:	4b05      	ldr	r3, [pc, #20]	@ (80098f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	0adb      	lsrs	r3, r3, #11
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	4903      	ldr	r1, [pc, #12]	@ (80098f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098e6:	5ccb      	ldrb	r3, [r1, r3]
 80098e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	40021000 	.word	0x40021000
 80098f4:	0800e378 	.word	0x0800e378

080098f8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b083      	sub	sp, #12
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
 8009900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	220f      	movs	r2, #15
 8009906:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009908:	4b11      	ldr	r3, [pc, #68]	@ (8009950 <HAL_RCC_GetClockConfig+0x58>)
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	f003 0203 	and.w	r2, r3, #3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009914:	4b0e      	ldr	r3, [pc, #56]	@ (8009950 <HAL_RCC_GetClockConfig+0x58>)
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009920:	4b0b      	ldr	r3, [pc, #44]	@ (8009950 <HAL_RCC_GetClockConfig+0x58>)
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800992c:	4b08      	ldr	r3, [pc, #32]	@ (8009950 <HAL_RCC_GetClockConfig+0x58>)
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	08db      	lsrs	r3, r3, #3
 8009932:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800993a:	4b06      	ldr	r3, [pc, #24]	@ (8009954 <HAL_RCC_GetClockConfig+0x5c>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	f003 0207 	and.w	r2, r3, #7
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	bc80      	pop	{r7}
 800994e:	4770      	bx	lr
 8009950:	40021000 	.word	0x40021000
 8009954:	40022000 	.word	0x40022000

08009958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8009958:	b480      	push	{r7}
 800995a:	b085      	sub	sp, #20
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009960:	4b0a      	ldr	r3, [pc, #40]	@ (800998c <RCC_Delay+0x34>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a0a      	ldr	r2, [pc, #40]	@ (8009990 <RCC_Delay+0x38>)
 8009966:	fba2 2303 	umull	r2, r3, r2, r3
 800996a:	0a5b      	lsrs	r3, r3, #9
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	fb02 f303 	mul.w	r3, r2, r3
 8009972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8009974:	bf00      	nop
  }
  while (Delay --);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	1e5a      	subs	r2, r3, #1
 800997a:	60fa      	str	r2, [r7, #12]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d1f9      	bne.n	8009974 <RCC_Delay+0x1c>
}
 8009980:	bf00      	nop
 8009982:	bf00      	nop
 8009984:	3714      	adds	r7, #20
 8009986:	46bd      	mov	sp, r7
 8009988:	bc80      	pop	{r7}
 800998a:	4770      	bx	lr
 800998c:	20000024 	.word	0x20000024
 8009990:	10624dd3 	.word	0x10624dd3

08009994 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b082      	sub	sp, #8
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d101      	bne.n	80099a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80099a2:	2301      	movs	r3, #1
 80099a4:	e076      	b.n	8009a94 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d108      	bne.n	80099c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80099b6:	d009      	beq.n	80099cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2200      	movs	r2, #0
 80099bc:	61da      	str	r2, [r3, #28]
 80099be:	e005      	b.n	80099cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2200      	movs	r2, #0
 80099d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d106      	bne.n	80099ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2200      	movs	r2, #0
 80099e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f7fd fbc6 	bl	8007178 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2202      	movs	r2, #2
 80099f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8009a14:	431a      	orrs	r2, r3
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a1e:	431a      	orrs	r2, r3
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f003 0302 	and.w	r3, r3, #2
 8009a28:	431a      	orrs	r2, r3
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	695b      	ldr	r3, [r3, #20]
 8009a2e:	f003 0301 	and.w	r3, r3, #1
 8009a32:	431a      	orrs	r2, r3
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	699b      	ldr	r3, [r3, #24]
 8009a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009a46:	431a      	orrs	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a50:	ea42 0103 	orr.w	r1, r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	430a      	orrs	r2, r1
 8009a62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	699b      	ldr	r3, [r3, #24]
 8009a68:	0c1a      	lsrs	r2, r3, #16
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f002 0204 	and.w	r2, r2, #4
 8009a72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	69da      	ldr	r2, [r3, #28]
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009a82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2201      	movs	r2, #1
 8009a8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b088      	sub	sp, #32
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	603b      	str	r3, [r7, #0]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009aac:	f7fd fd5a 	bl	8007564 <HAL_GetTick>
 8009ab0:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8009ab2:	88fb      	ldrh	r3, [r7, #6]
 8009ab4:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d001      	beq.n	8009ac6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8009ac2:	2302      	movs	r3, #2
 8009ac4:	e12a      	b.n	8009d1c <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d002      	beq.n	8009ad2 <HAL_SPI_Transmit+0x36>
 8009acc:	88fb      	ldrh	r3, [r7, #6]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d101      	bne.n	8009ad6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e122      	b.n	8009d1c <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d101      	bne.n	8009ae4 <HAL_SPI_Transmit+0x48>
 8009ae0:	2302      	movs	r3, #2
 8009ae2:	e11b      	b.n	8009d1c <HAL_SPI_Transmit+0x280>
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	2203      	movs	r2, #3
 8009af0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2200      	movs	r2, #0
 8009af8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	68ba      	ldr	r2, [r7, #8]
 8009afe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	88fa      	ldrh	r2, [r7, #6]
 8009b04:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	88fa      	ldrh	r2, [r7, #6]
 8009b0a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2200      	movs	r2, #0
 8009b16:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b32:	d10f      	bne.n	8009b54 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009b42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009b52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b5e:	2b40      	cmp	r3, #64	@ 0x40
 8009b60:	d007      	beq.n	8009b72 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b70:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	68db      	ldr	r3, [r3, #12]
 8009b76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b7a:	d152      	bne.n	8009c22 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d002      	beq.n	8009b8a <HAL_SPI_Transmit+0xee>
 8009b84:	8b7b      	ldrh	r3, [r7, #26]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d145      	bne.n	8009c16 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8e:	881a      	ldrh	r2, [r3, #0]
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9a:	1c9a      	adds	r2, r3, #2
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	3b01      	subs	r3, #1
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009bae:	e032      	b.n	8009c16 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	689b      	ldr	r3, [r3, #8]
 8009bb6:	f003 0302 	and.w	r3, r3, #2
 8009bba:	2b02      	cmp	r3, #2
 8009bbc:	d112      	bne.n	8009be4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bc2:	881a      	ldrh	r2, [r3, #0]
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bce:	1c9a      	adds	r2, r3, #2
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	b29a      	uxth	r2, r3
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009be2:	e018      	b.n	8009c16 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009be4:	f7fd fcbe 	bl	8007564 <HAL_GetTick>
 8009be8:	4602      	mov	r2, r0
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	1ad3      	subs	r3, r2, r3
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d803      	bhi.n	8009bfc <HAL_SPI_Transmit+0x160>
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bfa:	d102      	bne.n	8009c02 <HAL_SPI_Transmit+0x166>
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d109      	bne.n	8009c16 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009c12:	2303      	movs	r3, #3
 8009c14:	e082      	b.n	8009d1c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d1c7      	bne.n	8009bb0 <HAL_SPI_Transmit+0x114>
 8009c20:	e053      	b.n	8009cca <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <HAL_SPI_Transmit+0x194>
 8009c2a:	8b7b      	ldrh	r3, [r7, #26]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d147      	bne.n	8009cc0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	330c      	adds	r3, #12
 8009c3a:	7812      	ldrb	r2, [r2, #0]
 8009c3c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c42:	1c5a      	adds	r2, r3, #1
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	3b01      	subs	r3, #1
 8009c50:	b29a      	uxth	r2, r3
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8009c56:	e033      	b.n	8009cc0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f003 0302 	and.w	r3, r3, #2
 8009c62:	2b02      	cmp	r3, #2
 8009c64:	d113      	bne.n	8009c8e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	330c      	adds	r3, #12
 8009c70:	7812      	ldrb	r2, [r2, #0]
 8009c72:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c78:	1c5a      	adds	r2, r3, #1
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	3b01      	subs	r3, #1
 8009c86:	b29a      	uxth	r2, r3
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8009c8c:	e018      	b.n	8009cc0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009c8e:	f7fd fc69 	bl	8007564 <HAL_GetTick>
 8009c92:	4602      	mov	r2, r0
 8009c94:	69fb      	ldr	r3, [r7, #28]
 8009c96:	1ad3      	subs	r3, r2, r3
 8009c98:	683a      	ldr	r2, [r7, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d803      	bhi.n	8009ca6 <HAL_SPI_Transmit+0x20a>
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca4:	d102      	bne.n	8009cac <HAL_SPI_Transmit+0x210>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d109      	bne.n	8009cc0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	2201      	movs	r2, #1
 8009cb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e02d      	b.n	8009d1c <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1c6      	bne.n	8009c58 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009cca:	69fa      	ldr	r2, [r7, #28]
 8009ccc:	6839      	ldr	r1, [r7, #0]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 fbd2 	bl	800a478 <SPI_EndRxTxTransaction>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d002      	beq.n	8009ce0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d10a      	bne.n	8009cfe <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ce8:	2300      	movs	r3, #0
 8009cea:	617b      	str	r3, [r7, #20]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	617b      	str	r3, [r7, #20]
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	617b      	str	r3, [r7, #20]
 8009cfc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2201      	movs	r2, #1
 8009d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e000      	b.n	8009d1c <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
  }
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3720      	adds	r7, #32
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b088      	sub	sp, #32
 8009d28:	af02      	add	r7, sp, #8
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	603b      	str	r3, [r7, #0]
 8009d30:	4613      	mov	r3, r2
 8009d32:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d001      	beq.n	8009d44 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8009d40:	2302      	movs	r3, #2
 8009d42:	e104      	b.n	8009f4e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009d4c:	d112      	bne.n	8009d74 <HAL_SPI_Receive+0x50>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	689b      	ldr	r3, [r3, #8]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d10e      	bne.n	8009d74 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2204      	movs	r2, #4
 8009d5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009d5e:	88fa      	ldrh	r2, [r7, #6]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	9300      	str	r3, [sp, #0]
 8009d64:	4613      	mov	r3, r2
 8009d66:	68ba      	ldr	r2, [r7, #8]
 8009d68:	68b9      	ldr	r1, [r7, #8]
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f8f3 	bl	8009f56 <HAL_SPI_TransmitReceive>
 8009d70:	4603      	mov	r3, r0
 8009d72:	e0ec      	b.n	8009f4e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009d74:	f7fd fbf6 	bl	8007564 <HAL_GetTick>
 8009d78:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <HAL_SPI_Receive+0x62>
 8009d80:	88fb      	ldrh	r3, [r7, #6]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e0e1      	b.n	8009f4e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d101      	bne.n	8009d98 <HAL_SPI_Receive+0x74>
 8009d94:	2302      	movs	r3, #2
 8009d96:	e0da      	b.n	8009f4e <HAL_SPI_Receive+0x22a>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2204      	movs	r2, #4
 8009da4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	68ba      	ldr	r2, [r7, #8]
 8009db2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	88fa      	ldrh	r2, [r7, #6]
 8009db8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	88fa      	ldrh	r2, [r7, #6]
 8009dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2200      	movs	r2, #0
 8009dd6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	689b      	ldr	r3, [r3, #8]
 8009de2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009de6:	d10f      	bne.n	8009e08 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009df6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009e06:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e12:	2b40      	cmp	r3, #64	@ 0x40
 8009e14:	d007      	beq.n	8009e26 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009e24:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d170      	bne.n	8009f10 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009e2e:	e035      	b.n	8009e9c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	689b      	ldr	r3, [r3, #8]
 8009e36:	f003 0301 	and.w	r3, r3, #1
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d115      	bne.n	8009e6a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f103 020c 	add.w	r2, r3, #12
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e4a:	7812      	ldrb	r2, [r2, #0]
 8009e4c:	b2d2      	uxtb	r2, r2
 8009e4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e54:	1c5a      	adds	r2, r3, #1
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	3b01      	subs	r3, #1
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009e68:	e018      	b.n	8009e9c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009e6a:	f7fd fb7b 	bl	8007564 <HAL_GetTick>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	1ad3      	subs	r3, r2, r3
 8009e74:	683a      	ldr	r2, [r7, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d803      	bhi.n	8009e82 <HAL_SPI_Receive+0x15e>
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e80:	d102      	bne.n	8009e88 <HAL_SPI_Receive+0x164>
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d109      	bne.n	8009e9c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009e98:	2303      	movs	r3, #3
 8009e9a:	e058      	b.n	8009f4e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ea0:	b29b      	uxth	r3, r3
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d1c4      	bne.n	8009e30 <HAL_SPI_Receive+0x10c>
 8009ea6:	e038      	b.n	8009f1a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	689b      	ldr	r3, [r3, #8]
 8009eae:	f003 0301 	and.w	r3, r3, #1
 8009eb2:	2b01      	cmp	r3, #1
 8009eb4:	d113      	bne.n	8009ede <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	68da      	ldr	r2, [r3, #12]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec0:	b292      	uxth	r2, r2
 8009ec2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ec8:	1c9a      	adds	r2, r3, #2
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009ed2:	b29b      	uxth	r3, r3
 8009ed4:	3b01      	subs	r3, #1
 8009ed6:	b29a      	uxth	r2, r3
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8009edc:	e018      	b.n	8009f10 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009ede:	f7fd fb41 	bl	8007564 <HAL_GetTick>
 8009ee2:	4602      	mov	r2, r0
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	1ad3      	subs	r3, r2, r3
 8009ee8:	683a      	ldr	r2, [r7, #0]
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d803      	bhi.n	8009ef6 <HAL_SPI_Receive+0x1d2>
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ef4:	d102      	bne.n	8009efc <HAL_SPI_Receive+0x1d8>
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d109      	bne.n	8009f10 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e01e      	b.n	8009f4e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8009f14:	b29b      	uxth	r3, r3
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1c6      	bne.n	8009ea8 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 fa58 	bl	800a3d4 <SPI_EndRxTransaction>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d002      	beq.n	8009f30 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2220      	movs	r2, #32
 8009f2e:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	2201      	movs	r2, #1
 8009f34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8009f48:	2301      	movs	r3, #1
 8009f4a:	e000      	b.n	8009f4e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8009f4c:	2300      	movs	r3, #0
  }
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b08a      	sub	sp, #40	@ 0x28
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	60b9      	str	r1, [r7, #8]
 8009f60:	607a      	str	r2, [r7, #4]
 8009f62:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009f64:	2301      	movs	r3, #1
 8009f66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f68:	f7fd fafc 	bl	8007564 <HAL_GetTick>
 8009f6c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009f74:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	685b      	ldr	r3, [r3, #4]
 8009f7a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8009f7c:	887b      	ldrh	r3, [r7, #2]
 8009f7e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009f80:	7ffb      	ldrb	r3, [r7, #31]
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	d00c      	beq.n	8009fa0 <HAL_SPI_TransmitReceive+0x4a>
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8009f8c:	d106      	bne.n	8009f9c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	689b      	ldr	r3, [r3, #8]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d102      	bne.n	8009f9c <HAL_SPI_TransmitReceive+0x46>
 8009f96:	7ffb      	ldrb	r3, [r7, #31]
 8009f98:	2b04      	cmp	r3, #4
 8009f9a:	d001      	beq.n	8009fa0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	e17f      	b.n	800a2a0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d005      	beq.n	8009fb2 <HAL_SPI_TransmitReceive+0x5c>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d002      	beq.n	8009fb2 <HAL_SPI_TransmitReceive+0x5c>
 8009fac:	887b      	ldrh	r3, [r7, #2]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	e174      	b.n	800a2a0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009fbc:	2b01      	cmp	r3, #1
 8009fbe:	d101      	bne.n	8009fc4 <HAL_SPI_TransmitReceive+0x6e>
 8009fc0:	2302      	movs	r3, #2
 8009fc2:	e16d      	b.n	800a2a0 <HAL_SPI_TransmitReceive+0x34a>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	2b04      	cmp	r3, #4
 8009fd6:	d003      	beq.n	8009fe0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2205      	movs	r2, #5
 8009fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	887a      	ldrh	r2, [r7, #2]
 8009ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	887a      	ldrh	r2, [r7, #2]
 8009ff6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	68ba      	ldr	r2, [r7, #8]
 8009ffc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	887a      	ldrh	r2, [r7, #2]
 800a002:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	887a      	ldrh	r2, [r7, #2]
 800a008:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	2200      	movs	r2, #0
 800a00e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	2200      	movs	r2, #0
 800a014:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a020:	2b40      	cmp	r3, #64	@ 0x40
 800a022:	d007      	beq.n	800a034 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a032:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a03c:	d17e      	bne.n	800a13c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	685b      	ldr	r3, [r3, #4]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d002      	beq.n	800a04c <HAL_SPI_TransmitReceive+0xf6>
 800a046:	8afb      	ldrh	r3, [r7, #22]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d16c      	bne.n	800a126 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a050:	881a      	ldrh	r2, [r3, #0]
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a05c:	1c9a      	adds	r2, r3, #2
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a066:	b29b      	uxth	r3, r3
 800a068:	3b01      	subs	r3, #1
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a070:	e059      	b.n	800a126 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	f003 0302 	and.w	r3, r3, #2
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d11b      	bne.n	800a0b8 <HAL_SPI_TransmitReceive+0x162>
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a084:	b29b      	uxth	r3, r3
 800a086:	2b00      	cmp	r3, #0
 800a088:	d016      	beq.n	800a0b8 <HAL_SPI_TransmitReceive+0x162>
 800a08a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d113      	bne.n	800a0b8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a094:	881a      	ldrh	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0a0:	1c9a      	adds	r2, r3, #2
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a0aa:	b29b      	uxth	r3, r3
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	b29a      	uxth	r2, r3
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	689b      	ldr	r3, [r3, #8]
 800a0be:	f003 0301 	and.w	r3, r3, #1
 800a0c2:	2b01      	cmp	r3, #1
 800a0c4:	d119      	bne.n	800a0fa <HAL_SPI_TransmitReceive+0x1a4>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0ca:	b29b      	uxth	r3, r3
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d014      	beq.n	800a0fa <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68da      	ldr	r2, [r3, #12]
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0da:	b292      	uxth	r2, r2
 800a0dc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0e2:	1c9a      	adds	r2, r3, #2
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	3b01      	subs	r3, #1
 800a0f0:	b29a      	uxth	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a0fa:	f7fd fa33 	bl	8007564 <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	6a3b      	ldr	r3, [r7, #32]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a106:	429a      	cmp	r2, r3
 800a108:	d80d      	bhi.n	800a126 <HAL_SPI_TransmitReceive+0x1d0>
 800a10a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a110:	d009      	beq.n	800a126 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	2201      	movs	r2, #1
 800a116:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a122:	2303      	movs	r3, #3
 800a124:	e0bc      	b.n	800a2a0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d1a0      	bne.n	800a072 <HAL_SPI_TransmitReceive+0x11c>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a134:	b29b      	uxth	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	d19b      	bne.n	800a072 <HAL_SPI_TransmitReceive+0x11c>
 800a13a:	e082      	b.n	800a242 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <HAL_SPI_TransmitReceive+0x1f4>
 800a144:	8afb      	ldrh	r3, [r7, #22]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d171      	bne.n	800a22e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	330c      	adds	r3, #12
 800a154:	7812      	ldrb	r2, [r2, #0]
 800a156:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a15c:	1c5a      	adds	r2, r3, #1
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a166:	b29b      	uxth	r3, r3
 800a168:	3b01      	subs	r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a170:	e05d      	b.n	800a22e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	f003 0302 	and.w	r3, r3, #2
 800a17c:	2b02      	cmp	r3, #2
 800a17e:	d11c      	bne.n	800a1ba <HAL_SPI_TransmitReceive+0x264>
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a184:	b29b      	uxth	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d017      	beq.n	800a1ba <HAL_SPI_TransmitReceive+0x264>
 800a18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d114      	bne.n	800a1ba <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	330c      	adds	r3, #12
 800a19a:	7812      	ldrb	r2, [r2, #0]
 800a19c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a1a2:	1c5a      	adds	r2, r3, #1
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a1ac:	b29b      	uxth	r3, r3
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	b29a      	uxth	r2, r3
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b01      	cmp	r3, #1
 800a1c6:	d119      	bne.n	800a1fc <HAL_SPI_TransmitReceive+0x2a6>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d014      	beq.n	800a1fc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68da      	ldr	r2, [r3, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1dc:	b2d2      	uxtb	r2, r2
 800a1de:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a1e4:	1c5a      	adds	r2, r3, #1
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	3b01      	subs	r3, #1
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a1fc:	f7fd f9b2 	bl	8007564 <HAL_GetTick>
 800a200:	4602      	mov	r2, r0
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a208:	429a      	cmp	r2, r3
 800a20a:	d803      	bhi.n	800a214 <HAL_SPI_TransmitReceive+0x2be>
 800a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a212:	d102      	bne.n	800a21a <HAL_SPI_TransmitReceive+0x2c4>
 800a214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a216:	2b00      	cmp	r3, #0
 800a218:	d109      	bne.n	800a22e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	2200      	movs	r2, #0
 800a226:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800a22a:	2303      	movs	r3, #3
 800a22c:	e038      	b.n	800a2a0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800a232:	b29b      	uxth	r3, r3
 800a234:	2b00      	cmp	r3, #0
 800a236:	d19c      	bne.n	800a172 <HAL_SPI_TransmitReceive+0x21c>
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800a23c:	b29b      	uxth	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d197      	bne.n	800a172 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a242:	6a3a      	ldr	r2, [r7, #32]
 800a244:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a246:	68f8      	ldr	r0, [r7, #12]
 800a248:	f000 f916 	bl	800a478 <SPI_EndRxTxTransaction>
 800a24c:	4603      	mov	r3, r0
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d008      	beq.n	800a264 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2220      	movs	r2, #32
 800a256:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	e01d      	b.n	800a2a0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	689b      	ldr	r3, [r3, #8]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10a      	bne.n	800a282 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a26c:	2300      	movs	r3, #0
 800a26e:	613b      	str	r3, [r7, #16]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	613b      	str	r3, [r7, #16]
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	689b      	ldr	r3, [r3, #8]
 800a27e:	613b      	str	r3, [r7, #16]
 800a280:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2200      	movs	r2, #0
 800a28e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a296:	2b00      	cmp	r3, #0
 800a298:	d001      	beq.n	800a29e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800a29a:	2301      	movs	r3, #1
 800a29c:	e000      	b.n	800a2a0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800a29e:	2300      	movs	r3, #0
  }
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3728      	adds	r7, #40	@ 0x28
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}

0800a2a8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b083      	sub	sp, #12
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800a2b6:	b2db      	uxtb	r3, r3
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bc80      	pop	{r7}
 800a2c0:	4770      	bx	lr
	...

0800a2c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b088      	sub	sp, #32
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	603b      	str	r3, [r7, #0]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a2d4:	f7fd f946 	bl	8007564 <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2dc:	1a9b      	subs	r3, r3, r2
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a2e4:	f7fd f93e 	bl	8007564 <HAL_GetTick>
 800a2e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a2ea:	4b39      	ldr	r3, [pc, #228]	@ (800a3d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	015b      	lsls	r3, r3, #5
 800a2f0:	0d1b      	lsrs	r3, r3, #20
 800a2f2:	69fa      	ldr	r2, [r7, #28]
 800a2f4:	fb02 f303 	mul.w	r3, r2, r3
 800a2f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a2fa:	e054      	b.n	800a3a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a302:	d050      	beq.n	800a3a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a304:	f7fd f92e 	bl	8007564 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	69fa      	ldr	r2, [r7, #28]
 800a310:	429a      	cmp	r2, r3
 800a312:	d902      	bls.n	800a31a <SPI_WaitFlagStateUntilTimeout+0x56>
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d13d      	bne.n	800a396 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800a328:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a332:	d111      	bne.n	800a358 <SPI_WaitFlagStateUntilTimeout+0x94>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a33c:	d004      	beq.n	800a348 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a346:	d107      	bne.n	800a358 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a356:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a35c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a360:	d10f      	bne.n	800a382 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681a      	ldr	r2, [r3, #0]
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800a370:	601a      	str	r2, [r3, #0]
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a380:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800a392:	2303      	movs	r3, #3
 800a394:	e017      	b.n	800a3c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d101      	bne.n	800a3a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	68ba      	ldr	r2, [r7, #8]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	bf0c      	ite	eq
 800a3b6:	2301      	moveq	r3, #1
 800a3b8:	2300      	movne	r3, #0
 800a3ba:	b2db      	uxtb	r3, r3
 800a3bc:	461a      	mov	r2, r3
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d19b      	bne.n	800a2fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3720      	adds	r7, #32
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	20000024 	.word	0x20000024

0800a3d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af02      	add	r7, sp, #8
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	60b9      	str	r1, [r7, #8]
 800a3de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a3e8:	d111      	bne.n	800a40e <SPI_EndRxTransaction+0x3a>
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	689b      	ldr	r3, [r3, #8]
 800a3ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a3f2:	d004      	beq.n	800a3fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	689b      	ldr	r3, [r3, #8]
 800a3f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a3fc:	d107      	bne.n	800a40e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a40c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800a416:	d117      	bne.n	800a448 <SPI_EndRxTransaction+0x74>
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a420:	d112      	bne.n	800a448 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	9300      	str	r3, [sp, #0]
 800a426:	68bb      	ldr	r3, [r7, #8]
 800a428:	2200      	movs	r2, #0
 800a42a:	2101      	movs	r1, #1
 800a42c:	68f8      	ldr	r0, [r7, #12]
 800a42e:	f7ff ff49 	bl	800a2c4 <SPI_WaitFlagStateUntilTimeout>
 800a432:	4603      	mov	r3, r0
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01a      	beq.n	800a46e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a43c:	f043 0220 	orr.w	r2, r3, #32
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e013      	b.n	800a470 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	9300      	str	r3, [sp, #0]
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	2200      	movs	r2, #0
 800a450:	2180      	movs	r1, #128	@ 0x80
 800a452:	68f8      	ldr	r0, [r7, #12]
 800a454:	f7ff ff36 	bl	800a2c4 <SPI_WaitFlagStateUntilTimeout>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d007      	beq.n	800a46e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a462:	f043 0220 	orr.w	r2, r3, #32
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	e000      	b.n	800a470 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800a46e:	2300      	movs	r3, #0
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af02      	add	r7, sp, #8
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	9300      	str	r3, [sp, #0]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	2201      	movs	r2, #1
 800a48c:	2102      	movs	r1, #2
 800a48e:	68f8      	ldr	r0, [r7, #12]
 800a490:	f7ff ff18 	bl	800a2c4 <SPI_WaitFlagStateUntilTimeout>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d007      	beq.n	800a4aa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a49e:	f043 0220 	orr.w	r2, r3, #32
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	e013      	b.n	800a4d2 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	9300      	str	r3, [sp, #0]
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	2180      	movs	r1, #128	@ 0x80
 800a4b4:	68f8      	ldr	r0, [r7, #12]
 800a4b6:	f7ff ff05 	bl	800a2c4 <SPI_WaitFlagStateUntilTimeout>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d007      	beq.n	800a4d0 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4c4:	f043 0220 	orr.w	r2, r3, #32
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800a4cc:	2303      	movs	r3, #3
 800a4ce:	e000      	b.n	800a4d2 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b082      	sub	sp, #8
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d101      	bne.n	800a4ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e041      	b.n	800a570 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a4f2:	b2db      	uxtb	r3, r3
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d106      	bne.n	800a506 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f000 f839 	bl	800a578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2202      	movs	r2, #2
 800a50a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	3304      	adds	r3, #4
 800a516:	4619      	mov	r1, r3
 800a518:	4610      	mov	r0, r2
 800a51a:	f000 f99d 	bl	800a858 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2201      	movs	r2, #1
 800a522:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	2201      	movs	r2, #1
 800a542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800a578:	b480      	push	{r7}
 800a57a:	b083      	sub	sp, #12
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a580:	bf00      	nop
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	bc80      	pop	{r7}
 800a588:	4770      	bx	lr
	...

0800a58c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a58c:	b480      	push	{r7}
 800a58e:	b085      	sub	sp, #20
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a59a:	b2db      	uxtb	r3, r3
 800a59c:	2b01      	cmp	r3, #1
 800a59e:	d001      	beq.n	800a5a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e03a      	b.n	800a61a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2202      	movs	r2, #2
 800a5a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68da      	ldr	r2, [r3, #12]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f042 0201 	orr.w	r2, r2, #1
 800a5ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	4a18      	ldr	r2, [pc, #96]	@ (800a624 <HAL_TIM_Base_Start_IT+0x98>)
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d00e      	beq.n	800a5e4 <HAL_TIM_Base_Start_IT+0x58>
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ce:	d009      	beq.n	800a5e4 <HAL_TIM_Base_Start_IT+0x58>
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a14      	ldr	r2, [pc, #80]	@ (800a628 <HAL_TIM_Base_Start_IT+0x9c>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d004      	beq.n	800a5e4 <HAL_TIM_Base_Start_IT+0x58>
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4a13      	ldr	r2, [pc, #76]	@ (800a62c <HAL_TIM_Base_Start_IT+0xa0>)
 800a5e0:	4293      	cmp	r3, r2
 800a5e2:	d111      	bne.n	800a608 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	689b      	ldr	r3, [r3, #8]
 800a5ea:	f003 0307 	and.w	r3, r3, #7
 800a5ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	2b06      	cmp	r3, #6
 800a5f4:	d010      	beq.n	800a618 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f042 0201 	orr.w	r2, r2, #1
 800a604:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a606:	e007      	b.n	800a618 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	681a      	ldr	r2, [r3, #0]
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0201 	orr.w	r2, r2, #1
 800a616:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	bc80      	pop	{r7}
 800a622:	4770      	bx	lr
 800a624:	40012c00 	.word	0x40012c00
 800a628:	40000400 	.word	0x40000400
 800a62c:	40000800 	.word	0x40000800

0800a630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
 800a63e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800a648:	68bb      	ldr	r3, [r7, #8]
 800a64a:	f003 0302 	and.w	r3, r3, #2
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d020      	beq.n	800a694 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	f003 0302 	and.w	r3, r3, #2
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d01b      	beq.n	800a694 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f06f 0202 	mvn.w	r2, #2
 800a664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2201      	movs	r2, #1
 800a66a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	699b      	ldr	r3, [r3, #24]
 800a672:	f003 0303 	and.w	r3, r3, #3
 800a676:	2b00      	cmp	r3, #0
 800a678:	d003      	beq.n	800a682 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f8d1 	bl	800a822 <HAL_TIM_IC_CaptureCallback>
 800a680:	e005      	b.n	800a68e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f8c4 	bl	800a810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f8d3 	bl	800a834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f003 0304 	and.w	r3, r3, #4
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d020      	beq.n	800a6e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	f003 0304 	and.w	r3, r3, #4
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01b      	beq.n	800a6e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	f06f 0204 	mvn.w	r2, #4
 800a6b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	2202      	movs	r2, #2
 800a6b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d003      	beq.n	800a6ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6c6:	6878      	ldr	r0, [r7, #4]
 800a6c8:	f000 f8ab 	bl	800a822 <HAL_TIM_IC_CaptureCallback>
 800a6cc:	e005      	b.n	800a6da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f000 f89e 	bl	800a810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 f8ad 	bl	800a834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f003 0308 	and.w	r3, r3, #8
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d020      	beq.n	800a72c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f003 0308 	and.w	r3, r3, #8
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d01b      	beq.n	800a72c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	f06f 0208 	mvn.w	r2, #8
 800a6fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	2204      	movs	r2, #4
 800a702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	f003 0303 	and.w	r3, r3, #3
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d003      	beq.n	800a71a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f885 	bl	800a822 <HAL_TIM_IC_CaptureCallback>
 800a718:	e005      	b.n	800a726 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 f878 	bl	800a810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f000 f887 	bl	800a834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	2200      	movs	r2, #0
 800a72a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	f003 0310 	and.w	r3, r3, #16
 800a732:	2b00      	cmp	r3, #0
 800a734:	d020      	beq.n	800a778 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	f003 0310 	and.w	r3, r3, #16
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d01b      	beq.n	800a778 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	f06f 0210 	mvn.w	r2, #16
 800a748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	2208      	movs	r2, #8
 800a74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	69db      	ldr	r3, [r3, #28]
 800a756:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d003      	beq.n	800a766 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	f000 f85f 	bl	800a822 <HAL_TIM_IC_CaptureCallback>
 800a764:	e005      	b.n	800a772 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 f852 	bl	800a810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a76c:	6878      	ldr	r0, [r7, #4]
 800a76e:	f000 f861 	bl	800a834 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2200      	movs	r2, #0
 800a776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	f003 0301 	and.w	r3, r3, #1
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00c      	beq.n	800a79c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	f003 0301 	and.w	r3, r3, #1
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d007      	beq.n	800a79c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f06f 0201 	mvn.w	r2, #1
 800a794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7fb fd74 	bl	8006284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d00c      	beq.n	800a7c0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d007      	beq.n	800a7c0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800a7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 f8c3 	bl	800a946 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00c      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d007      	beq.n	800a7e4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800a7dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 f831 	bl	800a846 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800a7e4:	68bb      	ldr	r3, [r7, #8]
 800a7e6:	f003 0320 	and.w	r3, r3, #32
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d00c      	beq.n	800a808 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f003 0320 	and.w	r3, r3, #32
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d007      	beq.n	800a808 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f06f 0220 	mvn.w	r2, #32
 800a800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f896 	bl	800a934 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a808:	bf00      	nop
 800a80a:	3710      	adds	r7, #16
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bc80      	pop	{r7}
 800a820:	4770      	bx	lr

0800a822 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a822:	b480      	push	{r7}
 800a824:	b083      	sub	sp, #12
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a82a:	bf00      	nop
 800a82c:	370c      	adds	r7, #12
 800a82e:	46bd      	mov	sp, r7
 800a830:	bc80      	pop	{r7}
 800a832:	4770      	bx	lr

0800a834 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	bc80      	pop	{r7}
 800a844:	4770      	bx	lr

0800a846 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a84e:	bf00      	nop
 800a850:	370c      	adds	r7, #12
 800a852:	46bd      	mov	sp, r7
 800a854:	bc80      	pop	{r7}
 800a856:	4770      	bx	lr

0800a858 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a2f      	ldr	r2, [pc, #188]	@ (800a928 <TIM_Base_SetConfig+0xd0>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d00b      	beq.n	800a888 <TIM_Base_SetConfig+0x30>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a876:	d007      	beq.n	800a888 <TIM_Base_SetConfig+0x30>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a2c      	ldr	r2, [pc, #176]	@ (800a92c <TIM_Base_SetConfig+0xd4>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d003      	beq.n	800a888 <TIM_Base_SetConfig+0x30>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a2b      	ldr	r2, [pc, #172]	@ (800a930 <TIM_Base_SetConfig+0xd8>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d108      	bne.n	800a89a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a88e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	4313      	orrs	r3, r2
 800a898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	4a22      	ldr	r2, [pc, #136]	@ (800a928 <TIM_Base_SetConfig+0xd0>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d00b      	beq.n	800a8ba <TIM_Base_SetConfig+0x62>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a8a8:	d007      	beq.n	800a8ba <TIM_Base_SetConfig+0x62>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a1f      	ldr	r2, [pc, #124]	@ (800a92c <TIM_Base_SetConfig+0xd4>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d003      	beq.n	800a8ba <TIM_Base_SetConfig+0x62>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a1e      	ldr	r2, [pc, #120]	@ (800a930 <TIM_Base_SetConfig+0xd8>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d108      	bne.n	800a8cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a8c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	68db      	ldr	r3, [r3, #12]
 800a8c6:	68fa      	ldr	r2, [r7, #12]
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	695b      	ldr	r3, [r3, #20]
 800a8d6:	4313      	orrs	r3, r2
 800a8d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68fa      	ldr	r2, [r7, #12]
 800a8de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	4a0d      	ldr	r2, [pc, #52]	@ (800a928 <TIM_Base_SetConfig+0xd0>)
 800a8f4:	4293      	cmp	r3, r2
 800a8f6:	d103      	bne.n	800a900 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8f8:	683b      	ldr	r3, [r7, #0]
 800a8fa:	691a      	ldr	r2, [r3, #16]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2201      	movs	r2, #1
 800a904:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d005      	beq.n	800a91e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	691b      	ldr	r3, [r3, #16]
 800a916:	f023 0201 	bic.w	r2, r3, #1
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	611a      	str	r2, [r3, #16]
  }
}
 800a91e:	bf00      	nop
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	bc80      	pop	{r7}
 800a926:	4770      	bx	lr
 800a928:	40012c00 	.word	0x40012c00
 800a92c:	40000400 	.word	0x40000400
 800a930:	40000800 	.word	0x40000800

0800a934 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a93c:	bf00      	nop
 800a93e:	370c      	adds	r7, #12
 800a940:	46bd      	mov	sp, r7
 800a942:	bc80      	pop	{r7}
 800a944:	4770      	bx	lr

0800a946 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a94e:	bf00      	nop
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	bc80      	pop	{r7}
 800a956:	4770      	bx	lr

0800a958 <__cvt>:
 800a958:	2b00      	cmp	r3, #0
 800a95a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a95e:	461d      	mov	r5, r3
 800a960:	bfbb      	ittet	lt
 800a962:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800a966:	461d      	movlt	r5, r3
 800a968:	2300      	movge	r3, #0
 800a96a:	232d      	movlt	r3, #45	@ 0x2d
 800a96c:	b088      	sub	sp, #32
 800a96e:	4614      	mov	r4, r2
 800a970:	bfb8      	it	lt
 800a972:	4614      	movlt	r4, r2
 800a974:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a976:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800a978:	7013      	strb	r3, [r2, #0]
 800a97a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a97c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800a980:	f023 0820 	bic.w	r8, r3, #32
 800a984:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a988:	d005      	beq.n	800a996 <__cvt+0x3e>
 800a98a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800a98e:	d100      	bne.n	800a992 <__cvt+0x3a>
 800a990:	3601      	adds	r6, #1
 800a992:	2302      	movs	r3, #2
 800a994:	e000      	b.n	800a998 <__cvt+0x40>
 800a996:	2303      	movs	r3, #3
 800a998:	aa07      	add	r2, sp, #28
 800a99a:	9204      	str	r2, [sp, #16]
 800a99c:	aa06      	add	r2, sp, #24
 800a99e:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a9a2:	e9cd 3600 	strd	r3, r6, [sp]
 800a9a6:	4622      	mov	r2, r4
 800a9a8:	462b      	mov	r3, r5
 800a9aa:	f000 fe8d 	bl	800b6c8 <_dtoa_r>
 800a9ae:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800a9b2:	4607      	mov	r7, r0
 800a9b4:	d119      	bne.n	800a9ea <__cvt+0x92>
 800a9b6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a9b8:	07db      	lsls	r3, r3, #31
 800a9ba:	d50e      	bpl.n	800a9da <__cvt+0x82>
 800a9bc:	eb00 0906 	add.w	r9, r0, r6
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	4620      	mov	r0, r4
 800a9c6:	4629      	mov	r1, r5
 800a9c8:	f7f6 f834 	bl	8000a34 <__aeabi_dcmpeq>
 800a9cc:	b108      	cbz	r0, 800a9d2 <__cvt+0x7a>
 800a9ce:	f8cd 901c 	str.w	r9, [sp, #28]
 800a9d2:	2230      	movs	r2, #48	@ 0x30
 800a9d4:	9b07      	ldr	r3, [sp, #28]
 800a9d6:	454b      	cmp	r3, r9
 800a9d8:	d31e      	bcc.n	800aa18 <__cvt+0xc0>
 800a9da:	4638      	mov	r0, r7
 800a9dc:	9b07      	ldr	r3, [sp, #28]
 800a9de:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800a9e0:	1bdb      	subs	r3, r3, r7
 800a9e2:	6013      	str	r3, [r2, #0]
 800a9e4:	b008      	add	sp, #32
 800a9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800a9ee:	eb00 0906 	add.w	r9, r0, r6
 800a9f2:	d1e5      	bne.n	800a9c0 <__cvt+0x68>
 800a9f4:	7803      	ldrb	r3, [r0, #0]
 800a9f6:	2b30      	cmp	r3, #48	@ 0x30
 800a9f8:	d10a      	bne.n	800aa10 <__cvt+0xb8>
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	4620      	mov	r0, r4
 800aa00:	4629      	mov	r1, r5
 800aa02:	f7f6 f817 	bl	8000a34 <__aeabi_dcmpeq>
 800aa06:	b918      	cbnz	r0, 800aa10 <__cvt+0xb8>
 800aa08:	f1c6 0601 	rsb	r6, r6, #1
 800aa0c:	f8ca 6000 	str.w	r6, [sl]
 800aa10:	f8da 3000 	ldr.w	r3, [sl]
 800aa14:	4499      	add	r9, r3
 800aa16:	e7d3      	b.n	800a9c0 <__cvt+0x68>
 800aa18:	1c59      	adds	r1, r3, #1
 800aa1a:	9107      	str	r1, [sp, #28]
 800aa1c:	701a      	strb	r2, [r3, #0]
 800aa1e:	e7d9      	b.n	800a9d4 <__cvt+0x7c>

0800aa20 <__exponent>:
 800aa20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa22:	2900      	cmp	r1, #0
 800aa24:	bfb6      	itet	lt
 800aa26:	232d      	movlt	r3, #45	@ 0x2d
 800aa28:	232b      	movge	r3, #43	@ 0x2b
 800aa2a:	4249      	neglt	r1, r1
 800aa2c:	2909      	cmp	r1, #9
 800aa2e:	7002      	strb	r2, [r0, #0]
 800aa30:	7043      	strb	r3, [r0, #1]
 800aa32:	dd29      	ble.n	800aa88 <__exponent+0x68>
 800aa34:	f10d 0307 	add.w	r3, sp, #7
 800aa38:	461d      	mov	r5, r3
 800aa3a:	270a      	movs	r7, #10
 800aa3c:	fbb1 f6f7 	udiv	r6, r1, r7
 800aa40:	461a      	mov	r2, r3
 800aa42:	fb07 1416 	mls	r4, r7, r6, r1
 800aa46:	3430      	adds	r4, #48	@ 0x30
 800aa48:	f802 4c01 	strb.w	r4, [r2, #-1]
 800aa4c:	460c      	mov	r4, r1
 800aa4e:	2c63      	cmp	r4, #99	@ 0x63
 800aa50:	4631      	mov	r1, r6
 800aa52:	f103 33ff 	add.w	r3, r3, #4294967295
 800aa56:	dcf1      	bgt.n	800aa3c <__exponent+0x1c>
 800aa58:	3130      	adds	r1, #48	@ 0x30
 800aa5a:	1e94      	subs	r4, r2, #2
 800aa5c:	f803 1c01 	strb.w	r1, [r3, #-1]
 800aa60:	4623      	mov	r3, r4
 800aa62:	1c41      	adds	r1, r0, #1
 800aa64:	42ab      	cmp	r3, r5
 800aa66:	d30a      	bcc.n	800aa7e <__exponent+0x5e>
 800aa68:	f10d 0309 	add.w	r3, sp, #9
 800aa6c:	1a9b      	subs	r3, r3, r2
 800aa6e:	42ac      	cmp	r4, r5
 800aa70:	bf88      	it	hi
 800aa72:	2300      	movhi	r3, #0
 800aa74:	3302      	adds	r3, #2
 800aa76:	4403      	add	r3, r0
 800aa78:	1a18      	subs	r0, r3, r0
 800aa7a:	b003      	add	sp, #12
 800aa7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa7e:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aa82:	f801 6f01 	strb.w	r6, [r1, #1]!
 800aa86:	e7ed      	b.n	800aa64 <__exponent+0x44>
 800aa88:	2330      	movs	r3, #48	@ 0x30
 800aa8a:	3130      	adds	r1, #48	@ 0x30
 800aa8c:	7083      	strb	r3, [r0, #2]
 800aa8e:	70c1      	strb	r1, [r0, #3]
 800aa90:	1d03      	adds	r3, r0, #4
 800aa92:	e7f1      	b.n	800aa78 <__exponent+0x58>

0800aa94 <_printf_float>:
 800aa94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa98:	b091      	sub	sp, #68	@ 0x44
 800aa9a:	460c      	mov	r4, r1
 800aa9c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800aaa0:	4616      	mov	r6, r2
 800aaa2:	461f      	mov	r7, r3
 800aaa4:	4605      	mov	r5, r0
 800aaa6:	f000 fcf1 	bl	800b48c <_localeconv_r>
 800aaaa:	6803      	ldr	r3, [r0, #0]
 800aaac:	4618      	mov	r0, r3
 800aaae:	9308      	str	r3, [sp, #32]
 800aab0:	f7f5 fb94 	bl	80001dc <strlen>
 800aab4:	2300      	movs	r3, #0
 800aab6:	930e      	str	r3, [sp, #56]	@ 0x38
 800aab8:	f8d8 3000 	ldr.w	r3, [r8]
 800aabc:	9009      	str	r0, [sp, #36]	@ 0x24
 800aabe:	3307      	adds	r3, #7
 800aac0:	f023 0307 	bic.w	r3, r3, #7
 800aac4:	f103 0208 	add.w	r2, r3, #8
 800aac8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800aacc:	f8d4 b000 	ldr.w	fp, [r4]
 800aad0:	f8c8 2000 	str.w	r2, [r8]
 800aad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aad8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800aadc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aade:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800aae2:	f04f 32ff 	mov.w	r2, #4294967295
 800aae6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aaea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800aaee:	4b9c      	ldr	r3, [pc, #624]	@ (800ad60 <_printf_float+0x2cc>)
 800aaf0:	f7f5 ffd2 	bl	8000a98 <__aeabi_dcmpun>
 800aaf4:	bb70      	cbnz	r0, 800ab54 <_printf_float+0xc0>
 800aaf6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800aafa:	f04f 32ff 	mov.w	r2, #4294967295
 800aafe:	4b98      	ldr	r3, [pc, #608]	@ (800ad60 <_printf_float+0x2cc>)
 800ab00:	f7f5 ffac 	bl	8000a5c <__aeabi_dcmple>
 800ab04:	bb30      	cbnz	r0, 800ab54 <_printf_float+0xc0>
 800ab06:	2200      	movs	r2, #0
 800ab08:	2300      	movs	r3, #0
 800ab0a:	4640      	mov	r0, r8
 800ab0c:	4649      	mov	r1, r9
 800ab0e:	f7f5 ff9b 	bl	8000a48 <__aeabi_dcmplt>
 800ab12:	b110      	cbz	r0, 800ab1a <_printf_float+0x86>
 800ab14:	232d      	movs	r3, #45	@ 0x2d
 800ab16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ab1a:	4a92      	ldr	r2, [pc, #584]	@ (800ad64 <_printf_float+0x2d0>)
 800ab1c:	4b92      	ldr	r3, [pc, #584]	@ (800ad68 <_printf_float+0x2d4>)
 800ab1e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ab22:	bf94      	ite	ls
 800ab24:	4690      	movls	r8, r2
 800ab26:	4698      	movhi	r8, r3
 800ab28:	2303      	movs	r3, #3
 800ab2a:	f04f 0900 	mov.w	r9, #0
 800ab2e:	6123      	str	r3, [r4, #16]
 800ab30:	f02b 0304 	bic.w	r3, fp, #4
 800ab34:	6023      	str	r3, [r4, #0]
 800ab36:	4633      	mov	r3, r6
 800ab38:	4621      	mov	r1, r4
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	9700      	str	r7, [sp, #0]
 800ab3e:	aa0f      	add	r2, sp, #60	@ 0x3c
 800ab40:	f000 f9d4 	bl	800aeec <_printf_common>
 800ab44:	3001      	adds	r0, #1
 800ab46:	f040 8090 	bne.w	800ac6a <_printf_float+0x1d6>
 800ab4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4e:	b011      	add	sp, #68	@ 0x44
 800ab50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab54:	4642      	mov	r2, r8
 800ab56:	464b      	mov	r3, r9
 800ab58:	4640      	mov	r0, r8
 800ab5a:	4649      	mov	r1, r9
 800ab5c:	f7f5 ff9c 	bl	8000a98 <__aeabi_dcmpun>
 800ab60:	b148      	cbz	r0, 800ab76 <_printf_float+0xe2>
 800ab62:	464b      	mov	r3, r9
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	bfb8      	it	lt
 800ab68:	232d      	movlt	r3, #45	@ 0x2d
 800ab6a:	4a80      	ldr	r2, [pc, #512]	@ (800ad6c <_printf_float+0x2d8>)
 800ab6c:	bfb8      	it	lt
 800ab6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ab72:	4b7f      	ldr	r3, [pc, #508]	@ (800ad70 <_printf_float+0x2dc>)
 800ab74:	e7d3      	b.n	800ab1e <_printf_float+0x8a>
 800ab76:	6863      	ldr	r3, [r4, #4]
 800ab78:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800ab7c:	1c5a      	adds	r2, r3, #1
 800ab7e:	d13f      	bne.n	800ac00 <_printf_float+0x16c>
 800ab80:	2306      	movs	r3, #6
 800ab82:	6063      	str	r3, [r4, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800ab8a:	6023      	str	r3, [r4, #0]
 800ab8c:	9206      	str	r2, [sp, #24]
 800ab8e:	aa0e      	add	r2, sp, #56	@ 0x38
 800ab90:	e9cd a204 	strd	sl, r2, [sp, #16]
 800ab94:	aa0d      	add	r2, sp, #52	@ 0x34
 800ab96:	9203      	str	r2, [sp, #12]
 800ab98:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800ab9c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800aba0:	6863      	ldr	r3, [r4, #4]
 800aba2:	4642      	mov	r2, r8
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	4628      	mov	r0, r5
 800aba8:	464b      	mov	r3, r9
 800abaa:	910a      	str	r1, [sp, #40]	@ 0x28
 800abac:	f7ff fed4 	bl	800a958 <__cvt>
 800abb0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800abb2:	4680      	mov	r8, r0
 800abb4:	2947      	cmp	r1, #71	@ 0x47
 800abb6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800abb8:	d128      	bne.n	800ac0c <_printf_float+0x178>
 800abba:	1cc8      	adds	r0, r1, #3
 800abbc:	db02      	blt.n	800abc4 <_printf_float+0x130>
 800abbe:	6863      	ldr	r3, [r4, #4]
 800abc0:	4299      	cmp	r1, r3
 800abc2:	dd40      	ble.n	800ac46 <_printf_float+0x1b2>
 800abc4:	f1aa 0a02 	sub.w	sl, sl, #2
 800abc8:	fa5f fa8a 	uxtb.w	sl, sl
 800abcc:	4652      	mov	r2, sl
 800abce:	3901      	subs	r1, #1
 800abd0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800abd4:	910d      	str	r1, [sp, #52]	@ 0x34
 800abd6:	f7ff ff23 	bl	800aa20 <__exponent>
 800abda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800abdc:	4681      	mov	r9, r0
 800abde:	1813      	adds	r3, r2, r0
 800abe0:	2a01      	cmp	r2, #1
 800abe2:	6123      	str	r3, [r4, #16]
 800abe4:	dc02      	bgt.n	800abec <_printf_float+0x158>
 800abe6:	6822      	ldr	r2, [r4, #0]
 800abe8:	07d2      	lsls	r2, r2, #31
 800abea:	d501      	bpl.n	800abf0 <_printf_float+0x15c>
 800abec:	3301      	adds	r3, #1
 800abee:	6123      	str	r3, [r4, #16]
 800abf0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d09e      	beq.n	800ab36 <_printf_float+0xa2>
 800abf8:	232d      	movs	r3, #45	@ 0x2d
 800abfa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800abfe:	e79a      	b.n	800ab36 <_printf_float+0xa2>
 800ac00:	2947      	cmp	r1, #71	@ 0x47
 800ac02:	d1bf      	bne.n	800ab84 <_printf_float+0xf0>
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d1bd      	bne.n	800ab84 <_printf_float+0xf0>
 800ac08:	2301      	movs	r3, #1
 800ac0a:	e7ba      	b.n	800ab82 <_printf_float+0xee>
 800ac0c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac10:	d9dc      	bls.n	800abcc <_printf_float+0x138>
 800ac12:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ac16:	d118      	bne.n	800ac4a <_printf_float+0x1b6>
 800ac18:	2900      	cmp	r1, #0
 800ac1a:	6863      	ldr	r3, [r4, #4]
 800ac1c:	dd0b      	ble.n	800ac36 <_printf_float+0x1a2>
 800ac1e:	6121      	str	r1, [r4, #16]
 800ac20:	b913      	cbnz	r3, 800ac28 <_printf_float+0x194>
 800ac22:	6822      	ldr	r2, [r4, #0]
 800ac24:	07d0      	lsls	r0, r2, #31
 800ac26:	d502      	bpl.n	800ac2e <_printf_float+0x19a>
 800ac28:	3301      	adds	r3, #1
 800ac2a:	440b      	add	r3, r1
 800ac2c:	6123      	str	r3, [r4, #16]
 800ac2e:	f04f 0900 	mov.w	r9, #0
 800ac32:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ac34:	e7dc      	b.n	800abf0 <_printf_float+0x15c>
 800ac36:	b913      	cbnz	r3, 800ac3e <_printf_float+0x1aa>
 800ac38:	6822      	ldr	r2, [r4, #0]
 800ac3a:	07d2      	lsls	r2, r2, #31
 800ac3c:	d501      	bpl.n	800ac42 <_printf_float+0x1ae>
 800ac3e:	3302      	adds	r3, #2
 800ac40:	e7f4      	b.n	800ac2c <_printf_float+0x198>
 800ac42:	2301      	movs	r3, #1
 800ac44:	e7f2      	b.n	800ac2c <_printf_float+0x198>
 800ac46:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800ac4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ac4c:	4299      	cmp	r1, r3
 800ac4e:	db05      	blt.n	800ac5c <_printf_float+0x1c8>
 800ac50:	6823      	ldr	r3, [r4, #0]
 800ac52:	6121      	str	r1, [r4, #16]
 800ac54:	07d8      	lsls	r0, r3, #31
 800ac56:	d5ea      	bpl.n	800ac2e <_printf_float+0x19a>
 800ac58:	1c4b      	adds	r3, r1, #1
 800ac5a:	e7e7      	b.n	800ac2c <_printf_float+0x198>
 800ac5c:	2900      	cmp	r1, #0
 800ac5e:	bfcc      	ite	gt
 800ac60:	2201      	movgt	r2, #1
 800ac62:	f1c1 0202 	rsble	r2, r1, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	e7e0      	b.n	800ac2c <_printf_float+0x198>
 800ac6a:	6823      	ldr	r3, [r4, #0]
 800ac6c:	055a      	lsls	r2, r3, #21
 800ac6e:	d407      	bmi.n	800ac80 <_printf_float+0x1ec>
 800ac70:	6923      	ldr	r3, [r4, #16]
 800ac72:	4642      	mov	r2, r8
 800ac74:	4631      	mov	r1, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b8      	blx	r7
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	d12b      	bne.n	800acd6 <_printf_float+0x242>
 800ac7e:	e764      	b.n	800ab4a <_printf_float+0xb6>
 800ac80:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800ac84:	f240 80dc 	bls.w	800ae40 <_printf_float+0x3ac>
 800ac88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ac8c:	2200      	movs	r2, #0
 800ac8e:	2300      	movs	r3, #0
 800ac90:	f7f5 fed0 	bl	8000a34 <__aeabi_dcmpeq>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	d033      	beq.n	800ad00 <_printf_float+0x26c>
 800ac98:	2301      	movs	r3, #1
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4628      	mov	r0, r5
 800ac9e:	4a35      	ldr	r2, [pc, #212]	@ (800ad74 <_printf_float+0x2e0>)
 800aca0:	47b8      	blx	r7
 800aca2:	3001      	adds	r0, #1
 800aca4:	f43f af51 	beq.w	800ab4a <_printf_float+0xb6>
 800aca8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800acac:	4543      	cmp	r3, r8
 800acae:	db02      	blt.n	800acb6 <_printf_float+0x222>
 800acb0:	6823      	ldr	r3, [r4, #0]
 800acb2:	07d8      	lsls	r0, r3, #31
 800acb4:	d50f      	bpl.n	800acd6 <_printf_float+0x242>
 800acb6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800acba:	4631      	mov	r1, r6
 800acbc:	4628      	mov	r0, r5
 800acbe:	47b8      	blx	r7
 800acc0:	3001      	adds	r0, #1
 800acc2:	f43f af42 	beq.w	800ab4a <_printf_float+0xb6>
 800acc6:	f04f 0900 	mov.w	r9, #0
 800acca:	f108 38ff 	add.w	r8, r8, #4294967295
 800acce:	f104 0a1a 	add.w	sl, r4, #26
 800acd2:	45c8      	cmp	r8, r9
 800acd4:	dc09      	bgt.n	800acea <_printf_float+0x256>
 800acd6:	6823      	ldr	r3, [r4, #0]
 800acd8:	079b      	lsls	r3, r3, #30
 800acda:	f100 8102 	bmi.w	800aee2 <_printf_float+0x44e>
 800acde:	68e0      	ldr	r0, [r4, #12]
 800ace0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ace2:	4298      	cmp	r0, r3
 800ace4:	bfb8      	it	lt
 800ace6:	4618      	movlt	r0, r3
 800ace8:	e731      	b.n	800ab4e <_printf_float+0xba>
 800acea:	2301      	movs	r3, #1
 800acec:	4652      	mov	r2, sl
 800acee:	4631      	mov	r1, r6
 800acf0:	4628      	mov	r0, r5
 800acf2:	47b8      	blx	r7
 800acf4:	3001      	adds	r0, #1
 800acf6:	f43f af28 	beq.w	800ab4a <_printf_float+0xb6>
 800acfa:	f109 0901 	add.w	r9, r9, #1
 800acfe:	e7e8      	b.n	800acd2 <_printf_float+0x23e>
 800ad00:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	dc38      	bgt.n	800ad78 <_printf_float+0x2e4>
 800ad06:	2301      	movs	r3, #1
 800ad08:	4631      	mov	r1, r6
 800ad0a:	4628      	mov	r0, r5
 800ad0c:	4a19      	ldr	r2, [pc, #100]	@ (800ad74 <_printf_float+0x2e0>)
 800ad0e:	47b8      	blx	r7
 800ad10:	3001      	adds	r0, #1
 800ad12:	f43f af1a 	beq.w	800ab4a <_printf_float+0xb6>
 800ad16:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800ad1a:	ea59 0303 	orrs.w	r3, r9, r3
 800ad1e:	d102      	bne.n	800ad26 <_printf_float+0x292>
 800ad20:	6823      	ldr	r3, [r4, #0]
 800ad22:	07d9      	lsls	r1, r3, #31
 800ad24:	d5d7      	bpl.n	800acd6 <_printf_float+0x242>
 800ad26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ad2a:	4631      	mov	r1, r6
 800ad2c:	4628      	mov	r0, r5
 800ad2e:	47b8      	blx	r7
 800ad30:	3001      	adds	r0, #1
 800ad32:	f43f af0a 	beq.w	800ab4a <_printf_float+0xb6>
 800ad36:	f04f 0a00 	mov.w	sl, #0
 800ad3a:	f104 0b1a 	add.w	fp, r4, #26
 800ad3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad40:	425b      	negs	r3, r3
 800ad42:	4553      	cmp	r3, sl
 800ad44:	dc01      	bgt.n	800ad4a <_printf_float+0x2b6>
 800ad46:	464b      	mov	r3, r9
 800ad48:	e793      	b.n	800ac72 <_printf_float+0x1de>
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	465a      	mov	r2, fp
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4628      	mov	r0, r5
 800ad52:	47b8      	blx	r7
 800ad54:	3001      	adds	r0, #1
 800ad56:	f43f aef8 	beq.w	800ab4a <_printf_float+0xb6>
 800ad5a:	f10a 0a01 	add.w	sl, sl, #1
 800ad5e:	e7ee      	b.n	800ad3e <_printf_float+0x2aa>
 800ad60:	7fefffff 	.word	0x7fefffff
 800ad64:	0800e392 	.word	0x0800e392
 800ad68:	0800e396 	.word	0x0800e396
 800ad6c:	0800e39a 	.word	0x0800e39a
 800ad70:	0800e39e 	.word	0x0800e39e
 800ad74:	0800e3a2 	.word	0x0800e3a2
 800ad78:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad7a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ad7e:	4553      	cmp	r3, sl
 800ad80:	bfa8      	it	ge
 800ad82:	4653      	movge	r3, sl
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	4699      	mov	r9, r3
 800ad88:	dc36      	bgt.n	800adf8 <_printf_float+0x364>
 800ad8a:	f04f 0b00 	mov.w	fp, #0
 800ad8e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad92:	f104 021a 	add.w	r2, r4, #26
 800ad96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800ad98:	930a      	str	r3, [sp, #40]	@ 0x28
 800ad9a:	eba3 0309 	sub.w	r3, r3, r9
 800ad9e:	455b      	cmp	r3, fp
 800ada0:	dc31      	bgt.n	800ae06 <_printf_float+0x372>
 800ada2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ada4:	459a      	cmp	sl, r3
 800ada6:	dc3a      	bgt.n	800ae1e <_printf_float+0x38a>
 800ada8:	6823      	ldr	r3, [r4, #0]
 800adaa:	07da      	lsls	r2, r3, #31
 800adac:	d437      	bmi.n	800ae1e <_printf_float+0x38a>
 800adae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800adb0:	ebaa 0903 	sub.w	r9, sl, r3
 800adb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800adb6:	ebaa 0303 	sub.w	r3, sl, r3
 800adba:	4599      	cmp	r9, r3
 800adbc:	bfa8      	it	ge
 800adbe:	4699      	movge	r9, r3
 800adc0:	f1b9 0f00 	cmp.w	r9, #0
 800adc4:	dc33      	bgt.n	800ae2e <_printf_float+0x39a>
 800adc6:	f04f 0800 	mov.w	r8, #0
 800adca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800adce:	f104 0b1a 	add.w	fp, r4, #26
 800add2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800add4:	ebaa 0303 	sub.w	r3, sl, r3
 800add8:	eba3 0309 	sub.w	r3, r3, r9
 800addc:	4543      	cmp	r3, r8
 800adde:	f77f af7a 	ble.w	800acd6 <_printf_float+0x242>
 800ade2:	2301      	movs	r3, #1
 800ade4:	465a      	mov	r2, fp
 800ade6:	4631      	mov	r1, r6
 800ade8:	4628      	mov	r0, r5
 800adea:	47b8      	blx	r7
 800adec:	3001      	adds	r0, #1
 800adee:	f43f aeac 	beq.w	800ab4a <_printf_float+0xb6>
 800adf2:	f108 0801 	add.w	r8, r8, #1
 800adf6:	e7ec      	b.n	800add2 <_printf_float+0x33e>
 800adf8:	4642      	mov	r2, r8
 800adfa:	4631      	mov	r1, r6
 800adfc:	4628      	mov	r0, r5
 800adfe:	47b8      	blx	r7
 800ae00:	3001      	adds	r0, #1
 800ae02:	d1c2      	bne.n	800ad8a <_printf_float+0x2f6>
 800ae04:	e6a1      	b.n	800ab4a <_printf_float+0xb6>
 800ae06:	2301      	movs	r3, #1
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	920a      	str	r2, [sp, #40]	@ 0x28
 800ae0e:	47b8      	blx	r7
 800ae10:	3001      	adds	r0, #1
 800ae12:	f43f ae9a 	beq.w	800ab4a <_printf_float+0xb6>
 800ae16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae18:	f10b 0b01 	add.w	fp, fp, #1
 800ae1c:	e7bb      	b.n	800ad96 <_printf_float+0x302>
 800ae1e:	4631      	mov	r1, r6
 800ae20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ae24:	4628      	mov	r0, r5
 800ae26:	47b8      	blx	r7
 800ae28:	3001      	adds	r0, #1
 800ae2a:	d1c0      	bne.n	800adae <_printf_float+0x31a>
 800ae2c:	e68d      	b.n	800ab4a <_printf_float+0xb6>
 800ae2e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ae30:	464b      	mov	r3, r9
 800ae32:	4631      	mov	r1, r6
 800ae34:	4628      	mov	r0, r5
 800ae36:	4442      	add	r2, r8
 800ae38:	47b8      	blx	r7
 800ae3a:	3001      	adds	r0, #1
 800ae3c:	d1c3      	bne.n	800adc6 <_printf_float+0x332>
 800ae3e:	e684      	b.n	800ab4a <_printf_float+0xb6>
 800ae40:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800ae44:	f1ba 0f01 	cmp.w	sl, #1
 800ae48:	dc01      	bgt.n	800ae4e <_printf_float+0x3ba>
 800ae4a:	07db      	lsls	r3, r3, #31
 800ae4c:	d536      	bpl.n	800aebc <_printf_float+0x428>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	4642      	mov	r2, r8
 800ae52:	4631      	mov	r1, r6
 800ae54:	4628      	mov	r0, r5
 800ae56:	47b8      	blx	r7
 800ae58:	3001      	adds	r0, #1
 800ae5a:	f43f ae76 	beq.w	800ab4a <_printf_float+0xb6>
 800ae5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ae62:	4631      	mov	r1, r6
 800ae64:	4628      	mov	r0, r5
 800ae66:	47b8      	blx	r7
 800ae68:	3001      	adds	r0, #1
 800ae6a:	f43f ae6e 	beq.w	800ab4a <_printf_float+0xb6>
 800ae6e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800ae72:	2200      	movs	r2, #0
 800ae74:	2300      	movs	r3, #0
 800ae76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ae7a:	f7f5 fddb 	bl	8000a34 <__aeabi_dcmpeq>
 800ae7e:	b9c0      	cbnz	r0, 800aeb2 <_printf_float+0x41e>
 800ae80:	4653      	mov	r3, sl
 800ae82:	f108 0201 	add.w	r2, r8, #1
 800ae86:	4631      	mov	r1, r6
 800ae88:	4628      	mov	r0, r5
 800ae8a:	47b8      	blx	r7
 800ae8c:	3001      	adds	r0, #1
 800ae8e:	d10c      	bne.n	800aeaa <_printf_float+0x416>
 800ae90:	e65b      	b.n	800ab4a <_printf_float+0xb6>
 800ae92:	2301      	movs	r3, #1
 800ae94:	465a      	mov	r2, fp
 800ae96:	4631      	mov	r1, r6
 800ae98:	4628      	mov	r0, r5
 800ae9a:	47b8      	blx	r7
 800ae9c:	3001      	adds	r0, #1
 800ae9e:	f43f ae54 	beq.w	800ab4a <_printf_float+0xb6>
 800aea2:	f108 0801 	add.w	r8, r8, #1
 800aea6:	45d0      	cmp	r8, sl
 800aea8:	dbf3      	blt.n	800ae92 <_printf_float+0x3fe>
 800aeaa:	464b      	mov	r3, r9
 800aeac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800aeb0:	e6e0      	b.n	800ac74 <_printf_float+0x1e0>
 800aeb2:	f04f 0800 	mov.w	r8, #0
 800aeb6:	f104 0b1a 	add.w	fp, r4, #26
 800aeba:	e7f4      	b.n	800aea6 <_printf_float+0x412>
 800aebc:	2301      	movs	r3, #1
 800aebe:	4642      	mov	r2, r8
 800aec0:	e7e1      	b.n	800ae86 <_printf_float+0x3f2>
 800aec2:	2301      	movs	r3, #1
 800aec4:	464a      	mov	r2, r9
 800aec6:	4631      	mov	r1, r6
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b8      	blx	r7
 800aecc:	3001      	adds	r0, #1
 800aece:	f43f ae3c 	beq.w	800ab4a <_printf_float+0xb6>
 800aed2:	f108 0801 	add.w	r8, r8, #1
 800aed6:	68e3      	ldr	r3, [r4, #12]
 800aed8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800aeda:	1a5b      	subs	r3, r3, r1
 800aedc:	4543      	cmp	r3, r8
 800aede:	dcf0      	bgt.n	800aec2 <_printf_float+0x42e>
 800aee0:	e6fd      	b.n	800acde <_printf_float+0x24a>
 800aee2:	f04f 0800 	mov.w	r8, #0
 800aee6:	f104 0919 	add.w	r9, r4, #25
 800aeea:	e7f4      	b.n	800aed6 <_printf_float+0x442>

0800aeec <_printf_common>:
 800aeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef0:	4616      	mov	r6, r2
 800aef2:	4698      	mov	r8, r3
 800aef4:	688a      	ldr	r2, [r1, #8]
 800aef6:	690b      	ldr	r3, [r1, #16]
 800aef8:	4607      	mov	r7, r0
 800aefa:	4293      	cmp	r3, r2
 800aefc:	bfb8      	it	lt
 800aefe:	4613      	movlt	r3, r2
 800af00:	6033      	str	r3, [r6, #0]
 800af02:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800af06:	460c      	mov	r4, r1
 800af08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800af0c:	b10a      	cbz	r2, 800af12 <_printf_common+0x26>
 800af0e:	3301      	adds	r3, #1
 800af10:	6033      	str	r3, [r6, #0]
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	0699      	lsls	r1, r3, #26
 800af16:	bf42      	ittt	mi
 800af18:	6833      	ldrmi	r3, [r6, #0]
 800af1a:	3302      	addmi	r3, #2
 800af1c:	6033      	strmi	r3, [r6, #0]
 800af1e:	6825      	ldr	r5, [r4, #0]
 800af20:	f015 0506 	ands.w	r5, r5, #6
 800af24:	d106      	bne.n	800af34 <_printf_common+0x48>
 800af26:	f104 0a19 	add.w	sl, r4, #25
 800af2a:	68e3      	ldr	r3, [r4, #12]
 800af2c:	6832      	ldr	r2, [r6, #0]
 800af2e:	1a9b      	subs	r3, r3, r2
 800af30:	42ab      	cmp	r3, r5
 800af32:	dc2b      	bgt.n	800af8c <_printf_common+0xa0>
 800af34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800af38:	6822      	ldr	r2, [r4, #0]
 800af3a:	3b00      	subs	r3, #0
 800af3c:	bf18      	it	ne
 800af3e:	2301      	movne	r3, #1
 800af40:	0692      	lsls	r2, r2, #26
 800af42:	d430      	bmi.n	800afa6 <_printf_common+0xba>
 800af44:	4641      	mov	r1, r8
 800af46:	4638      	mov	r0, r7
 800af48:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800af4c:	47c8      	blx	r9
 800af4e:	3001      	adds	r0, #1
 800af50:	d023      	beq.n	800af9a <_printf_common+0xae>
 800af52:	6823      	ldr	r3, [r4, #0]
 800af54:	6922      	ldr	r2, [r4, #16]
 800af56:	f003 0306 	and.w	r3, r3, #6
 800af5a:	2b04      	cmp	r3, #4
 800af5c:	bf14      	ite	ne
 800af5e:	2500      	movne	r5, #0
 800af60:	6833      	ldreq	r3, [r6, #0]
 800af62:	f04f 0600 	mov.w	r6, #0
 800af66:	bf08      	it	eq
 800af68:	68e5      	ldreq	r5, [r4, #12]
 800af6a:	f104 041a 	add.w	r4, r4, #26
 800af6e:	bf08      	it	eq
 800af70:	1aed      	subeq	r5, r5, r3
 800af72:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800af76:	bf08      	it	eq
 800af78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800af7c:	4293      	cmp	r3, r2
 800af7e:	bfc4      	itt	gt
 800af80:	1a9b      	subgt	r3, r3, r2
 800af82:	18ed      	addgt	r5, r5, r3
 800af84:	42b5      	cmp	r5, r6
 800af86:	d11a      	bne.n	800afbe <_printf_common+0xd2>
 800af88:	2000      	movs	r0, #0
 800af8a:	e008      	b.n	800af9e <_printf_common+0xb2>
 800af8c:	2301      	movs	r3, #1
 800af8e:	4652      	mov	r2, sl
 800af90:	4641      	mov	r1, r8
 800af92:	4638      	mov	r0, r7
 800af94:	47c8      	blx	r9
 800af96:	3001      	adds	r0, #1
 800af98:	d103      	bne.n	800afa2 <_printf_common+0xb6>
 800af9a:	f04f 30ff 	mov.w	r0, #4294967295
 800af9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800afa2:	3501      	adds	r5, #1
 800afa4:	e7c1      	b.n	800af2a <_printf_common+0x3e>
 800afa6:	2030      	movs	r0, #48	@ 0x30
 800afa8:	18e1      	adds	r1, r4, r3
 800afaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800afae:	1c5a      	adds	r2, r3, #1
 800afb0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800afb4:	4422      	add	r2, r4
 800afb6:	3302      	adds	r3, #2
 800afb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800afbc:	e7c2      	b.n	800af44 <_printf_common+0x58>
 800afbe:	2301      	movs	r3, #1
 800afc0:	4622      	mov	r2, r4
 800afc2:	4641      	mov	r1, r8
 800afc4:	4638      	mov	r0, r7
 800afc6:	47c8      	blx	r9
 800afc8:	3001      	adds	r0, #1
 800afca:	d0e6      	beq.n	800af9a <_printf_common+0xae>
 800afcc:	3601      	adds	r6, #1
 800afce:	e7d9      	b.n	800af84 <_printf_common+0x98>

0800afd0 <_printf_i>:
 800afd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800afd4:	7e0f      	ldrb	r7, [r1, #24]
 800afd6:	4691      	mov	r9, r2
 800afd8:	2f78      	cmp	r7, #120	@ 0x78
 800afda:	4680      	mov	r8, r0
 800afdc:	460c      	mov	r4, r1
 800afde:	469a      	mov	sl, r3
 800afe0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800afe2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800afe6:	d807      	bhi.n	800aff8 <_printf_i+0x28>
 800afe8:	2f62      	cmp	r7, #98	@ 0x62
 800afea:	d80a      	bhi.n	800b002 <_printf_i+0x32>
 800afec:	2f00      	cmp	r7, #0
 800afee:	f000 80d3 	beq.w	800b198 <_printf_i+0x1c8>
 800aff2:	2f58      	cmp	r7, #88	@ 0x58
 800aff4:	f000 80ba 	beq.w	800b16c <_printf_i+0x19c>
 800aff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800affc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b000:	e03a      	b.n	800b078 <_printf_i+0xa8>
 800b002:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b006:	2b15      	cmp	r3, #21
 800b008:	d8f6      	bhi.n	800aff8 <_printf_i+0x28>
 800b00a:	a101      	add	r1, pc, #4	@ (adr r1, 800b010 <_printf_i+0x40>)
 800b00c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b010:	0800b069 	.word	0x0800b069
 800b014:	0800b07d 	.word	0x0800b07d
 800b018:	0800aff9 	.word	0x0800aff9
 800b01c:	0800aff9 	.word	0x0800aff9
 800b020:	0800aff9 	.word	0x0800aff9
 800b024:	0800aff9 	.word	0x0800aff9
 800b028:	0800b07d 	.word	0x0800b07d
 800b02c:	0800aff9 	.word	0x0800aff9
 800b030:	0800aff9 	.word	0x0800aff9
 800b034:	0800aff9 	.word	0x0800aff9
 800b038:	0800aff9 	.word	0x0800aff9
 800b03c:	0800b17f 	.word	0x0800b17f
 800b040:	0800b0a7 	.word	0x0800b0a7
 800b044:	0800b139 	.word	0x0800b139
 800b048:	0800aff9 	.word	0x0800aff9
 800b04c:	0800aff9 	.word	0x0800aff9
 800b050:	0800b1a1 	.word	0x0800b1a1
 800b054:	0800aff9 	.word	0x0800aff9
 800b058:	0800b0a7 	.word	0x0800b0a7
 800b05c:	0800aff9 	.word	0x0800aff9
 800b060:	0800aff9 	.word	0x0800aff9
 800b064:	0800b141 	.word	0x0800b141
 800b068:	6833      	ldr	r3, [r6, #0]
 800b06a:	1d1a      	adds	r2, r3, #4
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	6032      	str	r2, [r6, #0]
 800b070:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b074:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b078:	2301      	movs	r3, #1
 800b07a:	e09e      	b.n	800b1ba <_printf_i+0x1ea>
 800b07c:	6833      	ldr	r3, [r6, #0]
 800b07e:	6820      	ldr	r0, [r4, #0]
 800b080:	1d19      	adds	r1, r3, #4
 800b082:	6031      	str	r1, [r6, #0]
 800b084:	0606      	lsls	r6, r0, #24
 800b086:	d501      	bpl.n	800b08c <_printf_i+0xbc>
 800b088:	681d      	ldr	r5, [r3, #0]
 800b08a:	e003      	b.n	800b094 <_printf_i+0xc4>
 800b08c:	0645      	lsls	r5, r0, #25
 800b08e:	d5fb      	bpl.n	800b088 <_printf_i+0xb8>
 800b090:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b094:	2d00      	cmp	r5, #0
 800b096:	da03      	bge.n	800b0a0 <_printf_i+0xd0>
 800b098:	232d      	movs	r3, #45	@ 0x2d
 800b09a:	426d      	negs	r5, r5
 800b09c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b0a0:	230a      	movs	r3, #10
 800b0a2:	4859      	ldr	r0, [pc, #356]	@ (800b208 <_printf_i+0x238>)
 800b0a4:	e011      	b.n	800b0ca <_printf_i+0xfa>
 800b0a6:	6821      	ldr	r1, [r4, #0]
 800b0a8:	6833      	ldr	r3, [r6, #0]
 800b0aa:	0608      	lsls	r0, r1, #24
 800b0ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800b0b0:	d402      	bmi.n	800b0b8 <_printf_i+0xe8>
 800b0b2:	0649      	lsls	r1, r1, #25
 800b0b4:	bf48      	it	mi
 800b0b6:	b2ad      	uxthmi	r5, r5
 800b0b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b0ba:	6033      	str	r3, [r6, #0]
 800b0bc:	bf14      	ite	ne
 800b0be:	230a      	movne	r3, #10
 800b0c0:	2308      	moveq	r3, #8
 800b0c2:	4851      	ldr	r0, [pc, #324]	@ (800b208 <_printf_i+0x238>)
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b0ca:	6866      	ldr	r6, [r4, #4]
 800b0cc:	2e00      	cmp	r6, #0
 800b0ce:	bfa8      	it	ge
 800b0d0:	6821      	ldrge	r1, [r4, #0]
 800b0d2:	60a6      	str	r6, [r4, #8]
 800b0d4:	bfa4      	itt	ge
 800b0d6:	f021 0104 	bicge.w	r1, r1, #4
 800b0da:	6021      	strge	r1, [r4, #0]
 800b0dc:	b90d      	cbnz	r5, 800b0e2 <_printf_i+0x112>
 800b0de:	2e00      	cmp	r6, #0
 800b0e0:	d04b      	beq.n	800b17a <_printf_i+0x1aa>
 800b0e2:	4616      	mov	r6, r2
 800b0e4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b0e8:	fb03 5711 	mls	r7, r3, r1, r5
 800b0ec:	5dc7      	ldrb	r7, [r0, r7]
 800b0ee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b0f2:	462f      	mov	r7, r5
 800b0f4:	42bb      	cmp	r3, r7
 800b0f6:	460d      	mov	r5, r1
 800b0f8:	d9f4      	bls.n	800b0e4 <_printf_i+0x114>
 800b0fa:	2b08      	cmp	r3, #8
 800b0fc:	d10b      	bne.n	800b116 <_printf_i+0x146>
 800b0fe:	6823      	ldr	r3, [r4, #0]
 800b100:	07df      	lsls	r7, r3, #31
 800b102:	d508      	bpl.n	800b116 <_printf_i+0x146>
 800b104:	6923      	ldr	r3, [r4, #16]
 800b106:	6861      	ldr	r1, [r4, #4]
 800b108:	4299      	cmp	r1, r3
 800b10a:	bfde      	ittt	le
 800b10c:	2330      	movle	r3, #48	@ 0x30
 800b10e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b112:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b116:	1b92      	subs	r2, r2, r6
 800b118:	6122      	str	r2, [r4, #16]
 800b11a:	464b      	mov	r3, r9
 800b11c:	4621      	mov	r1, r4
 800b11e:	4640      	mov	r0, r8
 800b120:	f8cd a000 	str.w	sl, [sp]
 800b124:	aa03      	add	r2, sp, #12
 800b126:	f7ff fee1 	bl	800aeec <_printf_common>
 800b12a:	3001      	adds	r0, #1
 800b12c:	d14a      	bne.n	800b1c4 <_printf_i+0x1f4>
 800b12e:	f04f 30ff 	mov.w	r0, #4294967295
 800b132:	b004      	add	sp, #16
 800b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	f043 0320 	orr.w	r3, r3, #32
 800b13e:	6023      	str	r3, [r4, #0]
 800b140:	2778      	movs	r7, #120	@ 0x78
 800b142:	4832      	ldr	r0, [pc, #200]	@ (800b20c <_printf_i+0x23c>)
 800b144:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b148:	6823      	ldr	r3, [r4, #0]
 800b14a:	6831      	ldr	r1, [r6, #0]
 800b14c:	061f      	lsls	r7, r3, #24
 800b14e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b152:	d402      	bmi.n	800b15a <_printf_i+0x18a>
 800b154:	065f      	lsls	r7, r3, #25
 800b156:	bf48      	it	mi
 800b158:	b2ad      	uxthmi	r5, r5
 800b15a:	6031      	str	r1, [r6, #0]
 800b15c:	07d9      	lsls	r1, r3, #31
 800b15e:	bf44      	itt	mi
 800b160:	f043 0320 	orrmi.w	r3, r3, #32
 800b164:	6023      	strmi	r3, [r4, #0]
 800b166:	b11d      	cbz	r5, 800b170 <_printf_i+0x1a0>
 800b168:	2310      	movs	r3, #16
 800b16a:	e7ab      	b.n	800b0c4 <_printf_i+0xf4>
 800b16c:	4826      	ldr	r0, [pc, #152]	@ (800b208 <_printf_i+0x238>)
 800b16e:	e7e9      	b.n	800b144 <_printf_i+0x174>
 800b170:	6823      	ldr	r3, [r4, #0]
 800b172:	f023 0320 	bic.w	r3, r3, #32
 800b176:	6023      	str	r3, [r4, #0]
 800b178:	e7f6      	b.n	800b168 <_printf_i+0x198>
 800b17a:	4616      	mov	r6, r2
 800b17c:	e7bd      	b.n	800b0fa <_printf_i+0x12a>
 800b17e:	6833      	ldr	r3, [r6, #0]
 800b180:	6825      	ldr	r5, [r4, #0]
 800b182:	1d18      	adds	r0, r3, #4
 800b184:	6961      	ldr	r1, [r4, #20]
 800b186:	6030      	str	r0, [r6, #0]
 800b188:	062e      	lsls	r6, r5, #24
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	d501      	bpl.n	800b192 <_printf_i+0x1c2>
 800b18e:	6019      	str	r1, [r3, #0]
 800b190:	e002      	b.n	800b198 <_printf_i+0x1c8>
 800b192:	0668      	lsls	r0, r5, #25
 800b194:	d5fb      	bpl.n	800b18e <_printf_i+0x1be>
 800b196:	8019      	strh	r1, [r3, #0]
 800b198:	2300      	movs	r3, #0
 800b19a:	4616      	mov	r6, r2
 800b19c:	6123      	str	r3, [r4, #16]
 800b19e:	e7bc      	b.n	800b11a <_printf_i+0x14a>
 800b1a0:	6833      	ldr	r3, [r6, #0]
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	1d1a      	adds	r2, r3, #4
 800b1a6:	6032      	str	r2, [r6, #0]
 800b1a8:	681e      	ldr	r6, [r3, #0]
 800b1aa:	6862      	ldr	r2, [r4, #4]
 800b1ac:	4630      	mov	r0, r6
 800b1ae:	f000 f9e4 	bl	800b57a <memchr>
 800b1b2:	b108      	cbz	r0, 800b1b8 <_printf_i+0x1e8>
 800b1b4:	1b80      	subs	r0, r0, r6
 800b1b6:	6060      	str	r0, [r4, #4]
 800b1b8:	6863      	ldr	r3, [r4, #4]
 800b1ba:	6123      	str	r3, [r4, #16]
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b1c2:	e7aa      	b.n	800b11a <_printf_i+0x14a>
 800b1c4:	4632      	mov	r2, r6
 800b1c6:	4649      	mov	r1, r9
 800b1c8:	4640      	mov	r0, r8
 800b1ca:	6923      	ldr	r3, [r4, #16]
 800b1cc:	47d0      	blx	sl
 800b1ce:	3001      	adds	r0, #1
 800b1d0:	d0ad      	beq.n	800b12e <_printf_i+0x15e>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	079b      	lsls	r3, r3, #30
 800b1d6:	d413      	bmi.n	800b200 <_printf_i+0x230>
 800b1d8:	68e0      	ldr	r0, [r4, #12]
 800b1da:	9b03      	ldr	r3, [sp, #12]
 800b1dc:	4298      	cmp	r0, r3
 800b1de:	bfb8      	it	lt
 800b1e0:	4618      	movlt	r0, r3
 800b1e2:	e7a6      	b.n	800b132 <_printf_i+0x162>
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	4632      	mov	r2, r6
 800b1e8:	4649      	mov	r1, r9
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	47d0      	blx	sl
 800b1ee:	3001      	adds	r0, #1
 800b1f0:	d09d      	beq.n	800b12e <_printf_i+0x15e>
 800b1f2:	3501      	adds	r5, #1
 800b1f4:	68e3      	ldr	r3, [r4, #12]
 800b1f6:	9903      	ldr	r1, [sp, #12]
 800b1f8:	1a5b      	subs	r3, r3, r1
 800b1fa:	42ab      	cmp	r3, r5
 800b1fc:	dcf2      	bgt.n	800b1e4 <_printf_i+0x214>
 800b1fe:	e7eb      	b.n	800b1d8 <_printf_i+0x208>
 800b200:	2500      	movs	r5, #0
 800b202:	f104 0619 	add.w	r6, r4, #25
 800b206:	e7f5      	b.n	800b1f4 <_printf_i+0x224>
 800b208:	0800e3a4 	.word	0x0800e3a4
 800b20c:	0800e3b5 	.word	0x0800e3b5

0800b210 <std>:
 800b210:	2300      	movs	r3, #0
 800b212:	b510      	push	{r4, lr}
 800b214:	4604      	mov	r4, r0
 800b216:	e9c0 3300 	strd	r3, r3, [r0]
 800b21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b21e:	6083      	str	r3, [r0, #8]
 800b220:	8181      	strh	r1, [r0, #12]
 800b222:	6643      	str	r3, [r0, #100]	@ 0x64
 800b224:	81c2      	strh	r2, [r0, #14]
 800b226:	6183      	str	r3, [r0, #24]
 800b228:	4619      	mov	r1, r3
 800b22a:	2208      	movs	r2, #8
 800b22c:	305c      	adds	r0, #92	@ 0x5c
 800b22e:	f000 f924 	bl	800b47a <memset>
 800b232:	4b0d      	ldr	r3, [pc, #52]	@ (800b268 <std+0x58>)
 800b234:	6224      	str	r4, [r4, #32]
 800b236:	6263      	str	r3, [r4, #36]	@ 0x24
 800b238:	4b0c      	ldr	r3, [pc, #48]	@ (800b26c <std+0x5c>)
 800b23a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b23c:	4b0c      	ldr	r3, [pc, #48]	@ (800b270 <std+0x60>)
 800b23e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b240:	4b0c      	ldr	r3, [pc, #48]	@ (800b274 <std+0x64>)
 800b242:	6323      	str	r3, [r4, #48]	@ 0x30
 800b244:	4b0c      	ldr	r3, [pc, #48]	@ (800b278 <std+0x68>)
 800b246:	429c      	cmp	r4, r3
 800b248:	d006      	beq.n	800b258 <std+0x48>
 800b24a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b24e:	4294      	cmp	r4, r2
 800b250:	d002      	beq.n	800b258 <std+0x48>
 800b252:	33d0      	adds	r3, #208	@ 0xd0
 800b254:	429c      	cmp	r4, r3
 800b256:	d105      	bne.n	800b264 <std+0x54>
 800b258:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b260:	f000 b988 	b.w	800b574 <__retarget_lock_init_recursive>
 800b264:	bd10      	pop	{r4, pc}
 800b266:	bf00      	nop
 800b268:	0800b3d5 	.word	0x0800b3d5
 800b26c:	0800b3f7 	.word	0x0800b3f7
 800b270:	0800b42f 	.word	0x0800b42f
 800b274:	0800b453 	.word	0x0800b453
 800b278:	20004880 	.word	0x20004880

0800b27c <stdio_exit_handler>:
 800b27c:	4a02      	ldr	r2, [pc, #8]	@ (800b288 <stdio_exit_handler+0xc>)
 800b27e:	4903      	ldr	r1, [pc, #12]	@ (800b28c <stdio_exit_handler+0x10>)
 800b280:	4803      	ldr	r0, [pc, #12]	@ (800b290 <stdio_exit_handler+0x14>)
 800b282:	f000 b869 	b.w	800b358 <_fwalk_sglue>
 800b286:	bf00      	nop
 800b288:	20000030 	.word	0x20000030
 800b28c:	0800cf05 	.word	0x0800cf05
 800b290:	20000040 	.word	0x20000040

0800b294 <cleanup_stdio>:
 800b294:	6841      	ldr	r1, [r0, #4]
 800b296:	4b0c      	ldr	r3, [pc, #48]	@ (800b2c8 <cleanup_stdio+0x34>)
 800b298:	b510      	push	{r4, lr}
 800b29a:	4299      	cmp	r1, r3
 800b29c:	4604      	mov	r4, r0
 800b29e:	d001      	beq.n	800b2a4 <cleanup_stdio+0x10>
 800b2a0:	f001 fe30 	bl	800cf04 <_fflush_r>
 800b2a4:	68a1      	ldr	r1, [r4, #8]
 800b2a6:	4b09      	ldr	r3, [pc, #36]	@ (800b2cc <cleanup_stdio+0x38>)
 800b2a8:	4299      	cmp	r1, r3
 800b2aa:	d002      	beq.n	800b2b2 <cleanup_stdio+0x1e>
 800b2ac:	4620      	mov	r0, r4
 800b2ae:	f001 fe29 	bl	800cf04 <_fflush_r>
 800b2b2:	68e1      	ldr	r1, [r4, #12]
 800b2b4:	4b06      	ldr	r3, [pc, #24]	@ (800b2d0 <cleanup_stdio+0x3c>)
 800b2b6:	4299      	cmp	r1, r3
 800b2b8:	d004      	beq.n	800b2c4 <cleanup_stdio+0x30>
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2c0:	f001 be20 	b.w	800cf04 <_fflush_r>
 800b2c4:	bd10      	pop	{r4, pc}
 800b2c6:	bf00      	nop
 800b2c8:	20004880 	.word	0x20004880
 800b2cc:	200048e8 	.word	0x200048e8
 800b2d0:	20004950 	.word	0x20004950

0800b2d4 <global_stdio_init.part.0>:
 800b2d4:	b510      	push	{r4, lr}
 800b2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800b304 <global_stdio_init.part.0+0x30>)
 800b2d8:	4c0b      	ldr	r4, [pc, #44]	@ (800b308 <global_stdio_init.part.0+0x34>)
 800b2da:	4a0c      	ldr	r2, [pc, #48]	@ (800b30c <global_stdio_init.part.0+0x38>)
 800b2dc:	4620      	mov	r0, r4
 800b2de:	601a      	str	r2, [r3, #0]
 800b2e0:	2104      	movs	r1, #4
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	f7ff ff94 	bl	800b210 <std>
 800b2e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b2ec:	2201      	movs	r2, #1
 800b2ee:	2109      	movs	r1, #9
 800b2f0:	f7ff ff8e 	bl	800b210 <std>
 800b2f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b2f8:	2202      	movs	r2, #2
 800b2fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b2fe:	2112      	movs	r1, #18
 800b300:	f7ff bf86 	b.w	800b210 <std>
 800b304:	200049b8 	.word	0x200049b8
 800b308:	20004880 	.word	0x20004880
 800b30c:	0800b27d 	.word	0x0800b27d

0800b310 <__sfp_lock_acquire>:
 800b310:	4801      	ldr	r0, [pc, #4]	@ (800b318 <__sfp_lock_acquire+0x8>)
 800b312:	f000 b930 	b.w	800b576 <__retarget_lock_acquire_recursive>
 800b316:	bf00      	nop
 800b318:	200049c1 	.word	0x200049c1

0800b31c <__sfp_lock_release>:
 800b31c:	4801      	ldr	r0, [pc, #4]	@ (800b324 <__sfp_lock_release+0x8>)
 800b31e:	f000 b92b 	b.w	800b578 <__retarget_lock_release_recursive>
 800b322:	bf00      	nop
 800b324:	200049c1 	.word	0x200049c1

0800b328 <__sinit>:
 800b328:	b510      	push	{r4, lr}
 800b32a:	4604      	mov	r4, r0
 800b32c:	f7ff fff0 	bl	800b310 <__sfp_lock_acquire>
 800b330:	6a23      	ldr	r3, [r4, #32]
 800b332:	b11b      	cbz	r3, 800b33c <__sinit+0x14>
 800b334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b338:	f7ff bff0 	b.w	800b31c <__sfp_lock_release>
 800b33c:	4b04      	ldr	r3, [pc, #16]	@ (800b350 <__sinit+0x28>)
 800b33e:	6223      	str	r3, [r4, #32]
 800b340:	4b04      	ldr	r3, [pc, #16]	@ (800b354 <__sinit+0x2c>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d1f5      	bne.n	800b334 <__sinit+0xc>
 800b348:	f7ff ffc4 	bl	800b2d4 <global_stdio_init.part.0>
 800b34c:	e7f2      	b.n	800b334 <__sinit+0xc>
 800b34e:	bf00      	nop
 800b350:	0800b295 	.word	0x0800b295
 800b354:	200049b8 	.word	0x200049b8

0800b358 <_fwalk_sglue>:
 800b358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b35c:	4607      	mov	r7, r0
 800b35e:	4688      	mov	r8, r1
 800b360:	4614      	mov	r4, r2
 800b362:	2600      	movs	r6, #0
 800b364:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b368:	f1b9 0901 	subs.w	r9, r9, #1
 800b36c:	d505      	bpl.n	800b37a <_fwalk_sglue+0x22>
 800b36e:	6824      	ldr	r4, [r4, #0]
 800b370:	2c00      	cmp	r4, #0
 800b372:	d1f7      	bne.n	800b364 <_fwalk_sglue+0xc>
 800b374:	4630      	mov	r0, r6
 800b376:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37a:	89ab      	ldrh	r3, [r5, #12]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d907      	bls.n	800b390 <_fwalk_sglue+0x38>
 800b380:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b384:	3301      	adds	r3, #1
 800b386:	d003      	beq.n	800b390 <_fwalk_sglue+0x38>
 800b388:	4629      	mov	r1, r5
 800b38a:	4638      	mov	r0, r7
 800b38c:	47c0      	blx	r8
 800b38e:	4306      	orrs	r6, r0
 800b390:	3568      	adds	r5, #104	@ 0x68
 800b392:	e7e9      	b.n	800b368 <_fwalk_sglue+0x10>

0800b394 <siprintf>:
 800b394:	b40e      	push	{r1, r2, r3}
 800b396:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b39a:	b500      	push	{lr}
 800b39c:	b09c      	sub	sp, #112	@ 0x70
 800b39e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b3a0:	9002      	str	r0, [sp, #8]
 800b3a2:	9006      	str	r0, [sp, #24]
 800b3a4:	9107      	str	r1, [sp, #28]
 800b3a6:	9104      	str	r1, [sp, #16]
 800b3a8:	4808      	ldr	r0, [pc, #32]	@ (800b3cc <siprintf+0x38>)
 800b3aa:	4909      	ldr	r1, [pc, #36]	@ (800b3d0 <siprintf+0x3c>)
 800b3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3b0:	9105      	str	r1, [sp, #20]
 800b3b2:	6800      	ldr	r0, [r0, #0]
 800b3b4:	a902      	add	r1, sp, #8
 800b3b6:	9301      	str	r3, [sp, #4]
 800b3b8:	f001 fc28 	bl	800cc0c <_svfiprintf_r>
 800b3bc:	2200      	movs	r2, #0
 800b3be:	9b02      	ldr	r3, [sp, #8]
 800b3c0:	701a      	strb	r2, [r3, #0]
 800b3c2:	b01c      	add	sp, #112	@ 0x70
 800b3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3c8:	b003      	add	sp, #12
 800b3ca:	4770      	bx	lr
 800b3cc:	2000003c 	.word	0x2000003c
 800b3d0:	ffff0208 	.word	0xffff0208

0800b3d4 <__sread>:
 800b3d4:	b510      	push	{r4, lr}
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3dc:	f000 f87c 	bl	800b4d8 <_read_r>
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	bfab      	itete	ge
 800b3e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b3e6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3e8:	181b      	addge	r3, r3, r0
 800b3ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b3ee:	bfac      	ite	ge
 800b3f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b3f2:	81a3      	strhlt	r3, [r4, #12]
 800b3f4:	bd10      	pop	{r4, pc}

0800b3f6 <__swrite>:
 800b3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3fa:	461f      	mov	r7, r3
 800b3fc:	898b      	ldrh	r3, [r1, #12]
 800b3fe:	4605      	mov	r5, r0
 800b400:	05db      	lsls	r3, r3, #23
 800b402:	460c      	mov	r4, r1
 800b404:	4616      	mov	r6, r2
 800b406:	d505      	bpl.n	800b414 <__swrite+0x1e>
 800b408:	2302      	movs	r3, #2
 800b40a:	2200      	movs	r2, #0
 800b40c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b410:	f000 f850 	bl	800b4b4 <_lseek_r>
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	4632      	mov	r2, r6
 800b418:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b41c:	81a3      	strh	r3, [r4, #12]
 800b41e:	4628      	mov	r0, r5
 800b420:	463b      	mov	r3, r7
 800b422:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b42a:	f000 b867 	b.w	800b4fc <_write_r>

0800b42e <__sseek>:
 800b42e:	b510      	push	{r4, lr}
 800b430:	460c      	mov	r4, r1
 800b432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b436:	f000 f83d 	bl	800b4b4 <_lseek_r>
 800b43a:	1c43      	adds	r3, r0, #1
 800b43c:	89a3      	ldrh	r3, [r4, #12]
 800b43e:	bf15      	itete	ne
 800b440:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b442:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b446:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b44a:	81a3      	strheq	r3, [r4, #12]
 800b44c:	bf18      	it	ne
 800b44e:	81a3      	strhne	r3, [r4, #12]
 800b450:	bd10      	pop	{r4, pc}

0800b452 <__sclose>:
 800b452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b456:	f000 b81d 	b.w	800b494 <_close_r>

0800b45a <memcmp>:
 800b45a:	b510      	push	{r4, lr}
 800b45c:	3901      	subs	r1, #1
 800b45e:	4402      	add	r2, r0
 800b460:	4290      	cmp	r0, r2
 800b462:	d101      	bne.n	800b468 <memcmp+0xe>
 800b464:	2000      	movs	r0, #0
 800b466:	e005      	b.n	800b474 <memcmp+0x1a>
 800b468:	7803      	ldrb	r3, [r0, #0]
 800b46a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b46e:	42a3      	cmp	r3, r4
 800b470:	d001      	beq.n	800b476 <memcmp+0x1c>
 800b472:	1b18      	subs	r0, r3, r4
 800b474:	bd10      	pop	{r4, pc}
 800b476:	3001      	adds	r0, #1
 800b478:	e7f2      	b.n	800b460 <memcmp+0x6>

0800b47a <memset>:
 800b47a:	4603      	mov	r3, r0
 800b47c:	4402      	add	r2, r0
 800b47e:	4293      	cmp	r3, r2
 800b480:	d100      	bne.n	800b484 <memset+0xa>
 800b482:	4770      	bx	lr
 800b484:	f803 1b01 	strb.w	r1, [r3], #1
 800b488:	e7f9      	b.n	800b47e <memset+0x4>
	...

0800b48c <_localeconv_r>:
 800b48c:	4800      	ldr	r0, [pc, #0]	@ (800b490 <_localeconv_r+0x4>)
 800b48e:	4770      	bx	lr
 800b490:	2000017c 	.word	0x2000017c

0800b494 <_close_r>:
 800b494:	b538      	push	{r3, r4, r5, lr}
 800b496:	2300      	movs	r3, #0
 800b498:	4d05      	ldr	r5, [pc, #20]	@ (800b4b0 <_close_r+0x1c>)
 800b49a:	4604      	mov	r4, r0
 800b49c:	4608      	mov	r0, r1
 800b49e:	602b      	str	r3, [r5, #0]
 800b4a0:	f7fb ffa5 	bl	80073ee <_close>
 800b4a4:	1c43      	adds	r3, r0, #1
 800b4a6:	d102      	bne.n	800b4ae <_close_r+0x1a>
 800b4a8:	682b      	ldr	r3, [r5, #0]
 800b4aa:	b103      	cbz	r3, 800b4ae <_close_r+0x1a>
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	bd38      	pop	{r3, r4, r5, pc}
 800b4b0:	200049bc 	.word	0x200049bc

0800b4b4 <_lseek_r>:
 800b4b4:	b538      	push	{r3, r4, r5, lr}
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	2200      	movs	r2, #0
 800b4be:	4d05      	ldr	r5, [pc, #20]	@ (800b4d4 <_lseek_r+0x20>)
 800b4c0:	602a      	str	r2, [r5, #0]
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	f7fb ffb7 	bl	8007436 <_lseek>
 800b4c8:	1c43      	adds	r3, r0, #1
 800b4ca:	d102      	bne.n	800b4d2 <_lseek_r+0x1e>
 800b4cc:	682b      	ldr	r3, [r5, #0]
 800b4ce:	b103      	cbz	r3, 800b4d2 <_lseek_r+0x1e>
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	bd38      	pop	{r3, r4, r5, pc}
 800b4d4:	200049bc 	.word	0x200049bc

0800b4d8 <_read_r>:
 800b4d8:	b538      	push	{r3, r4, r5, lr}
 800b4da:	4604      	mov	r4, r0
 800b4dc:	4608      	mov	r0, r1
 800b4de:	4611      	mov	r1, r2
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	4d05      	ldr	r5, [pc, #20]	@ (800b4f8 <_read_r+0x20>)
 800b4e4:	602a      	str	r2, [r5, #0]
 800b4e6:	461a      	mov	r2, r3
 800b4e8:	f7fb ff48 	bl	800737c <_read>
 800b4ec:	1c43      	adds	r3, r0, #1
 800b4ee:	d102      	bne.n	800b4f6 <_read_r+0x1e>
 800b4f0:	682b      	ldr	r3, [r5, #0]
 800b4f2:	b103      	cbz	r3, 800b4f6 <_read_r+0x1e>
 800b4f4:	6023      	str	r3, [r4, #0]
 800b4f6:	bd38      	pop	{r3, r4, r5, pc}
 800b4f8:	200049bc 	.word	0x200049bc

0800b4fc <_write_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4604      	mov	r4, r0
 800b500:	4608      	mov	r0, r1
 800b502:	4611      	mov	r1, r2
 800b504:	2200      	movs	r2, #0
 800b506:	4d05      	ldr	r5, [pc, #20]	@ (800b51c <_write_r+0x20>)
 800b508:	602a      	str	r2, [r5, #0]
 800b50a:	461a      	mov	r2, r3
 800b50c:	f7fb ff53 	bl	80073b6 <_write>
 800b510:	1c43      	adds	r3, r0, #1
 800b512:	d102      	bne.n	800b51a <_write_r+0x1e>
 800b514:	682b      	ldr	r3, [r5, #0]
 800b516:	b103      	cbz	r3, 800b51a <_write_r+0x1e>
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	bd38      	pop	{r3, r4, r5, pc}
 800b51c:	200049bc 	.word	0x200049bc

0800b520 <__errno>:
 800b520:	4b01      	ldr	r3, [pc, #4]	@ (800b528 <__errno+0x8>)
 800b522:	6818      	ldr	r0, [r3, #0]
 800b524:	4770      	bx	lr
 800b526:	bf00      	nop
 800b528:	2000003c 	.word	0x2000003c

0800b52c <__libc_init_array>:
 800b52c:	b570      	push	{r4, r5, r6, lr}
 800b52e:	2600      	movs	r6, #0
 800b530:	4d0c      	ldr	r5, [pc, #48]	@ (800b564 <__libc_init_array+0x38>)
 800b532:	4c0d      	ldr	r4, [pc, #52]	@ (800b568 <__libc_init_array+0x3c>)
 800b534:	1b64      	subs	r4, r4, r5
 800b536:	10a4      	asrs	r4, r4, #2
 800b538:	42a6      	cmp	r6, r4
 800b53a:	d109      	bne.n	800b550 <__libc_init_array+0x24>
 800b53c:	f002 fa94 	bl	800da68 <_init>
 800b540:	2600      	movs	r6, #0
 800b542:	4d0a      	ldr	r5, [pc, #40]	@ (800b56c <__libc_init_array+0x40>)
 800b544:	4c0a      	ldr	r4, [pc, #40]	@ (800b570 <__libc_init_array+0x44>)
 800b546:	1b64      	subs	r4, r4, r5
 800b548:	10a4      	asrs	r4, r4, #2
 800b54a:	42a6      	cmp	r6, r4
 800b54c:	d105      	bne.n	800b55a <__libc_init_array+0x2e>
 800b54e:	bd70      	pop	{r4, r5, r6, pc}
 800b550:	f855 3b04 	ldr.w	r3, [r5], #4
 800b554:	4798      	blx	r3
 800b556:	3601      	adds	r6, #1
 800b558:	e7ee      	b.n	800b538 <__libc_init_array+0xc>
 800b55a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b55e:	4798      	blx	r3
 800b560:	3601      	adds	r6, #1
 800b562:	e7f2      	b.n	800b54a <__libc_init_array+0x1e>
 800b564:	0800e740 	.word	0x0800e740
 800b568:	0800e740 	.word	0x0800e740
 800b56c:	0800e740 	.word	0x0800e740
 800b570:	0800e744 	.word	0x0800e744

0800b574 <__retarget_lock_init_recursive>:
 800b574:	4770      	bx	lr

0800b576 <__retarget_lock_acquire_recursive>:
 800b576:	4770      	bx	lr

0800b578 <__retarget_lock_release_recursive>:
 800b578:	4770      	bx	lr

0800b57a <memchr>:
 800b57a:	4603      	mov	r3, r0
 800b57c:	b510      	push	{r4, lr}
 800b57e:	b2c9      	uxtb	r1, r1
 800b580:	4402      	add	r2, r0
 800b582:	4293      	cmp	r3, r2
 800b584:	4618      	mov	r0, r3
 800b586:	d101      	bne.n	800b58c <memchr+0x12>
 800b588:	2000      	movs	r0, #0
 800b58a:	e003      	b.n	800b594 <memchr+0x1a>
 800b58c:	7804      	ldrb	r4, [r0, #0]
 800b58e:	3301      	adds	r3, #1
 800b590:	428c      	cmp	r4, r1
 800b592:	d1f6      	bne.n	800b582 <memchr+0x8>
 800b594:	bd10      	pop	{r4, pc}

0800b596 <memcpy>:
 800b596:	440a      	add	r2, r1
 800b598:	4291      	cmp	r1, r2
 800b59a:	f100 33ff 	add.w	r3, r0, #4294967295
 800b59e:	d100      	bne.n	800b5a2 <memcpy+0xc>
 800b5a0:	4770      	bx	lr
 800b5a2:	b510      	push	{r4, lr}
 800b5a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5a8:	4291      	cmp	r1, r2
 800b5aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ae:	d1f9      	bne.n	800b5a4 <memcpy+0xe>
 800b5b0:	bd10      	pop	{r4, pc}

0800b5b2 <quorem>:
 800b5b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b6:	6903      	ldr	r3, [r0, #16]
 800b5b8:	690c      	ldr	r4, [r1, #16]
 800b5ba:	4607      	mov	r7, r0
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	db7e      	blt.n	800b6be <quorem+0x10c>
 800b5c0:	3c01      	subs	r4, #1
 800b5c2:	00a3      	lsls	r3, r4, #2
 800b5c4:	f100 0514 	add.w	r5, r0, #20
 800b5c8:	f101 0814 	add.w	r8, r1, #20
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5e8:	d32e      	bcc.n	800b648 <quorem+0x96>
 800b5ea:	f04f 0a00 	mov.w	sl, #0
 800b5ee:	46c4      	mov	ip, r8
 800b5f0:	46ae      	mov	lr, r5
 800b5f2:	46d3      	mov	fp, sl
 800b5f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b5f8:	b298      	uxth	r0, r3
 800b5fa:	fb06 a000 	mla	r0, r6, r0, sl
 800b5fe:	0c1b      	lsrs	r3, r3, #16
 800b600:	0c02      	lsrs	r2, r0, #16
 800b602:	fb06 2303 	mla	r3, r6, r3, r2
 800b606:	f8de 2000 	ldr.w	r2, [lr]
 800b60a:	b280      	uxth	r0, r0
 800b60c:	b292      	uxth	r2, r2
 800b60e:	1a12      	subs	r2, r2, r0
 800b610:	445a      	add	r2, fp
 800b612:	f8de 0000 	ldr.w	r0, [lr]
 800b616:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b620:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b624:	b292      	uxth	r2, r2
 800b626:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b62a:	45e1      	cmp	r9, ip
 800b62c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b630:	f84e 2b04 	str.w	r2, [lr], #4
 800b634:	d2de      	bcs.n	800b5f4 <quorem+0x42>
 800b636:	9b00      	ldr	r3, [sp, #0]
 800b638:	58eb      	ldr	r3, [r5, r3]
 800b63a:	b92b      	cbnz	r3, 800b648 <quorem+0x96>
 800b63c:	9b01      	ldr	r3, [sp, #4]
 800b63e:	3b04      	subs	r3, #4
 800b640:	429d      	cmp	r5, r3
 800b642:	461a      	mov	r2, r3
 800b644:	d32f      	bcc.n	800b6a6 <quorem+0xf4>
 800b646:	613c      	str	r4, [r7, #16]
 800b648:	4638      	mov	r0, r7
 800b64a:	f001 f97b 	bl	800c944 <__mcmp>
 800b64e:	2800      	cmp	r0, #0
 800b650:	db25      	blt.n	800b69e <quorem+0xec>
 800b652:	4629      	mov	r1, r5
 800b654:	2000      	movs	r0, #0
 800b656:	f858 2b04 	ldr.w	r2, [r8], #4
 800b65a:	f8d1 c000 	ldr.w	ip, [r1]
 800b65e:	fa1f fe82 	uxth.w	lr, r2
 800b662:	fa1f f38c 	uxth.w	r3, ip
 800b666:	eba3 030e 	sub.w	r3, r3, lr
 800b66a:	4403      	add	r3, r0
 800b66c:	0c12      	lsrs	r2, r2, #16
 800b66e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b672:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b676:	b29b      	uxth	r3, r3
 800b678:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b67c:	45c1      	cmp	r9, r8
 800b67e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b682:	f841 3b04 	str.w	r3, [r1], #4
 800b686:	d2e6      	bcs.n	800b656 <quorem+0xa4>
 800b688:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b68c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b690:	b922      	cbnz	r2, 800b69c <quorem+0xea>
 800b692:	3b04      	subs	r3, #4
 800b694:	429d      	cmp	r5, r3
 800b696:	461a      	mov	r2, r3
 800b698:	d30b      	bcc.n	800b6b2 <quorem+0x100>
 800b69a:	613c      	str	r4, [r7, #16]
 800b69c:	3601      	adds	r6, #1
 800b69e:	4630      	mov	r0, r6
 800b6a0:	b003      	add	sp, #12
 800b6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6a6:	6812      	ldr	r2, [r2, #0]
 800b6a8:	3b04      	subs	r3, #4
 800b6aa:	2a00      	cmp	r2, #0
 800b6ac:	d1cb      	bne.n	800b646 <quorem+0x94>
 800b6ae:	3c01      	subs	r4, #1
 800b6b0:	e7c6      	b.n	800b640 <quorem+0x8e>
 800b6b2:	6812      	ldr	r2, [r2, #0]
 800b6b4:	3b04      	subs	r3, #4
 800b6b6:	2a00      	cmp	r2, #0
 800b6b8:	d1ef      	bne.n	800b69a <quorem+0xe8>
 800b6ba:	3c01      	subs	r4, #1
 800b6bc:	e7ea      	b.n	800b694 <quorem+0xe2>
 800b6be:	2000      	movs	r0, #0
 800b6c0:	e7ee      	b.n	800b6a0 <quorem+0xee>
 800b6c2:	0000      	movs	r0, r0
 800b6c4:	0000      	movs	r0, r0
	...

0800b6c8 <_dtoa_r>:
 800b6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6cc:	4614      	mov	r4, r2
 800b6ce:	461d      	mov	r5, r3
 800b6d0:	69c7      	ldr	r7, [r0, #28]
 800b6d2:	b097      	sub	sp, #92	@ 0x5c
 800b6d4:	4683      	mov	fp, r0
 800b6d6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b6da:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800b6dc:	b97f      	cbnz	r7, 800b6fe <_dtoa_r+0x36>
 800b6de:	2010      	movs	r0, #16
 800b6e0:	f000 fe02 	bl	800c2e8 <malloc>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	f8cb 001c 	str.w	r0, [fp, #28]
 800b6ea:	b920      	cbnz	r0, 800b6f6 <_dtoa_r+0x2e>
 800b6ec:	21ef      	movs	r1, #239	@ 0xef
 800b6ee:	4ba8      	ldr	r3, [pc, #672]	@ (800b990 <_dtoa_r+0x2c8>)
 800b6f0:	48a8      	ldr	r0, [pc, #672]	@ (800b994 <_dtoa_r+0x2cc>)
 800b6f2:	f001 fc59 	bl	800cfa8 <__assert_func>
 800b6f6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b6fa:	6007      	str	r7, [r0, #0]
 800b6fc:	60c7      	str	r7, [r0, #12]
 800b6fe:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b702:	6819      	ldr	r1, [r3, #0]
 800b704:	b159      	cbz	r1, 800b71e <_dtoa_r+0x56>
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	2301      	movs	r3, #1
 800b70a:	4093      	lsls	r3, r2
 800b70c:	604a      	str	r2, [r1, #4]
 800b70e:	608b      	str	r3, [r1, #8]
 800b710:	4658      	mov	r0, fp
 800b712:	f000 fedf 	bl	800c4d4 <_Bfree>
 800b716:	2200      	movs	r2, #0
 800b718:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b71c:	601a      	str	r2, [r3, #0]
 800b71e:	1e2b      	subs	r3, r5, #0
 800b720:	bfaf      	iteee	ge
 800b722:	2300      	movge	r3, #0
 800b724:	2201      	movlt	r2, #1
 800b726:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b72a:	9303      	strlt	r3, [sp, #12]
 800b72c:	bfa8      	it	ge
 800b72e:	6033      	strge	r3, [r6, #0]
 800b730:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b734:	4b98      	ldr	r3, [pc, #608]	@ (800b998 <_dtoa_r+0x2d0>)
 800b736:	bfb8      	it	lt
 800b738:	6032      	strlt	r2, [r6, #0]
 800b73a:	ea33 0308 	bics.w	r3, r3, r8
 800b73e:	d112      	bne.n	800b766 <_dtoa_r+0x9e>
 800b740:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b744:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b746:	6013      	str	r3, [r2, #0]
 800b748:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b74c:	4323      	orrs	r3, r4
 800b74e:	f000 8550 	beq.w	800c1f2 <_dtoa_r+0xb2a>
 800b752:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b754:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800b99c <_dtoa_r+0x2d4>
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f000 8552 	beq.w	800c202 <_dtoa_r+0xb3a>
 800b75e:	f10a 0303 	add.w	r3, sl, #3
 800b762:	f000 bd4c 	b.w	800c1fe <_dtoa_r+0xb36>
 800b766:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b76a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b76e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b772:	2200      	movs	r2, #0
 800b774:	2300      	movs	r3, #0
 800b776:	f7f5 f95d 	bl	8000a34 <__aeabi_dcmpeq>
 800b77a:	4607      	mov	r7, r0
 800b77c:	b158      	cbz	r0, 800b796 <_dtoa_r+0xce>
 800b77e:	2301      	movs	r3, #1
 800b780:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800b782:	6013      	str	r3, [r2, #0]
 800b784:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b786:	b113      	cbz	r3, 800b78e <_dtoa_r+0xc6>
 800b788:	4b85      	ldr	r3, [pc, #532]	@ (800b9a0 <_dtoa_r+0x2d8>)
 800b78a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b78c:	6013      	str	r3, [r2, #0]
 800b78e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800b9a4 <_dtoa_r+0x2dc>
 800b792:	f000 bd36 	b.w	800c202 <_dtoa_r+0xb3a>
 800b796:	ab14      	add	r3, sp, #80	@ 0x50
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	ab15      	add	r3, sp, #84	@ 0x54
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	4658      	mov	r0, fp
 800b7a0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b7a4:	f001 f97e 	bl	800caa4 <__d2b>
 800b7a8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800b7ac:	4681      	mov	r9, r0
 800b7ae:	2e00      	cmp	r6, #0
 800b7b0:	d077      	beq.n	800b8a2 <_dtoa_r+0x1da>
 800b7b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b7b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b7b8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b7bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7c0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b7c4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b7c8:	9712      	str	r7, [sp, #72]	@ 0x48
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	4b76      	ldr	r3, [pc, #472]	@ (800b9a8 <_dtoa_r+0x2e0>)
 800b7d0:	f7f4 fd10 	bl	80001f4 <__aeabi_dsub>
 800b7d4:	a368      	add	r3, pc, #416	@ (adr r3, 800b978 <_dtoa_r+0x2b0>)
 800b7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7da:	f7f4 fec3 	bl	8000564 <__aeabi_dmul>
 800b7de:	a368      	add	r3, pc, #416	@ (adr r3, 800b980 <_dtoa_r+0x2b8>)
 800b7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e4:	f7f4 fd08 	bl	80001f8 <__adddf3>
 800b7e8:	4604      	mov	r4, r0
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	460d      	mov	r5, r1
 800b7ee:	f7f4 fe4f 	bl	8000490 <__aeabi_i2d>
 800b7f2:	a365      	add	r3, pc, #404	@ (adr r3, 800b988 <_dtoa_r+0x2c0>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 feb4 	bl	8000564 <__aeabi_dmul>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4620      	mov	r0, r4
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 fcf8 	bl	80001f8 <__adddf3>
 800b808:	4604      	mov	r4, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	f7f5 f95a 	bl	8000ac4 <__aeabi_d2iz>
 800b810:	2200      	movs	r2, #0
 800b812:	4607      	mov	r7, r0
 800b814:	2300      	movs	r3, #0
 800b816:	4620      	mov	r0, r4
 800b818:	4629      	mov	r1, r5
 800b81a:	f7f5 f915 	bl	8000a48 <__aeabi_dcmplt>
 800b81e:	b140      	cbz	r0, 800b832 <_dtoa_r+0x16a>
 800b820:	4638      	mov	r0, r7
 800b822:	f7f4 fe35 	bl	8000490 <__aeabi_i2d>
 800b826:	4622      	mov	r2, r4
 800b828:	462b      	mov	r3, r5
 800b82a:	f7f5 f903 	bl	8000a34 <__aeabi_dcmpeq>
 800b82e:	b900      	cbnz	r0, 800b832 <_dtoa_r+0x16a>
 800b830:	3f01      	subs	r7, #1
 800b832:	2f16      	cmp	r7, #22
 800b834:	d853      	bhi.n	800b8de <_dtoa_r+0x216>
 800b836:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b83a:	4b5c      	ldr	r3, [pc, #368]	@ (800b9ac <_dtoa_r+0x2e4>)
 800b83c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b844:	f7f5 f900 	bl	8000a48 <__aeabi_dcmplt>
 800b848:	2800      	cmp	r0, #0
 800b84a:	d04a      	beq.n	800b8e2 <_dtoa_r+0x21a>
 800b84c:	2300      	movs	r3, #0
 800b84e:	3f01      	subs	r7, #1
 800b850:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b852:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b854:	1b9b      	subs	r3, r3, r6
 800b856:	1e5a      	subs	r2, r3, #1
 800b858:	bf46      	itte	mi
 800b85a:	f1c3 0801 	rsbmi	r8, r3, #1
 800b85e:	2300      	movmi	r3, #0
 800b860:	f04f 0800 	movpl.w	r8, #0
 800b864:	9209      	str	r2, [sp, #36]	@ 0x24
 800b866:	bf48      	it	mi
 800b868:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800b86a:	2f00      	cmp	r7, #0
 800b86c:	db3b      	blt.n	800b8e6 <_dtoa_r+0x21e>
 800b86e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b870:	970e      	str	r7, [sp, #56]	@ 0x38
 800b872:	443b      	add	r3, r7
 800b874:	9309      	str	r3, [sp, #36]	@ 0x24
 800b876:	2300      	movs	r3, #0
 800b878:	930a      	str	r3, [sp, #40]	@ 0x28
 800b87a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b87c:	2b09      	cmp	r3, #9
 800b87e:	d866      	bhi.n	800b94e <_dtoa_r+0x286>
 800b880:	2b05      	cmp	r3, #5
 800b882:	bfc4      	itt	gt
 800b884:	3b04      	subgt	r3, #4
 800b886:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800b888:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b88a:	bfc8      	it	gt
 800b88c:	2400      	movgt	r4, #0
 800b88e:	f1a3 0302 	sub.w	r3, r3, #2
 800b892:	bfd8      	it	le
 800b894:	2401      	movle	r4, #1
 800b896:	2b03      	cmp	r3, #3
 800b898:	d864      	bhi.n	800b964 <_dtoa_r+0x29c>
 800b89a:	e8df f003 	tbb	[pc, r3]
 800b89e:	382b      	.short	0x382b
 800b8a0:	5636      	.short	0x5636
 800b8a2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800b8a6:	441e      	add	r6, r3
 800b8a8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b8ac:	2b20      	cmp	r3, #32
 800b8ae:	bfc1      	itttt	gt
 800b8b0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b8b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b8b8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b8bc:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b8c0:	bfd6      	itet	le
 800b8c2:	f1c3 0320 	rsble	r3, r3, #32
 800b8c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b8ca:	fa04 f003 	lslle.w	r0, r4, r3
 800b8ce:	f7f4 fdcf 	bl	8000470 <__aeabi_ui2d>
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b8d8:	3e01      	subs	r6, #1
 800b8da:	9212      	str	r2, [sp, #72]	@ 0x48
 800b8dc:	e775      	b.n	800b7ca <_dtoa_r+0x102>
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e7b6      	b.n	800b850 <_dtoa_r+0x188>
 800b8e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b8e4:	e7b5      	b.n	800b852 <_dtoa_r+0x18a>
 800b8e6:	427b      	negs	r3, r7
 800b8e8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	eba8 0807 	sub.w	r8, r8, r7
 800b8f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800b8f2:	e7c2      	b.n	800b87a <_dtoa_r+0x1b2>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b8f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	dc35      	bgt.n	800b96a <_dtoa_r+0x2a2>
 800b8fe:	2301      	movs	r3, #1
 800b900:	461a      	mov	r2, r3
 800b902:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b906:	9221      	str	r2, [sp, #132]	@ 0x84
 800b908:	e00b      	b.n	800b922 <_dtoa_r+0x25a>
 800b90a:	2301      	movs	r3, #1
 800b90c:	e7f3      	b.n	800b8f6 <_dtoa_r+0x22e>
 800b90e:	2300      	movs	r3, #0
 800b910:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b912:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b914:	18fb      	adds	r3, r7, r3
 800b916:	9308      	str	r3, [sp, #32]
 800b918:	3301      	adds	r3, #1
 800b91a:	2b01      	cmp	r3, #1
 800b91c:	9307      	str	r3, [sp, #28]
 800b91e:	bfb8      	it	lt
 800b920:	2301      	movlt	r3, #1
 800b922:	2100      	movs	r1, #0
 800b924:	2204      	movs	r2, #4
 800b926:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b92a:	f102 0514 	add.w	r5, r2, #20
 800b92e:	429d      	cmp	r5, r3
 800b930:	d91f      	bls.n	800b972 <_dtoa_r+0x2aa>
 800b932:	6041      	str	r1, [r0, #4]
 800b934:	4658      	mov	r0, fp
 800b936:	f000 fd8d 	bl	800c454 <_Balloc>
 800b93a:	4682      	mov	sl, r0
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d139      	bne.n	800b9b4 <_dtoa_r+0x2ec>
 800b940:	4602      	mov	r2, r0
 800b942:	f240 11af 	movw	r1, #431	@ 0x1af
 800b946:	4b1a      	ldr	r3, [pc, #104]	@ (800b9b0 <_dtoa_r+0x2e8>)
 800b948:	e6d2      	b.n	800b6f0 <_dtoa_r+0x28>
 800b94a:	2301      	movs	r3, #1
 800b94c:	e7e0      	b.n	800b910 <_dtoa_r+0x248>
 800b94e:	2401      	movs	r4, #1
 800b950:	2300      	movs	r3, #0
 800b952:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b954:	9320      	str	r3, [sp, #128]	@ 0x80
 800b956:	f04f 33ff 	mov.w	r3, #4294967295
 800b95a:	2200      	movs	r2, #0
 800b95c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b960:	2312      	movs	r3, #18
 800b962:	e7d0      	b.n	800b906 <_dtoa_r+0x23e>
 800b964:	2301      	movs	r3, #1
 800b966:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b968:	e7f5      	b.n	800b956 <_dtoa_r+0x28e>
 800b96a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b96c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800b970:	e7d7      	b.n	800b922 <_dtoa_r+0x25a>
 800b972:	3101      	adds	r1, #1
 800b974:	0052      	lsls	r2, r2, #1
 800b976:	e7d8      	b.n	800b92a <_dtoa_r+0x262>
 800b978:	636f4361 	.word	0x636f4361
 800b97c:	3fd287a7 	.word	0x3fd287a7
 800b980:	8b60c8b3 	.word	0x8b60c8b3
 800b984:	3fc68a28 	.word	0x3fc68a28
 800b988:	509f79fb 	.word	0x509f79fb
 800b98c:	3fd34413 	.word	0x3fd34413
 800b990:	0800e3d3 	.word	0x0800e3d3
 800b994:	0800e3ea 	.word	0x0800e3ea
 800b998:	7ff00000 	.word	0x7ff00000
 800b99c:	0800e3cf 	.word	0x0800e3cf
 800b9a0:	0800e3a3 	.word	0x0800e3a3
 800b9a4:	0800e3a2 	.word	0x0800e3a2
 800b9a8:	3ff80000 	.word	0x3ff80000
 800b9ac:	0800e4e0 	.word	0x0800e4e0
 800b9b0:	0800e442 	.word	0x0800e442
 800b9b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b9b8:	6018      	str	r0, [r3, #0]
 800b9ba:	9b07      	ldr	r3, [sp, #28]
 800b9bc:	2b0e      	cmp	r3, #14
 800b9be:	f200 80a4 	bhi.w	800bb0a <_dtoa_r+0x442>
 800b9c2:	2c00      	cmp	r4, #0
 800b9c4:	f000 80a1 	beq.w	800bb0a <_dtoa_r+0x442>
 800b9c8:	2f00      	cmp	r7, #0
 800b9ca:	dd33      	ble.n	800ba34 <_dtoa_r+0x36c>
 800b9cc:	4b86      	ldr	r3, [pc, #536]	@ (800bbe8 <_dtoa_r+0x520>)
 800b9ce:	f007 020f 	and.w	r2, r7, #15
 800b9d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b9d6:	05f8      	lsls	r0, r7, #23
 800b9d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b9dc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b9e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b9e4:	d516      	bpl.n	800ba14 <_dtoa_r+0x34c>
 800b9e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b9ea:	4b80      	ldr	r3, [pc, #512]	@ (800bbec <_dtoa_r+0x524>)
 800b9ec:	2603      	movs	r6, #3
 800b9ee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b9f2:	f7f4 fee1 	bl	80007b8 <__aeabi_ddiv>
 800b9f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9fa:	f004 040f 	and.w	r4, r4, #15
 800b9fe:	4d7b      	ldr	r5, [pc, #492]	@ (800bbec <_dtoa_r+0x524>)
 800ba00:	b954      	cbnz	r4, 800ba18 <_dtoa_r+0x350>
 800ba02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ba0a:	f7f4 fed5 	bl	80007b8 <__aeabi_ddiv>
 800ba0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba12:	e028      	b.n	800ba66 <_dtoa_r+0x39e>
 800ba14:	2602      	movs	r6, #2
 800ba16:	e7f2      	b.n	800b9fe <_dtoa_r+0x336>
 800ba18:	07e1      	lsls	r1, r4, #31
 800ba1a:	d508      	bpl.n	800ba2e <_dtoa_r+0x366>
 800ba1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba20:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ba24:	f7f4 fd9e 	bl	8000564 <__aeabi_dmul>
 800ba28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba2c:	3601      	adds	r6, #1
 800ba2e:	1064      	asrs	r4, r4, #1
 800ba30:	3508      	adds	r5, #8
 800ba32:	e7e5      	b.n	800ba00 <_dtoa_r+0x338>
 800ba34:	f000 80d2 	beq.w	800bbdc <_dtoa_r+0x514>
 800ba38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ba3c:	427c      	negs	r4, r7
 800ba3e:	4b6a      	ldr	r3, [pc, #424]	@ (800bbe8 <_dtoa_r+0x520>)
 800ba40:	f004 020f 	and.w	r2, r4, #15
 800ba44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f7f4 fd8a 	bl	8000564 <__aeabi_dmul>
 800ba50:	2602      	movs	r6, #2
 800ba52:	2300      	movs	r3, #0
 800ba54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba58:	4d64      	ldr	r5, [pc, #400]	@ (800bbec <_dtoa_r+0x524>)
 800ba5a:	1124      	asrs	r4, r4, #4
 800ba5c:	2c00      	cmp	r4, #0
 800ba5e:	f040 80b2 	bne.w	800bbc6 <_dtoa_r+0x4fe>
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d1d3      	bne.n	800ba0e <_dtoa_r+0x346>
 800ba66:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ba6a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	f000 80b7 	beq.w	800bbe0 <_dtoa_r+0x518>
 800ba72:	2200      	movs	r2, #0
 800ba74:	4620      	mov	r0, r4
 800ba76:	4629      	mov	r1, r5
 800ba78:	4b5d      	ldr	r3, [pc, #372]	@ (800bbf0 <_dtoa_r+0x528>)
 800ba7a:	f7f4 ffe5 	bl	8000a48 <__aeabi_dcmplt>
 800ba7e:	2800      	cmp	r0, #0
 800ba80:	f000 80ae 	beq.w	800bbe0 <_dtoa_r+0x518>
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	f000 80aa 	beq.w	800bbe0 <_dtoa_r+0x518>
 800ba8c:	9b08      	ldr	r3, [sp, #32]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	dd37      	ble.n	800bb02 <_dtoa_r+0x43a>
 800ba92:	1e7b      	subs	r3, r7, #1
 800ba94:	4620      	mov	r0, r4
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	2200      	movs	r2, #0
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	4b55      	ldr	r3, [pc, #340]	@ (800bbf4 <_dtoa_r+0x52c>)
 800ba9e:	f7f4 fd61 	bl	8000564 <__aeabi_dmul>
 800baa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baa6:	9c08      	ldr	r4, [sp, #32]
 800baa8:	3601      	adds	r6, #1
 800baaa:	4630      	mov	r0, r6
 800baac:	f7f4 fcf0 	bl	8000490 <__aeabi_i2d>
 800bab0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bab4:	f7f4 fd56 	bl	8000564 <__aeabi_dmul>
 800bab8:	2200      	movs	r2, #0
 800baba:	4b4f      	ldr	r3, [pc, #316]	@ (800bbf8 <_dtoa_r+0x530>)
 800babc:	f7f4 fb9c 	bl	80001f8 <__adddf3>
 800bac0:	4605      	mov	r5, r0
 800bac2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bac6:	2c00      	cmp	r4, #0
 800bac8:	f040 809a 	bne.w	800bc00 <_dtoa_r+0x538>
 800bacc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bad0:	2200      	movs	r2, #0
 800bad2:	4b4a      	ldr	r3, [pc, #296]	@ (800bbfc <_dtoa_r+0x534>)
 800bad4:	f7f4 fb8e 	bl	80001f4 <__aeabi_dsub>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bae0:	462a      	mov	r2, r5
 800bae2:	4633      	mov	r3, r6
 800bae4:	f7f4 ffce 	bl	8000a84 <__aeabi_dcmpgt>
 800bae8:	2800      	cmp	r0, #0
 800baea:	f040 828e 	bne.w	800c00a <_dtoa_r+0x942>
 800baee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800baf2:	462a      	mov	r2, r5
 800baf4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800baf8:	f7f4 ffa6 	bl	8000a48 <__aeabi_dcmplt>
 800bafc:	2800      	cmp	r0, #0
 800bafe:	f040 8127 	bne.w	800bd50 <_dtoa_r+0x688>
 800bb02:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bb06:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bb0a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	f2c0 8163 	blt.w	800bdd8 <_dtoa_r+0x710>
 800bb12:	2f0e      	cmp	r7, #14
 800bb14:	f300 8160 	bgt.w	800bdd8 <_dtoa_r+0x710>
 800bb18:	4b33      	ldr	r3, [pc, #204]	@ (800bbe8 <_dtoa_r+0x520>)
 800bb1a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bb1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bb22:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bb26:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	da03      	bge.n	800bb34 <_dtoa_r+0x46c>
 800bb2c:	9b07      	ldr	r3, [sp, #28]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f340 8100 	ble.w	800bd34 <_dtoa_r+0x66c>
 800bb34:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bb38:	4656      	mov	r6, sl
 800bb3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb3e:	4620      	mov	r0, r4
 800bb40:	4629      	mov	r1, r5
 800bb42:	f7f4 fe39 	bl	80007b8 <__aeabi_ddiv>
 800bb46:	f7f4 ffbd 	bl	8000ac4 <__aeabi_d2iz>
 800bb4a:	4680      	mov	r8, r0
 800bb4c:	f7f4 fca0 	bl	8000490 <__aeabi_i2d>
 800bb50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb54:	f7f4 fd06 	bl	8000564 <__aeabi_dmul>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	4629      	mov	r1, r5
 800bb60:	f7f4 fb48 	bl	80001f4 <__aeabi_dsub>
 800bb64:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bb68:	9d07      	ldr	r5, [sp, #28]
 800bb6a:	f806 4b01 	strb.w	r4, [r6], #1
 800bb6e:	eba6 040a 	sub.w	r4, r6, sl
 800bb72:	42a5      	cmp	r5, r4
 800bb74:	4602      	mov	r2, r0
 800bb76:	460b      	mov	r3, r1
 800bb78:	f040 8116 	bne.w	800bda8 <_dtoa_r+0x6e0>
 800bb7c:	f7f4 fb3c 	bl	80001f8 <__adddf3>
 800bb80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb84:	4604      	mov	r4, r0
 800bb86:	460d      	mov	r5, r1
 800bb88:	f7f4 ff7c 	bl	8000a84 <__aeabi_dcmpgt>
 800bb8c:	2800      	cmp	r0, #0
 800bb8e:	f040 80f8 	bne.w	800bd82 <_dtoa_r+0x6ba>
 800bb92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb96:	4620      	mov	r0, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	f7f4 ff4b 	bl	8000a34 <__aeabi_dcmpeq>
 800bb9e:	b118      	cbz	r0, 800bba8 <_dtoa_r+0x4e0>
 800bba0:	f018 0f01 	tst.w	r8, #1
 800bba4:	f040 80ed 	bne.w	800bd82 <_dtoa_r+0x6ba>
 800bba8:	4649      	mov	r1, r9
 800bbaa:	4658      	mov	r0, fp
 800bbac:	f000 fc92 	bl	800c4d4 <_Bfree>
 800bbb0:	2300      	movs	r3, #0
 800bbb2:	7033      	strb	r3, [r6, #0]
 800bbb4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800bbb6:	3701      	adds	r7, #1
 800bbb8:	601f      	str	r7, [r3, #0]
 800bbba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	f000 8320 	beq.w	800c202 <_dtoa_r+0xb3a>
 800bbc2:	601e      	str	r6, [r3, #0]
 800bbc4:	e31d      	b.n	800c202 <_dtoa_r+0xb3a>
 800bbc6:	07e2      	lsls	r2, r4, #31
 800bbc8:	d505      	bpl.n	800bbd6 <_dtoa_r+0x50e>
 800bbca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bbce:	f7f4 fcc9 	bl	8000564 <__aeabi_dmul>
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	3601      	adds	r6, #1
 800bbd6:	1064      	asrs	r4, r4, #1
 800bbd8:	3508      	adds	r5, #8
 800bbda:	e73f      	b.n	800ba5c <_dtoa_r+0x394>
 800bbdc:	2602      	movs	r6, #2
 800bbde:	e742      	b.n	800ba66 <_dtoa_r+0x39e>
 800bbe0:	9c07      	ldr	r4, [sp, #28]
 800bbe2:	9704      	str	r7, [sp, #16]
 800bbe4:	e761      	b.n	800baaa <_dtoa_r+0x3e2>
 800bbe6:	bf00      	nop
 800bbe8:	0800e4e0 	.word	0x0800e4e0
 800bbec:	0800e4b8 	.word	0x0800e4b8
 800bbf0:	3ff00000 	.word	0x3ff00000
 800bbf4:	40240000 	.word	0x40240000
 800bbf8:	401c0000 	.word	0x401c0000
 800bbfc:	40140000 	.word	0x40140000
 800bc00:	4b70      	ldr	r3, [pc, #448]	@ (800bdc4 <_dtoa_r+0x6fc>)
 800bc02:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bc04:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc08:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc0c:	4454      	add	r4, sl
 800bc0e:	2900      	cmp	r1, #0
 800bc10:	d045      	beq.n	800bc9e <_dtoa_r+0x5d6>
 800bc12:	2000      	movs	r0, #0
 800bc14:	496c      	ldr	r1, [pc, #432]	@ (800bdc8 <_dtoa_r+0x700>)
 800bc16:	f7f4 fdcf 	bl	80007b8 <__aeabi_ddiv>
 800bc1a:	4633      	mov	r3, r6
 800bc1c:	462a      	mov	r2, r5
 800bc1e:	f7f4 fae9 	bl	80001f4 <__aeabi_dsub>
 800bc22:	4656      	mov	r6, sl
 800bc24:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc2c:	f7f4 ff4a 	bl	8000ac4 <__aeabi_d2iz>
 800bc30:	4605      	mov	r5, r0
 800bc32:	f7f4 fc2d 	bl	8000490 <__aeabi_i2d>
 800bc36:	4602      	mov	r2, r0
 800bc38:	460b      	mov	r3, r1
 800bc3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc3e:	f7f4 fad9 	bl	80001f4 <__aeabi_dsub>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	3530      	adds	r5, #48	@ 0x30
 800bc48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc4c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc50:	f806 5b01 	strb.w	r5, [r6], #1
 800bc54:	f7f4 fef8 	bl	8000a48 <__aeabi_dcmplt>
 800bc58:	2800      	cmp	r0, #0
 800bc5a:	d163      	bne.n	800bd24 <_dtoa_r+0x65c>
 800bc5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc60:	2000      	movs	r0, #0
 800bc62:	495a      	ldr	r1, [pc, #360]	@ (800bdcc <_dtoa_r+0x704>)
 800bc64:	f7f4 fac6 	bl	80001f4 <__aeabi_dsub>
 800bc68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bc6c:	f7f4 feec 	bl	8000a48 <__aeabi_dcmplt>
 800bc70:	2800      	cmp	r0, #0
 800bc72:	f040 8087 	bne.w	800bd84 <_dtoa_r+0x6bc>
 800bc76:	42a6      	cmp	r6, r4
 800bc78:	f43f af43 	beq.w	800bb02 <_dtoa_r+0x43a>
 800bc7c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bc80:	2200      	movs	r2, #0
 800bc82:	4b53      	ldr	r3, [pc, #332]	@ (800bdd0 <_dtoa_r+0x708>)
 800bc84:	f7f4 fc6e 	bl	8000564 <__aeabi_dmul>
 800bc88:	2200      	movs	r2, #0
 800bc8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bc8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc92:	4b4f      	ldr	r3, [pc, #316]	@ (800bdd0 <_dtoa_r+0x708>)
 800bc94:	f7f4 fc66 	bl	8000564 <__aeabi_dmul>
 800bc98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc9c:	e7c4      	b.n	800bc28 <_dtoa_r+0x560>
 800bc9e:	4631      	mov	r1, r6
 800bca0:	4628      	mov	r0, r5
 800bca2:	f7f4 fc5f 	bl	8000564 <__aeabi_dmul>
 800bca6:	4656      	mov	r6, sl
 800bca8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800bcac:	9413      	str	r4, [sp, #76]	@ 0x4c
 800bcae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcb2:	f7f4 ff07 	bl	8000ac4 <__aeabi_d2iz>
 800bcb6:	4605      	mov	r5, r0
 800bcb8:	f7f4 fbea 	bl	8000490 <__aeabi_i2d>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	460b      	mov	r3, r1
 800bcc0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcc4:	f7f4 fa96 	bl	80001f4 <__aeabi_dsub>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	460b      	mov	r3, r1
 800bccc:	3530      	adds	r5, #48	@ 0x30
 800bcce:	f806 5b01 	strb.w	r5, [r6], #1
 800bcd2:	42a6      	cmp	r6, r4
 800bcd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcd8:	f04f 0200 	mov.w	r2, #0
 800bcdc:	d124      	bne.n	800bd28 <_dtoa_r+0x660>
 800bcde:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800bce2:	4b39      	ldr	r3, [pc, #228]	@ (800bdc8 <_dtoa_r+0x700>)
 800bce4:	f7f4 fa88 	bl	80001f8 <__adddf3>
 800bce8:	4602      	mov	r2, r0
 800bcea:	460b      	mov	r3, r1
 800bcec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcf0:	f7f4 fec8 	bl	8000a84 <__aeabi_dcmpgt>
 800bcf4:	2800      	cmp	r0, #0
 800bcf6:	d145      	bne.n	800bd84 <_dtoa_r+0x6bc>
 800bcf8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800bcfc:	2000      	movs	r0, #0
 800bcfe:	4932      	ldr	r1, [pc, #200]	@ (800bdc8 <_dtoa_r+0x700>)
 800bd00:	f7f4 fa78 	bl	80001f4 <__aeabi_dsub>
 800bd04:	4602      	mov	r2, r0
 800bd06:	460b      	mov	r3, r1
 800bd08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd0c:	f7f4 fe9c 	bl	8000a48 <__aeabi_dcmplt>
 800bd10:	2800      	cmp	r0, #0
 800bd12:	f43f aef6 	beq.w	800bb02 <_dtoa_r+0x43a>
 800bd16:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800bd18:	1e73      	subs	r3, r6, #1
 800bd1a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bd1c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bd20:	2b30      	cmp	r3, #48	@ 0x30
 800bd22:	d0f8      	beq.n	800bd16 <_dtoa_r+0x64e>
 800bd24:	9f04      	ldr	r7, [sp, #16]
 800bd26:	e73f      	b.n	800bba8 <_dtoa_r+0x4e0>
 800bd28:	4b29      	ldr	r3, [pc, #164]	@ (800bdd0 <_dtoa_r+0x708>)
 800bd2a:	f7f4 fc1b 	bl	8000564 <__aeabi_dmul>
 800bd2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd32:	e7bc      	b.n	800bcae <_dtoa_r+0x5e6>
 800bd34:	d10c      	bne.n	800bd50 <_dtoa_r+0x688>
 800bd36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4b25      	ldr	r3, [pc, #148]	@ (800bdd4 <_dtoa_r+0x70c>)
 800bd3e:	f7f4 fc11 	bl	8000564 <__aeabi_dmul>
 800bd42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bd46:	f7f4 fe93 	bl	8000a70 <__aeabi_dcmpge>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	f000 815b 	beq.w	800c006 <_dtoa_r+0x93e>
 800bd50:	2400      	movs	r4, #0
 800bd52:	4625      	mov	r5, r4
 800bd54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800bd56:	4656      	mov	r6, sl
 800bd58:	43db      	mvns	r3, r3
 800bd5a:	9304      	str	r3, [sp, #16]
 800bd5c:	2700      	movs	r7, #0
 800bd5e:	4621      	mov	r1, r4
 800bd60:	4658      	mov	r0, fp
 800bd62:	f000 fbb7 	bl	800c4d4 <_Bfree>
 800bd66:	2d00      	cmp	r5, #0
 800bd68:	d0dc      	beq.n	800bd24 <_dtoa_r+0x65c>
 800bd6a:	b12f      	cbz	r7, 800bd78 <_dtoa_r+0x6b0>
 800bd6c:	42af      	cmp	r7, r5
 800bd6e:	d003      	beq.n	800bd78 <_dtoa_r+0x6b0>
 800bd70:	4639      	mov	r1, r7
 800bd72:	4658      	mov	r0, fp
 800bd74:	f000 fbae 	bl	800c4d4 <_Bfree>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4658      	mov	r0, fp
 800bd7c:	f000 fbaa 	bl	800c4d4 <_Bfree>
 800bd80:	e7d0      	b.n	800bd24 <_dtoa_r+0x65c>
 800bd82:	9704      	str	r7, [sp, #16]
 800bd84:	4633      	mov	r3, r6
 800bd86:	461e      	mov	r6, r3
 800bd88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd8c:	2a39      	cmp	r2, #57	@ 0x39
 800bd8e:	d107      	bne.n	800bda0 <_dtoa_r+0x6d8>
 800bd90:	459a      	cmp	sl, r3
 800bd92:	d1f8      	bne.n	800bd86 <_dtoa_r+0x6be>
 800bd94:	9a04      	ldr	r2, [sp, #16]
 800bd96:	3201      	adds	r2, #1
 800bd98:	9204      	str	r2, [sp, #16]
 800bd9a:	2230      	movs	r2, #48	@ 0x30
 800bd9c:	f88a 2000 	strb.w	r2, [sl]
 800bda0:	781a      	ldrb	r2, [r3, #0]
 800bda2:	3201      	adds	r2, #1
 800bda4:	701a      	strb	r2, [r3, #0]
 800bda6:	e7bd      	b.n	800bd24 <_dtoa_r+0x65c>
 800bda8:	2200      	movs	r2, #0
 800bdaa:	4b09      	ldr	r3, [pc, #36]	@ (800bdd0 <_dtoa_r+0x708>)
 800bdac:	f7f4 fbda 	bl	8000564 <__aeabi_dmul>
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	f7f4 fe3c 	bl	8000a34 <__aeabi_dcmpeq>
 800bdbc:	2800      	cmp	r0, #0
 800bdbe:	f43f aebc 	beq.w	800bb3a <_dtoa_r+0x472>
 800bdc2:	e6f1      	b.n	800bba8 <_dtoa_r+0x4e0>
 800bdc4:	0800e4e0 	.word	0x0800e4e0
 800bdc8:	3fe00000 	.word	0x3fe00000
 800bdcc:	3ff00000 	.word	0x3ff00000
 800bdd0:	40240000 	.word	0x40240000
 800bdd4:	40140000 	.word	0x40140000
 800bdd8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800bdda:	2a00      	cmp	r2, #0
 800bddc:	f000 80db 	beq.w	800bf96 <_dtoa_r+0x8ce>
 800bde0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800bde2:	2a01      	cmp	r2, #1
 800bde4:	f300 80bf 	bgt.w	800bf66 <_dtoa_r+0x89e>
 800bde8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800bdea:	2a00      	cmp	r2, #0
 800bdec:	f000 80b7 	beq.w	800bf5e <_dtoa_r+0x896>
 800bdf0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800bdf4:	4646      	mov	r6, r8
 800bdf6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bdf8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bdfa:	2101      	movs	r1, #1
 800bdfc:	441a      	add	r2, r3
 800bdfe:	4658      	mov	r0, fp
 800be00:	4498      	add	r8, r3
 800be02:	9209      	str	r2, [sp, #36]	@ 0x24
 800be04:	f000 fc1a 	bl	800c63c <__i2b>
 800be08:	4605      	mov	r5, r0
 800be0a:	b15e      	cbz	r6, 800be24 <_dtoa_r+0x75c>
 800be0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be0e:	2b00      	cmp	r3, #0
 800be10:	dd08      	ble.n	800be24 <_dtoa_r+0x75c>
 800be12:	42b3      	cmp	r3, r6
 800be14:	bfa8      	it	ge
 800be16:	4633      	movge	r3, r6
 800be18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800be1a:	eba8 0803 	sub.w	r8, r8, r3
 800be1e:	1af6      	subs	r6, r6, r3
 800be20:	1ad3      	subs	r3, r2, r3
 800be22:	9309      	str	r3, [sp, #36]	@ 0x24
 800be24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be26:	b1f3      	cbz	r3, 800be66 <_dtoa_r+0x79e>
 800be28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f000 80b7 	beq.w	800bf9e <_dtoa_r+0x8d6>
 800be30:	b18c      	cbz	r4, 800be56 <_dtoa_r+0x78e>
 800be32:	4629      	mov	r1, r5
 800be34:	4622      	mov	r2, r4
 800be36:	4658      	mov	r0, fp
 800be38:	f000 fcbe 	bl	800c7b8 <__pow5mult>
 800be3c:	464a      	mov	r2, r9
 800be3e:	4601      	mov	r1, r0
 800be40:	4605      	mov	r5, r0
 800be42:	4658      	mov	r0, fp
 800be44:	f000 fc10 	bl	800c668 <__multiply>
 800be48:	4649      	mov	r1, r9
 800be4a:	9004      	str	r0, [sp, #16]
 800be4c:	4658      	mov	r0, fp
 800be4e:	f000 fb41 	bl	800c4d4 <_Bfree>
 800be52:	9b04      	ldr	r3, [sp, #16]
 800be54:	4699      	mov	r9, r3
 800be56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800be58:	1b1a      	subs	r2, r3, r4
 800be5a:	d004      	beq.n	800be66 <_dtoa_r+0x79e>
 800be5c:	4649      	mov	r1, r9
 800be5e:	4658      	mov	r0, fp
 800be60:	f000 fcaa 	bl	800c7b8 <__pow5mult>
 800be64:	4681      	mov	r9, r0
 800be66:	2101      	movs	r1, #1
 800be68:	4658      	mov	r0, fp
 800be6a:	f000 fbe7 	bl	800c63c <__i2b>
 800be6e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be70:	4604      	mov	r4, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	f000 81c9 	beq.w	800c20a <_dtoa_r+0xb42>
 800be78:	461a      	mov	r2, r3
 800be7a:	4601      	mov	r1, r0
 800be7c:	4658      	mov	r0, fp
 800be7e:	f000 fc9b 	bl	800c7b8 <__pow5mult>
 800be82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800be84:	4604      	mov	r4, r0
 800be86:	2b01      	cmp	r3, #1
 800be88:	f300 808f 	bgt.w	800bfaa <_dtoa_r+0x8e2>
 800be8c:	9b02      	ldr	r3, [sp, #8]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	f040 8087 	bne.w	800bfa2 <_dtoa_r+0x8da>
 800be94:	9b03      	ldr	r3, [sp, #12]
 800be96:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	f040 8083 	bne.w	800bfa6 <_dtoa_r+0x8de>
 800bea0:	9b03      	ldr	r3, [sp, #12]
 800bea2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bea6:	0d1b      	lsrs	r3, r3, #20
 800bea8:	051b      	lsls	r3, r3, #20
 800beaa:	b12b      	cbz	r3, 800beb8 <_dtoa_r+0x7f0>
 800beac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800beae:	f108 0801 	add.w	r8, r8, #1
 800beb2:	3301      	adds	r3, #1
 800beb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800beb6:	2301      	movs	r3, #1
 800beb8:	930a      	str	r3, [sp, #40]	@ 0x28
 800beba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	f000 81aa 	beq.w	800c216 <_dtoa_r+0xb4e>
 800bec2:	6923      	ldr	r3, [r4, #16]
 800bec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800bec8:	6918      	ldr	r0, [r3, #16]
 800beca:	f000 fb6b 	bl	800c5a4 <__hi0bits>
 800bece:	f1c0 0020 	rsb	r0, r0, #32
 800bed2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bed4:	4418      	add	r0, r3
 800bed6:	f010 001f 	ands.w	r0, r0, #31
 800beda:	d071      	beq.n	800bfc0 <_dtoa_r+0x8f8>
 800bedc:	f1c0 0320 	rsb	r3, r0, #32
 800bee0:	2b04      	cmp	r3, #4
 800bee2:	dd65      	ble.n	800bfb0 <_dtoa_r+0x8e8>
 800bee4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee6:	f1c0 001c 	rsb	r0, r0, #28
 800beea:	4403      	add	r3, r0
 800beec:	4480      	add	r8, r0
 800beee:	4406      	add	r6, r0
 800bef0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bef2:	f1b8 0f00 	cmp.w	r8, #0
 800bef6:	dd05      	ble.n	800bf04 <_dtoa_r+0x83c>
 800bef8:	4649      	mov	r1, r9
 800befa:	4642      	mov	r2, r8
 800befc:	4658      	mov	r0, fp
 800befe:	f000 fcb5 	bl	800c86c <__lshift>
 800bf02:	4681      	mov	r9, r0
 800bf04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	dd05      	ble.n	800bf16 <_dtoa_r+0x84e>
 800bf0a:	4621      	mov	r1, r4
 800bf0c:	461a      	mov	r2, r3
 800bf0e:	4658      	mov	r0, fp
 800bf10:	f000 fcac 	bl	800c86c <__lshift>
 800bf14:	4604      	mov	r4, r0
 800bf16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d053      	beq.n	800bfc4 <_dtoa_r+0x8fc>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	4648      	mov	r0, r9
 800bf20:	f000 fd10 	bl	800c944 <__mcmp>
 800bf24:	2800      	cmp	r0, #0
 800bf26:	da4d      	bge.n	800bfc4 <_dtoa_r+0x8fc>
 800bf28:	1e7b      	subs	r3, r7, #1
 800bf2a:	4649      	mov	r1, r9
 800bf2c:	9304      	str	r3, [sp, #16]
 800bf2e:	220a      	movs	r2, #10
 800bf30:	2300      	movs	r3, #0
 800bf32:	4658      	mov	r0, fp
 800bf34:	f000 faf0 	bl	800c518 <__multadd>
 800bf38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bf3a:	4681      	mov	r9, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	f000 816c 	beq.w	800c21a <_dtoa_r+0xb52>
 800bf42:	2300      	movs	r3, #0
 800bf44:	4629      	mov	r1, r5
 800bf46:	220a      	movs	r2, #10
 800bf48:	4658      	mov	r0, fp
 800bf4a:	f000 fae5 	bl	800c518 <__multadd>
 800bf4e:	9b08      	ldr	r3, [sp, #32]
 800bf50:	4605      	mov	r5, r0
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	dc61      	bgt.n	800c01a <_dtoa_r+0x952>
 800bf56:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	dc3b      	bgt.n	800bfd4 <_dtoa_r+0x90c>
 800bf5c:	e05d      	b.n	800c01a <_dtoa_r+0x952>
 800bf5e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bf60:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800bf64:	e746      	b.n	800bdf4 <_dtoa_r+0x72c>
 800bf66:	9b07      	ldr	r3, [sp, #28]
 800bf68:	1e5c      	subs	r4, r3, #1
 800bf6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf6c:	42a3      	cmp	r3, r4
 800bf6e:	bfbf      	itttt	lt
 800bf70:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800bf72:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800bf74:	1ae3      	sublt	r3, r4, r3
 800bf76:	18d2      	addlt	r2, r2, r3
 800bf78:	bfa8      	it	ge
 800bf7a:	1b1c      	subge	r4, r3, r4
 800bf7c:	9b07      	ldr	r3, [sp, #28]
 800bf7e:	bfbe      	ittt	lt
 800bf80:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800bf82:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800bf84:	2400      	movlt	r4, #0
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	bfb5      	itete	lt
 800bf8a:	eba8 0603 	sublt.w	r6, r8, r3
 800bf8e:	4646      	movge	r6, r8
 800bf90:	2300      	movlt	r3, #0
 800bf92:	9b07      	ldrge	r3, [sp, #28]
 800bf94:	e730      	b.n	800bdf8 <_dtoa_r+0x730>
 800bf96:	4646      	mov	r6, r8
 800bf98:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800bf9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800bf9c:	e735      	b.n	800be0a <_dtoa_r+0x742>
 800bf9e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bfa0:	e75c      	b.n	800be5c <_dtoa_r+0x794>
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	e788      	b.n	800beb8 <_dtoa_r+0x7f0>
 800bfa6:	9b02      	ldr	r3, [sp, #8]
 800bfa8:	e786      	b.n	800beb8 <_dtoa_r+0x7f0>
 800bfaa:	2300      	movs	r3, #0
 800bfac:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfae:	e788      	b.n	800bec2 <_dtoa_r+0x7fa>
 800bfb0:	d09f      	beq.n	800bef2 <_dtoa_r+0x82a>
 800bfb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bfb4:	331c      	adds	r3, #28
 800bfb6:	441a      	add	r2, r3
 800bfb8:	4498      	add	r8, r3
 800bfba:	441e      	add	r6, r3
 800bfbc:	9209      	str	r2, [sp, #36]	@ 0x24
 800bfbe:	e798      	b.n	800bef2 <_dtoa_r+0x82a>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	e7f6      	b.n	800bfb2 <_dtoa_r+0x8ea>
 800bfc4:	9b07      	ldr	r3, [sp, #28]
 800bfc6:	9704      	str	r7, [sp, #16]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	dc20      	bgt.n	800c00e <_dtoa_r+0x946>
 800bfcc:	9308      	str	r3, [sp, #32]
 800bfce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800bfd0:	2b02      	cmp	r3, #2
 800bfd2:	dd1e      	ble.n	800c012 <_dtoa_r+0x94a>
 800bfd4:	9b08      	ldr	r3, [sp, #32]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	f47f aebc 	bne.w	800bd54 <_dtoa_r+0x68c>
 800bfdc:	4621      	mov	r1, r4
 800bfde:	2205      	movs	r2, #5
 800bfe0:	4658      	mov	r0, fp
 800bfe2:	f000 fa99 	bl	800c518 <__multadd>
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	4604      	mov	r4, r0
 800bfea:	4648      	mov	r0, r9
 800bfec:	f000 fcaa 	bl	800c944 <__mcmp>
 800bff0:	2800      	cmp	r0, #0
 800bff2:	f77f aeaf 	ble.w	800bd54 <_dtoa_r+0x68c>
 800bff6:	2331      	movs	r3, #49	@ 0x31
 800bff8:	4656      	mov	r6, sl
 800bffa:	f806 3b01 	strb.w	r3, [r6], #1
 800bffe:	9b04      	ldr	r3, [sp, #16]
 800c000:	3301      	adds	r3, #1
 800c002:	9304      	str	r3, [sp, #16]
 800c004:	e6aa      	b.n	800bd5c <_dtoa_r+0x694>
 800c006:	9c07      	ldr	r4, [sp, #28]
 800c008:	9704      	str	r7, [sp, #16]
 800c00a:	4625      	mov	r5, r4
 800c00c:	e7f3      	b.n	800bff6 <_dtoa_r+0x92e>
 800c00e:	9b07      	ldr	r3, [sp, #28]
 800c010:	9308      	str	r3, [sp, #32]
 800c012:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c014:	2b00      	cmp	r3, #0
 800c016:	f000 8104 	beq.w	800c222 <_dtoa_r+0xb5a>
 800c01a:	2e00      	cmp	r6, #0
 800c01c:	dd05      	ble.n	800c02a <_dtoa_r+0x962>
 800c01e:	4629      	mov	r1, r5
 800c020:	4632      	mov	r2, r6
 800c022:	4658      	mov	r0, fp
 800c024:	f000 fc22 	bl	800c86c <__lshift>
 800c028:	4605      	mov	r5, r0
 800c02a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d05a      	beq.n	800c0e6 <_dtoa_r+0xa1e>
 800c030:	4658      	mov	r0, fp
 800c032:	6869      	ldr	r1, [r5, #4]
 800c034:	f000 fa0e 	bl	800c454 <_Balloc>
 800c038:	4606      	mov	r6, r0
 800c03a:	b928      	cbnz	r0, 800c048 <_dtoa_r+0x980>
 800c03c:	4602      	mov	r2, r0
 800c03e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c042:	4b83      	ldr	r3, [pc, #524]	@ (800c250 <_dtoa_r+0xb88>)
 800c044:	f7ff bb54 	b.w	800b6f0 <_dtoa_r+0x28>
 800c048:	692a      	ldr	r2, [r5, #16]
 800c04a:	f105 010c 	add.w	r1, r5, #12
 800c04e:	3202      	adds	r2, #2
 800c050:	0092      	lsls	r2, r2, #2
 800c052:	300c      	adds	r0, #12
 800c054:	f7ff fa9f 	bl	800b596 <memcpy>
 800c058:	2201      	movs	r2, #1
 800c05a:	4631      	mov	r1, r6
 800c05c:	4658      	mov	r0, fp
 800c05e:	f000 fc05 	bl	800c86c <__lshift>
 800c062:	462f      	mov	r7, r5
 800c064:	4605      	mov	r5, r0
 800c066:	f10a 0301 	add.w	r3, sl, #1
 800c06a:	9307      	str	r3, [sp, #28]
 800c06c:	9b08      	ldr	r3, [sp, #32]
 800c06e:	4453      	add	r3, sl
 800c070:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c072:	9b02      	ldr	r3, [sp, #8]
 800c074:	f003 0301 	and.w	r3, r3, #1
 800c078:	930a      	str	r3, [sp, #40]	@ 0x28
 800c07a:	9b07      	ldr	r3, [sp, #28]
 800c07c:	4621      	mov	r1, r4
 800c07e:	3b01      	subs	r3, #1
 800c080:	4648      	mov	r0, r9
 800c082:	9302      	str	r3, [sp, #8]
 800c084:	f7ff fa95 	bl	800b5b2 <quorem>
 800c088:	4639      	mov	r1, r7
 800c08a:	9008      	str	r0, [sp, #32]
 800c08c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c090:	4648      	mov	r0, r9
 800c092:	f000 fc57 	bl	800c944 <__mcmp>
 800c096:	462a      	mov	r2, r5
 800c098:	9009      	str	r0, [sp, #36]	@ 0x24
 800c09a:	4621      	mov	r1, r4
 800c09c:	4658      	mov	r0, fp
 800c09e:	f000 fc6d 	bl	800c97c <__mdiff>
 800c0a2:	68c2      	ldr	r2, [r0, #12]
 800c0a4:	4606      	mov	r6, r0
 800c0a6:	bb02      	cbnz	r2, 800c0ea <_dtoa_r+0xa22>
 800c0a8:	4601      	mov	r1, r0
 800c0aa:	4648      	mov	r0, r9
 800c0ac:	f000 fc4a 	bl	800c944 <__mcmp>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	4631      	mov	r1, r6
 800c0b4:	4658      	mov	r0, fp
 800c0b6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c0b8:	f000 fa0c 	bl	800c4d4 <_Bfree>
 800c0bc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c0be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c0c0:	9e07      	ldr	r6, [sp, #28]
 800c0c2:	ea43 0102 	orr.w	r1, r3, r2
 800c0c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0c8:	4319      	orrs	r1, r3
 800c0ca:	d110      	bne.n	800c0ee <_dtoa_r+0xa26>
 800c0cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c0d0:	d029      	beq.n	800c126 <_dtoa_r+0xa5e>
 800c0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	dd02      	ble.n	800c0de <_dtoa_r+0xa16>
 800c0d8:	9b08      	ldr	r3, [sp, #32]
 800c0da:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c0de:	9b02      	ldr	r3, [sp, #8]
 800c0e0:	f883 8000 	strb.w	r8, [r3]
 800c0e4:	e63b      	b.n	800bd5e <_dtoa_r+0x696>
 800c0e6:	4628      	mov	r0, r5
 800c0e8:	e7bb      	b.n	800c062 <_dtoa_r+0x99a>
 800c0ea:	2201      	movs	r2, #1
 800c0ec:	e7e1      	b.n	800c0b2 <_dtoa_r+0x9ea>
 800c0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	db04      	blt.n	800c0fe <_dtoa_r+0xa36>
 800c0f4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800c0f6:	430b      	orrs	r3, r1
 800c0f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c0fa:	430b      	orrs	r3, r1
 800c0fc:	d120      	bne.n	800c140 <_dtoa_r+0xa78>
 800c0fe:	2a00      	cmp	r2, #0
 800c100:	dded      	ble.n	800c0de <_dtoa_r+0xa16>
 800c102:	4649      	mov	r1, r9
 800c104:	2201      	movs	r2, #1
 800c106:	4658      	mov	r0, fp
 800c108:	f000 fbb0 	bl	800c86c <__lshift>
 800c10c:	4621      	mov	r1, r4
 800c10e:	4681      	mov	r9, r0
 800c110:	f000 fc18 	bl	800c944 <__mcmp>
 800c114:	2800      	cmp	r0, #0
 800c116:	dc03      	bgt.n	800c120 <_dtoa_r+0xa58>
 800c118:	d1e1      	bne.n	800c0de <_dtoa_r+0xa16>
 800c11a:	f018 0f01 	tst.w	r8, #1
 800c11e:	d0de      	beq.n	800c0de <_dtoa_r+0xa16>
 800c120:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c124:	d1d8      	bne.n	800c0d8 <_dtoa_r+0xa10>
 800c126:	2339      	movs	r3, #57	@ 0x39
 800c128:	9a02      	ldr	r2, [sp, #8]
 800c12a:	7013      	strb	r3, [r2, #0]
 800c12c:	4633      	mov	r3, r6
 800c12e:	461e      	mov	r6, r3
 800c130:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c134:	3b01      	subs	r3, #1
 800c136:	2a39      	cmp	r2, #57	@ 0x39
 800c138:	d052      	beq.n	800c1e0 <_dtoa_r+0xb18>
 800c13a:	3201      	adds	r2, #1
 800c13c:	701a      	strb	r2, [r3, #0]
 800c13e:	e60e      	b.n	800bd5e <_dtoa_r+0x696>
 800c140:	2a00      	cmp	r2, #0
 800c142:	dd07      	ble.n	800c154 <_dtoa_r+0xa8c>
 800c144:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c148:	d0ed      	beq.n	800c126 <_dtoa_r+0xa5e>
 800c14a:	9a02      	ldr	r2, [sp, #8]
 800c14c:	f108 0301 	add.w	r3, r8, #1
 800c150:	7013      	strb	r3, [r2, #0]
 800c152:	e604      	b.n	800bd5e <_dtoa_r+0x696>
 800c154:	9b07      	ldr	r3, [sp, #28]
 800c156:	9a07      	ldr	r2, [sp, #28]
 800c158:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c15c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c15e:	4293      	cmp	r3, r2
 800c160:	d028      	beq.n	800c1b4 <_dtoa_r+0xaec>
 800c162:	4649      	mov	r1, r9
 800c164:	2300      	movs	r3, #0
 800c166:	220a      	movs	r2, #10
 800c168:	4658      	mov	r0, fp
 800c16a:	f000 f9d5 	bl	800c518 <__multadd>
 800c16e:	42af      	cmp	r7, r5
 800c170:	4681      	mov	r9, r0
 800c172:	f04f 0300 	mov.w	r3, #0
 800c176:	f04f 020a 	mov.w	r2, #10
 800c17a:	4639      	mov	r1, r7
 800c17c:	4658      	mov	r0, fp
 800c17e:	d107      	bne.n	800c190 <_dtoa_r+0xac8>
 800c180:	f000 f9ca 	bl	800c518 <__multadd>
 800c184:	4607      	mov	r7, r0
 800c186:	4605      	mov	r5, r0
 800c188:	9b07      	ldr	r3, [sp, #28]
 800c18a:	3301      	adds	r3, #1
 800c18c:	9307      	str	r3, [sp, #28]
 800c18e:	e774      	b.n	800c07a <_dtoa_r+0x9b2>
 800c190:	f000 f9c2 	bl	800c518 <__multadd>
 800c194:	4629      	mov	r1, r5
 800c196:	4607      	mov	r7, r0
 800c198:	2300      	movs	r3, #0
 800c19a:	220a      	movs	r2, #10
 800c19c:	4658      	mov	r0, fp
 800c19e:	f000 f9bb 	bl	800c518 <__multadd>
 800c1a2:	4605      	mov	r5, r0
 800c1a4:	e7f0      	b.n	800c188 <_dtoa_r+0xac0>
 800c1a6:	9b08      	ldr	r3, [sp, #32]
 800c1a8:	2700      	movs	r7, #0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	bfcc      	ite	gt
 800c1ae:	461e      	movgt	r6, r3
 800c1b0:	2601      	movle	r6, #1
 800c1b2:	4456      	add	r6, sl
 800c1b4:	4649      	mov	r1, r9
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	4658      	mov	r0, fp
 800c1ba:	f000 fb57 	bl	800c86c <__lshift>
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4681      	mov	r9, r0
 800c1c2:	f000 fbbf 	bl	800c944 <__mcmp>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	dcb0      	bgt.n	800c12c <_dtoa_r+0xa64>
 800c1ca:	d102      	bne.n	800c1d2 <_dtoa_r+0xb0a>
 800c1cc:	f018 0f01 	tst.w	r8, #1
 800c1d0:	d1ac      	bne.n	800c12c <_dtoa_r+0xa64>
 800c1d2:	4633      	mov	r3, r6
 800c1d4:	461e      	mov	r6, r3
 800c1d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1da:	2a30      	cmp	r2, #48	@ 0x30
 800c1dc:	d0fa      	beq.n	800c1d4 <_dtoa_r+0xb0c>
 800c1de:	e5be      	b.n	800bd5e <_dtoa_r+0x696>
 800c1e0:	459a      	cmp	sl, r3
 800c1e2:	d1a4      	bne.n	800c12e <_dtoa_r+0xa66>
 800c1e4:	9b04      	ldr	r3, [sp, #16]
 800c1e6:	3301      	adds	r3, #1
 800c1e8:	9304      	str	r3, [sp, #16]
 800c1ea:	2331      	movs	r3, #49	@ 0x31
 800c1ec:	f88a 3000 	strb.w	r3, [sl]
 800c1f0:	e5b5      	b.n	800bd5e <_dtoa_r+0x696>
 800c1f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800c1f4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c254 <_dtoa_r+0xb8c>
 800c1f8:	b11b      	cbz	r3, 800c202 <_dtoa_r+0xb3a>
 800c1fa:	f10a 0308 	add.w	r3, sl, #8
 800c1fe:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800c200:	6013      	str	r3, [r2, #0]
 800c202:	4650      	mov	r0, sl
 800c204:	b017      	add	sp, #92	@ 0x5c
 800c206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c20a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800c20c:	2b01      	cmp	r3, #1
 800c20e:	f77f ae3d 	ble.w	800be8c <_dtoa_r+0x7c4>
 800c212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c214:	930a      	str	r3, [sp, #40]	@ 0x28
 800c216:	2001      	movs	r0, #1
 800c218:	e65b      	b.n	800bed2 <_dtoa_r+0x80a>
 800c21a:	9b08      	ldr	r3, [sp, #32]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f77f aed6 	ble.w	800bfce <_dtoa_r+0x906>
 800c222:	4656      	mov	r6, sl
 800c224:	4621      	mov	r1, r4
 800c226:	4648      	mov	r0, r9
 800c228:	f7ff f9c3 	bl	800b5b2 <quorem>
 800c22c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c230:	9b08      	ldr	r3, [sp, #32]
 800c232:	f806 8b01 	strb.w	r8, [r6], #1
 800c236:	eba6 020a 	sub.w	r2, r6, sl
 800c23a:	4293      	cmp	r3, r2
 800c23c:	ddb3      	ble.n	800c1a6 <_dtoa_r+0xade>
 800c23e:	4649      	mov	r1, r9
 800c240:	2300      	movs	r3, #0
 800c242:	220a      	movs	r2, #10
 800c244:	4658      	mov	r0, fp
 800c246:	f000 f967 	bl	800c518 <__multadd>
 800c24a:	4681      	mov	r9, r0
 800c24c:	e7ea      	b.n	800c224 <_dtoa_r+0xb5c>
 800c24e:	bf00      	nop
 800c250:	0800e442 	.word	0x0800e442
 800c254:	0800e3c6 	.word	0x0800e3c6

0800c258 <_free_r>:
 800c258:	b538      	push	{r3, r4, r5, lr}
 800c25a:	4605      	mov	r5, r0
 800c25c:	2900      	cmp	r1, #0
 800c25e:	d040      	beq.n	800c2e2 <_free_r+0x8a>
 800c260:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c264:	1f0c      	subs	r4, r1, #4
 800c266:	2b00      	cmp	r3, #0
 800c268:	bfb8      	it	lt
 800c26a:	18e4      	addlt	r4, r4, r3
 800c26c:	f000 f8e6 	bl	800c43c <__malloc_lock>
 800c270:	4a1c      	ldr	r2, [pc, #112]	@ (800c2e4 <_free_r+0x8c>)
 800c272:	6813      	ldr	r3, [r2, #0]
 800c274:	b933      	cbnz	r3, 800c284 <_free_r+0x2c>
 800c276:	6063      	str	r3, [r4, #4]
 800c278:	6014      	str	r4, [r2, #0]
 800c27a:	4628      	mov	r0, r5
 800c27c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c280:	f000 b8e2 	b.w	800c448 <__malloc_unlock>
 800c284:	42a3      	cmp	r3, r4
 800c286:	d908      	bls.n	800c29a <_free_r+0x42>
 800c288:	6820      	ldr	r0, [r4, #0]
 800c28a:	1821      	adds	r1, r4, r0
 800c28c:	428b      	cmp	r3, r1
 800c28e:	bf01      	itttt	eq
 800c290:	6819      	ldreq	r1, [r3, #0]
 800c292:	685b      	ldreq	r3, [r3, #4]
 800c294:	1809      	addeq	r1, r1, r0
 800c296:	6021      	streq	r1, [r4, #0]
 800c298:	e7ed      	b.n	800c276 <_free_r+0x1e>
 800c29a:	461a      	mov	r2, r3
 800c29c:	685b      	ldr	r3, [r3, #4]
 800c29e:	b10b      	cbz	r3, 800c2a4 <_free_r+0x4c>
 800c2a0:	42a3      	cmp	r3, r4
 800c2a2:	d9fa      	bls.n	800c29a <_free_r+0x42>
 800c2a4:	6811      	ldr	r1, [r2, #0]
 800c2a6:	1850      	adds	r0, r2, r1
 800c2a8:	42a0      	cmp	r0, r4
 800c2aa:	d10b      	bne.n	800c2c4 <_free_r+0x6c>
 800c2ac:	6820      	ldr	r0, [r4, #0]
 800c2ae:	4401      	add	r1, r0
 800c2b0:	1850      	adds	r0, r2, r1
 800c2b2:	4283      	cmp	r3, r0
 800c2b4:	6011      	str	r1, [r2, #0]
 800c2b6:	d1e0      	bne.n	800c27a <_free_r+0x22>
 800c2b8:	6818      	ldr	r0, [r3, #0]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	4408      	add	r0, r1
 800c2be:	6010      	str	r0, [r2, #0]
 800c2c0:	6053      	str	r3, [r2, #4]
 800c2c2:	e7da      	b.n	800c27a <_free_r+0x22>
 800c2c4:	d902      	bls.n	800c2cc <_free_r+0x74>
 800c2c6:	230c      	movs	r3, #12
 800c2c8:	602b      	str	r3, [r5, #0]
 800c2ca:	e7d6      	b.n	800c27a <_free_r+0x22>
 800c2cc:	6820      	ldr	r0, [r4, #0]
 800c2ce:	1821      	adds	r1, r4, r0
 800c2d0:	428b      	cmp	r3, r1
 800c2d2:	bf01      	itttt	eq
 800c2d4:	6819      	ldreq	r1, [r3, #0]
 800c2d6:	685b      	ldreq	r3, [r3, #4]
 800c2d8:	1809      	addeq	r1, r1, r0
 800c2da:	6021      	streq	r1, [r4, #0]
 800c2dc:	6063      	str	r3, [r4, #4]
 800c2de:	6054      	str	r4, [r2, #4]
 800c2e0:	e7cb      	b.n	800c27a <_free_r+0x22>
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	200049c8 	.word	0x200049c8

0800c2e8 <malloc>:
 800c2e8:	4b02      	ldr	r3, [pc, #8]	@ (800c2f4 <malloc+0xc>)
 800c2ea:	4601      	mov	r1, r0
 800c2ec:	6818      	ldr	r0, [r3, #0]
 800c2ee:	f000 b825 	b.w	800c33c <_malloc_r>
 800c2f2:	bf00      	nop
 800c2f4:	2000003c 	.word	0x2000003c

0800c2f8 <sbrk_aligned>:
 800c2f8:	b570      	push	{r4, r5, r6, lr}
 800c2fa:	4e0f      	ldr	r6, [pc, #60]	@ (800c338 <sbrk_aligned+0x40>)
 800c2fc:	460c      	mov	r4, r1
 800c2fe:	6831      	ldr	r1, [r6, #0]
 800c300:	4605      	mov	r5, r0
 800c302:	b911      	cbnz	r1, 800c30a <sbrk_aligned+0x12>
 800c304:	f000 fe40 	bl	800cf88 <_sbrk_r>
 800c308:	6030      	str	r0, [r6, #0]
 800c30a:	4621      	mov	r1, r4
 800c30c:	4628      	mov	r0, r5
 800c30e:	f000 fe3b 	bl	800cf88 <_sbrk_r>
 800c312:	1c43      	adds	r3, r0, #1
 800c314:	d103      	bne.n	800c31e <sbrk_aligned+0x26>
 800c316:	f04f 34ff 	mov.w	r4, #4294967295
 800c31a:	4620      	mov	r0, r4
 800c31c:	bd70      	pop	{r4, r5, r6, pc}
 800c31e:	1cc4      	adds	r4, r0, #3
 800c320:	f024 0403 	bic.w	r4, r4, #3
 800c324:	42a0      	cmp	r0, r4
 800c326:	d0f8      	beq.n	800c31a <sbrk_aligned+0x22>
 800c328:	1a21      	subs	r1, r4, r0
 800c32a:	4628      	mov	r0, r5
 800c32c:	f000 fe2c 	bl	800cf88 <_sbrk_r>
 800c330:	3001      	adds	r0, #1
 800c332:	d1f2      	bne.n	800c31a <sbrk_aligned+0x22>
 800c334:	e7ef      	b.n	800c316 <sbrk_aligned+0x1e>
 800c336:	bf00      	nop
 800c338:	200049c4 	.word	0x200049c4

0800c33c <_malloc_r>:
 800c33c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c340:	1ccd      	adds	r5, r1, #3
 800c342:	f025 0503 	bic.w	r5, r5, #3
 800c346:	3508      	adds	r5, #8
 800c348:	2d0c      	cmp	r5, #12
 800c34a:	bf38      	it	cc
 800c34c:	250c      	movcc	r5, #12
 800c34e:	2d00      	cmp	r5, #0
 800c350:	4606      	mov	r6, r0
 800c352:	db01      	blt.n	800c358 <_malloc_r+0x1c>
 800c354:	42a9      	cmp	r1, r5
 800c356:	d904      	bls.n	800c362 <_malloc_r+0x26>
 800c358:	230c      	movs	r3, #12
 800c35a:	6033      	str	r3, [r6, #0]
 800c35c:	2000      	movs	r0, #0
 800c35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c362:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c438 <_malloc_r+0xfc>
 800c366:	f000 f869 	bl	800c43c <__malloc_lock>
 800c36a:	f8d8 3000 	ldr.w	r3, [r8]
 800c36e:	461c      	mov	r4, r3
 800c370:	bb44      	cbnz	r4, 800c3c4 <_malloc_r+0x88>
 800c372:	4629      	mov	r1, r5
 800c374:	4630      	mov	r0, r6
 800c376:	f7ff ffbf 	bl	800c2f8 <sbrk_aligned>
 800c37a:	1c43      	adds	r3, r0, #1
 800c37c:	4604      	mov	r4, r0
 800c37e:	d158      	bne.n	800c432 <_malloc_r+0xf6>
 800c380:	f8d8 4000 	ldr.w	r4, [r8]
 800c384:	4627      	mov	r7, r4
 800c386:	2f00      	cmp	r7, #0
 800c388:	d143      	bne.n	800c412 <_malloc_r+0xd6>
 800c38a:	2c00      	cmp	r4, #0
 800c38c:	d04b      	beq.n	800c426 <_malloc_r+0xea>
 800c38e:	6823      	ldr	r3, [r4, #0]
 800c390:	4639      	mov	r1, r7
 800c392:	4630      	mov	r0, r6
 800c394:	eb04 0903 	add.w	r9, r4, r3
 800c398:	f000 fdf6 	bl	800cf88 <_sbrk_r>
 800c39c:	4581      	cmp	r9, r0
 800c39e:	d142      	bne.n	800c426 <_malloc_r+0xea>
 800c3a0:	6821      	ldr	r1, [r4, #0]
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	1a6d      	subs	r5, r5, r1
 800c3a6:	4629      	mov	r1, r5
 800c3a8:	f7ff ffa6 	bl	800c2f8 <sbrk_aligned>
 800c3ac:	3001      	adds	r0, #1
 800c3ae:	d03a      	beq.n	800c426 <_malloc_r+0xea>
 800c3b0:	6823      	ldr	r3, [r4, #0]
 800c3b2:	442b      	add	r3, r5
 800c3b4:	6023      	str	r3, [r4, #0]
 800c3b6:	f8d8 3000 	ldr.w	r3, [r8]
 800c3ba:	685a      	ldr	r2, [r3, #4]
 800c3bc:	bb62      	cbnz	r2, 800c418 <_malloc_r+0xdc>
 800c3be:	f8c8 7000 	str.w	r7, [r8]
 800c3c2:	e00f      	b.n	800c3e4 <_malloc_r+0xa8>
 800c3c4:	6822      	ldr	r2, [r4, #0]
 800c3c6:	1b52      	subs	r2, r2, r5
 800c3c8:	d420      	bmi.n	800c40c <_malloc_r+0xd0>
 800c3ca:	2a0b      	cmp	r2, #11
 800c3cc:	d917      	bls.n	800c3fe <_malloc_r+0xc2>
 800c3ce:	1961      	adds	r1, r4, r5
 800c3d0:	42a3      	cmp	r3, r4
 800c3d2:	6025      	str	r5, [r4, #0]
 800c3d4:	bf18      	it	ne
 800c3d6:	6059      	strne	r1, [r3, #4]
 800c3d8:	6863      	ldr	r3, [r4, #4]
 800c3da:	bf08      	it	eq
 800c3dc:	f8c8 1000 	streq.w	r1, [r8]
 800c3e0:	5162      	str	r2, [r4, r5]
 800c3e2:	604b      	str	r3, [r1, #4]
 800c3e4:	4630      	mov	r0, r6
 800c3e6:	f000 f82f 	bl	800c448 <__malloc_unlock>
 800c3ea:	f104 000b 	add.w	r0, r4, #11
 800c3ee:	1d23      	adds	r3, r4, #4
 800c3f0:	f020 0007 	bic.w	r0, r0, #7
 800c3f4:	1ac2      	subs	r2, r0, r3
 800c3f6:	bf1c      	itt	ne
 800c3f8:	1a1b      	subne	r3, r3, r0
 800c3fa:	50a3      	strne	r3, [r4, r2]
 800c3fc:	e7af      	b.n	800c35e <_malloc_r+0x22>
 800c3fe:	6862      	ldr	r2, [r4, #4]
 800c400:	42a3      	cmp	r3, r4
 800c402:	bf0c      	ite	eq
 800c404:	f8c8 2000 	streq.w	r2, [r8]
 800c408:	605a      	strne	r2, [r3, #4]
 800c40a:	e7eb      	b.n	800c3e4 <_malloc_r+0xa8>
 800c40c:	4623      	mov	r3, r4
 800c40e:	6864      	ldr	r4, [r4, #4]
 800c410:	e7ae      	b.n	800c370 <_malloc_r+0x34>
 800c412:	463c      	mov	r4, r7
 800c414:	687f      	ldr	r7, [r7, #4]
 800c416:	e7b6      	b.n	800c386 <_malloc_r+0x4a>
 800c418:	461a      	mov	r2, r3
 800c41a:	685b      	ldr	r3, [r3, #4]
 800c41c:	42a3      	cmp	r3, r4
 800c41e:	d1fb      	bne.n	800c418 <_malloc_r+0xdc>
 800c420:	2300      	movs	r3, #0
 800c422:	6053      	str	r3, [r2, #4]
 800c424:	e7de      	b.n	800c3e4 <_malloc_r+0xa8>
 800c426:	230c      	movs	r3, #12
 800c428:	4630      	mov	r0, r6
 800c42a:	6033      	str	r3, [r6, #0]
 800c42c:	f000 f80c 	bl	800c448 <__malloc_unlock>
 800c430:	e794      	b.n	800c35c <_malloc_r+0x20>
 800c432:	6005      	str	r5, [r0, #0]
 800c434:	e7d6      	b.n	800c3e4 <_malloc_r+0xa8>
 800c436:	bf00      	nop
 800c438:	200049c8 	.word	0x200049c8

0800c43c <__malloc_lock>:
 800c43c:	4801      	ldr	r0, [pc, #4]	@ (800c444 <__malloc_lock+0x8>)
 800c43e:	f7ff b89a 	b.w	800b576 <__retarget_lock_acquire_recursive>
 800c442:	bf00      	nop
 800c444:	200049c0 	.word	0x200049c0

0800c448 <__malloc_unlock>:
 800c448:	4801      	ldr	r0, [pc, #4]	@ (800c450 <__malloc_unlock+0x8>)
 800c44a:	f7ff b895 	b.w	800b578 <__retarget_lock_release_recursive>
 800c44e:	bf00      	nop
 800c450:	200049c0 	.word	0x200049c0

0800c454 <_Balloc>:
 800c454:	b570      	push	{r4, r5, r6, lr}
 800c456:	69c6      	ldr	r6, [r0, #28]
 800c458:	4604      	mov	r4, r0
 800c45a:	460d      	mov	r5, r1
 800c45c:	b976      	cbnz	r6, 800c47c <_Balloc+0x28>
 800c45e:	2010      	movs	r0, #16
 800c460:	f7ff ff42 	bl	800c2e8 <malloc>
 800c464:	4602      	mov	r2, r0
 800c466:	61e0      	str	r0, [r4, #28]
 800c468:	b920      	cbnz	r0, 800c474 <_Balloc+0x20>
 800c46a:	216b      	movs	r1, #107	@ 0x6b
 800c46c:	4b17      	ldr	r3, [pc, #92]	@ (800c4cc <_Balloc+0x78>)
 800c46e:	4818      	ldr	r0, [pc, #96]	@ (800c4d0 <_Balloc+0x7c>)
 800c470:	f000 fd9a 	bl	800cfa8 <__assert_func>
 800c474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c478:	6006      	str	r6, [r0, #0]
 800c47a:	60c6      	str	r6, [r0, #12]
 800c47c:	69e6      	ldr	r6, [r4, #28]
 800c47e:	68f3      	ldr	r3, [r6, #12]
 800c480:	b183      	cbz	r3, 800c4a4 <_Balloc+0x50>
 800c482:	69e3      	ldr	r3, [r4, #28]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c48a:	b9b8      	cbnz	r0, 800c4bc <_Balloc+0x68>
 800c48c:	2101      	movs	r1, #1
 800c48e:	fa01 f605 	lsl.w	r6, r1, r5
 800c492:	1d72      	adds	r2, r6, #5
 800c494:	4620      	mov	r0, r4
 800c496:	0092      	lsls	r2, r2, #2
 800c498:	f000 fda4 	bl	800cfe4 <_calloc_r>
 800c49c:	b160      	cbz	r0, 800c4b8 <_Balloc+0x64>
 800c49e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c4a2:	e00e      	b.n	800c4c2 <_Balloc+0x6e>
 800c4a4:	2221      	movs	r2, #33	@ 0x21
 800c4a6:	2104      	movs	r1, #4
 800c4a8:	4620      	mov	r0, r4
 800c4aa:	f000 fd9b 	bl	800cfe4 <_calloc_r>
 800c4ae:	69e3      	ldr	r3, [r4, #28]
 800c4b0:	60f0      	str	r0, [r6, #12]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d1e4      	bne.n	800c482 <_Balloc+0x2e>
 800c4b8:	2000      	movs	r0, #0
 800c4ba:	bd70      	pop	{r4, r5, r6, pc}
 800c4bc:	6802      	ldr	r2, [r0, #0]
 800c4be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c4c8:	e7f7      	b.n	800c4ba <_Balloc+0x66>
 800c4ca:	bf00      	nop
 800c4cc:	0800e3d3 	.word	0x0800e3d3
 800c4d0:	0800e453 	.word	0x0800e453

0800c4d4 <_Bfree>:
 800c4d4:	b570      	push	{r4, r5, r6, lr}
 800c4d6:	69c6      	ldr	r6, [r0, #28]
 800c4d8:	4605      	mov	r5, r0
 800c4da:	460c      	mov	r4, r1
 800c4dc:	b976      	cbnz	r6, 800c4fc <_Bfree+0x28>
 800c4de:	2010      	movs	r0, #16
 800c4e0:	f7ff ff02 	bl	800c2e8 <malloc>
 800c4e4:	4602      	mov	r2, r0
 800c4e6:	61e8      	str	r0, [r5, #28]
 800c4e8:	b920      	cbnz	r0, 800c4f4 <_Bfree+0x20>
 800c4ea:	218f      	movs	r1, #143	@ 0x8f
 800c4ec:	4b08      	ldr	r3, [pc, #32]	@ (800c510 <_Bfree+0x3c>)
 800c4ee:	4809      	ldr	r0, [pc, #36]	@ (800c514 <_Bfree+0x40>)
 800c4f0:	f000 fd5a 	bl	800cfa8 <__assert_func>
 800c4f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c4f8:	6006      	str	r6, [r0, #0]
 800c4fa:	60c6      	str	r6, [r0, #12]
 800c4fc:	b13c      	cbz	r4, 800c50e <_Bfree+0x3a>
 800c4fe:	69eb      	ldr	r3, [r5, #28]
 800c500:	6862      	ldr	r2, [r4, #4]
 800c502:	68db      	ldr	r3, [r3, #12]
 800c504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c508:	6021      	str	r1, [r4, #0]
 800c50a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c50e:	bd70      	pop	{r4, r5, r6, pc}
 800c510:	0800e3d3 	.word	0x0800e3d3
 800c514:	0800e453 	.word	0x0800e453

0800c518 <__multadd>:
 800c518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c51c:	4607      	mov	r7, r0
 800c51e:	460c      	mov	r4, r1
 800c520:	461e      	mov	r6, r3
 800c522:	2000      	movs	r0, #0
 800c524:	690d      	ldr	r5, [r1, #16]
 800c526:	f101 0c14 	add.w	ip, r1, #20
 800c52a:	f8dc 3000 	ldr.w	r3, [ip]
 800c52e:	3001      	adds	r0, #1
 800c530:	b299      	uxth	r1, r3
 800c532:	fb02 6101 	mla	r1, r2, r1, r6
 800c536:	0c1e      	lsrs	r6, r3, #16
 800c538:	0c0b      	lsrs	r3, r1, #16
 800c53a:	fb02 3306 	mla	r3, r2, r6, r3
 800c53e:	b289      	uxth	r1, r1
 800c540:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c544:	4285      	cmp	r5, r0
 800c546:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c54a:	f84c 1b04 	str.w	r1, [ip], #4
 800c54e:	dcec      	bgt.n	800c52a <__multadd+0x12>
 800c550:	b30e      	cbz	r6, 800c596 <__multadd+0x7e>
 800c552:	68a3      	ldr	r3, [r4, #8]
 800c554:	42ab      	cmp	r3, r5
 800c556:	dc19      	bgt.n	800c58c <__multadd+0x74>
 800c558:	6861      	ldr	r1, [r4, #4]
 800c55a:	4638      	mov	r0, r7
 800c55c:	3101      	adds	r1, #1
 800c55e:	f7ff ff79 	bl	800c454 <_Balloc>
 800c562:	4680      	mov	r8, r0
 800c564:	b928      	cbnz	r0, 800c572 <__multadd+0x5a>
 800c566:	4602      	mov	r2, r0
 800c568:	21ba      	movs	r1, #186	@ 0xba
 800c56a:	4b0c      	ldr	r3, [pc, #48]	@ (800c59c <__multadd+0x84>)
 800c56c:	480c      	ldr	r0, [pc, #48]	@ (800c5a0 <__multadd+0x88>)
 800c56e:	f000 fd1b 	bl	800cfa8 <__assert_func>
 800c572:	6922      	ldr	r2, [r4, #16]
 800c574:	f104 010c 	add.w	r1, r4, #12
 800c578:	3202      	adds	r2, #2
 800c57a:	0092      	lsls	r2, r2, #2
 800c57c:	300c      	adds	r0, #12
 800c57e:	f7ff f80a 	bl	800b596 <memcpy>
 800c582:	4621      	mov	r1, r4
 800c584:	4638      	mov	r0, r7
 800c586:	f7ff ffa5 	bl	800c4d4 <_Bfree>
 800c58a:	4644      	mov	r4, r8
 800c58c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c590:	3501      	adds	r5, #1
 800c592:	615e      	str	r6, [r3, #20]
 800c594:	6125      	str	r5, [r4, #16]
 800c596:	4620      	mov	r0, r4
 800c598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c59c:	0800e442 	.word	0x0800e442
 800c5a0:	0800e453 	.word	0x0800e453

0800c5a4 <__hi0bits>:
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c5aa:	bf3a      	itte	cc
 800c5ac:	0403      	lslcc	r3, r0, #16
 800c5ae:	2010      	movcc	r0, #16
 800c5b0:	2000      	movcs	r0, #0
 800c5b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c5b6:	bf3c      	itt	cc
 800c5b8:	021b      	lslcc	r3, r3, #8
 800c5ba:	3008      	addcc	r0, #8
 800c5bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c5c0:	bf3c      	itt	cc
 800c5c2:	011b      	lslcc	r3, r3, #4
 800c5c4:	3004      	addcc	r0, #4
 800c5c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c5ca:	bf3c      	itt	cc
 800c5cc:	009b      	lslcc	r3, r3, #2
 800c5ce:	3002      	addcc	r0, #2
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	db05      	blt.n	800c5e0 <__hi0bits+0x3c>
 800c5d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c5d8:	f100 0001 	add.w	r0, r0, #1
 800c5dc:	bf08      	it	eq
 800c5de:	2020      	moveq	r0, #32
 800c5e0:	4770      	bx	lr

0800c5e2 <__lo0bits>:
 800c5e2:	6803      	ldr	r3, [r0, #0]
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	f013 0007 	ands.w	r0, r3, #7
 800c5ea:	d00b      	beq.n	800c604 <__lo0bits+0x22>
 800c5ec:	07d9      	lsls	r1, r3, #31
 800c5ee:	d421      	bmi.n	800c634 <__lo0bits+0x52>
 800c5f0:	0798      	lsls	r0, r3, #30
 800c5f2:	bf49      	itett	mi
 800c5f4:	085b      	lsrmi	r3, r3, #1
 800c5f6:	089b      	lsrpl	r3, r3, #2
 800c5f8:	2001      	movmi	r0, #1
 800c5fa:	6013      	strmi	r3, [r2, #0]
 800c5fc:	bf5c      	itt	pl
 800c5fe:	2002      	movpl	r0, #2
 800c600:	6013      	strpl	r3, [r2, #0]
 800c602:	4770      	bx	lr
 800c604:	b299      	uxth	r1, r3
 800c606:	b909      	cbnz	r1, 800c60c <__lo0bits+0x2a>
 800c608:	2010      	movs	r0, #16
 800c60a:	0c1b      	lsrs	r3, r3, #16
 800c60c:	b2d9      	uxtb	r1, r3
 800c60e:	b909      	cbnz	r1, 800c614 <__lo0bits+0x32>
 800c610:	3008      	adds	r0, #8
 800c612:	0a1b      	lsrs	r3, r3, #8
 800c614:	0719      	lsls	r1, r3, #28
 800c616:	bf04      	itt	eq
 800c618:	091b      	lsreq	r3, r3, #4
 800c61a:	3004      	addeq	r0, #4
 800c61c:	0799      	lsls	r1, r3, #30
 800c61e:	bf04      	itt	eq
 800c620:	089b      	lsreq	r3, r3, #2
 800c622:	3002      	addeq	r0, #2
 800c624:	07d9      	lsls	r1, r3, #31
 800c626:	d403      	bmi.n	800c630 <__lo0bits+0x4e>
 800c628:	085b      	lsrs	r3, r3, #1
 800c62a:	f100 0001 	add.w	r0, r0, #1
 800c62e:	d003      	beq.n	800c638 <__lo0bits+0x56>
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	4770      	bx	lr
 800c634:	2000      	movs	r0, #0
 800c636:	4770      	bx	lr
 800c638:	2020      	movs	r0, #32
 800c63a:	4770      	bx	lr

0800c63c <__i2b>:
 800c63c:	b510      	push	{r4, lr}
 800c63e:	460c      	mov	r4, r1
 800c640:	2101      	movs	r1, #1
 800c642:	f7ff ff07 	bl	800c454 <_Balloc>
 800c646:	4602      	mov	r2, r0
 800c648:	b928      	cbnz	r0, 800c656 <__i2b+0x1a>
 800c64a:	f240 1145 	movw	r1, #325	@ 0x145
 800c64e:	4b04      	ldr	r3, [pc, #16]	@ (800c660 <__i2b+0x24>)
 800c650:	4804      	ldr	r0, [pc, #16]	@ (800c664 <__i2b+0x28>)
 800c652:	f000 fca9 	bl	800cfa8 <__assert_func>
 800c656:	2301      	movs	r3, #1
 800c658:	6144      	str	r4, [r0, #20]
 800c65a:	6103      	str	r3, [r0, #16]
 800c65c:	bd10      	pop	{r4, pc}
 800c65e:	bf00      	nop
 800c660:	0800e442 	.word	0x0800e442
 800c664:	0800e453 	.word	0x0800e453

0800c668 <__multiply>:
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	4614      	mov	r4, r2
 800c66e:	690a      	ldr	r2, [r1, #16]
 800c670:	6923      	ldr	r3, [r4, #16]
 800c672:	460f      	mov	r7, r1
 800c674:	429a      	cmp	r2, r3
 800c676:	bfa2      	ittt	ge
 800c678:	4623      	movge	r3, r4
 800c67a:	460c      	movge	r4, r1
 800c67c:	461f      	movge	r7, r3
 800c67e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c682:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c686:	68a3      	ldr	r3, [r4, #8]
 800c688:	6861      	ldr	r1, [r4, #4]
 800c68a:	eb0a 0609 	add.w	r6, sl, r9
 800c68e:	42b3      	cmp	r3, r6
 800c690:	b085      	sub	sp, #20
 800c692:	bfb8      	it	lt
 800c694:	3101      	addlt	r1, #1
 800c696:	f7ff fedd 	bl	800c454 <_Balloc>
 800c69a:	b930      	cbnz	r0, 800c6aa <__multiply+0x42>
 800c69c:	4602      	mov	r2, r0
 800c69e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c6a2:	4b43      	ldr	r3, [pc, #268]	@ (800c7b0 <__multiply+0x148>)
 800c6a4:	4843      	ldr	r0, [pc, #268]	@ (800c7b4 <__multiply+0x14c>)
 800c6a6:	f000 fc7f 	bl	800cfa8 <__assert_func>
 800c6aa:	f100 0514 	add.w	r5, r0, #20
 800c6ae:	462b      	mov	r3, r5
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c6b6:	4543      	cmp	r3, r8
 800c6b8:	d321      	bcc.n	800c6fe <__multiply+0x96>
 800c6ba:	f107 0114 	add.w	r1, r7, #20
 800c6be:	f104 0214 	add.w	r2, r4, #20
 800c6c2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c6c6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c6ca:	9302      	str	r3, [sp, #8]
 800c6cc:	1b13      	subs	r3, r2, r4
 800c6ce:	3b15      	subs	r3, #21
 800c6d0:	f023 0303 	bic.w	r3, r3, #3
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	f104 0715 	add.w	r7, r4, #21
 800c6da:	42ba      	cmp	r2, r7
 800c6dc:	bf38      	it	cc
 800c6de:	2304      	movcc	r3, #4
 800c6e0:	9301      	str	r3, [sp, #4]
 800c6e2:	9b02      	ldr	r3, [sp, #8]
 800c6e4:	9103      	str	r1, [sp, #12]
 800c6e6:	428b      	cmp	r3, r1
 800c6e8:	d80c      	bhi.n	800c704 <__multiply+0x9c>
 800c6ea:	2e00      	cmp	r6, #0
 800c6ec:	dd03      	ble.n	800c6f6 <__multiply+0x8e>
 800c6ee:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d05a      	beq.n	800c7ac <__multiply+0x144>
 800c6f6:	6106      	str	r6, [r0, #16]
 800c6f8:	b005      	add	sp, #20
 800c6fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6fe:	f843 2b04 	str.w	r2, [r3], #4
 800c702:	e7d8      	b.n	800c6b6 <__multiply+0x4e>
 800c704:	f8b1 a000 	ldrh.w	sl, [r1]
 800c708:	f1ba 0f00 	cmp.w	sl, #0
 800c70c:	d023      	beq.n	800c756 <__multiply+0xee>
 800c70e:	46a9      	mov	r9, r5
 800c710:	f04f 0c00 	mov.w	ip, #0
 800c714:	f104 0e14 	add.w	lr, r4, #20
 800c718:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c71c:	f8d9 3000 	ldr.w	r3, [r9]
 800c720:	fa1f fb87 	uxth.w	fp, r7
 800c724:	b29b      	uxth	r3, r3
 800c726:	fb0a 330b 	mla	r3, sl, fp, r3
 800c72a:	4463      	add	r3, ip
 800c72c:	f8d9 c000 	ldr.w	ip, [r9]
 800c730:	0c3f      	lsrs	r7, r7, #16
 800c732:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c736:	fb0a c707 	mla	r7, sl, r7, ip
 800c73a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c73e:	b29b      	uxth	r3, r3
 800c740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c744:	4572      	cmp	r2, lr
 800c746:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c74a:	f849 3b04 	str.w	r3, [r9], #4
 800c74e:	d8e3      	bhi.n	800c718 <__multiply+0xb0>
 800c750:	9b01      	ldr	r3, [sp, #4]
 800c752:	f845 c003 	str.w	ip, [r5, r3]
 800c756:	9b03      	ldr	r3, [sp, #12]
 800c758:	3104      	adds	r1, #4
 800c75a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c75e:	f1b9 0f00 	cmp.w	r9, #0
 800c762:	d021      	beq.n	800c7a8 <__multiply+0x140>
 800c764:	46ae      	mov	lr, r5
 800c766:	f04f 0a00 	mov.w	sl, #0
 800c76a:	682b      	ldr	r3, [r5, #0]
 800c76c:	f104 0c14 	add.w	ip, r4, #20
 800c770:	f8bc b000 	ldrh.w	fp, [ip]
 800c774:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c778:	b29b      	uxth	r3, r3
 800c77a:	fb09 770b 	mla	r7, r9, fp, r7
 800c77e:	4457      	add	r7, sl
 800c780:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c784:	f84e 3b04 	str.w	r3, [lr], #4
 800c788:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c78c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c790:	f8be 3000 	ldrh.w	r3, [lr]
 800c794:	4562      	cmp	r2, ip
 800c796:	fb09 330a 	mla	r3, r9, sl, r3
 800c79a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c79e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c7a2:	d8e5      	bhi.n	800c770 <__multiply+0x108>
 800c7a4:	9f01      	ldr	r7, [sp, #4]
 800c7a6:	51eb      	str	r3, [r5, r7]
 800c7a8:	3504      	adds	r5, #4
 800c7aa:	e79a      	b.n	800c6e2 <__multiply+0x7a>
 800c7ac:	3e01      	subs	r6, #1
 800c7ae:	e79c      	b.n	800c6ea <__multiply+0x82>
 800c7b0:	0800e442 	.word	0x0800e442
 800c7b4:	0800e453 	.word	0x0800e453

0800c7b8 <__pow5mult>:
 800c7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c7bc:	4615      	mov	r5, r2
 800c7be:	f012 0203 	ands.w	r2, r2, #3
 800c7c2:	4607      	mov	r7, r0
 800c7c4:	460e      	mov	r6, r1
 800c7c6:	d007      	beq.n	800c7d8 <__pow5mult+0x20>
 800c7c8:	4c25      	ldr	r4, [pc, #148]	@ (800c860 <__pow5mult+0xa8>)
 800c7ca:	3a01      	subs	r2, #1
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c7d2:	f7ff fea1 	bl	800c518 <__multadd>
 800c7d6:	4606      	mov	r6, r0
 800c7d8:	10ad      	asrs	r5, r5, #2
 800c7da:	d03d      	beq.n	800c858 <__pow5mult+0xa0>
 800c7dc:	69fc      	ldr	r4, [r7, #28]
 800c7de:	b97c      	cbnz	r4, 800c800 <__pow5mult+0x48>
 800c7e0:	2010      	movs	r0, #16
 800c7e2:	f7ff fd81 	bl	800c2e8 <malloc>
 800c7e6:	4602      	mov	r2, r0
 800c7e8:	61f8      	str	r0, [r7, #28]
 800c7ea:	b928      	cbnz	r0, 800c7f8 <__pow5mult+0x40>
 800c7ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c7f0:	4b1c      	ldr	r3, [pc, #112]	@ (800c864 <__pow5mult+0xac>)
 800c7f2:	481d      	ldr	r0, [pc, #116]	@ (800c868 <__pow5mult+0xb0>)
 800c7f4:	f000 fbd8 	bl	800cfa8 <__assert_func>
 800c7f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c7fc:	6004      	str	r4, [r0, #0]
 800c7fe:	60c4      	str	r4, [r0, #12]
 800c800:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c804:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c808:	b94c      	cbnz	r4, 800c81e <__pow5mult+0x66>
 800c80a:	f240 2171 	movw	r1, #625	@ 0x271
 800c80e:	4638      	mov	r0, r7
 800c810:	f7ff ff14 	bl	800c63c <__i2b>
 800c814:	2300      	movs	r3, #0
 800c816:	4604      	mov	r4, r0
 800c818:	f8c8 0008 	str.w	r0, [r8, #8]
 800c81c:	6003      	str	r3, [r0, #0]
 800c81e:	f04f 0900 	mov.w	r9, #0
 800c822:	07eb      	lsls	r3, r5, #31
 800c824:	d50a      	bpl.n	800c83c <__pow5mult+0x84>
 800c826:	4631      	mov	r1, r6
 800c828:	4622      	mov	r2, r4
 800c82a:	4638      	mov	r0, r7
 800c82c:	f7ff ff1c 	bl	800c668 <__multiply>
 800c830:	4680      	mov	r8, r0
 800c832:	4631      	mov	r1, r6
 800c834:	4638      	mov	r0, r7
 800c836:	f7ff fe4d 	bl	800c4d4 <_Bfree>
 800c83a:	4646      	mov	r6, r8
 800c83c:	106d      	asrs	r5, r5, #1
 800c83e:	d00b      	beq.n	800c858 <__pow5mult+0xa0>
 800c840:	6820      	ldr	r0, [r4, #0]
 800c842:	b938      	cbnz	r0, 800c854 <__pow5mult+0x9c>
 800c844:	4622      	mov	r2, r4
 800c846:	4621      	mov	r1, r4
 800c848:	4638      	mov	r0, r7
 800c84a:	f7ff ff0d 	bl	800c668 <__multiply>
 800c84e:	6020      	str	r0, [r4, #0]
 800c850:	f8c0 9000 	str.w	r9, [r0]
 800c854:	4604      	mov	r4, r0
 800c856:	e7e4      	b.n	800c822 <__pow5mult+0x6a>
 800c858:	4630      	mov	r0, r6
 800c85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c85e:	bf00      	nop
 800c860:	0800e4ac 	.word	0x0800e4ac
 800c864:	0800e3d3 	.word	0x0800e3d3
 800c868:	0800e453 	.word	0x0800e453

0800c86c <__lshift>:
 800c86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c870:	460c      	mov	r4, r1
 800c872:	4607      	mov	r7, r0
 800c874:	4691      	mov	r9, r2
 800c876:	6923      	ldr	r3, [r4, #16]
 800c878:	6849      	ldr	r1, [r1, #4]
 800c87a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c884:	f108 0601 	add.w	r6, r8, #1
 800c888:	42b3      	cmp	r3, r6
 800c88a:	db0b      	blt.n	800c8a4 <__lshift+0x38>
 800c88c:	4638      	mov	r0, r7
 800c88e:	f7ff fde1 	bl	800c454 <_Balloc>
 800c892:	4605      	mov	r5, r0
 800c894:	b948      	cbnz	r0, 800c8aa <__lshift+0x3e>
 800c896:	4602      	mov	r2, r0
 800c898:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c89c:	4b27      	ldr	r3, [pc, #156]	@ (800c93c <__lshift+0xd0>)
 800c89e:	4828      	ldr	r0, [pc, #160]	@ (800c940 <__lshift+0xd4>)
 800c8a0:	f000 fb82 	bl	800cfa8 <__assert_func>
 800c8a4:	3101      	adds	r1, #1
 800c8a6:	005b      	lsls	r3, r3, #1
 800c8a8:	e7ee      	b.n	800c888 <__lshift+0x1c>
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	f100 0114 	add.w	r1, r0, #20
 800c8b0:	f100 0210 	add.w	r2, r0, #16
 800c8b4:	4618      	mov	r0, r3
 800c8b6:	4553      	cmp	r3, sl
 800c8b8:	db33      	blt.n	800c922 <__lshift+0xb6>
 800c8ba:	6920      	ldr	r0, [r4, #16]
 800c8bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c8c0:	f104 0314 	add.w	r3, r4, #20
 800c8c4:	f019 091f 	ands.w	r9, r9, #31
 800c8c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c8cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c8d0:	d02b      	beq.n	800c92a <__lshift+0xbe>
 800c8d2:	468a      	mov	sl, r1
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	f1c9 0e20 	rsb	lr, r9, #32
 800c8da:	6818      	ldr	r0, [r3, #0]
 800c8dc:	fa00 f009 	lsl.w	r0, r0, r9
 800c8e0:	4310      	orrs	r0, r2
 800c8e2:	f84a 0b04 	str.w	r0, [sl], #4
 800c8e6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ea:	459c      	cmp	ip, r3
 800c8ec:	fa22 f20e 	lsr.w	r2, r2, lr
 800c8f0:	d8f3      	bhi.n	800c8da <__lshift+0x6e>
 800c8f2:	ebac 0304 	sub.w	r3, ip, r4
 800c8f6:	3b15      	subs	r3, #21
 800c8f8:	f023 0303 	bic.w	r3, r3, #3
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	f104 0015 	add.w	r0, r4, #21
 800c902:	4584      	cmp	ip, r0
 800c904:	bf38      	it	cc
 800c906:	2304      	movcc	r3, #4
 800c908:	50ca      	str	r2, [r1, r3]
 800c90a:	b10a      	cbz	r2, 800c910 <__lshift+0xa4>
 800c90c:	f108 0602 	add.w	r6, r8, #2
 800c910:	3e01      	subs	r6, #1
 800c912:	4638      	mov	r0, r7
 800c914:	4621      	mov	r1, r4
 800c916:	612e      	str	r6, [r5, #16]
 800c918:	f7ff fddc 	bl	800c4d4 <_Bfree>
 800c91c:	4628      	mov	r0, r5
 800c91e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c922:	f842 0f04 	str.w	r0, [r2, #4]!
 800c926:	3301      	adds	r3, #1
 800c928:	e7c5      	b.n	800c8b6 <__lshift+0x4a>
 800c92a:	3904      	subs	r1, #4
 800c92c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c930:	459c      	cmp	ip, r3
 800c932:	f841 2f04 	str.w	r2, [r1, #4]!
 800c936:	d8f9      	bhi.n	800c92c <__lshift+0xc0>
 800c938:	e7ea      	b.n	800c910 <__lshift+0xa4>
 800c93a:	bf00      	nop
 800c93c:	0800e442 	.word	0x0800e442
 800c940:	0800e453 	.word	0x0800e453

0800c944 <__mcmp>:
 800c944:	4603      	mov	r3, r0
 800c946:	690a      	ldr	r2, [r1, #16]
 800c948:	6900      	ldr	r0, [r0, #16]
 800c94a:	b530      	push	{r4, r5, lr}
 800c94c:	1a80      	subs	r0, r0, r2
 800c94e:	d10e      	bne.n	800c96e <__mcmp+0x2a>
 800c950:	3314      	adds	r3, #20
 800c952:	3114      	adds	r1, #20
 800c954:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c958:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c95c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c960:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c964:	4295      	cmp	r5, r2
 800c966:	d003      	beq.n	800c970 <__mcmp+0x2c>
 800c968:	d205      	bcs.n	800c976 <__mcmp+0x32>
 800c96a:	f04f 30ff 	mov.w	r0, #4294967295
 800c96e:	bd30      	pop	{r4, r5, pc}
 800c970:	42a3      	cmp	r3, r4
 800c972:	d3f3      	bcc.n	800c95c <__mcmp+0x18>
 800c974:	e7fb      	b.n	800c96e <__mcmp+0x2a>
 800c976:	2001      	movs	r0, #1
 800c978:	e7f9      	b.n	800c96e <__mcmp+0x2a>
	...

0800c97c <__mdiff>:
 800c97c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	4689      	mov	r9, r1
 800c982:	4606      	mov	r6, r0
 800c984:	4611      	mov	r1, r2
 800c986:	4648      	mov	r0, r9
 800c988:	4614      	mov	r4, r2
 800c98a:	f7ff ffdb 	bl	800c944 <__mcmp>
 800c98e:	1e05      	subs	r5, r0, #0
 800c990:	d112      	bne.n	800c9b8 <__mdiff+0x3c>
 800c992:	4629      	mov	r1, r5
 800c994:	4630      	mov	r0, r6
 800c996:	f7ff fd5d 	bl	800c454 <_Balloc>
 800c99a:	4602      	mov	r2, r0
 800c99c:	b928      	cbnz	r0, 800c9aa <__mdiff+0x2e>
 800c99e:	f240 2137 	movw	r1, #567	@ 0x237
 800c9a2:	4b3e      	ldr	r3, [pc, #248]	@ (800ca9c <__mdiff+0x120>)
 800c9a4:	483e      	ldr	r0, [pc, #248]	@ (800caa0 <__mdiff+0x124>)
 800c9a6:	f000 faff 	bl	800cfa8 <__assert_func>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c9b0:	4610      	mov	r0, r2
 800c9b2:	b003      	add	sp, #12
 800c9b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b8:	bfbc      	itt	lt
 800c9ba:	464b      	movlt	r3, r9
 800c9bc:	46a1      	movlt	r9, r4
 800c9be:	4630      	mov	r0, r6
 800c9c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c9c4:	bfba      	itte	lt
 800c9c6:	461c      	movlt	r4, r3
 800c9c8:	2501      	movlt	r5, #1
 800c9ca:	2500      	movge	r5, #0
 800c9cc:	f7ff fd42 	bl	800c454 <_Balloc>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	b918      	cbnz	r0, 800c9dc <__mdiff+0x60>
 800c9d4:	f240 2145 	movw	r1, #581	@ 0x245
 800c9d8:	4b30      	ldr	r3, [pc, #192]	@ (800ca9c <__mdiff+0x120>)
 800c9da:	e7e3      	b.n	800c9a4 <__mdiff+0x28>
 800c9dc:	f100 0b14 	add.w	fp, r0, #20
 800c9e0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c9e4:	f109 0310 	add.w	r3, r9, #16
 800c9e8:	60c5      	str	r5, [r0, #12]
 800c9ea:	f04f 0c00 	mov.w	ip, #0
 800c9ee:	f109 0514 	add.w	r5, r9, #20
 800c9f2:	46d9      	mov	r9, fp
 800c9f4:	6926      	ldr	r6, [r4, #16]
 800c9f6:	f104 0e14 	add.w	lr, r4, #20
 800c9fa:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c9fe:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ca02:	9301      	str	r3, [sp, #4]
 800ca04:	9b01      	ldr	r3, [sp, #4]
 800ca06:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ca0a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ca0e:	b281      	uxth	r1, r0
 800ca10:	9301      	str	r3, [sp, #4]
 800ca12:	fa1f f38a 	uxth.w	r3, sl
 800ca16:	1a5b      	subs	r3, r3, r1
 800ca18:	0c00      	lsrs	r0, r0, #16
 800ca1a:	4463      	add	r3, ip
 800ca1c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ca20:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ca24:	b29b      	uxth	r3, r3
 800ca26:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ca2a:	4576      	cmp	r6, lr
 800ca2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca30:	f849 3b04 	str.w	r3, [r9], #4
 800ca34:	d8e6      	bhi.n	800ca04 <__mdiff+0x88>
 800ca36:	1b33      	subs	r3, r6, r4
 800ca38:	3b15      	subs	r3, #21
 800ca3a:	f023 0303 	bic.w	r3, r3, #3
 800ca3e:	3415      	adds	r4, #21
 800ca40:	3304      	adds	r3, #4
 800ca42:	42a6      	cmp	r6, r4
 800ca44:	bf38      	it	cc
 800ca46:	2304      	movcc	r3, #4
 800ca48:	441d      	add	r5, r3
 800ca4a:	445b      	add	r3, fp
 800ca4c:	461e      	mov	r6, r3
 800ca4e:	462c      	mov	r4, r5
 800ca50:	4544      	cmp	r4, r8
 800ca52:	d30e      	bcc.n	800ca72 <__mdiff+0xf6>
 800ca54:	f108 0103 	add.w	r1, r8, #3
 800ca58:	1b49      	subs	r1, r1, r5
 800ca5a:	f021 0103 	bic.w	r1, r1, #3
 800ca5e:	3d03      	subs	r5, #3
 800ca60:	45a8      	cmp	r8, r5
 800ca62:	bf38      	it	cc
 800ca64:	2100      	movcc	r1, #0
 800ca66:	440b      	add	r3, r1
 800ca68:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ca6c:	b199      	cbz	r1, 800ca96 <__mdiff+0x11a>
 800ca6e:	6117      	str	r7, [r2, #16]
 800ca70:	e79e      	b.n	800c9b0 <__mdiff+0x34>
 800ca72:	46e6      	mov	lr, ip
 800ca74:	f854 1b04 	ldr.w	r1, [r4], #4
 800ca78:	fa1f fc81 	uxth.w	ip, r1
 800ca7c:	44f4      	add	ip, lr
 800ca7e:	0c08      	lsrs	r0, r1, #16
 800ca80:	4471      	add	r1, lr
 800ca82:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ca86:	b289      	uxth	r1, r1
 800ca88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ca8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ca90:	f846 1b04 	str.w	r1, [r6], #4
 800ca94:	e7dc      	b.n	800ca50 <__mdiff+0xd4>
 800ca96:	3f01      	subs	r7, #1
 800ca98:	e7e6      	b.n	800ca68 <__mdiff+0xec>
 800ca9a:	bf00      	nop
 800ca9c:	0800e442 	.word	0x0800e442
 800caa0:	0800e453 	.word	0x0800e453

0800caa4 <__d2b>:
 800caa4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800caa8:	2101      	movs	r1, #1
 800caaa:	4690      	mov	r8, r2
 800caac:	4699      	mov	r9, r3
 800caae:	9e08      	ldr	r6, [sp, #32]
 800cab0:	f7ff fcd0 	bl	800c454 <_Balloc>
 800cab4:	4604      	mov	r4, r0
 800cab6:	b930      	cbnz	r0, 800cac6 <__d2b+0x22>
 800cab8:	4602      	mov	r2, r0
 800caba:	f240 310f 	movw	r1, #783	@ 0x30f
 800cabe:	4b23      	ldr	r3, [pc, #140]	@ (800cb4c <__d2b+0xa8>)
 800cac0:	4823      	ldr	r0, [pc, #140]	@ (800cb50 <__d2b+0xac>)
 800cac2:	f000 fa71 	bl	800cfa8 <__assert_func>
 800cac6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800caca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cace:	b10d      	cbz	r5, 800cad4 <__d2b+0x30>
 800cad0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cad4:	9301      	str	r3, [sp, #4]
 800cad6:	f1b8 0300 	subs.w	r3, r8, #0
 800cada:	d024      	beq.n	800cb26 <__d2b+0x82>
 800cadc:	4668      	mov	r0, sp
 800cade:	9300      	str	r3, [sp, #0]
 800cae0:	f7ff fd7f 	bl	800c5e2 <__lo0bits>
 800cae4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cae8:	b1d8      	cbz	r0, 800cb22 <__d2b+0x7e>
 800caea:	f1c0 0320 	rsb	r3, r0, #32
 800caee:	fa02 f303 	lsl.w	r3, r2, r3
 800caf2:	430b      	orrs	r3, r1
 800caf4:	40c2      	lsrs	r2, r0
 800caf6:	6163      	str	r3, [r4, #20]
 800caf8:	9201      	str	r2, [sp, #4]
 800cafa:	9b01      	ldr	r3, [sp, #4]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	bf0c      	ite	eq
 800cb00:	2201      	moveq	r2, #1
 800cb02:	2202      	movne	r2, #2
 800cb04:	61a3      	str	r3, [r4, #24]
 800cb06:	6122      	str	r2, [r4, #16]
 800cb08:	b1ad      	cbz	r5, 800cb36 <__d2b+0x92>
 800cb0a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cb0e:	4405      	add	r5, r0
 800cb10:	6035      	str	r5, [r6, #0]
 800cb12:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cb16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb18:	6018      	str	r0, [r3, #0]
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	b002      	add	sp, #8
 800cb1e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800cb22:	6161      	str	r1, [r4, #20]
 800cb24:	e7e9      	b.n	800cafa <__d2b+0x56>
 800cb26:	a801      	add	r0, sp, #4
 800cb28:	f7ff fd5b 	bl	800c5e2 <__lo0bits>
 800cb2c:	9b01      	ldr	r3, [sp, #4]
 800cb2e:	2201      	movs	r2, #1
 800cb30:	6163      	str	r3, [r4, #20]
 800cb32:	3020      	adds	r0, #32
 800cb34:	e7e7      	b.n	800cb06 <__d2b+0x62>
 800cb36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800cb3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb3e:	6030      	str	r0, [r6, #0]
 800cb40:	6918      	ldr	r0, [r3, #16]
 800cb42:	f7ff fd2f 	bl	800c5a4 <__hi0bits>
 800cb46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb4a:	e7e4      	b.n	800cb16 <__d2b+0x72>
 800cb4c:	0800e442 	.word	0x0800e442
 800cb50:	0800e453 	.word	0x0800e453

0800cb54 <__ssputs_r>:
 800cb54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb58:	461f      	mov	r7, r3
 800cb5a:	688e      	ldr	r6, [r1, #8]
 800cb5c:	4682      	mov	sl, r0
 800cb5e:	42be      	cmp	r6, r7
 800cb60:	460c      	mov	r4, r1
 800cb62:	4690      	mov	r8, r2
 800cb64:	680b      	ldr	r3, [r1, #0]
 800cb66:	d82d      	bhi.n	800cbc4 <__ssputs_r+0x70>
 800cb68:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cb6c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800cb70:	d026      	beq.n	800cbc0 <__ssputs_r+0x6c>
 800cb72:	6965      	ldr	r5, [r4, #20]
 800cb74:	6909      	ldr	r1, [r1, #16]
 800cb76:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb7a:	eba3 0901 	sub.w	r9, r3, r1
 800cb7e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cb82:	1c7b      	adds	r3, r7, #1
 800cb84:	444b      	add	r3, r9
 800cb86:	106d      	asrs	r5, r5, #1
 800cb88:	429d      	cmp	r5, r3
 800cb8a:	bf38      	it	cc
 800cb8c:	461d      	movcc	r5, r3
 800cb8e:	0553      	lsls	r3, r2, #21
 800cb90:	d527      	bpl.n	800cbe2 <__ssputs_r+0x8e>
 800cb92:	4629      	mov	r1, r5
 800cb94:	f7ff fbd2 	bl	800c33c <_malloc_r>
 800cb98:	4606      	mov	r6, r0
 800cb9a:	b360      	cbz	r0, 800cbf6 <__ssputs_r+0xa2>
 800cb9c:	464a      	mov	r2, r9
 800cb9e:	6921      	ldr	r1, [r4, #16]
 800cba0:	f7fe fcf9 	bl	800b596 <memcpy>
 800cba4:	89a3      	ldrh	r3, [r4, #12]
 800cba6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800cbaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cbae:	81a3      	strh	r3, [r4, #12]
 800cbb0:	6126      	str	r6, [r4, #16]
 800cbb2:	444e      	add	r6, r9
 800cbb4:	6026      	str	r6, [r4, #0]
 800cbb6:	463e      	mov	r6, r7
 800cbb8:	6165      	str	r5, [r4, #20]
 800cbba:	eba5 0509 	sub.w	r5, r5, r9
 800cbbe:	60a5      	str	r5, [r4, #8]
 800cbc0:	42be      	cmp	r6, r7
 800cbc2:	d900      	bls.n	800cbc6 <__ssputs_r+0x72>
 800cbc4:	463e      	mov	r6, r7
 800cbc6:	4632      	mov	r2, r6
 800cbc8:	4641      	mov	r1, r8
 800cbca:	6820      	ldr	r0, [r4, #0]
 800cbcc:	f000 f9c2 	bl	800cf54 <memmove>
 800cbd0:	2000      	movs	r0, #0
 800cbd2:	68a3      	ldr	r3, [r4, #8]
 800cbd4:	1b9b      	subs	r3, r3, r6
 800cbd6:	60a3      	str	r3, [r4, #8]
 800cbd8:	6823      	ldr	r3, [r4, #0]
 800cbda:	4433      	add	r3, r6
 800cbdc:	6023      	str	r3, [r4, #0]
 800cbde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbe2:	462a      	mov	r2, r5
 800cbe4:	f000 fa24 	bl	800d030 <_realloc_r>
 800cbe8:	4606      	mov	r6, r0
 800cbea:	2800      	cmp	r0, #0
 800cbec:	d1e0      	bne.n	800cbb0 <__ssputs_r+0x5c>
 800cbee:	4650      	mov	r0, sl
 800cbf0:	6921      	ldr	r1, [r4, #16]
 800cbf2:	f7ff fb31 	bl	800c258 <_free_r>
 800cbf6:	230c      	movs	r3, #12
 800cbf8:	f8ca 3000 	str.w	r3, [sl]
 800cbfc:	89a3      	ldrh	r3, [r4, #12]
 800cbfe:	f04f 30ff 	mov.w	r0, #4294967295
 800cc02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cc06:	81a3      	strh	r3, [r4, #12]
 800cc08:	e7e9      	b.n	800cbde <__ssputs_r+0x8a>
	...

0800cc0c <_svfiprintf_r>:
 800cc0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc10:	4698      	mov	r8, r3
 800cc12:	898b      	ldrh	r3, [r1, #12]
 800cc14:	4607      	mov	r7, r0
 800cc16:	061b      	lsls	r3, r3, #24
 800cc18:	460d      	mov	r5, r1
 800cc1a:	4614      	mov	r4, r2
 800cc1c:	b09d      	sub	sp, #116	@ 0x74
 800cc1e:	d510      	bpl.n	800cc42 <_svfiprintf_r+0x36>
 800cc20:	690b      	ldr	r3, [r1, #16]
 800cc22:	b973      	cbnz	r3, 800cc42 <_svfiprintf_r+0x36>
 800cc24:	2140      	movs	r1, #64	@ 0x40
 800cc26:	f7ff fb89 	bl	800c33c <_malloc_r>
 800cc2a:	6028      	str	r0, [r5, #0]
 800cc2c:	6128      	str	r0, [r5, #16]
 800cc2e:	b930      	cbnz	r0, 800cc3e <_svfiprintf_r+0x32>
 800cc30:	230c      	movs	r3, #12
 800cc32:	603b      	str	r3, [r7, #0]
 800cc34:	f04f 30ff 	mov.w	r0, #4294967295
 800cc38:	b01d      	add	sp, #116	@ 0x74
 800cc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc3e:	2340      	movs	r3, #64	@ 0x40
 800cc40:	616b      	str	r3, [r5, #20]
 800cc42:	2300      	movs	r3, #0
 800cc44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc46:	2320      	movs	r3, #32
 800cc48:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cc4c:	2330      	movs	r3, #48	@ 0x30
 800cc4e:	f04f 0901 	mov.w	r9, #1
 800cc52:	f8cd 800c 	str.w	r8, [sp, #12]
 800cc56:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800cdf0 <_svfiprintf_r+0x1e4>
 800cc5a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cc5e:	4623      	mov	r3, r4
 800cc60:	469a      	mov	sl, r3
 800cc62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cc66:	b10a      	cbz	r2, 800cc6c <_svfiprintf_r+0x60>
 800cc68:	2a25      	cmp	r2, #37	@ 0x25
 800cc6a:	d1f9      	bne.n	800cc60 <_svfiprintf_r+0x54>
 800cc6c:	ebba 0b04 	subs.w	fp, sl, r4
 800cc70:	d00b      	beq.n	800cc8a <_svfiprintf_r+0x7e>
 800cc72:	465b      	mov	r3, fp
 800cc74:	4622      	mov	r2, r4
 800cc76:	4629      	mov	r1, r5
 800cc78:	4638      	mov	r0, r7
 800cc7a:	f7ff ff6b 	bl	800cb54 <__ssputs_r>
 800cc7e:	3001      	adds	r0, #1
 800cc80:	f000 80a7 	beq.w	800cdd2 <_svfiprintf_r+0x1c6>
 800cc84:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc86:	445a      	add	r2, fp
 800cc88:	9209      	str	r2, [sp, #36]	@ 0x24
 800cc8a:	f89a 3000 	ldrb.w	r3, [sl]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	f000 809f 	beq.w	800cdd2 <_svfiprintf_r+0x1c6>
 800cc94:	2300      	movs	r3, #0
 800cc96:	f04f 32ff 	mov.w	r2, #4294967295
 800cc9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cc9e:	f10a 0a01 	add.w	sl, sl, #1
 800cca2:	9304      	str	r3, [sp, #16]
 800cca4:	9307      	str	r3, [sp, #28]
 800cca6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ccaa:	931a      	str	r3, [sp, #104]	@ 0x68
 800ccac:	4654      	mov	r4, sl
 800ccae:	2205      	movs	r2, #5
 800ccb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ccb4:	484e      	ldr	r0, [pc, #312]	@ (800cdf0 <_svfiprintf_r+0x1e4>)
 800ccb6:	f7fe fc60 	bl	800b57a <memchr>
 800ccba:	9a04      	ldr	r2, [sp, #16]
 800ccbc:	b9d8      	cbnz	r0, 800ccf6 <_svfiprintf_r+0xea>
 800ccbe:	06d0      	lsls	r0, r2, #27
 800ccc0:	bf44      	itt	mi
 800ccc2:	2320      	movmi	r3, #32
 800ccc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccc8:	0711      	lsls	r1, r2, #28
 800ccca:	bf44      	itt	mi
 800cccc:	232b      	movmi	r3, #43	@ 0x2b
 800ccce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ccd2:	f89a 3000 	ldrb.w	r3, [sl]
 800ccd6:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccd8:	d015      	beq.n	800cd06 <_svfiprintf_r+0xfa>
 800ccda:	4654      	mov	r4, sl
 800ccdc:	2000      	movs	r0, #0
 800ccde:	f04f 0c0a 	mov.w	ip, #10
 800cce2:	9a07      	ldr	r2, [sp, #28]
 800cce4:	4621      	mov	r1, r4
 800cce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccea:	3b30      	subs	r3, #48	@ 0x30
 800ccec:	2b09      	cmp	r3, #9
 800ccee:	d94b      	bls.n	800cd88 <_svfiprintf_r+0x17c>
 800ccf0:	b1b0      	cbz	r0, 800cd20 <_svfiprintf_r+0x114>
 800ccf2:	9207      	str	r2, [sp, #28]
 800ccf4:	e014      	b.n	800cd20 <_svfiprintf_r+0x114>
 800ccf6:	eba0 0308 	sub.w	r3, r0, r8
 800ccfa:	fa09 f303 	lsl.w	r3, r9, r3
 800ccfe:	4313      	orrs	r3, r2
 800cd00:	46a2      	mov	sl, r4
 800cd02:	9304      	str	r3, [sp, #16]
 800cd04:	e7d2      	b.n	800ccac <_svfiprintf_r+0xa0>
 800cd06:	9b03      	ldr	r3, [sp, #12]
 800cd08:	1d19      	adds	r1, r3, #4
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	9103      	str	r1, [sp, #12]
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	bfbb      	ittet	lt
 800cd12:	425b      	neglt	r3, r3
 800cd14:	f042 0202 	orrlt.w	r2, r2, #2
 800cd18:	9307      	strge	r3, [sp, #28]
 800cd1a:	9307      	strlt	r3, [sp, #28]
 800cd1c:	bfb8      	it	lt
 800cd1e:	9204      	strlt	r2, [sp, #16]
 800cd20:	7823      	ldrb	r3, [r4, #0]
 800cd22:	2b2e      	cmp	r3, #46	@ 0x2e
 800cd24:	d10a      	bne.n	800cd3c <_svfiprintf_r+0x130>
 800cd26:	7863      	ldrb	r3, [r4, #1]
 800cd28:	2b2a      	cmp	r3, #42	@ 0x2a
 800cd2a:	d132      	bne.n	800cd92 <_svfiprintf_r+0x186>
 800cd2c:	9b03      	ldr	r3, [sp, #12]
 800cd2e:	3402      	adds	r4, #2
 800cd30:	1d1a      	adds	r2, r3, #4
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	9203      	str	r2, [sp, #12]
 800cd36:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cd3a:	9305      	str	r3, [sp, #20]
 800cd3c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800cdf4 <_svfiprintf_r+0x1e8>
 800cd40:	2203      	movs	r2, #3
 800cd42:	4650      	mov	r0, sl
 800cd44:	7821      	ldrb	r1, [r4, #0]
 800cd46:	f7fe fc18 	bl	800b57a <memchr>
 800cd4a:	b138      	cbz	r0, 800cd5c <_svfiprintf_r+0x150>
 800cd4c:	2240      	movs	r2, #64	@ 0x40
 800cd4e:	9b04      	ldr	r3, [sp, #16]
 800cd50:	eba0 000a 	sub.w	r0, r0, sl
 800cd54:	4082      	lsls	r2, r0
 800cd56:	4313      	orrs	r3, r2
 800cd58:	3401      	adds	r4, #1
 800cd5a:	9304      	str	r3, [sp, #16]
 800cd5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd60:	2206      	movs	r2, #6
 800cd62:	4825      	ldr	r0, [pc, #148]	@ (800cdf8 <_svfiprintf_r+0x1ec>)
 800cd64:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cd68:	f7fe fc07 	bl	800b57a <memchr>
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	d036      	beq.n	800cdde <_svfiprintf_r+0x1d2>
 800cd70:	4b22      	ldr	r3, [pc, #136]	@ (800cdfc <_svfiprintf_r+0x1f0>)
 800cd72:	bb1b      	cbnz	r3, 800cdbc <_svfiprintf_r+0x1b0>
 800cd74:	9b03      	ldr	r3, [sp, #12]
 800cd76:	3307      	adds	r3, #7
 800cd78:	f023 0307 	bic.w	r3, r3, #7
 800cd7c:	3308      	adds	r3, #8
 800cd7e:	9303      	str	r3, [sp, #12]
 800cd80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd82:	4433      	add	r3, r6
 800cd84:	9309      	str	r3, [sp, #36]	@ 0x24
 800cd86:	e76a      	b.n	800cc5e <_svfiprintf_r+0x52>
 800cd88:	460c      	mov	r4, r1
 800cd8a:	2001      	movs	r0, #1
 800cd8c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cd90:	e7a8      	b.n	800cce4 <_svfiprintf_r+0xd8>
 800cd92:	2300      	movs	r3, #0
 800cd94:	f04f 0c0a 	mov.w	ip, #10
 800cd98:	4619      	mov	r1, r3
 800cd9a:	3401      	adds	r4, #1
 800cd9c:	9305      	str	r3, [sp, #20]
 800cd9e:	4620      	mov	r0, r4
 800cda0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cda4:	3a30      	subs	r2, #48	@ 0x30
 800cda6:	2a09      	cmp	r2, #9
 800cda8:	d903      	bls.n	800cdb2 <_svfiprintf_r+0x1a6>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d0c6      	beq.n	800cd3c <_svfiprintf_r+0x130>
 800cdae:	9105      	str	r1, [sp, #20]
 800cdb0:	e7c4      	b.n	800cd3c <_svfiprintf_r+0x130>
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	2301      	movs	r3, #1
 800cdb6:	fb0c 2101 	mla	r1, ip, r1, r2
 800cdba:	e7f0      	b.n	800cd9e <_svfiprintf_r+0x192>
 800cdbc:	ab03      	add	r3, sp, #12
 800cdbe:	9300      	str	r3, [sp, #0]
 800cdc0:	462a      	mov	r2, r5
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	4b0e      	ldr	r3, [pc, #56]	@ (800ce00 <_svfiprintf_r+0x1f4>)
 800cdc6:	a904      	add	r1, sp, #16
 800cdc8:	f7fd fe64 	bl	800aa94 <_printf_float>
 800cdcc:	1c42      	adds	r2, r0, #1
 800cdce:	4606      	mov	r6, r0
 800cdd0:	d1d6      	bne.n	800cd80 <_svfiprintf_r+0x174>
 800cdd2:	89ab      	ldrh	r3, [r5, #12]
 800cdd4:	065b      	lsls	r3, r3, #25
 800cdd6:	f53f af2d 	bmi.w	800cc34 <_svfiprintf_r+0x28>
 800cdda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cddc:	e72c      	b.n	800cc38 <_svfiprintf_r+0x2c>
 800cdde:	ab03      	add	r3, sp, #12
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	462a      	mov	r2, r5
 800cde4:	4638      	mov	r0, r7
 800cde6:	4b06      	ldr	r3, [pc, #24]	@ (800ce00 <_svfiprintf_r+0x1f4>)
 800cde8:	a904      	add	r1, sp, #16
 800cdea:	f7fe f8f1 	bl	800afd0 <_printf_i>
 800cdee:	e7ed      	b.n	800cdcc <_svfiprintf_r+0x1c0>
 800cdf0:	0800e5a8 	.word	0x0800e5a8
 800cdf4:	0800e5ae 	.word	0x0800e5ae
 800cdf8:	0800e5b2 	.word	0x0800e5b2
 800cdfc:	0800aa95 	.word	0x0800aa95
 800ce00:	0800cb55 	.word	0x0800cb55

0800ce04 <__sflush_r>:
 800ce04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0a:	0716      	lsls	r6, r2, #28
 800ce0c:	4605      	mov	r5, r0
 800ce0e:	460c      	mov	r4, r1
 800ce10:	d454      	bmi.n	800cebc <__sflush_r+0xb8>
 800ce12:	684b      	ldr	r3, [r1, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	dc02      	bgt.n	800ce1e <__sflush_r+0x1a>
 800ce18:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	dd48      	ble.n	800ceb0 <__sflush_r+0xac>
 800ce1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce20:	2e00      	cmp	r6, #0
 800ce22:	d045      	beq.n	800ceb0 <__sflush_r+0xac>
 800ce24:	2300      	movs	r3, #0
 800ce26:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ce2a:	682f      	ldr	r7, [r5, #0]
 800ce2c:	6a21      	ldr	r1, [r4, #32]
 800ce2e:	602b      	str	r3, [r5, #0]
 800ce30:	d030      	beq.n	800ce94 <__sflush_r+0x90>
 800ce32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ce34:	89a3      	ldrh	r3, [r4, #12]
 800ce36:	0759      	lsls	r1, r3, #29
 800ce38:	d505      	bpl.n	800ce46 <__sflush_r+0x42>
 800ce3a:	6863      	ldr	r3, [r4, #4]
 800ce3c:	1ad2      	subs	r2, r2, r3
 800ce3e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ce40:	b10b      	cbz	r3, 800ce46 <__sflush_r+0x42>
 800ce42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ce44:	1ad2      	subs	r2, r2, r3
 800ce46:	2300      	movs	r3, #0
 800ce48:	4628      	mov	r0, r5
 800ce4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ce4c:	6a21      	ldr	r1, [r4, #32]
 800ce4e:	47b0      	blx	r6
 800ce50:	1c43      	adds	r3, r0, #1
 800ce52:	89a3      	ldrh	r3, [r4, #12]
 800ce54:	d106      	bne.n	800ce64 <__sflush_r+0x60>
 800ce56:	6829      	ldr	r1, [r5, #0]
 800ce58:	291d      	cmp	r1, #29
 800ce5a:	d82b      	bhi.n	800ceb4 <__sflush_r+0xb0>
 800ce5c:	4a28      	ldr	r2, [pc, #160]	@ (800cf00 <__sflush_r+0xfc>)
 800ce5e:	410a      	asrs	r2, r1
 800ce60:	07d6      	lsls	r6, r2, #31
 800ce62:	d427      	bmi.n	800ceb4 <__sflush_r+0xb0>
 800ce64:	2200      	movs	r2, #0
 800ce66:	6062      	str	r2, [r4, #4]
 800ce68:	6922      	ldr	r2, [r4, #16]
 800ce6a:	04d9      	lsls	r1, r3, #19
 800ce6c:	6022      	str	r2, [r4, #0]
 800ce6e:	d504      	bpl.n	800ce7a <__sflush_r+0x76>
 800ce70:	1c42      	adds	r2, r0, #1
 800ce72:	d101      	bne.n	800ce78 <__sflush_r+0x74>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	b903      	cbnz	r3, 800ce7a <__sflush_r+0x76>
 800ce78:	6560      	str	r0, [r4, #84]	@ 0x54
 800ce7a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ce7c:	602f      	str	r7, [r5, #0]
 800ce7e:	b1b9      	cbz	r1, 800ceb0 <__sflush_r+0xac>
 800ce80:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ce84:	4299      	cmp	r1, r3
 800ce86:	d002      	beq.n	800ce8e <__sflush_r+0x8a>
 800ce88:	4628      	mov	r0, r5
 800ce8a:	f7ff f9e5 	bl	800c258 <_free_r>
 800ce8e:	2300      	movs	r3, #0
 800ce90:	6363      	str	r3, [r4, #52]	@ 0x34
 800ce92:	e00d      	b.n	800ceb0 <__sflush_r+0xac>
 800ce94:	2301      	movs	r3, #1
 800ce96:	4628      	mov	r0, r5
 800ce98:	47b0      	blx	r6
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	1c50      	adds	r0, r2, #1
 800ce9e:	d1c9      	bne.n	800ce34 <__sflush_r+0x30>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d0c6      	beq.n	800ce34 <__sflush_r+0x30>
 800cea6:	2b1d      	cmp	r3, #29
 800cea8:	d001      	beq.n	800ceae <__sflush_r+0xaa>
 800ceaa:	2b16      	cmp	r3, #22
 800ceac:	d11d      	bne.n	800ceea <__sflush_r+0xe6>
 800ceae:	602f      	str	r7, [r5, #0]
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	e021      	b.n	800cef8 <__sflush_r+0xf4>
 800ceb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceb8:	b21b      	sxth	r3, r3
 800ceba:	e01a      	b.n	800cef2 <__sflush_r+0xee>
 800cebc:	690f      	ldr	r7, [r1, #16]
 800cebe:	2f00      	cmp	r7, #0
 800cec0:	d0f6      	beq.n	800ceb0 <__sflush_r+0xac>
 800cec2:	0793      	lsls	r3, r2, #30
 800cec4:	bf18      	it	ne
 800cec6:	2300      	movne	r3, #0
 800cec8:	680e      	ldr	r6, [r1, #0]
 800ceca:	bf08      	it	eq
 800cecc:	694b      	ldreq	r3, [r1, #20]
 800cece:	1bf6      	subs	r6, r6, r7
 800ced0:	600f      	str	r7, [r1, #0]
 800ced2:	608b      	str	r3, [r1, #8]
 800ced4:	2e00      	cmp	r6, #0
 800ced6:	ddeb      	ble.n	800ceb0 <__sflush_r+0xac>
 800ced8:	4633      	mov	r3, r6
 800ceda:	463a      	mov	r2, r7
 800cedc:	4628      	mov	r0, r5
 800cede:	6a21      	ldr	r1, [r4, #32]
 800cee0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cee4:	47e0      	blx	ip
 800cee6:	2800      	cmp	r0, #0
 800cee8:	dc07      	bgt.n	800cefa <__sflush_r+0xf6>
 800ceea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ceee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cef2:	f04f 30ff 	mov.w	r0, #4294967295
 800cef6:	81a3      	strh	r3, [r4, #12]
 800cef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cefa:	4407      	add	r7, r0
 800cefc:	1a36      	subs	r6, r6, r0
 800cefe:	e7e9      	b.n	800ced4 <__sflush_r+0xd0>
 800cf00:	dfbffffe 	.word	0xdfbffffe

0800cf04 <_fflush_r>:
 800cf04:	b538      	push	{r3, r4, r5, lr}
 800cf06:	690b      	ldr	r3, [r1, #16]
 800cf08:	4605      	mov	r5, r0
 800cf0a:	460c      	mov	r4, r1
 800cf0c:	b913      	cbnz	r3, 800cf14 <_fflush_r+0x10>
 800cf0e:	2500      	movs	r5, #0
 800cf10:	4628      	mov	r0, r5
 800cf12:	bd38      	pop	{r3, r4, r5, pc}
 800cf14:	b118      	cbz	r0, 800cf1e <_fflush_r+0x1a>
 800cf16:	6a03      	ldr	r3, [r0, #32]
 800cf18:	b90b      	cbnz	r3, 800cf1e <_fflush_r+0x1a>
 800cf1a:	f7fe fa05 	bl	800b328 <__sinit>
 800cf1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d0f3      	beq.n	800cf0e <_fflush_r+0xa>
 800cf26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf28:	07d0      	lsls	r0, r2, #31
 800cf2a:	d404      	bmi.n	800cf36 <_fflush_r+0x32>
 800cf2c:	0599      	lsls	r1, r3, #22
 800cf2e:	d402      	bmi.n	800cf36 <_fflush_r+0x32>
 800cf30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf32:	f7fe fb20 	bl	800b576 <__retarget_lock_acquire_recursive>
 800cf36:	4628      	mov	r0, r5
 800cf38:	4621      	mov	r1, r4
 800cf3a:	f7ff ff63 	bl	800ce04 <__sflush_r>
 800cf3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cf40:	4605      	mov	r5, r0
 800cf42:	07da      	lsls	r2, r3, #31
 800cf44:	d4e4      	bmi.n	800cf10 <_fflush_r+0xc>
 800cf46:	89a3      	ldrh	r3, [r4, #12]
 800cf48:	059b      	lsls	r3, r3, #22
 800cf4a:	d4e1      	bmi.n	800cf10 <_fflush_r+0xc>
 800cf4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf4e:	f7fe fb13 	bl	800b578 <__retarget_lock_release_recursive>
 800cf52:	e7dd      	b.n	800cf10 <_fflush_r+0xc>

0800cf54 <memmove>:
 800cf54:	4288      	cmp	r0, r1
 800cf56:	b510      	push	{r4, lr}
 800cf58:	eb01 0402 	add.w	r4, r1, r2
 800cf5c:	d902      	bls.n	800cf64 <memmove+0x10>
 800cf5e:	4284      	cmp	r4, r0
 800cf60:	4623      	mov	r3, r4
 800cf62:	d807      	bhi.n	800cf74 <memmove+0x20>
 800cf64:	1e43      	subs	r3, r0, #1
 800cf66:	42a1      	cmp	r1, r4
 800cf68:	d008      	beq.n	800cf7c <memmove+0x28>
 800cf6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf6e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf72:	e7f8      	b.n	800cf66 <memmove+0x12>
 800cf74:	4601      	mov	r1, r0
 800cf76:	4402      	add	r2, r0
 800cf78:	428a      	cmp	r2, r1
 800cf7a:	d100      	bne.n	800cf7e <memmove+0x2a>
 800cf7c:	bd10      	pop	{r4, pc}
 800cf7e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cf82:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cf86:	e7f7      	b.n	800cf78 <memmove+0x24>

0800cf88 <_sbrk_r>:
 800cf88:	b538      	push	{r3, r4, r5, lr}
 800cf8a:	2300      	movs	r3, #0
 800cf8c:	4d05      	ldr	r5, [pc, #20]	@ (800cfa4 <_sbrk_r+0x1c>)
 800cf8e:	4604      	mov	r4, r0
 800cf90:	4608      	mov	r0, r1
 800cf92:	602b      	str	r3, [r5, #0]
 800cf94:	f7fa fa5c 	bl	8007450 <_sbrk>
 800cf98:	1c43      	adds	r3, r0, #1
 800cf9a:	d102      	bne.n	800cfa2 <_sbrk_r+0x1a>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	b103      	cbz	r3, 800cfa2 <_sbrk_r+0x1a>
 800cfa0:	6023      	str	r3, [r4, #0]
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
 800cfa4:	200049bc 	.word	0x200049bc

0800cfa8 <__assert_func>:
 800cfa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cfaa:	4614      	mov	r4, r2
 800cfac:	461a      	mov	r2, r3
 800cfae:	4b09      	ldr	r3, [pc, #36]	@ (800cfd4 <__assert_func+0x2c>)
 800cfb0:	4605      	mov	r5, r0
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	68d8      	ldr	r0, [r3, #12]
 800cfb6:	b954      	cbnz	r4, 800cfce <__assert_func+0x26>
 800cfb8:	4b07      	ldr	r3, [pc, #28]	@ (800cfd8 <__assert_func+0x30>)
 800cfba:	461c      	mov	r4, r3
 800cfbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cfc0:	9100      	str	r1, [sp, #0]
 800cfc2:	462b      	mov	r3, r5
 800cfc4:	4905      	ldr	r1, [pc, #20]	@ (800cfdc <__assert_func+0x34>)
 800cfc6:	f000 f86f 	bl	800d0a8 <fiprintf>
 800cfca:	f000 f87f 	bl	800d0cc <abort>
 800cfce:	4b04      	ldr	r3, [pc, #16]	@ (800cfe0 <__assert_func+0x38>)
 800cfd0:	e7f4      	b.n	800cfbc <__assert_func+0x14>
 800cfd2:	bf00      	nop
 800cfd4:	2000003c 	.word	0x2000003c
 800cfd8:	0800e5fe 	.word	0x0800e5fe
 800cfdc:	0800e5d0 	.word	0x0800e5d0
 800cfe0:	0800e5c3 	.word	0x0800e5c3

0800cfe4 <_calloc_r>:
 800cfe4:	b570      	push	{r4, r5, r6, lr}
 800cfe6:	fba1 5402 	umull	r5, r4, r1, r2
 800cfea:	b93c      	cbnz	r4, 800cffc <_calloc_r+0x18>
 800cfec:	4629      	mov	r1, r5
 800cfee:	f7ff f9a5 	bl	800c33c <_malloc_r>
 800cff2:	4606      	mov	r6, r0
 800cff4:	b928      	cbnz	r0, 800d002 <_calloc_r+0x1e>
 800cff6:	2600      	movs	r6, #0
 800cff8:	4630      	mov	r0, r6
 800cffa:	bd70      	pop	{r4, r5, r6, pc}
 800cffc:	220c      	movs	r2, #12
 800cffe:	6002      	str	r2, [r0, #0]
 800d000:	e7f9      	b.n	800cff6 <_calloc_r+0x12>
 800d002:	462a      	mov	r2, r5
 800d004:	4621      	mov	r1, r4
 800d006:	f7fe fa38 	bl	800b47a <memset>
 800d00a:	e7f5      	b.n	800cff8 <_calloc_r+0x14>

0800d00c <__ascii_mbtowc>:
 800d00c:	b082      	sub	sp, #8
 800d00e:	b901      	cbnz	r1, 800d012 <__ascii_mbtowc+0x6>
 800d010:	a901      	add	r1, sp, #4
 800d012:	b142      	cbz	r2, 800d026 <__ascii_mbtowc+0x1a>
 800d014:	b14b      	cbz	r3, 800d02a <__ascii_mbtowc+0x1e>
 800d016:	7813      	ldrb	r3, [r2, #0]
 800d018:	600b      	str	r3, [r1, #0]
 800d01a:	7812      	ldrb	r2, [r2, #0]
 800d01c:	1e10      	subs	r0, r2, #0
 800d01e:	bf18      	it	ne
 800d020:	2001      	movne	r0, #1
 800d022:	b002      	add	sp, #8
 800d024:	4770      	bx	lr
 800d026:	4610      	mov	r0, r2
 800d028:	e7fb      	b.n	800d022 <__ascii_mbtowc+0x16>
 800d02a:	f06f 0001 	mvn.w	r0, #1
 800d02e:	e7f8      	b.n	800d022 <__ascii_mbtowc+0x16>

0800d030 <_realloc_r>:
 800d030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d034:	4680      	mov	r8, r0
 800d036:	4615      	mov	r5, r2
 800d038:	460c      	mov	r4, r1
 800d03a:	b921      	cbnz	r1, 800d046 <_realloc_r+0x16>
 800d03c:	4611      	mov	r1, r2
 800d03e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d042:	f7ff b97b 	b.w	800c33c <_malloc_r>
 800d046:	b92a      	cbnz	r2, 800d054 <_realloc_r+0x24>
 800d048:	f7ff f906 	bl	800c258 <_free_r>
 800d04c:	2400      	movs	r4, #0
 800d04e:	4620      	mov	r0, r4
 800d050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d054:	f000 f841 	bl	800d0da <_malloc_usable_size_r>
 800d058:	4285      	cmp	r5, r0
 800d05a:	4606      	mov	r6, r0
 800d05c:	d802      	bhi.n	800d064 <_realloc_r+0x34>
 800d05e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d062:	d8f4      	bhi.n	800d04e <_realloc_r+0x1e>
 800d064:	4629      	mov	r1, r5
 800d066:	4640      	mov	r0, r8
 800d068:	f7ff f968 	bl	800c33c <_malloc_r>
 800d06c:	4607      	mov	r7, r0
 800d06e:	2800      	cmp	r0, #0
 800d070:	d0ec      	beq.n	800d04c <_realloc_r+0x1c>
 800d072:	42b5      	cmp	r5, r6
 800d074:	462a      	mov	r2, r5
 800d076:	4621      	mov	r1, r4
 800d078:	bf28      	it	cs
 800d07a:	4632      	movcs	r2, r6
 800d07c:	f7fe fa8b 	bl	800b596 <memcpy>
 800d080:	4621      	mov	r1, r4
 800d082:	4640      	mov	r0, r8
 800d084:	f7ff f8e8 	bl	800c258 <_free_r>
 800d088:	463c      	mov	r4, r7
 800d08a:	e7e0      	b.n	800d04e <_realloc_r+0x1e>

0800d08c <__ascii_wctomb>:
 800d08c:	4603      	mov	r3, r0
 800d08e:	4608      	mov	r0, r1
 800d090:	b141      	cbz	r1, 800d0a4 <__ascii_wctomb+0x18>
 800d092:	2aff      	cmp	r2, #255	@ 0xff
 800d094:	d904      	bls.n	800d0a0 <__ascii_wctomb+0x14>
 800d096:	228a      	movs	r2, #138	@ 0x8a
 800d098:	f04f 30ff 	mov.w	r0, #4294967295
 800d09c:	601a      	str	r2, [r3, #0]
 800d09e:	4770      	bx	lr
 800d0a0:	2001      	movs	r0, #1
 800d0a2:	700a      	strb	r2, [r1, #0]
 800d0a4:	4770      	bx	lr
	...

0800d0a8 <fiprintf>:
 800d0a8:	b40e      	push	{r1, r2, r3}
 800d0aa:	b503      	push	{r0, r1, lr}
 800d0ac:	4601      	mov	r1, r0
 800d0ae:	ab03      	add	r3, sp, #12
 800d0b0:	4805      	ldr	r0, [pc, #20]	@ (800d0c8 <fiprintf+0x20>)
 800d0b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0b6:	6800      	ldr	r0, [r0, #0]
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	f000 f83d 	bl	800d138 <_vfiprintf_r>
 800d0be:	b002      	add	sp, #8
 800d0c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0c4:	b003      	add	sp, #12
 800d0c6:	4770      	bx	lr
 800d0c8:	2000003c 	.word	0x2000003c

0800d0cc <abort>:
 800d0cc:	2006      	movs	r0, #6
 800d0ce:	b508      	push	{r3, lr}
 800d0d0:	f000 fa06 	bl	800d4e0 <raise>
 800d0d4:	2001      	movs	r0, #1
 800d0d6:	f7fa f946 	bl	8007366 <_exit>

0800d0da <_malloc_usable_size_r>:
 800d0da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0de:	1f18      	subs	r0, r3, #4
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	bfbc      	itt	lt
 800d0e4:	580b      	ldrlt	r3, [r1, r0]
 800d0e6:	18c0      	addlt	r0, r0, r3
 800d0e8:	4770      	bx	lr

0800d0ea <__sfputc_r>:
 800d0ea:	6893      	ldr	r3, [r2, #8]
 800d0ec:	b410      	push	{r4}
 800d0ee:	3b01      	subs	r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	6093      	str	r3, [r2, #8]
 800d0f4:	da07      	bge.n	800d106 <__sfputc_r+0x1c>
 800d0f6:	6994      	ldr	r4, [r2, #24]
 800d0f8:	42a3      	cmp	r3, r4
 800d0fa:	db01      	blt.n	800d100 <__sfputc_r+0x16>
 800d0fc:	290a      	cmp	r1, #10
 800d0fe:	d102      	bne.n	800d106 <__sfputc_r+0x1c>
 800d100:	bc10      	pop	{r4}
 800d102:	f000 b931 	b.w	800d368 <__swbuf_r>
 800d106:	6813      	ldr	r3, [r2, #0]
 800d108:	1c58      	adds	r0, r3, #1
 800d10a:	6010      	str	r0, [r2, #0]
 800d10c:	7019      	strb	r1, [r3, #0]
 800d10e:	4608      	mov	r0, r1
 800d110:	bc10      	pop	{r4}
 800d112:	4770      	bx	lr

0800d114 <__sfputs_r>:
 800d114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d116:	4606      	mov	r6, r0
 800d118:	460f      	mov	r7, r1
 800d11a:	4614      	mov	r4, r2
 800d11c:	18d5      	adds	r5, r2, r3
 800d11e:	42ac      	cmp	r4, r5
 800d120:	d101      	bne.n	800d126 <__sfputs_r+0x12>
 800d122:	2000      	movs	r0, #0
 800d124:	e007      	b.n	800d136 <__sfputs_r+0x22>
 800d126:	463a      	mov	r2, r7
 800d128:	4630      	mov	r0, r6
 800d12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12e:	f7ff ffdc 	bl	800d0ea <__sfputc_r>
 800d132:	1c43      	adds	r3, r0, #1
 800d134:	d1f3      	bne.n	800d11e <__sfputs_r+0xa>
 800d136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d138 <_vfiprintf_r>:
 800d138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d13c:	460d      	mov	r5, r1
 800d13e:	4614      	mov	r4, r2
 800d140:	4698      	mov	r8, r3
 800d142:	4606      	mov	r6, r0
 800d144:	b09d      	sub	sp, #116	@ 0x74
 800d146:	b118      	cbz	r0, 800d150 <_vfiprintf_r+0x18>
 800d148:	6a03      	ldr	r3, [r0, #32]
 800d14a:	b90b      	cbnz	r3, 800d150 <_vfiprintf_r+0x18>
 800d14c:	f7fe f8ec 	bl	800b328 <__sinit>
 800d150:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d152:	07d9      	lsls	r1, r3, #31
 800d154:	d405      	bmi.n	800d162 <_vfiprintf_r+0x2a>
 800d156:	89ab      	ldrh	r3, [r5, #12]
 800d158:	059a      	lsls	r2, r3, #22
 800d15a:	d402      	bmi.n	800d162 <_vfiprintf_r+0x2a>
 800d15c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d15e:	f7fe fa0a 	bl	800b576 <__retarget_lock_acquire_recursive>
 800d162:	89ab      	ldrh	r3, [r5, #12]
 800d164:	071b      	lsls	r3, r3, #28
 800d166:	d501      	bpl.n	800d16c <_vfiprintf_r+0x34>
 800d168:	692b      	ldr	r3, [r5, #16]
 800d16a:	b99b      	cbnz	r3, 800d194 <_vfiprintf_r+0x5c>
 800d16c:	4629      	mov	r1, r5
 800d16e:	4630      	mov	r0, r6
 800d170:	f000 f938 	bl	800d3e4 <__swsetup_r>
 800d174:	b170      	cbz	r0, 800d194 <_vfiprintf_r+0x5c>
 800d176:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d178:	07dc      	lsls	r4, r3, #31
 800d17a:	d504      	bpl.n	800d186 <_vfiprintf_r+0x4e>
 800d17c:	f04f 30ff 	mov.w	r0, #4294967295
 800d180:	b01d      	add	sp, #116	@ 0x74
 800d182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d186:	89ab      	ldrh	r3, [r5, #12]
 800d188:	0598      	lsls	r0, r3, #22
 800d18a:	d4f7      	bmi.n	800d17c <_vfiprintf_r+0x44>
 800d18c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d18e:	f7fe f9f3 	bl	800b578 <__retarget_lock_release_recursive>
 800d192:	e7f3      	b.n	800d17c <_vfiprintf_r+0x44>
 800d194:	2300      	movs	r3, #0
 800d196:	9309      	str	r3, [sp, #36]	@ 0x24
 800d198:	2320      	movs	r3, #32
 800d19a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d19e:	2330      	movs	r3, #48	@ 0x30
 800d1a0:	f04f 0901 	mov.w	r9, #1
 800d1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1a8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800d354 <_vfiprintf_r+0x21c>
 800d1ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1b0:	4623      	mov	r3, r4
 800d1b2:	469a      	mov	sl, r3
 800d1b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1b8:	b10a      	cbz	r2, 800d1be <_vfiprintf_r+0x86>
 800d1ba:	2a25      	cmp	r2, #37	@ 0x25
 800d1bc:	d1f9      	bne.n	800d1b2 <_vfiprintf_r+0x7a>
 800d1be:	ebba 0b04 	subs.w	fp, sl, r4
 800d1c2:	d00b      	beq.n	800d1dc <_vfiprintf_r+0xa4>
 800d1c4:	465b      	mov	r3, fp
 800d1c6:	4622      	mov	r2, r4
 800d1c8:	4629      	mov	r1, r5
 800d1ca:	4630      	mov	r0, r6
 800d1cc:	f7ff ffa2 	bl	800d114 <__sfputs_r>
 800d1d0:	3001      	adds	r0, #1
 800d1d2:	f000 80a7 	beq.w	800d324 <_vfiprintf_r+0x1ec>
 800d1d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1d8:	445a      	add	r2, fp
 800d1da:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1dc:	f89a 3000 	ldrb.w	r3, [sl]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f000 809f 	beq.w	800d324 <_vfiprintf_r+0x1ec>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d1ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1f0:	f10a 0a01 	add.w	sl, sl, #1
 800d1f4:	9304      	str	r3, [sp, #16]
 800d1f6:	9307      	str	r3, [sp, #28]
 800d1f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1fe:	4654      	mov	r4, sl
 800d200:	2205      	movs	r2, #5
 800d202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d206:	4853      	ldr	r0, [pc, #332]	@ (800d354 <_vfiprintf_r+0x21c>)
 800d208:	f7fe f9b7 	bl	800b57a <memchr>
 800d20c:	9a04      	ldr	r2, [sp, #16]
 800d20e:	b9d8      	cbnz	r0, 800d248 <_vfiprintf_r+0x110>
 800d210:	06d1      	lsls	r1, r2, #27
 800d212:	bf44      	itt	mi
 800d214:	2320      	movmi	r3, #32
 800d216:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d21a:	0713      	lsls	r3, r2, #28
 800d21c:	bf44      	itt	mi
 800d21e:	232b      	movmi	r3, #43	@ 0x2b
 800d220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d224:	f89a 3000 	ldrb.w	r3, [sl]
 800d228:	2b2a      	cmp	r3, #42	@ 0x2a
 800d22a:	d015      	beq.n	800d258 <_vfiprintf_r+0x120>
 800d22c:	4654      	mov	r4, sl
 800d22e:	2000      	movs	r0, #0
 800d230:	f04f 0c0a 	mov.w	ip, #10
 800d234:	9a07      	ldr	r2, [sp, #28]
 800d236:	4621      	mov	r1, r4
 800d238:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d23c:	3b30      	subs	r3, #48	@ 0x30
 800d23e:	2b09      	cmp	r3, #9
 800d240:	d94b      	bls.n	800d2da <_vfiprintf_r+0x1a2>
 800d242:	b1b0      	cbz	r0, 800d272 <_vfiprintf_r+0x13a>
 800d244:	9207      	str	r2, [sp, #28]
 800d246:	e014      	b.n	800d272 <_vfiprintf_r+0x13a>
 800d248:	eba0 0308 	sub.w	r3, r0, r8
 800d24c:	fa09 f303 	lsl.w	r3, r9, r3
 800d250:	4313      	orrs	r3, r2
 800d252:	46a2      	mov	sl, r4
 800d254:	9304      	str	r3, [sp, #16]
 800d256:	e7d2      	b.n	800d1fe <_vfiprintf_r+0xc6>
 800d258:	9b03      	ldr	r3, [sp, #12]
 800d25a:	1d19      	adds	r1, r3, #4
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	9103      	str	r1, [sp, #12]
 800d260:	2b00      	cmp	r3, #0
 800d262:	bfbb      	ittet	lt
 800d264:	425b      	neglt	r3, r3
 800d266:	f042 0202 	orrlt.w	r2, r2, #2
 800d26a:	9307      	strge	r3, [sp, #28]
 800d26c:	9307      	strlt	r3, [sp, #28]
 800d26e:	bfb8      	it	lt
 800d270:	9204      	strlt	r2, [sp, #16]
 800d272:	7823      	ldrb	r3, [r4, #0]
 800d274:	2b2e      	cmp	r3, #46	@ 0x2e
 800d276:	d10a      	bne.n	800d28e <_vfiprintf_r+0x156>
 800d278:	7863      	ldrb	r3, [r4, #1]
 800d27a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d27c:	d132      	bne.n	800d2e4 <_vfiprintf_r+0x1ac>
 800d27e:	9b03      	ldr	r3, [sp, #12]
 800d280:	3402      	adds	r4, #2
 800d282:	1d1a      	adds	r2, r3, #4
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	9203      	str	r2, [sp, #12]
 800d288:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d28c:	9305      	str	r3, [sp, #20]
 800d28e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800d358 <_vfiprintf_r+0x220>
 800d292:	2203      	movs	r2, #3
 800d294:	4650      	mov	r0, sl
 800d296:	7821      	ldrb	r1, [r4, #0]
 800d298:	f7fe f96f 	bl	800b57a <memchr>
 800d29c:	b138      	cbz	r0, 800d2ae <_vfiprintf_r+0x176>
 800d29e:	2240      	movs	r2, #64	@ 0x40
 800d2a0:	9b04      	ldr	r3, [sp, #16]
 800d2a2:	eba0 000a 	sub.w	r0, r0, sl
 800d2a6:	4082      	lsls	r2, r0
 800d2a8:	4313      	orrs	r3, r2
 800d2aa:	3401      	adds	r4, #1
 800d2ac:	9304      	str	r3, [sp, #16]
 800d2ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2b2:	2206      	movs	r2, #6
 800d2b4:	4829      	ldr	r0, [pc, #164]	@ (800d35c <_vfiprintf_r+0x224>)
 800d2b6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2ba:	f7fe f95e 	bl	800b57a <memchr>
 800d2be:	2800      	cmp	r0, #0
 800d2c0:	d03f      	beq.n	800d342 <_vfiprintf_r+0x20a>
 800d2c2:	4b27      	ldr	r3, [pc, #156]	@ (800d360 <_vfiprintf_r+0x228>)
 800d2c4:	bb1b      	cbnz	r3, 800d30e <_vfiprintf_r+0x1d6>
 800d2c6:	9b03      	ldr	r3, [sp, #12]
 800d2c8:	3307      	adds	r3, #7
 800d2ca:	f023 0307 	bic.w	r3, r3, #7
 800d2ce:	3308      	adds	r3, #8
 800d2d0:	9303      	str	r3, [sp, #12]
 800d2d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2d4:	443b      	add	r3, r7
 800d2d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2d8:	e76a      	b.n	800d1b0 <_vfiprintf_r+0x78>
 800d2da:	460c      	mov	r4, r1
 800d2dc:	2001      	movs	r0, #1
 800d2de:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2e2:	e7a8      	b.n	800d236 <_vfiprintf_r+0xfe>
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	f04f 0c0a 	mov.w	ip, #10
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	3401      	adds	r4, #1
 800d2ee:	9305      	str	r3, [sp, #20]
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2f6:	3a30      	subs	r2, #48	@ 0x30
 800d2f8:	2a09      	cmp	r2, #9
 800d2fa:	d903      	bls.n	800d304 <_vfiprintf_r+0x1cc>
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d0c6      	beq.n	800d28e <_vfiprintf_r+0x156>
 800d300:	9105      	str	r1, [sp, #20]
 800d302:	e7c4      	b.n	800d28e <_vfiprintf_r+0x156>
 800d304:	4604      	mov	r4, r0
 800d306:	2301      	movs	r3, #1
 800d308:	fb0c 2101 	mla	r1, ip, r1, r2
 800d30c:	e7f0      	b.n	800d2f0 <_vfiprintf_r+0x1b8>
 800d30e:	ab03      	add	r3, sp, #12
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	462a      	mov	r2, r5
 800d314:	4630      	mov	r0, r6
 800d316:	4b13      	ldr	r3, [pc, #76]	@ (800d364 <_vfiprintf_r+0x22c>)
 800d318:	a904      	add	r1, sp, #16
 800d31a:	f7fd fbbb 	bl	800aa94 <_printf_float>
 800d31e:	4607      	mov	r7, r0
 800d320:	1c78      	adds	r0, r7, #1
 800d322:	d1d6      	bne.n	800d2d2 <_vfiprintf_r+0x19a>
 800d324:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d326:	07d9      	lsls	r1, r3, #31
 800d328:	d405      	bmi.n	800d336 <_vfiprintf_r+0x1fe>
 800d32a:	89ab      	ldrh	r3, [r5, #12]
 800d32c:	059a      	lsls	r2, r3, #22
 800d32e:	d402      	bmi.n	800d336 <_vfiprintf_r+0x1fe>
 800d330:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d332:	f7fe f921 	bl	800b578 <__retarget_lock_release_recursive>
 800d336:	89ab      	ldrh	r3, [r5, #12]
 800d338:	065b      	lsls	r3, r3, #25
 800d33a:	f53f af1f 	bmi.w	800d17c <_vfiprintf_r+0x44>
 800d33e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d340:	e71e      	b.n	800d180 <_vfiprintf_r+0x48>
 800d342:	ab03      	add	r3, sp, #12
 800d344:	9300      	str	r3, [sp, #0]
 800d346:	462a      	mov	r2, r5
 800d348:	4630      	mov	r0, r6
 800d34a:	4b06      	ldr	r3, [pc, #24]	@ (800d364 <_vfiprintf_r+0x22c>)
 800d34c:	a904      	add	r1, sp, #16
 800d34e:	f7fd fe3f 	bl	800afd0 <_printf_i>
 800d352:	e7e4      	b.n	800d31e <_vfiprintf_r+0x1e6>
 800d354:	0800e5a8 	.word	0x0800e5a8
 800d358:	0800e5ae 	.word	0x0800e5ae
 800d35c:	0800e5b2 	.word	0x0800e5b2
 800d360:	0800aa95 	.word	0x0800aa95
 800d364:	0800d115 	.word	0x0800d115

0800d368 <__swbuf_r>:
 800d368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d36a:	460e      	mov	r6, r1
 800d36c:	4614      	mov	r4, r2
 800d36e:	4605      	mov	r5, r0
 800d370:	b118      	cbz	r0, 800d37a <__swbuf_r+0x12>
 800d372:	6a03      	ldr	r3, [r0, #32]
 800d374:	b90b      	cbnz	r3, 800d37a <__swbuf_r+0x12>
 800d376:	f7fd ffd7 	bl	800b328 <__sinit>
 800d37a:	69a3      	ldr	r3, [r4, #24]
 800d37c:	60a3      	str	r3, [r4, #8]
 800d37e:	89a3      	ldrh	r3, [r4, #12]
 800d380:	071a      	lsls	r2, r3, #28
 800d382:	d501      	bpl.n	800d388 <__swbuf_r+0x20>
 800d384:	6923      	ldr	r3, [r4, #16]
 800d386:	b943      	cbnz	r3, 800d39a <__swbuf_r+0x32>
 800d388:	4621      	mov	r1, r4
 800d38a:	4628      	mov	r0, r5
 800d38c:	f000 f82a 	bl	800d3e4 <__swsetup_r>
 800d390:	b118      	cbz	r0, 800d39a <__swbuf_r+0x32>
 800d392:	f04f 37ff 	mov.w	r7, #4294967295
 800d396:	4638      	mov	r0, r7
 800d398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d39a:	6823      	ldr	r3, [r4, #0]
 800d39c:	6922      	ldr	r2, [r4, #16]
 800d39e:	b2f6      	uxtb	r6, r6
 800d3a0:	1a98      	subs	r0, r3, r2
 800d3a2:	6963      	ldr	r3, [r4, #20]
 800d3a4:	4637      	mov	r7, r6
 800d3a6:	4283      	cmp	r3, r0
 800d3a8:	dc05      	bgt.n	800d3b6 <__swbuf_r+0x4e>
 800d3aa:	4621      	mov	r1, r4
 800d3ac:	4628      	mov	r0, r5
 800d3ae:	f7ff fda9 	bl	800cf04 <_fflush_r>
 800d3b2:	2800      	cmp	r0, #0
 800d3b4:	d1ed      	bne.n	800d392 <__swbuf_r+0x2a>
 800d3b6:	68a3      	ldr	r3, [r4, #8]
 800d3b8:	3b01      	subs	r3, #1
 800d3ba:	60a3      	str	r3, [r4, #8]
 800d3bc:	6823      	ldr	r3, [r4, #0]
 800d3be:	1c5a      	adds	r2, r3, #1
 800d3c0:	6022      	str	r2, [r4, #0]
 800d3c2:	701e      	strb	r6, [r3, #0]
 800d3c4:	6962      	ldr	r2, [r4, #20]
 800d3c6:	1c43      	adds	r3, r0, #1
 800d3c8:	429a      	cmp	r2, r3
 800d3ca:	d004      	beq.n	800d3d6 <__swbuf_r+0x6e>
 800d3cc:	89a3      	ldrh	r3, [r4, #12]
 800d3ce:	07db      	lsls	r3, r3, #31
 800d3d0:	d5e1      	bpl.n	800d396 <__swbuf_r+0x2e>
 800d3d2:	2e0a      	cmp	r6, #10
 800d3d4:	d1df      	bne.n	800d396 <__swbuf_r+0x2e>
 800d3d6:	4621      	mov	r1, r4
 800d3d8:	4628      	mov	r0, r5
 800d3da:	f7ff fd93 	bl	800cf04 <_fflush_r>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d0d9      	beq.n	800d396 <__swbuf_r+0x2e>
 800d3e2:	e7d6      	b.n	800d392 <__swbuf_r+0x2a>

0800d3e4 <__swsetup_r>:
 800d3e4:	b538      	push	{r3, r4, r5, lr}
 800d3e6:	4b29      	ldr	r3, [pc, #164]	@ (800d48c <__swsetup_r+0xa8>)
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	6818      	ldr	r0, [r3, #0]
 800d3ec:	460c      	mov	r4, r1
 800d3ee:	b118      	cbz	r0, 800d3f8 <__swsetup_r+0x14>
 800d3f0:	6a03      	ldr	r3, [r0, #32]
 800d3f2:	b90b      	cbnz	r3, 800d3f8 <__swsetup_r+0x14>
 800d3f4:	f7fd ff98 	bl	800b328 <__sinit>
 800d3f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d3fc:	0719      	lsls	r1, r3, #28
 800d3fe:	d422      	bmi.n	800d446 <__swsetup_r+0x62>
 800d400:	06da      	lsls	r2, r3, #27
 800d402:	d407      	bmi.n	800d414 <__swsetup_r+0x30>
 800d404:	2209      	movs	r2, #9
 800d406:	602a      	str	r2, [r5, #0]
 800d408:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d40c:	f04f 30ff 	mov.w	r0, #4294967295
 800d410:	81a3      	strh	r3, [r4, #12]
 800d412:	e033      	b.n	800d47c <__swsetup_r+0x98>
 800d414:	0758      	lsls	r0, r3, #29
 800d416:	d512      	bpl.n	800d43e <__swsetup_r+0x5a>
 800d418:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d41a:	b141      	cbz	r1, 800d42e <__swsetup_r+0x4a>
 800d41c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d420:	4299      	cmp	r1, r3
 800d422:	d002      	beq.n	800d42a <__swsetup_r+0x46>
 800d424:	4628      	mov	r0, r5
 800d426:	f7fe ff17 	bl	800c258 <_free_r>
 800d42a:	2300      	movs	r3, #0
 800d42c:	6363      	str	r3, [r4, #52]	@ 0x34
 800d42e:	89a3      	ldrh	r3, [r4, #12]
 800d430:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d434:	81a3      	strh	r3, [r4, #12]
 800d436:	2300      	movs	r3, #0
 800d438:	6063      	str	r3, [r4, #4]
 800d43a:	6923      	ldr	r3, [r4, #16]
 800d43c:	6023      	str	r3, [r4, #0]
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	f043 0308 	orr.w	r3, r3, #8
 800d444:	81a3      	strh	r3, [r4, #12]
 800d446:	6923      	ldr	r3, [r4, #16]
 800d448:	b94b      	cbnz	r3, 800d45e <__swsetup_r+0x7a>
 800d44a:	89a3      	ldrh	r3, [r4, #12]
 800d44c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d450:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d454:	d003      	beq.n	800d45e <__swsetup_r+0x7a>
 800d456:	4621      	mov	r1, r4
 800d458:	4628      	mov	r0, r5
 800d45a:	f000 f882 	bl	800d562 <__smakebuf_r>
 800d45e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d462:	f013 0201 	ands.w	r2, r3, #1
 800d466:	d00a      	beq.n	800d47e <__swsetup_r+0x9a>
 800d468:	2200      	movs	r2, #0
 800d46a:	60a2      	str	r2, [r4, #8]
 800d46c:	6962      	ldr	r2, [r4, #20]
 800d46e:	4252      	negs	r2, r2
 800d470:	61a2      	str	r2, [r4, #24]
 800d472:	6922      	ldr	r2, [r4, #16]
 800d474:	b942      	cbnz	r2, 800d488 <__swsetup_r+0xa4>
 800d476:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d47a:	d1c5      	bne.n	800d408 <__swsetup_r+0x24>
 800d47c:	bd38      	pop	{r3, r4, r5, pc}
 800d47e:	0799      	lsls	r1, r3, #30
 800d480:	bf58      	it	pl
 800d482:	6962      	ldrpl	r2, [r4, #20]
 800d484:	60a2      	str	r2, [r4, #8]
 800d486:	e7f4      	b.n	800d472 <__swsetup_r+0x8e>
 800d488:	2000      	movs	r0, #0
 800d48a:	e7f7      	b.n	800d47c <__swsetup_r+0x98>
 800d48c:	2000003c 	.word	0x2000003c

0800d490 <_raise_r>:
 800d490:	291f      	cmp	r1, #31
 800d492:	b538      	push	{r3, r4, r5, lr}
 800d494:	4605      	mov	r5, r0
 800d496:	460c      	mov	r4, r1
 800d498:	d904      	bls.n	800d4a4 <_raise_r+0x14>
 800d49a:	2316      	movs	r3, #22
 800d49c:	6003      	str	r3, [r0, #0]
 800d49e:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a2:	bd38      	pop	{r3, r4, r5, pc}
 800d4a4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d4a6:	b112      	cbz	r2, 800d4ae <_raise_r+0x1e>
 800d4a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4ac:	b94b      	cbnz	r3, 800d4c2 <_raise_r+0x32>
 800d4ae:	4628      	mov	r0, r5
 800d4b0:	f000 f830 	bl	800d514 <_getpid_r>
 800d4b4:	4622      	mov	r2, r4
 800d4b6:	4601      	mov	r1, r0
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4be:	f000 b817 	b.w	800d4f0 <_kill_r>
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d00a      	beq.n	800d4dc <_raise_r+0x4c>
 800d4c6:	1c59      	adds	r1, r3, #1
 800d4c8:	d103      	bne.n	800d4d2 <_raise_r+0x42>
 800d4ca:	2316      	movs	r3, #22
 800d4cc:	6003      	str	r3, [r0, #0]
 800d4ce:	2001      	movs	r0, #1
 800d4d0:	e7e7      	b.n	800d4a2 <_raise_r+0x12>
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	4620      	mov	r0, r4
 800d4d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d4da:	4798      	blx	r3
 800d4dc:	2000      	movs	r0, #0
 800d4de:	e7e0      	b.n	800d4a2 <_raise_r+0x12>

0800d4e0 <raise>:
 800d4e0:	4b02      	ldr	r3, [pc, #8]	@ (800d4ec <raise+0xc>)
 800d4e2:	4601      	mov	r1, r0
 800d4e4:	6818      	ldr	r0, [r3, #0]
 800d4e6:	f7ff bfd3 	b.w	800d490 <_raise_r>
 800d4ea:	bf00      	nop
 800d4ec:	2000003c 	.word	0x2000003c

0800d4f0 <_kill_r>:
 800d4f0:	b538      	push	{r3, r4, r5, lr}
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	4d06      	ldr	r5, [pc, #24]	@ (800d510 <_kill_r+0x20>)
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	4608      	mov	r0, r1
 800d4fa:	4611      	mov	r1, r2
 800d4fc:	602b      	str	r3, [r5, #0]
 800d4fe:	f7f9 ff22 	bl	8007346 <_kill>
 800d502:	1c43      	adds	r3, r0, #1
 800d504:	d102      	bne.n	800d50c <_kill_r+0x1c>
 800d506:	682b      	ldr	r3, [r5, #0]
 800d508:	b103      	cbz	r3, 800d50c <_kill_r+0x1c>
 800d50a:	6023      	str	r3, [r4, #0]
 800d50c:	bd38      	pop	{r3, r4, r5, pc}
 800d50e:	bf00      	nop
 800d510:	200049bc 	.word	0x200049bc

0800d514 <_getpid_r>:
 800d514:	f7f9 bf10 	b.w	8007338 <_getpid>

0800d518 <__swhatbuf_r>:
 800d518:	b570      	push	{r4, r5, r6, lr}
 800d51a:	460c      	mov	r4, r1
 800d51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d520:	4615      	mov	r5, r2
 800d522:	2900      	cmp	r1, #0
 800d524:	461e      	mov	r6, r3
 800d526:	b096      	sub	sp, #88	@ 0x58
 800d528:	da0c      	bge.n	800d544 <__swhatbuf_r+0x2c>
 800d52a:	89a3      	ldrh	r3, [r4, #12]
 800d52c:	2100      	movs	r1, #0
 800d52e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d532:	bf14      	ite	ne
 800d534:	2340      	movne	r3, #64	@ 0x40
 800d536:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d53a:	2000      	movs	r0, #0
 800d53c:	6031      	str	r1, [r6, #0]
 800d53e:	602b      	str	r3, [r5, #0]
 800d540:	b016      	add	sp, #88	@ 0x58
 800d542:	bd70      	pop	{r4, r5, r6, pc}
 800d544:	466a      	mov	r2, sp
 800d546:	f000 f849 	bl	800d5dc <_fstat_r>
 800d54a:	2800      	cmp	r0, #0
 800d54c:	dbed      	blt.n	800d52a <__swhatbuf_r+0x12>
 800d54e:	9901      	ldr	r1, [sp, #4]
 800d550:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d554:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d558:	4259      	negs	r1, r3
 800d55a:	4159      	adcs	r1, r3
 800d55c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d560:	e7eb      	b.n	800d53a <__swhatbuf_r+0x22>

0800d562 <__smakebuf_r>:
 800d562:	898b      	ldrh	r3, [r1, #12]
 800d564:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d566:	079d      	lsls	r5, r3, #30
 800d568:	4606      	mov	r6, r0
 800d56a:	460c      	mov	r4, r1
 800d56c:	d507      	bpl.n	800d57e <__smakebuf_r+0x1c>
 800d56e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d572:	6023      	str	r3, [r4, #0]
 800d574:	6123      	str	r3, [r4, #16]
 800d576:	2301      	movs	r3, #1
 800d578:	6163      	str	r3, [r4, #20]
 800d57a:	b003      	add	sp, #12
 800d57c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d57e:	466a      	mov	r2, sp
 800d580:	ab01      	add	r3, sp, #4
 800d582:	f7ff ffc9 	bl	800d518 <__swhatbuf_r>
 800d586:	9f00      	ldr	r7, [sp, #0]
 800d588:	4605      	mov	r5, r0
 800d58a:	4639      	mov	r1, r7
 800d58c:	4630      	mov	r0, r6
 800d58e:	f7fe fed5 	bl	800c33c <_malloc_r>
 800d592:	b948      	cbnz	r0, 800d5a8 <__smakebuf_r+0x46>
 800d594:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d598:	059a      	lsls	r2, r3, #22
 800d59a:	d4ee      	bmi.n	800d57a <__smakebuf_r+0x18>
 800d59c:	f023 0303 	bic.w	r3, r3, #3
 800d5a0:	f043 0302 	orr.w	r3, r3, #2
 800d5a4:	81a3      	strh	r3, [r4, #12]
 800d5a6:	e7e2      	b.n	800d56e <__smakebuf_r+0xc>
 800d5a8:	89a3      	ldrh	r3, [r4, #12]
 800d5aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d5ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5b2:	81a3      	strh	r3, [r4, #12]
 800d5b4:	9b01      	ldr	r3, [sp, #4]
 800d5b6:	6020      	str	r0, [r4, #0]
 800d5b8:	b15b      	cbz	r3, 800d5d2 <__smakebuf_r+0x70>
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d5c0:	f000 f81e 	bl	800d600 <_isatty_r>
 800d5c4:	b128      	cbz	r0, 800d5d2 <__smakebuf_r+0x70>
 800d5c6:	89a3      	ldrh	r3, [r4, #12]
 800d5c8:	f023 0303 	bic.w	r3, r3, #3
 800d5cc:	f043 0301 	orr.w	r3, r3, #1
 800d5d0:	81a3      	strh	r3, [r4, #12]
 800d5d2:	89a3      	ldrh	r3, [r4, #12]
 800d5d4:	431d      	orrs	r5, r3
 800d5d6:	81a5      	strh	r5, [r4, #12]
 800d5d8:	e7cf      	b.n	800d57a <__smakebuf_r+0x18>
	...

0800d5dc <_fstat_r>:
 800d5dc:	b538      	push	{r3, r4, r5, lr}
 800d5de:	2300      	movs	r3, #0
 800d5e0:	4d06      	ldr	r5, [pc, #24]	@ (800d5fc <_fstat_r+0x20>)
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	4608      	mov	r0, r1
 800d5e6:	4611      	mov	r1, r2
 800d5e8:	602b      	str	r3, [r5, #0]
 800d5ea:	f7f9 ff0b 	bl	8007404 <_fstat>
 800d5ee:	1c43      	adds	r3, r0, #1
 800d5f0:	d102      	bne.n	800d5f8 <_fstat_r+0x1c>
 800d5f2:	682b      	ldr	r3, [r5, #0]
 800d5f4:	b103      	cbz	r3, 800d5f8 <_fstat_r+0x1c>
 800d5f6:	6023      	str	r3, [r4, #0]
 800d5f8:	bd38      	pop	{r3, r4, r5, pc}
 800d5fa:	bf00      	nop
 800d5fc:	200049bc 	.word	0x200049bc

0800d600 <_isatty_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	2300      	movs	r3, #0
 800d604:	4d05      	ldr	r5, [pc, #20]	@ (800d61c <_isatty_r+0x1c>)
 800d606:	4604      	mov	r4, r0
 800d608:	4608      	mov	r0, r1
 800d60a:	602b      	str	r3, [r5, #0]
 800d60c:	f7f9 ff09 	bl	8007422 <_isatty>
 800d610:	1c43      	adds	r3, r0, #1
 800d612:	d102      	bne.n	800d61a <_isatty_r+0x1a>
 800d614:	682b      	ldr	r3, [r5, #0]
 800d616:	b103      	cbz	r3, 800d61a <_isatty_r+0x1a>
 800d618:	6023      	str	r3, [r4, #0]
 800d61a:	bd38      	pop	{r3, r4, r5, pc}
 800d61c:	200049bc 	.word	0x200049bc

0800d620 <atan2f>:
 800d620:	f000 b88a 	b.w	800d738 <__ieee754_atan2f>

0800d624 <sqrtf>:
 800d624:	b538      	push	{r3, r4, r5, lr}
 800d626:	4605      	mov	r5, r0
 800d628:	f000 f816 	bl	800d658 <__ieee754_sqrtf>
 800d62c:	4629      	mov	r1, r5
 800d62e:	4604      	mov	r4, r0
 800d630:	4628      	mov	r0, r5
 800d632:	f7f3 fd43 	bl	80010bc <__aeabi_fcmpun>
 800d636:	b968      	cbnz	r0, 800d654 <sqrtf+0x30>
 800d638:	2100      	movs	r1, #0
 800d63a:	4628      	mov	r0, r5
 800d63c:	f7f3 fd16 	bl	800106c <__aeabi_fcmplt>
 800d640:	b140      	cbz	r0, 800d654 <sqrtf+0x30>
 800d642:	f7fd ff6d 	bl	800b520 <__errno>
 800d646:	2321      	movs	r3, #33	@ 0x21
 800d648:	2100      	movs	r1, #0
 800d64a:	6003      	str	r3, [r0, #0]
 800d64c:	4608      	mov	r0, r1
 800d64e:	f7f3 fc23 	bl	8000e98 <__aeabi_fdiv>
 800d652:	4604      	mov	r4, r0
 800d654:	4620      	mov	r0, r4
 800d656:	bd38      	pop	{r3, r4, r5, pc}

0800d658 <__ieee754_sqrtf>:
 800d658:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800d65c:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d664:	4603      	mov	r3, r0
 800d666:	4604      	mov	r4, r0
 800d668:	d30a      	bcc.n	800d680 <__ieee754_sqrtf+0x28>
 800d66a:	4601      	mov	r1, r0
 800d66c:	f7f3 fb60 	bl	8000d30 <__aeabi_fmul>
 800d670:	4601      	mov	r1, r0
 800d672:	4620      	mov	r0, r4
 800d674:	f7f3 fa54 	bl	8000b20 <__addsf3>
 800d678:	4604      	mov	r4, r0
 800d67a:	4620      	mov	r0, r4
 800d67c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d680:	2a00      	cmp	r2, #0
 800d682:	d0fa      	beq.n	800d67a <__ieee754_sqrtf+0x22>
 800d684:	2800      	cmp	r0, #0
 800d686:	da06      	bge.n	800d696 <__ieee754_sqrtf+0x3e>
 800d688:	4601      	mov	r1, r0
 800d68a:	f7f3 fa47 	bl	8000b1c <__aeabi_fsub>
 800d68e:	4601      	mov	r1, r0
 800d690:	f7f3 fc02 	bl	8000e98 <__aeabi_fdiv>
 800d694:	e7f0      	b.n	800d678 <__ieee754_sqrtf+0x20>
 800d696:	f010 42ff 	ands.w	r2, r0, #2139095040	@ 0x7f800000
 800d69a:	ea4f 51e0 	mov.w	r1, r0, asr #23
 800d69e:	d03e      	beq.n	800d71e <__ieee754_sqrtf+0xc6>
 800d6a0:	2400      	movs	r4, #0
 800d6a2:	f1a1 057f 	sub.w	r5, r1, #127	@ 0x7f
 800d6a6:	07ca      	lsls	r2, r1, #31
 800d6a8:	f04f 0019 	mov.w	r0, #25
 800d6ac:	4626      	mov	r6, r4
 800d6ae:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 800d6b2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d6b6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800d6ba:	bf58      	it	pl
 800d6bc:	005b      	lslpl	r3, r3, #1
 800d6be:	106d      	asrs	r5, r5, #1
 800d6c0:	005b      	lsls	r3, r3, #1
 800d6c2:	1872      	adds	r2, r6, r1
 800d6c4:	429a      	cmp	r2, r3
 800d6c6:	bfcf      	iteee	gt
 800d6c8:	461a      	movgt	r2, r3
 800d6ca:	1856      	addle	r6, r2, r1
 800d6cc:	1864      	addle	r4, r4, r1
 800d6ce:	1a9a      	suble	r2, r3, r2
 800d6d0:	3801      	subs	r0, #1
 800d6d2:	ea4f 0342 	mov.w	r3, r2, lsl #1
 800d6d6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800d6da:	d1f2      	bne.n	800d6c2 <__ieee754_sqrtf+0x6a>
 800d6dc:	b1ba      	cbz	r2, 800d70e <__ieee754_sqrtf+0xb6>
 800d6de:	4e14      	ldr	r6, [pc, #80]	@ (800d730 <__ieee754_sqrtf+0xd8>)
 800d6e0:	4f14      	ldr	r7, [pc, #80]	@ (800d734 <__ieee754_sqrtf+0xdc>)
 800d6e2:	6830      	ldr	r0, [r6, #0]
 800d6e4:	6839      	ldr	r1, [r7, #0]
 800d6e6:	f7f3 fa19 	bl	8000b1c <__aeabi_fsub>
 800d6ea:	f8d6 8000 	ldr.w	r8, [r6]
 800d6ee:	4601      	mov	r1, r0
 800d6f0:	4640      	mov	r0, r8
 800d6f2:	f7f3 fcc5 	bl	8001080 <__aeabi_fcmple>
 800d6f6:	b150      	cbz	r0, 800d70e <__ieee754_sqrtf+0xb6>
 800d6f8:	6830      	ldr	r0, [r6, #0]
 800d6fa:	6839      	ldr	r1, [r7, #0]
 800d6fc:	f7f3 fa10 	bl	8000b20 <__addsf3>
 800d700:	6836      	ldr	r6, [r6, #0]
 800d702:	4601      	mov	r1, r0
 800d704:	4630      	mov	r0, r6
 800d706:	f7f3 fcb1 	bl	800106c <__aeabi_fcmplt>
 800d70a:	b168      	cbz	r0, 800d728 <__ieee754_sqrtf+0xd0>
 800d70c:	3402      	adds	r4, #2
 800d70e:	1064      	asrs	r4, r4, #1
 800d710:	f104 547c 	add.w	r4, r4, #1056964608	@ 0x3f000000
 800d714:	eb04 54c5 	add.w	r4, r4, r5, lsl #23
 800d718:	e7af      	b.n	800d67a <__ieee754_sqrtf+0x22>
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	3201      	adds	r2, #1
 800d71e:	0218      	lsls	r0, r3, #8
 800d720:	d5fb      	bpl.n	800d71a <__ieee754_sqrtf+0xc2>
 800d722:	3a01      	subs	r2, #1
 800d724:	1a89      	subs	r1, r1, r2
 800d726:	e7bb      	b.n	800d6a0 <__ieee754_sqrtf+0x48>
 800d728:	3401      	adds	r4, #1
 800d72a:	f024 0401 	bic.w	r4, r4, #1
 800d72e:	e7ee      	b.n	800d70e <__ieee754_sqrtf+0xb6>
 800d730:	200001fc 	.word	0x200001fc
 800d734:	200001f8 	.word	0x200001f8

0800d738 <__ieee754_atan2f>:
 800d738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d73a:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 800d73e:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800d742:	4603      	mov	r3, r0
 800d744:	d805      	bhi.n	800d752 <__ieee754_atan2f+0x1a>
 800d746:	f020 4200 	bic.w	r2, r0, #2147483648	@ 0x80000000
 800d74a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d74e:	4607      	mov	r7, r0
 800d750:	d904      	bls.n	800d75c <__ieee754_atan2f+0x24>
 800d752:	4618      	mov	r0, r3
 800d754:	f7f3 f9e4 	bl	8000b20 <__addsf3>
 800d758:	4603      	mov	r3, r0
 800d75a:	e010      	b.n	800d77e <__ieee754_atan2f+0x46>
 800d75c:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800d760:	d103      	bne.n	800d76a <__ieee754_atan2f+0x32>
 800d762:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d766:	f000 b86f 	b.w	800d848 <atanf>
 800d76a:	178c      	asrs	r4, r1, #30
 800d76c:	f004 0402 	and.w	r4, r4, #2
 800d770:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800d774:	b92a      	cbnz	r2, 800d782 <__ieee754_atan2f+0x4a>
 800d776:	2c02      	cmp	r4, #2
 800d778:	d04b      	beq.n	800d812 <__ieee754_atan2f+0xda>
 800d77a:	2c03      	cmp	r4, #3
 800d77c:	d04b      	beq.n	800d816 <__ieee754_atan2f+0xde>
 800d77e:	4618      	mov	r0, r3
 800d780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d782:	b91e      	cbnz	r6, 800d78c <__ieee754_atan2f+0x54>
 800d784:	2f00      	cmp	r7, #0
 800d786:	da4c      	bge.n	800d822 <__ieee754_atan2f+0xea>
 800d788:	4b27      	ldr	r3, [pc, #156]	@ (800d828 <__ieee754_atan2f+0xf0>)
 800d78a:	e7f8      	b.n	800d77e <__ieee754_atan2f+0x46>
 800d78c:	f1b6 4fff 	cmp.w	r6, #2139095040	@ 0x7f800000
 800d790:	d10e      	bne.n	800d7b0 <__ieee754_atan2f+0x78>
 800d792:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d796:	f104 34ff 	add.w	r4, r4, #4294967295
 800d79a:	d105      	bne.n	800d7a8 <__ieee754_atan2f+0x70>
 800d79c:	2c02      	cmp	r4, #2
 800d79e:	d83c      	bhi.n	800d81a <__ieee754_atan2f+0xe2>
 800d7a0:	4b22      	ldr	r3, [pc, #136]	@ (800d82c <__ieee754_atan2f+0xf4>)
 800d7a2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d7a6:	e7ea      	b.n	800d77e <__ieee754_atan2f+0x46>
 800d7a8:	2c02      	cmp	r4, #2
 800d7aa:	d838      	bhi.n	800d81e <__ieee754_atan2f+0xe6>
 800d7ac:	4b20      	ldr	r3, [pc, #128]	@ (800d830 <__ieee754_atan2f+0xf8>)
 800d7ae:	e7f8      	b.n	800d7a2 <__ieee754_atan2f+0x6a>
 800d7b0:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800d7b4:	d0e6      	beq.n	800d784 <__ieee754_atan2f+0x4c>
 800d7b6:	1b92      	subs	r2, r2, r6
 800d7b8:	f1b2 5ff4 	cmp.w	r2, #511705088	@ 0x1e800000
 800d7bc:	ea4f 50e2 	mov.w	r0, r2, asr #23
 800d7c0:	da17      	bge.n	800d7f2 <__ieee754_atan2f+0xba>
 800d7c2:	2900      	cmp	r1, #0
 800d7c4:	da01      	bge.n	800d7ca <__ieee754_atan2f+0x92>
 800d7c6:	303c      	adds	r0, #60	@ 0x3c
 800d7c8:	db15      	blt.n	800d7f6 <__ieee754_atan2f+0xbe>
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	f7f3 fb64 	bl	8000e98 <__aeabi_fdiv>
 800d7d0:	f000 f946 	bl	800da60 <fabsf>
 800d7d4:	f000 f838 	bl	800d848 <atanf>
 800d7d8:	4603      	mov	r3, r0
 800d7da:	2c01      	cmp	r4, #1
 800d7dc:	d00d      	beq.n	800d7fa <__ieee754_atan2f+0xc2>
 800d7de:	2c02      	cmp	r4, #2
 800d7e0:	d00e      	beq.n	800d800 <__ieee754_atan2f+0xc8>
 800d7e2:	2c00      	cmp	r4, #0
 800d7e4:	d0cb      	beq.n	800d77e <__ieee754_atan2f+0x46>
 800d7e6:	4913      	ldr	r1, [pc, #76]	@ (800d834 <__ieee754_atan2f+0xfc>)
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7f3 f999 	bl	8000b20 <__addsf3>
 800d7ee:	4912      	ldr	r1, [pc, #72]	@ (800d838 <__ieee754_atan2f+0x100>)
 800d7f0:	e00c      	b.n	800d80c <__ieee754_atan2f+0xd4>
 800d7f2:	4b12      	ldr	r3, [pc, #72]	@ (800d83c <__ieee754_atan2f+0x104>)
 800d7f4:	e7f1      	b.n	800d7da <__ieee754_atan2f+0xa2>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	e7ef      	b.n	800d7da <__ieee754_atan2f+0xa2>
 800d7fa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800d7fe:	e7be      	b.n	800d77e <__ieee754_atan2f+0x46>
 800d800:	490c      	ldr	r1, [pc, #48]	@ (800d834 <__ieee754_atan2f+0xfc>)
 800d802:	4618      	mov	r0, r3
 800d804:	f7f3 f98c 	bl	8000b20 <__addsf3>
 800d808:	4601      	mov	r1, r0
 800d80a:	480b      	ldr	r0, [pc, #44]	@ (800d838 <__ieee754_atan2f+0x100>)
 800d80c:	f7f3 f986 	bl	8000b1c <__aeabi_fsub>
 800d810:	e7a2      	b.n	800d758 <__ieee754_atan2f+0x20>
 800d812:	4b09      	ldr	r3, [pc, #36]	@ (800d838 <__ieee754_atan2f+0x100>)
 800d814:	e7b3      	b.n	800d77e <__ieee754_atan2f+0x46>
 800d816:	4b0a      	ldr	r3, [pc, #40]	@ (800d840 <__ieee754_atan2f+0x108>)
 800d818:	e7b1      	b.n	800d77e <__ieee754_atan2f+0x46>
 800d81a:	4b0a      	ldr	r3, [pc, #40]	@ (800d844 <__ieee754_atan2f+0x10c>)
 800d81c:	e7af      	b.n	800d77e <__ieee754_atan2f+0x46>
 800d81e:	2300      	movs	r3, #0
 800d820:	e7ad      	b.n	800d77e <__ieee754_atan2f+0x46>
 800d822:	4b06      	ldr	r3, [pc, #24]	@ (800d83c <__ieee754_atan2f+0x104>)
 800d824:	e7ab      	b.n	800d77e <__ieee754_atan2f+0x46>
 800d826:	bf00      	nop
 800d828:	bfc90fdb 	.word	0xbfc90fdb
 800d82c:	0800e70c 	.word	0x0800e70c
 800d830:	0800e700 	.word	0x0800e700
 800d834:	33bbbd2e 	.word	0x33bbbd2e
 800d838:	40490fdb 	.word	0x40490fdb
 800d83c:	3fc90fdb 	.word	0x3fc90fdb
 800d840:	c0490fdb 	.word	0xc0490fdb
 800d844:	3f490fdb 	.word	0x3f490fdb

0800d848 <atanf>:
 800d848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d84c:	f020 4500 	bic.w	r5, r0, #2147483648	@ 0x80000000
 800d850:	f1b5 4fa1 	cmp.w	r5, #1350565888	@ 0x50800000
 800d854:	4604      	mov	r4, r0
 800d856:	4680      	mov	r8, r0
 800d858:	d30e      	bcc.n	800d878 <atanf+0x30>
 800d85a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800d85e:	d904      	bls.n	800d86a <atanf+0x22>
 800d860:	4601      	mov	r1, r0
 800d862:	f7f3 f95d 	bl	8000b20 <__addsf3>
 800d866:	4604      	mov	r4, r0
 800d868:	e003      	b.n	800d872 <atanf+0x2a>
 800d86a:	2800      	cmp	r0, #0
 800d86c:	f340 80ce 	ble.w	800da0c <atanf+0x1c4>
 800d870:	4c67      	ldr	r4, [pc, #412]	@ (800da10 <atanf+0x1c8>)
 800d872:	4620      	mov	r0, r4
 800d874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d878:	4b66      	ldr	r3, [pc, #408]	@ (800da14 <atanf+0x1cc>)
 800d87a:	429d      	cmp	r5, r3
 800d87c:	d80e      	bhi.n	800d89c <atanf+0x54>
 800d87e:	f1b5 5f44 	cmp.w	r5, #822083584	@ 0x31000000
 800d882:	d208      	bcs.n	800d896 <atanf+0x4e>
 800d884:	4964      	ldr	r1, [pc, #400]	@ (800da18 <atanf+0x1d0>)
 800d886:	f7f3 f94b 	bl	8000b20 <__addsf3>
 800d88a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d88e:	f7f3 fc0b 	bl	80010a8 <__aeabi_fcmpgt>
 800d892:	2800      	cmp	r0, #0
 800d894:	d1ed      	bne.n	800d872 <atanf+0x2a>
 800d896:	f04f 36ff 	mov.w	r6, #4294967295
 800d89a:	e01c      	b.n	800d8d6 <atanf+0x8e>
 800d89c:	f000 f8e0 	bl	800da60 <fabsf>
 800d8a0:	4b5e      	ldr	r3, [pc, #376]	@ (800da1c <atanf+0x1d4>)
 800d8a2:	4604      	mov	r4, r0
 800d8a4:	429d      	cmp	r5, r3
 800d8a6:	d87c      	bhi.n	800d9a2 <atanf+0x15a>
 800d8a8:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800d8ac:	429d      	cmp	r5, r3
 800d8ae:	d867      	bhi.n	800d980 <atanf+0x138>
 800d8b0:	4601      	mov	r1, r0
 800d8b2:	f7f3 f935 	bl	8000b20 <__addsf3>
 800d8b6:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d8ba:	f7f3 f92f 	bl	8000b1c <__aeabi_fsub>
 800d8be:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f7f3 f92b 	bl	8000b20 <__addsf3>
 800d8ca:	4601      	mov	r1, r0
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	f7f3 fae3 	bl	8000e98 <__aeabi_fdiv>
 800d8d2:	2600      	movs	r6, #0
 800d8d4:	4604      	mov	r4, r0
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	4620      	mov	r0, r4
 800d8da:	f7f3 fa29 	bl	8000d30 <__aeabi_fmul>
 800d8de:	4601      	mov	r1, r0
 800d8e0:	4607      	mov	r7, r0
 800d8e2:	f7f3 fa25 	bl	8000d30 <__aeabi_fmul>
 800d8e6:	4605      	mov	r5, r0
 800d8e8:	494d      	ldr	r1, [pc, #308]	@ (800da20 <atanf+0x1d8>)
 800d8ea:	f7f3 fa21 	bl	8000d30 <__aeabi_fmul>
 800d8ee:	494d      	ldr	r1, [pc, #308]	@ (800da24 <atanf+0x1dc>)
 800d8f0:	f7f3 f916 	bl	8000b20 <__addsf3>
 800d8f4:	4629      	mov	r1, r5
 800d8f6:	f7f3 fa1b 	bl	8000d30 <__aeabi_fmul>
 800d8fa:	494b      	ldr	r1, [pc, #300]	@ (800da28 <atanf+0x1e0>)
 800d8fc:	f7f3 f910 	bl	8000b20 <__addsf3>
 800d900:	4629      	mov	r1, r5
 800d902:	f7f3 fa15 	bl	8000d30 <__aeabi_fmul>
 800d906:	4949      	ldr	r1, [pc, #292]	@ (800da2c <atanf+0x1e4>)
 800d908:	f7f3 f90a 	bl	8000b20 <__addsf3>
 800d90c:	4629      	mov	r1, r5
 800d90e:	f7f3 fa0f 	bl	8000d30 <__aeabi_fmul>
 800d912:	4947      	ldr	r1, [pc, #284]	@ (800da30 <atanf+0x1e8>)
 800d914:	f7f3 f904 	bl	8000b20 <__addsf3>
 800d918:	4629      	mov	r1, r5
 800d91a:	f7f3 fa09 	bl	8000d30 <__aeabi_fmul>
 800d91e:	4945      	ldr	r1, [pc, #276]	@ (800da34 <atanf+0x1ec>)
 800d920:	f7f3 f8fe 	bl	8000b20 <__addsf3>
 800d924:	4639      	mov	r1, r7
 800d926:	f7f3 fa03 	bl	8000d30 <__aeabi_fmul>
 800d92a:	4943      	ldr	r1, [pc, #268]	@ (800da38 <atanf+0x1f0>)
 800d92c:	4607      	mov	r7, r0
 800d92e:	4628      	mov	r0, r5
 800d930:	f7f3 f9fe 	bl	8000d30 <__aeabi_fmul>
 800d934:	4941      	ldr	r1, [pc, #260]	@ (800da3c <atanf+0x1f4>)
 800d936:	f7f3 f8f1 	bl	8000b1c <__aeabi_fsub>
 800d93a:	4629      	mov	r1, r5
 800d93c:	f7f3 f9f8 	bl	8000d30 <__aeabi_fmul>
 800d940:	493f      	ldr	r1, [pc, #252]	@ (800da40 <atanf+0x1f8>)
 800d942:	f7f3 f8eb 	bl	8000b1c <__aeabi_fsub>
 800d946:	4629      	mov	r1, r5
 800d948:	f7f3 f9f2 	bl	8000d30 <__aeabi_fmul>
 800d94c:	493d      	ldr	r1, [pc, #244]	@ (800da44 <atanf+0x1fc>)
 800d94e:	f7f3 f8e5 	bl	8000b1c <__aeabi_fsub>
 800d952:	4629      	mov	r1, r5
 800d954:	f7f3 f9ec 	bl	8000d30 <__aeabi_fmul>
 800d958:	493b      	ldr	r1, [pc, #236]	@ (800da48 <atanf+0x200>)
 800d95a:	f7f3 f8df 	bl	8000b1c <__aeabi_fsub>
 800d95e:	4629      	mov	r1, r5
 800d960:	f7f3 f9e6 	bl	8000d30 <__aeabi_fmul>
 800d964:	4601      	mov	r1, r0
 800d966:	4638      	mov	r0, r7
 800d968:	f7f3 f8da 	bl	8000b20 <__addsf3>
 800d96c:	4621      	mov	r1, r4
 800d96e:	f7f3 f9df 	bl	8000d30 <__aeabi_fmul>
 800d972:	1c73      	adds	r3, r6, #1
 800d974:	4601      	mov	r1, r0
 800d976:	d133      	bne.n	800d9e0 <atanf+0x198>
 800d978:	4620      	mov	r0, r4
 800d97a:	f7f3 f8cf 	bl	8000b1c <__aeabi_fsub>
 800d97e:	e772      	b.n	800d866 <atanf+0x1e>
 800d980:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d984:	f7f3 f8ca 	bl	8000b1c <__aeabi_fsub>
 800d988:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d98c:	4605      	mov	r5, r0
 800d98e:	4620      	mov	r0, r4
 800d990:	f7f3 f8c6 	bl	8000b20 <__addsf3>
 800d994:	4601      	mov	r1, r0
 800d996:	4628      	mov	r0, r5
 800d998:	f7f3 fa7e 	bl	8000e98 <__aeabi_fdiv>
 800d99c:	2601      	movs	r6, #1
 800d99e:	4604      	mov	r4, r0
 800d9a0:	e799      	b.n	800d8d6 <atanf+0x8e>
 800d9a2:	4b2a      	ldr	r3, [pc, #168]	@ (800da4c <atanf+0x204>)
 800d9a4:	429d      	cmp	r5, r3
 800d9a6:	d814      	bhi.n	800d9d2 <atanf+0x18a>
 800d9a8:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800d9ac:	f7f3 f8b6 	bl	8000b1c <__aeabi_fsub>
 800d9b0:	f04f 517f 	mov.w	r1, #1069547520	@ 0x3fc00000
 800d9b4:	4605      	mov	r5, r0
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f7f3 f9ba 	bl	8000d30 <__aeabi_fmul>
 800d9bc:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800d9c0:	f7f3 f8ae 	bl	8000b20 <__addsf3>
 800d9c4:	4601      	mov	r1, r0
 800d9c6:	4628      	mov	r0, r5
 800d9c8:	f7f3 fa66 	bl	8000e98 <__aeabi_fdiv>
 800d9cc:	2602      	movs	r6, #2
 800d9ce:	4604      	mov	r4, r0
 800d9d0:	e781      	b.n	800d8d6 <atanf+0x8e>
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	481e      	ldr	r0, [pc, #120]	@ (800da50 <atanf+0x208>)
 800d9d6:	f7f3 fa5f 	bl	8000e98 <__aeabi_fdiv>
 800d9da:	2603      	movs	r6, #3
 800d9dc:	4604      	mov	r4, r0
 800d9de:	e77a      	b.n	800d8d6 <atanf+0x8e>
 800d9e0:	4b1c      	ldr	r3, [pc, #112]	@ (800da54 <atanf+0x20c>)
 800d9e2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800d9e6:	f7f3 f899 	bl	8000b1c <__aeabi_fsub>
 800d9ea:	4621      	mov	r1, r4
 800d9ec:	f7f3 f896 	bl	8000b1c <__aeabi_fsub>
 800d9f0:	4b19      	ldr	r3, [pc, #100]	@ (800da58 <atanf+0x210>)
 800d9f2:	4601      	mov	r1, r0
 800d9f4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800d9f8:	f7f3 f890 	bl	8000b1c <__aeabi_fsub>
 800d9fc:	f1b8 0f00 	cmp.w	r8, #0
 800da00:	4604      	mov	r4, r0
 800da02:	f6bf af36 	bge.w	800d872 <atanf+0x2a>
 800da06:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800da0a:	e732      	b.n	800d872 <atanf+0x2a>
 800da0c:	4c13      	ldr	r4, [pc, #76]	@ (800da5c <atanf+0x214>)
 800da0e:	e730      	b.n	800d872 <atanf+0x2a>
 800da10:	3fc90fdb 	.word	0x3fc90fdb
 800da14:	3edfffff 	.word	0x3edfffff
 800da18:	7149f2ca 	.word	0x7149f2ca
 800da1c:	3f97ffff 	.word	0x3f97ffff
 800da20:	3c8569d7 	.word	0x3c8569d7
 800da24:	3d4bda59 	.word	0x3d4bda59
 800da28:	3d886b35 	.word	0x3d886b35
 800da2c:	3dba2e6e 	.word	0x3dba2e6e
 800da30:	3e124925 	.word	0x3e124925
 800da34:	3eaaaaab 	.word	0x3eaaaaab
 800da38:	bd15a221 	.word	0xbd15a221
 800da3c:	3d6ef16b 	.word	0x3d6ef16b
 800da40:	3d9d8795 	.word	0x3d9d8795
 800da44:	3de38e38 	.word	0x3de38e38
 800da48:	3e4ccccd 	.word	0x3e4ccccd
 800da4c:	401bffff 	.word	0x401bffff
 800da50:	bf800000 	.word	0xbf800000
 800da54:	0800e718 	.word	0x0800e718
 800da58:	0800e728 	.word	0x0800e728
 800da5c:	bfc90fdb 	.word	0xbfc90fdb

0800da60 <fabsf>:
 800da60:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800da64:	4770      	bx	lr
	...

0800da68 <_init>:
 800da68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da6a:	bf00      	nop
 800da6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6e:	bc08      	pop	{r3}
 800da70:	469e      	mov	lr, r3
 800da72:	4770      	bx	lr

0800da74 <_fini>:
 800da74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da76:	bf00      	nop
 800da78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da7a:	bc08      	pop	{r3}
 800da7c:	469e      	mov	lr, r3
 800da7e:	4770      	bx	lr
